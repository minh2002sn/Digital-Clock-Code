
Digital_Clock_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08004c88  08004c88  00014c88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e48  08004e48  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08004e48  08004e48  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e48  08004e48  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e4c  08004e4c  00014e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08004e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200000a8  08004ef4  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08004ef4  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da0a  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052d5  00000000  00000000  0003dad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000e2f1  00000000  00000000  00042dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  000510a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e60  00000000  00000000  00052110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c5e5  00000000  00000000  00053f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022359  00000000  00000000  00070555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093b2b  00000000  00000000  000928ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001263d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000350c  00000000  00000000  0012642c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c70 	.word	0x08004c70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08004c70 	.word	0x08004c70

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_d2f>:
 80004d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004dc:	bf24      	itt	cs
 80004de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004e6:	d90d      	bls.n	8000504 <__aeabi_d2f+0x30>
 80004e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004fc:	bf08      	it	eq
 80004fe:	f020 0001 	biceq.w	r0, r0, #1
 8000502:	4770      	bx	lr
 8000504:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000508:	d121      	bne.n	800054e <__aeabi_d2f+0x7a>
 800050a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800050e:	bfbc      	itt	lt
 8000510:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000514:	4770      	bxlt	lr
 8000516:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800051a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800051e:	f1c2 0218 	rsb	r2, r2, #24
 8000522:	f1c2 0c20 	rsb	ip, r2, #32
 8000526:	fa10 f30c 	lsls.w	r3, r0, ip
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	bf18      	it	ne
 8000530:	f040 0001 	orrne.w	r0, r0, #1
 8000534:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000538:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800053c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000540:	ea40 000c 	orr.w	r0, r0, ip
 8000544:	fa23 f302 	lsr.w	r3, r3, r2
 8000548:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800054c:	e7cc      	b.n	80004e8 <__aeabi_d2f+0x14>
 800054e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000552:	d107      	bne.n	8000564 <__aeabi_d2f+0x90>
 8000554:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000558:	bf1e      	ittt	ne
 800055a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800055e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000562:	4770      	bxne	lr
 8000564:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000568:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800056c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__aeabi_f2uiz>:
 8000574:	0042      	lsls	r2, r0, #1
 8000576:	d20e      	bcs.n	8000596 <__aeabi_f2uiz+0x22>
 8000578:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800057c:	d30b      	bcc.n	8000596 <__aeabi_f2uiz+0x22>
 800057e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000582:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000586:	d409      	bmi.n	800059c <__aeabi_f2uiz+0x28>
 8000588:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800058c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000590:	fa23 f002 	lsr.w	r0, r3, r2
 8000594:	4770      	bx	lr
 8000596:	f04f 0000 	mov.w	r0, #0
 800059a:	4770      	bx	lr
 800059c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005a0:	d101      	bne.n	80005a6 <__aeabi_f2uiz+0x32>
 80005a2:	0242      	lsls	r2, r0, #9
 80005a4:	d102      	bne.n	80005ac <__aeabi_f2uiz+0x38>
 80005a6:	f04f 30ff 	mov.w	r0, #4294967295
 80005aa:	4770      	bx	lr
 80005ac:	f04f 0000 	mov.w	r0, #0
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__buzzer_off>:
static void __buzzer_on(){
	HAL_GPIO_WritePin(ALARM_Data.buzzer_port, ALARM_Data.buzzer_pin, 1);
}

static void __buzzer_off(){
	HAL_GPIO_WritePin(ALARM_Data.buzzer_port, ALARM_Data.buzzer_pin, 0);
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <__buzzer_off+0xc>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	8a19      	ldrh	r1, [r3, #16]
 80005ba:	68d8      	ldr	r0, [r3, #12]
 80005bc:	f001 bf00 	b.w	80023c0 <HAL_GPIO_WritePin>
 80005c0:	200000c4 	.word	0x200000c4

080005c4 <ALARM_Init>:
		__buzzer_off();
	}
}

void ALARM_Init(GPIO_TypeDef *p_buzzer_port, uint16_t p_buzzer_pin){
	ALARM_Data.state = FINDING_NEXT_TIMELINE;
 80005c4:	2200      	movs	r2, #0
 80005c6:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <ALARM_Init+0x10>)
 80005c8:	701a      	strb	r2, [r3, #0]
	ALARM_Data.buzzer_port = p_buzzer_port;
 80005ca:	60d8      	str	r0, [r3, #12]
	ALARM_Data.buzzer_pin = p_buzzer_pin;
 80005cc:	8219      	strh	r1, [r3, #16]
	__buzzer_off();
 80005ce:	f7ff bff1 	b.w	80005b4 <__buzzer_off>
 80005d2:	bf00      	nop
 80005d4:	200000c4 	.word	0x200000c4

080005d8 <ALARM_Handle>:
}

void ALARM_Handle(){
 80005d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(ALARM_Data.state){
 80005da:	4c43      	ldr	r4, [pc, #268]	; (80006e8 <ALARM_Handle+0x110>)
 80005dc:	7823      	ldrb	r3, [r4, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d02a      	beq.n	8000638 <ALARM_Handle+0x60>
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d049      	beq.n	800067a <ALARM_Handle+0xa2>
 80005e6:	bb33      	cbnz	r3, 8000636 <ALARM_Handle+0x5e>
	if(TIMELINE_Data.len != 0){
 80005e8:	4a40      	ldr	r2, [pc, #256]	; (80006ec <ALARM_Handle+0x114>)
 80005ea:	f892 603c 	ldrb.w	r6, [r2, #60]	; 0x3c
 80005ee:	b316      	cbz	r6, 8000636 <ALARM_Handle+0x5e>
			uint8_t t_system_time = REALTIME_Data.system_hour * 60 + REALTIME_Data.system_minute;
 80005f0:	483f      	ldr	r0, [pc, #252]	; (80006f0 <ALARM_Handle+0x118>)
			if(t_system_time < t_alarm_time && ((0x01 << (REALTIME_Data.system_day - 1)) & TIMELINE_Data.flash_data[i].day) != 0){
 80005f2:	7887      	ldrb	r7, [r0, #2]
			uint8_t t_system_time = REALTIME_Data.system_hour * 60 + REALTIME_Data.system_minute;
 80005f4:	7801      	ldrb	r1, [r0, #0]
 80005f6:	7845      	ldrb	r5, [r0, #1]
			if(t_system_time < t_alarm_time && ((0x01 << (REALTIME_Data.system_day - 1)) & TIMELINE_Data.flash_data[i].day) != 0){
 80005f8:	1e78      	subs	r0, r7, #1
 80005fa:	2701      	movs	r7, #1
			uint8_t t_system_time = REALTIME_Data.system_hour * 60 + REALTIME_Data.system_minute;
 80005fc:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8000600:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8000604:	b2c9      	uxtb	r1, r1
 8000606:	4087      	lsls	r7, r0
			if(TIMELINE_Data.flash_data[i].timeline_state == TIMELINE_OFF) continue;
 8000608:	79d0      	ldrb	r0, [r2, #7]
 800060a:	b178      	cbz	r0, 800062c <ALARM_Handle+0x54>
			uint8_t t_alarm_time = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 800060c:	7910      	ldrb	r0, [r2, #4]
 800060e:	ebc0 1500 	rsb	r5, r0, r0, lsl #4
 8000612:	7950      	ldrb	r0, [r2, #5]
 8000614:	eb00 0085 	add.w	r0, r0, r5, lsl #2
			if(t_system_time < t_alarm_time && ((0x01 << (REALTIME_Data.system_day - 1)) & TIMELINE_Data.flash_data[i].day) != 0){
 8000618:	b2c0      	uxtb	r0, r0
 800061a:	4281      	cmp	r1, r0
 800061c:	d206      	bcs.n	800062c <ALARM_Handle+0x54>
 800061e:	7990      	ldrb	r0, [r2, #6]
 8000620:	4238      	tst	r0, r7
 8000622:	d003      	beq.n	800062c <ALARM_Handle+0x54>
				ALARM_Data.next_timeline_index = i;
 8000624:	7063      	strb	r3, [r4, #1]
				ALARM_Data.state = WAITING_FOR_TIMELINE;
 8000626:	2301      	movs	r3, #1
		ALARM_Data.state = FINDING_NEXT_TIMELINE;
 8000628:	7023      	strb	r3, [r4, #0]
		return;
 800062a:	e004      	b.n	8000636 <ALARM_Handle+0x5e>
		for(int i = 0; i < TIMELINE_Data.len; i++){
 800062c:	3301      	adds	r3, #1
 800062e:	42b3      	cmp	r3, r6
 8000630:	f102 0204 	add.w	r2, r2, #4
 8000634:	dbe8      	blt.n	8000608 <ALARM_Handle+0x30>
			__alarm_running();
			break;
		default:
			break;
	}
}
 8000636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t t_alarm_time = TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].hour * 60 + TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].minute;
 8000638:	7863      	ldrb	r3, [r4, #1]
	if(TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].timeline_state == TIMELINE_OFF){
 800063a:	492c      	ldr	r1, [pc, #176]	; (80006ec <ALARM_Handle+0x114>)
 800063c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8000640:	79cb      	ldrb	r3, [r1, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f0      	beq.n	8000628 <ALARM_Handle+0x50>
	uint8_t t_system_time = REALTIME_Data.system_hour * 60 + REALTIME_Data.system_minute;
 8000646:	482a      	ldr	r0, [pc, #168]	; (80006f0 <ALARM_Handle+0x118>)
 8000648:	7802      	ldrb	r2, [r0, #0]
 800064a:	ebc2 1302 	rsb	r3, r2, r2, lsl #4
 800064e:	7842      	ldrb	r2, [r0, #1]
 8000650:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	uint8_t t_alarm_time = TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].hour * 60 + TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].minute;
 8000654:	790b      	ldrb	r3, [r1, #4]
	if(t_system_time == t_alarm_time){
 8000656:	b2d2      	uxtb	r2, r2
	uint8_t t_alarm_time = TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].hour * 60 + TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].minute;
 8000658:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
 800065c:	794b      	ldrb	r3, [r1, #5]
 800065e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	if(t_system_time == t_alarm_time){
 8000662:	b2db      	uxtb	r3, r3
 8000664:	429a      	cmp	r2, r3
 8000666:	d1e6      	bne.n	8000636 <ALARM_Handle+0x5e>
		ALARM_Data.state = ALARM_RUNNING;
 8000668:	2302      	movs	r3, #2
 800066a:	7023      	strb	r3, [r4, #0]
		ALARM_Data.buzzer_running_timer = HAL_GetTick();
 800066c:	f001 fb04 	bl	8001c78 <HAL_GetTick>
 8000670:	6060      	str	r0, [r4, #4]
				ALARM_Data.buzzer_cycle_timer = HAL_GetTick();
 8000672:	f001 fb01 	bl	8001c78 <HAL_GetTick>
 8000676:	60a0      	str	r0, [r4, #8]
 8000678:	e7dd      	b.n	8000636 <ALARM_Handle+0x5e>
	if(HAL_GetTick() - ALARM_Data.buzzer_running_timer < BUZZER_RUNNING_TIME){
 800067a:	f001 fafd 	bl	8001c78 <HAL_GetTick>
 800067e:	6863      	ldr	r3, [r4, #4]
 8000680:	1ac0      	subs	r0, r0, r3
 8000682:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000686:	4298      	cmp	r0, r3
 8000688:	d828      	bhi.n	80006dc <ALARM_Handle+0x104>
		if(buzzer_counter <= 2){
 800068a:	4d1a      	ldr	r5, [pc, #104]	; (80006f4 <ALARM_Handle+0x11c>)
 800068c:	782b      	ldrb	r3, [r5, #0]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d812      	bhi.n	80006b8 <ALARM_Handle+0xe0>
			if(buzzer_counter % 2 == 0)
 8000692:	07db      	lsls	r3, r3, #31
 8000694:	d41f      	bmi.n	80006d6 <ALARM_Handle+0xfe>
	HAL_GPIO_WritePin(ALARM_Data.buzzer_port, ALARM_Data.buzzer_pin, 1);
 8000696:	2201      	movs	r2, #1
 8000698:	8a21      	ldrh	r1, [r4, #16]
 800069a:	68e0      	ldr	r0, [r4, #12]
 800069c:	f001 fe90 	bl	80023c0 <HAL_GPIO_WritePin>
			if(HAL_GetTick() - ALARM_Data.buzzer_cycle_timer >= BUZZER_SHORT_CYCLE){
 80006a0:	f001 faea 	bl	8001c78 <HAL_GetTick>
 80006a4:	68a3      	ldr	r3, [r4, #8]
 80006a6:	1ac0      	subs	r0, r0, r3
 80006a8:	2863      	cmp	r0, #99	; 0x63
 80006aa:	d905      	bls.n	80006b8 <ALARM_Handle+0xe0>
				buzzer_counter++;
 80006ac:	782b      	ldrb	r3, [r5, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	702b      	strb	r3, [r5, #0]
				ALARM_Data.buzzer_cycle_timer = HAL_GetTick();
 80006b2:	f001 fae1 	bl	8001c78 <HAL_GetTick>
 80006b6:	60a0      	str	r0, [r4, #8]
		if(buzzer_counter == 3){
 80006b8:	782b      	ldrb	r3, [r5, #0]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d1bb      	bne.n	8000636 <ALARM_Handle+0x5e>
			__buzzer_off();
 80006be:	f7ff ff79 	bl	80005b4 <__buzzer_off>
			if(HAL_GetTick() - ALARM_Data.buzzer_cycle_timer >= BUZZER_LONG_CYCLE){
 80006c2:	f001 fad9 	bl	8001c78 <HAL_GetTick>
 80006c6:	68a3      	ldr	r3, [r4, #8]
 80006c8:	1ac0      	subs	r0, r0, r3
 80006ca:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80006ce:	d3b2      	bcc.n	8000636 <ALARM_Handle+0x5e>
				buzzer_counter = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	702b      	strb	r3, [r5, #0]
 80006d4:	e7cd      	b.n	8000672 <ALARM_Handle+0x9a>
				__buzzer_off();
 80006d6:	f7ff ff6d 	bl	80005b4 <__buzzer_off>
 80006da:	e7e1      	b.n	80006a0 <ALARM_Handle+0xc8>
		ALARM_Data.state = FINDING_NEXT_TIMELINE;
 80006dc:	2300      	movs	r3, #0
 80006de:	7023      	strb	r3, [r4, #0]
}
 80006e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		__buzzer_off();
 80006e4:	f7ff bf66 	b.w	80005b4 <__buzzer_off>
 80006e8:	200000c4 	.word	0x200000c4
 80006ec:	200000fc 	.word	0x200000fc
 80006f0:	2000013c 	.word	0x2000013c
 80006f4:	200000d8 	.word	0x200000d8

080006f8 <ALARM_Stop_Buzzer>:

void ALARM_Stop_Buzzer(){
	if(ALARM_Data.state == ALARM_RUNNING){
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <ALARM_Stop_Buzzer+0x10>)
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	2a02      	cmp	r2, #2
		ALARM_Data.state = FINDING_NEXT_TIMELINE;
 80006fe:	bf04      	itt	eq
 8000700:	2200      	moveq	r2, #0
 8000702:	701a      	strbeq	r2, [r3, #0]
	}
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200000c4 	.word	0x200000c4

0800070c <ALARM_Is_Buzzer_Running>:

uint8_t ALARM_Is_Buzzer_Running(){
	return (ALARM_Data.state == ALARM_RUNNING) ? 1 : 0;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <ALARM_Is_Buzzer_Running+0xc>)
 800070e:	7818      	ldrb	r0, [r3, #0]
}
 8000710:	1e83      	subs	r3, r0, #2
 8000712:	4258      	negs	r0, r3
 8000714:	4158      	adcs	r0, r3
 8000716:	4770      	bx	lr
 8000718:	200000c4 	.word	0x200000c4

0800071c <BTN_Short_Pressing_Callback>:

BUTTON_HandleTypedef h_encoder_button;
ENCODER_HandleTypeDef h_encoder;
extern TIM_HandleTypeDef htim2;

void BTN_Short_Pressing_Callback(BUTTON_HandleTypedef *p_ButtonX){
 800071c:	b508      	push	{r3, lr}
	if(p_ButtonX == &h_encoder_button){
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <BTN_Short_Pressing_Callback+0x5c>)
 8000720:	4283      	cmp	r3, r0
 8000722:	d128      	bne.n	8000776 <BTN_Short_Pressing_Callback+0x5a>
		if(ALARM_Is_Buzzer_Running()){
 8000724:	f7ff fff2 	bl	800070c <ALARM_Is_Buzzer_Running>
 8000728:	b118      	cbz	r0, 8000732 <BTN_Short_Pressing_Callback+0x16>
				break;
			default:
				break;
		}
	}
}
 800072a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			ALARM_Stop_Buzzer();
 800072e:	f7ff bfe3 	b.w	80006f8 <ALARM_Stop_Buzzer>
		switch(MENU_Data.menu_type){
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <BTN_Short_Pressing_Callback+0x60>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b03      	cmp	r3, #3
 8000738:	d81d      	bhi.n	8000776 <BTN_Short_Pressing_Callback+0x5a>
 800073a:	e8df f003 	tbb	[pc, r3]
 800073e:	0602      	.short	0x0602
 8000740:	170b      	.short	0x170b
}
 8000742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				TL_MENU_Set_State();
 8000746:	f000 bd4b 	b.w	80011e0 <TL_MENU_Set_State>
				SR_MENU_Change_Setting_State(INCREASE);
 800074a:	2001      	movs	r0, #1
}
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				SR_MENU_Change_Setting_State(INCREASE);
 8000750:	f000 bb74 	b.w	8000e3c <SR_MENU_Change_Setting_State>
				if(TL_MENU_Data.current_pointer == 0){
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <BTN_Short_Pressing_Callback+0x64>)
 8000756:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800075a:	b91b      	cbnz	r3, 8000764 <BTN_Short_Pressing_Callback+0x48>
}
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					ST_MENU_Set_State();
 8000760:	f000 bc56 	b.w	8001010 <ST_MENU_Set_State>
}
 8000764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					TL_MENU_Change_Working_State();
 8000768:	f000 bd52 	b.w	8001210 <TL_MENU_Change_Working_State>
				ST_MENU_Change_Setting_State(INCREASE);
 800076c:	2001      	movs	r0, #1
}
 800076e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				ST_MENU_Change_Setting_State(INCREASE);
 8000772:	f000 bc61 	b.w	8001038 <ST_MENU_Change_Setting_State>
}
 8000776:	bd08      	pop	{r3, pc}
 8000778:	200000e4 	.word	0x200000e4
 800077c:	20000150 	.word	0x20000150
 8000780:	20000171 	.word	0x20000171

08000784 <BTN_Long_Pressing_Callback>:

void BTN_Long_Pressing_Callback(BUTTON_HandleTypedef *p_ButtonX){
 8000784:	b508      	push	{r3, lr}
	if(p_ButtonX == &h_encoder_button){
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <BTN_Long_Pressing_Callback+0x5c>)
 8000788:	4283      	cmp	r3, r0
 800078a:	d127      	bne.n	80007dc <BTN_Long_Pressing_Callback+0x58>
		if(ALARM_Is_Buzzer_Running()){
 800078c:	f7ff ffbe 	bl	800070c <ALARM_Is_Buzzer_Running>
 8000790:	b118      	cbz	r0, 800079a <BTN_Long_Pressing_Callback+0x16>
				break;
			default:
				break;
		}
	}
}
 8000792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			ALARM_Stop_Buzzer();
 8000796:	f7ff bfaf 	b.w	80006f8 <ALARM_Stop_Buzzer>
		switch(MENU_Data.menu_type){
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <BTN_Long_Pressing_Callback+0x60>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d81c      	bhi.n	80007dc <BTN_Long_Pressing_Callback+0x58>
 80007a2:	e8df f003 	tbb	[pc, r3]
 80007a6:	0602      	.short	0x0602
 80007a8:	160b      	.short	0x160b
}
 80007aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				SR_MENU_Set_State();
 80007ae:	f000 bb31 	b.w	8000e14 <SR_MENU_Set_State>
				SR_MENU_Change_Setting_State(DECREASE);
 80007b2:	2000      	movs	r0, #0
}
 80007b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				SR_MENU_Change_Setting_State(DECREASE);
 80007b8:	f000 bb40 	b.w	8000e3c <SR_MENU_Change_Setting_State>
				if(TL_MENU_Data.woking_state == NORMAL_STATE){
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <BTN_Long_Pressing_Callback+0x64>)
 80007be:	78db      	ldrb	r3, [r3, #3]
 80007c0:	b91b      	cbnz	r3, 80007ca <BTN_Long_Pressing_Callback+0x46>
}
 80007c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					MAIN_MENU_Set_State();
 80007c6:	f000 bac1 	b.w	8000d4c <MAIN_MENU_Set_State>
}
 80007ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					TL_MENU_Change_Working_State();
 80007ce:	f000 bd1f 	b.w	8001210 <TL_MENU_Change_Working_State>
				ST_MENU_Change_Setting_State(DECREASE);
 80007d2:	2000      	movs	r0, #0
}
 80007d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				ST_MENU_Change_Setting_State(DECREASE);
 80007d8:	f000 bc2e 	b.w	8001038 <ST_MENU_Change_Setting_State>
}
 80007dc:	bd08      	pop	{r3, pc}
 80007de:	bf00      	nop
 80007e0:	200000e4 	.word	0x200000e4
 80007e4:	20000150 	.word	0x20000150
 80007e8:	20000171 	.word	0x20000171

080007ec <ENCODER_Forward_Callback>:

void ENCODER_Forward_Callback(ENCODER_HandleTypeDef *p_encoder){
	if(p_encoder == &h_encoder){
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <ENCODER_Forward_Callback+0x34>)
 80007ee:	4283      	cmp	r3, r0
 80007f0:	d114      	bne.n	800081c <ENCODER_Forward_Callback+0x30>
		switch(MENU_Data.menu_type){
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <ENCODER_Forward_Callback+0x38>)
 80007f4:	7818      	ldrb	r0, [r3, #0]
 80007f6:	2802      	cmp	r0, #2
 80007f8:	d005      	beq.n	8000806 <ENCODER_Forward_Callback+0x1a>
 80007fa:	2803      	cmp	r0, #3
 80007fc:	d00b      	beq.n	8000816 <ENCODER_Forward_Callback+0x2a>
 80007fe:	2801      	cmp	r0, #1
 8000800:	d10c      	bne.n	800081c <ENCODER_Forward_Callback+0x30>
			case MAIN_MENU:

				break;
			case SETTING_REALTIME_MENU:
				SR_MENU_Set_Value(INCREASE);
 8000802:	f000 bb3d 	b.w	8000e80 <SR_MENU_Set_Value>
				break;
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.woking_state == NORMAL_STATE)
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <ENCODER_Forward_Callback+0x3c>)
					TL_MENU_Change_Pointer(INCREASE);
 8000808:	2001      	movs	r0, #1
				if(TL_MENU_Data.woking_state == NORMAL_STATE)
 800080a:	78db      	ldrb	r3, [r3, #3]
 800080c:	b90b      	cbnz	r3, 8000812 <ENCODER_Forward_Callback+0x26>
					TL_MENU_Change_Pointer(INCREASE);
 800080e:	f000 bd3b 	b.w	8001288 <TL_MENU_Change_Pointer>
				else
					TL_MENU_Config_Timeline(INCREASE);
 8000812:	f000 bd61 	b.w	80012d8 <TL_MENU_Config_Timeline>
				break;
			case SETTING_TIMELINE_MENU:
				ST_MENU_Set_Value(INCREASE);
 8000816:	2001      	movs	r0, #1
 8000818:	f000 bc34 	b.w	8001084 <ST_MENU_Set_Value>
				break;
			default:
				break;
		}
	}
}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	200000dc 	.word	0x200000dc
 8000824:	20000150 	.word	0x20000150
 8000828:	20000171 	.word	0x20000171

0800082c <ENCODER_Backward_Callback>:

void ENCODER_Backward_Callback(ENCODER_HandleTypeDef *p_encoder){
	if(p_encoder == &h_encoder){
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <ENCODER_Backward_Callback+0x34>)
 800082e:	4283      	cmp	r3, r0
 8000830:	d115      	bne.n	800085e <ENCODER_Backward_Callback+0x32>
		switch(MENU_Data.menu_type){
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <ENCODER_Backward_Callback+0x38>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d006      	beq.n	8000848 <ENCODER_Backward_Callback+0x1c>
 800083a:	2b03      	cmp	r3, #3
 800083c:	d00c      	beq.n	8000858 <ENCODER_Backward_Callback+0x2c>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d10d      	bne.n	800085e <ENCODER_Backward_Callback+0x32>
			case MAIN_MENU:

				break;
			case SETTING_REALTIME_MENU:
				SR_MENU_Set_Value(DECREASE);
 8000842:	2000      	movs	r0, #0
 8000844:	f000 bb1c 	b.w	8000e80 <SR_MENU_Set_Value>
				break;
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.woking_state == NORMAL_STATE)
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <ENCODER_Backward_Callback+0x3c>)
 800084a:	78d8      	ldrb	r0, [r3, #3]
 800084c:	b908      	cbnz	r0, 8000852 <ENCODER_Backward_Callback+0x26>
					TL_MENU_Change_Pointer(DECREASE);
 800084e:	f000 bd1b 	b.w	8001288 <TL_MENU_Change_Pointer>
				else
					TL_MENU_Config_Timeline(DECREASE);
 8000852:	2000      	movs	r0, #0
 8000854:	f000 bd40 	b.w	80012d8 <TL_MENU_Config_Timeline>
				break;
			case SETTING_TIMELINE_MENU:
				ST_MENU_Set_Value(DECREASE);
 8000858:	2000      	movs	r0, #0
 800085a:	f000 bc13 	b.w	8001084 <ST_MENU_Set_Value>
				break;
			default:
				break;
		}
	}
}
 800085e:	4770      	bx	lr
 8000860:	200000dc 	.word	0x200000dc
 8000864:	20000150 	.word	0x20000150
 8000868:	20000171 	.word	0x20000171

0800086c <ROTARY_ENCODER_Init>:

void ROTARY_ENCODER_Init(){
 800086c:	b508      	push	{r3, lr}
	BUTTON_Init(&h_encoder_button, GPIOB, GPIO_PIN_4);
 800086e:	2210      	movs	r2, #16
 8000870:	4909      	ldr	r1, [pc, #36]	; (8000898 <ROTARY_ENCODER_Init+0x2c>)
 8000872:	480a      	ldr	r0, [pc, #40]	; (800089c <ROTARY_ENCODER_Init+0x30>)
 8000874:	f003 fcd2 	bl	800421c <BUTTON_Init>
	BUTTON_Set_Callback_Function(NULL, NULL, BTN_Short_Pressing_Callback, BTN_Long_Pressing_Callback);
 8000878:	2100      	movs	r1, #0
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <ROTARY_ENCODER_Init+0x34>)
 800087c:	4608      	mov	r0, r1
 800087e:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <ROTARY_ENCODER_Init+0x38>)
 8000880:	f003 fcd6 	bl	8004230 <BUTTON_Set_Callback_Function>
	ENCODER_Init(&h_encoder, &htim2);
 8000884:	4908      	ldr	r1, [pc, #32]	; (80008a8 <ROTARY_ENCODER_Init+0x3c>)
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <ROTARY_ENCODER_Init+0x40>)
 8000888:	f003 faf0 	bl	8003e6c <ENCODER_Init>
	ENCODER_Set_Callback_Function(ENCODER_Forward_Callback, ENCODER_Backward_Callback);
}
 800088c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ENCODER_Set_Callback_Function(ENCODER_Forward_Callback, ENCODER_Backward_Callback);
 8000890:	4907      	ldr	r1, [pc, #28]	; (80008b0 <ROTARY_ENCODER_Init+0x44>)
 8000892:	4808      	ldr	r0, [pc, #32]	; (80008b4 <ROTARY_ENCODER_Init+0x48>)
 8000894:	f003 baee 	b.w	8003e74 <ENCODER_Set_Callback_Function>
 8000898:	40010c00 	.word	0x40010c00
 800089c:	200000e4 	.word	0x200000e4
 80008a0:	08000785 	.word	0x08000785
 80008a4:	0800071d 	.word	0x0800071d
 80008a8:	200002cc 	.word	0x200002cc
 80008ac:	200000dc 	.word	0x200000dc
 80008b0:	0800082d 	.word	0x0800082d
 80008b4:	080007ed 	.word	0x080007ed

080008b8 <ROTARY_ENCODER_Handle>:

void ROTARY_ENCODER_Handle(){
 80008b8:	b508      	push	{r3, lr}
	BUTTON_Handle(&h_encoder_button);
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <ROTARY_ENCODER_Handle+0x14>)
 80008bc:	f003 fc54 	bl	8004168 <BUTTON_Handle>
	ENCODER_Handle(&h_encoder);
}
 80008c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ENCODER_Handle(&h_encoder);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <ROTARY_ENCODER_Handle+0x18>)
 80008c6:	f003 baf5 	b.w	8003eb4 <ENCODER_Handle>
 80008ca:	bf00      	nop
 80008cc:	200000e4 	.word	0x200000e4
 80008d0:	200000dc 	.word	0x200000dc

080008d4 <TIMELINE_Init>:
//			HAL_UART_Transmit(&huart2, (uint8_t *)Tx_Buffer, strlen(Tx_Buffer), 1000);
//		}
//	}
}

void TIMELINE_Init(){
 80008d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
#ifdef __STM32F0xx_HAL_H
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63;
#endif
#ifdef __STM32F1xx_HAL_H
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63; // 0x0800FC00
 80008d6:	4c11      	ldr	r4, [pc, #68]	; (800091c <TIMELINE_Init+0x48>)
#endif
#ifdef __STM32F4xx_HAL_H
	TIMELINE_Data.add = SECTOR_7_ADD;
#endif

	TIMELINE_Data.len = 0;
 80008d8:	2500      	movs	r5, #0
 80008da:	4626      	mov	r6, r4
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63; // 0x0800FC00
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <TIMELINE_Init+0x4c>)
	TIMELINE_Data.len = 0;
 80008de:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63; // 0x0800FC00
 80008e2:	6023      	str	r3, [r4, #0]
	for(int i = 0; i < MAX_OPTIONS; i++){
		uint8_t t_data[DATA_FRAME_SIZE_BYTE];
		FLASH_Read(TIMELINE_Data.add + i*DATA_FRAME_SIZE_BYTE, t_data, DATA_FRAME_SIZE_BYTE);
 80008e4:	2204      	movs	r2, #4
 80008e6:	6830      	ldr	r0, [r6, #0]
 80008e8:	eb0d 0102 	add.w	r1, sp, r2
 80008ec:	4428      	add	r0, r5
 80008ee:	f003 fcee 	bl	80042ce <FLASH_Read>
		if(*(uint32_t *)t_data == 0xFFFFFFFF){
 80008f2:	9b01      	ldr	r3, [sp, #4]
	for(int i = 0; i < MAX_OPTIONS; i++){
 80008f4:	3504      	adds	r5, #4
		if(*(uint32_t *)t_data == 0xFFFFFFFF){
 80008f6:	1c5a      	adds	r2, r3, #1
			*(uint32_t *)(TIMELINE_Data.flash_data + i) = 0xFFFFFFFF;
		} else{
			TIMELINE_Data.flash_data[i] = *((FLASH_DATA_t *)t_data);
 80008f8:	bf17      	itett	ne
 80008fa:	9801      	ldrne	r0, [sp, #4]
			*(uint32_t *)(TIMELINE_Data.flash_data + i) = 0xFFFFFFFF;
 80008fc:	6063      	streq	r3, [r4, #4]
			TIMELINE_Data.flash_data[i] = *((FLASH_DATA_t *)t_data);
 80008fe:	6060      	strne	r0, [r4, #4]
			TIMELINE_Data.len++;
 8000900:	f896 303c 	ldrbne.w	r3, [r6, #60]	; 0x3c
 8000904:	f104 0204 	add.w	r2, r4, #4
 8000908:	bf1c      	itt	ne
 800090a:	3301      	addne	r3, #1
 800090c:	f886 303c 	strbne.w	r3, [r6, #60]	; 0x3c
	for(int i = 0; i < MAX_OPTIONS; i++){
 8000910:	2d38      	cmp	r5, #56	; 0x38
 8000912:	4614      	mov	r4, r2
 8000914:	d1e6      	bne.n	80008e4 <TIMELINE_Init+0x10>
		}
	}
}
 8000916:	b002      	add	sp, #8
 8000918:	bd70      	pop	{r4, r5, r6, pc}
 800091a:	bf00      	nop
 800091c:	200000fc 	.word	0x200000fc
 8000920:	0800fc00 	.word	0x0800fc00

08000924 <TIMELINE_Sort>:
		TIMELINE_Store_To_Flash();
	}
}

void TIMELINE_Sort(){
	for(int i = 0; i < TIMELINE_Data.len; i++){
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <TIMELINE_Sort+0x64>)
void TIMELINE_Sort(){
 8000926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(int i = 0; i < TIMELINE_Data.len; i++){
 800092a:	2400      	movs	r4, #0
 800092c:	469e      	mov	lr, r3
 800092e:	f89e 703c 	ldrb.w	r7, [lr, #60]	; 0x3c
 8000932:	42a7      	cmp	r7, r4
 8000934:	dc01      	bgt.n	800093a <TIMELINE_Sort+0x16>
				TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[j];
				TIMELINE_Data.flash_data[j] = t_temp;
			}
		}
	}
}
 8000936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for(int j = i + 1; j < TIMELINE_Data.len; j++){
 800093a:	3401      	adds	r4, #1
 800093c:	461a      	mov	r2, r3
 800093e:	4625      	mov	r5, r4
 8000940:	42af      	cmp	r7, r5
 8000942:	dc01      	bgt.n	8000948 <TIMELINE_Sort+0x24>
 8000944:	3304      	adds	r3, #4
 8000946:	e7f2      	b.n	800092e <TIMELINE_Sort+0xa>
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 8000948:	7a11      	ldrb	r1, [r2, #8]
			uint16_t t_data_i = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 800094a:	791e      	ldrb	r6, [r3, #4]
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 800094c:	ebc1 1801 	rsb	r8, r1, r1, lsl #4
			uint16_t t_data_i = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 8000950:	f893 c005 	ldrb.w	ip, [r3, #5]
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 8000954:	7a51      	ldrb	r1, [r2, #9]
			uint16_t t_data_i = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 8000956:	ebc6 1006 	rsb	r0, r6, r6, lsl #4
 800095a:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 800095e:	eb01 0188 	add.w	r1, r1, r8, lsl #2
			if(t_data_i > t_data_j){
 8000962:	b280      	uxth	r0, r0
 8000964:	b289      	uxth	r1, r1
 8000966:	4288      	cmp	r0, r1
 8000968:	d90a      	bls.n	8000980 <TIMELINE_Sort+0x5c>
				t_temp = TIMELINE_Data.flash_data[i];
 800096a:	7998      	ldrb	r0, [r3, #6]
 800096c:	79d9      	ldrb	r1, [r3, #7]
				TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[j];
 800096e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8000972:	f8c3 8004 	str.w	r8, [r3, #4]
				TIMELINE_Data.flash_data[j] = t_temp;
 8000976:	7216      	strb	r6, [r2, #8]
 8000978:	f882 c009 	strb.w	ip, [r2, #9]
 800097c:	7290      	strb	r0, [r2, #10]
 800097e:	72d1      	strb	r1, [r2, #11]
		for(int j = i + 1; j < TIMELINE_Data.len; j++){
 8000980:	3501      	adds	r5, #1
 8000982:	3204      	adds	r2, #4
 8000984:	e7dc      	b.n	8000940 <TIMELINE_Sort+0x1c>
 8000986:	bf00      	nop
 8000988:	200000fc 	.word	0x200000fc

0800098c <TIMELINE_Store_To_Flash>:

void TIMELINE_Store_To_Flash(){
 800098c:	b570      	push	{r4, r5, r6, lr}
	FLASH_DATA_t *t_flash_data;
	t_flash_data = (FLASH_DATA_t *)malloc(TIMELINE_Data.len * DATA_FRAME_SIZE_BIT);
 800098e:	4e0b      	ldr	r6, [pc, #44]	; (80009bc <TIMELINE_Store_To_Flash+0x30>)
 8000990:	f896 403c 	ldrb.w	r4, [r6, #60]	; 0x3c
 8000994:	0160      	lsls	r0, r4, #5
 8000996:	f003 fcd1 	bl	800433c <malloc>
 800099a:	4605      	mov	r5, r0
	for(int i = 0; i < TIMELINE_Data.len; i++){
		*(t_flash_data + i) = *(TIMELINE_Data.flash_data + i);
 800099c:	00a4      	lsls	r4, r4, #2
 800099e:	4622      	mov	r2, r4
 80009a0:	1d31      	adds	r1, r6, #4
 80009a2:	f003 fcdb 	bl	800435c <memcpy>
	}
	FLASH_Write(63, (uint8_t *)t_flash_data, TIMELINE_Data.len * DATA_FRAME_SIZE_BYTE);
 80009a6:	4622      	mov	r2, r4
 80009a8:	4629      	mov	r1, r5
 80009aa:	203f      	movs	r0, #63	; 0x3f
 80009ac:	f003 fc68 	bl	8004280 <FLASH_Write>
	free(t_flash_data);
 80009b0:	4628      	mov	r0, r5
}
 80009b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free(t_flash_data);
 80009b6:	f003 bcc9 	b.w	800434c <free>
 80009ba:	bf00      	nop
 80009bc:	200000fc 	.word	0x200000fc

080009c0 <TIMELINE_Add>:
void TIMELINE_Add(FLASH_DATA_t *p_new_timeline){
 80009c0:	b508      	push	{r3, lr}
	if(TIMELINE_Data.len < MAX_OPTIONS){
 80009c2:	4a09      	ldr	r2, [pc, #36]	; (80009e8 <TIMELINE_Add+0x28>)
 80009c4:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80009c8:	2b0d      	cmp	r3, #13
 80009ca:	d80c      	bhi.n	80009e6 <TIMELINE_Add+0x26>
		TIMELINE_Data.flash_data[TIMELINE_Data.len] = *p_new_timeline;
 80009cc:	6800      	ldr	r0, [r0, #0]
 80009ce:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80009d2:	6048      	str	r0, [r1, #4]
		TIMELINE_Data.len++;
 80009d4:	3301      	adds	r3, #1
 80009d6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
		TIMELINE_Sort();
 80009da:	f7ff ffa3 	bl	8000924 <TIMELINE_Sort>
}
 80009de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		TIMELINE_Store_To_Flash();
 80009e2:	f7ff bfd3 	b.w	800098c <TIMELINE_Store_To_Flash>
}
 80009e6:	bd08      	pop	{r3, pc}
 80009e8:	200000fc 	.word	0x200000fc

080009ec <TIMELINE_Delete>:
void TIMELINE_Delete(uint8_t p_index){
 80009ec:	b4f0      	push	{r4, r5, r6, r7}
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <TIMELINE_Delete+0x40>)
 80009f0:	eb02 0380 	add.w	r3, r2, r0, lsl #2
		for(int i = p_index; i < TIMELINE_Data.len - 1; i++){
 80009f4:	f892 403c 	ldrb.w	r4, [r2, #60]	; 0x3c
 80009f8:	1e61      	subs	r1, r4, #1
 80009fa:	4281      	cmp	r1, r0
 80009fc:	dc08      	bgt.n	8000a10 <TIMELINE_Delete+0x24>
		*(uint32_t *)(TIMELINE_Data.flash_data + TIMELINE_Data.len - 1) = 0xFFFFFFFF;
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		TIMELINE_Data.len--;
 8000a06:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8000a0a:	bcf0      	pop	{r4, r5, r6, r7}
		TIMELINE_Store_To_Flash();
 8000a0c:	f7ff bfbe 	b.w	800098c <TIMELINE_Store_To_Flash>
			TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[i+1];
 8000a10:	689f      	ldr	r7, [r3, #8]
			FLASH_DATA_t t_temp = TIMELINE_Data.flash_data[i];
 8000a12:	791e      	ldrb	r6, [r3, #4]
 8000a14:	795d      	ldrb	r5, [r3, #5]
 8000a16:	799c      	ldrb	r4, [r3, #6]
 8000a18:	79d9      	ldrb	r1, [r3, #7]
			TIMELINE_Data.flash_data[i+1] = t_temp;
 8000a1a:	721e      	strb	r6, [r3, #8]
			TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[i+1];
 8000a1c:	605f      	str	r7, [r3, #4]
			TIMELINE_Data.flash_data[i+1] = t_temp;
 8000a1e:	725d      	strb	r5, [r3, #9]
 8000a20:	729c      	strb	r4, [r3, #10]
 8000a22:	72d9      	strb	r1, [r3, #11]
			TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[i+1];
 8000a24:	3001      	adds	r0, #1
 8000a26:	3304      	adds	r3, #4
 8000a28:	e7e4      	b.n	80009f4 <TIMELINE_Delete+0x8>
 8000a2a:	bf00      	nop
 8000a2c:	200000fc 	.word	0x200000fc

08000a30 <REALTIME_Init>:
extern RTC_HandleTypeDef hrtc;
#endif

static uint32_t timer = 0;

void REALTIME_Init(){
 8000a30:	b538      	push	{r3, r4, r5, lr}
	DS3231_Init(&hds3231, &hi2c2);
 8000a32:	4d11      	ldr	r5, [pc, #68]	; (8000a78 <REALTIME_Init+0x48>)
 8000a34:	4911      	ldr	r1, [pc, #68]	; (8000a7c <REALTIME_Init+0x4c>)
 8000a36:	4628      	mov	r0, r5
 8000a38:	f003 f928 	bl	8003c8c <DS3231_Init>
	REALTIME_Data.system_day = 1;
 8000a3c:	2201      	movs	r2, #1
	REALTIME_Data.system_hour = 0;
 8000a3e:	2300      	movs	r3, #0
	REALTIME_Data.system_day = 1;
 8000a40:	4c0f      	ldr	r4, [pc, #60]	; (8000a80 <REALTIME_Init+0x50>)
	REALTIME_Data.system_minute = Time.Minutes;
	REALTIME_Data.system_date = Date.Date;
	REALTIME_Data.system_month = Date.Month;
	REALTIME_Data.system_year = Date.Year;
#else
	if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8000a42:	4628      	mov	r0, r5
	REALTIME_Data.system_day = 1;
 8000a44:	70a2      	strb	r2, [r4, #2]
	REALTIME_Data.system_hour = 0;
 8000a46:	7023      	strb	r3, [r4, #0]
	REALTIME_Data.system_minute = 0;
 8000a48:	7063      	strb	r3, [r4, #1]
	REALTIME_Data.system_date = 1;
 8000a4a:	70e2      	strb	r2, [r4, #3]
	REALTIME_Data.system_month = 1;
 8000a4c:	7122      	strb	r2, [r4, #4]
	REALTIME_Data.system_year = 0;
 8000a4e:	7163      	strb	r3, [r4, #5]
	if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8000a50:	f003 f954 	bl	8003cfc <DS3231_Get_Time>
 8000a54:	b178      	cbz	r0, 8000a76 <REALTIME_Init+0x46>
 8000a56:	4628      	mov	r0, r5
 8000a58:	f003 f9b8 	bl	8003dcc <DS3231_Get_Date>
 8000a5c:	b158      	cbz	r0, 8000a76 <REALTIME_Init+0x46>
		return;
	}

	REALTIME_Data.system_day = hds3231.current_day;
 8000a5e:	78eb      	ldrb	r3, [r5, #3]
 8000a60:	70a3      	strb	r3, [r4, #2]
	REALTIME_Data.system_hour = hds3231.current_hour;
 8000a62:	782b      	ldrb	r3, [r5, #0]
 8000a64:	7023      	strb	r3, [r4, #0]
	REALTIME_Data.system_minute = hds3231.current_minute;
 8000a66:	786b      	ldrb	r3, [r5, #1]
 8000a68:	7063      	strb	r3, [r4, #1]
	REALTIME_Data.system_date = hds3231.current_date;
 8000a6a:	792b      	ldrb	r3, [r5, #4]
 8000a6c:	70e3      	strb	r3, [r4, #3]
	REALTIME_Data.system_month = hds3231.current_month;
 8000a6e:	796b      	ldrb	r3, [r5, #5]
 8000a70:	7123      	strb	r3, [r4, #4]
	REALTIME_Data.system_year = hds3231.current_year;
 8000a72:	88eb      	ldrh	r3, [r5, #6]
 8000a74:	7163      	strb	r3, [r4, #5]
#endif
}
 8000a76:	bd38      	pop	{r3, r4, r5, pc}
 8000a78:	20000144 	.word	0x20000144
 8000a7c:	20000210 	.word	0x20000210
 8000a80:	2000013c 	.word	0x2000013c

08000a84 <REALTIME_Handle>:

void REALTIME_Handle(){
 8000a84:	b538      	push	{r3, r4, r5, lr}
	if(HAL_GetTick() - timer > CHECKING_REAL_TIME_CYCLE){
 8000a86:	f001 f8f7 	bl	8001c78 <HAL_GetTick>
 8000a8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a8e:	4298      	cmp	r0, r3
 8000a90:	d91e      	bls.n	8000ad0 <REALTIME_Handle+0x4c>
		REALTIME_Data.system_minute = Time.Minutes;
		REALTIME_Data.system_date = Date.Date;
		REALTIME_Data.system_month = Date.Month;
		REALTIME_Data.system_year = Date.Year;
#else
		if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8000a92:	4c10      	ldr	r4, [pc, #64]	; (8000ad4 <REALTIME_Handle+0x50>)
 8000a94:	4620      	mov	r0, r4
 8000a96:	f003 f931 	bl	8003cfc <DS3231_Get_Time>
 8000a9a:	b1c8      	cbz	r0, 8000ad0 <REALTIME_Handle+0x4c>
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	f003 f995 	bl	8003dcc <DS3231_Get_Date>
 8000aa2:	b1a8      	cbz	r0, 8000ad0 <REALTIME_Handle+0x4c>
			return;
		}

		if(REALTIME_Data.system_minute != hds3231.current_minute){
 8000aa4:	4d0c      	ldr	r5, [pc, #48]	; (8000ad8 <REALTIME_Handle+0x54>)
 8000aa6:	7863      	ldrb	r3, [r4, #1]
 8000aa8:	786a      	ldrb	r2, [r5, #1]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d004      	beq.n	8000ab8 <REALTIME_Handle+0x34>
			if(MENU_Data.menu_type == MAIN_MENU){
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <REALTIME_Handle+0x58>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b90b      	cbnz	r3, 8000ab8 <REALTIME_Handle+0x34>
				MAIN_MENU_Update_Value();
 8000ab4:	f000 f954 	bl	8000d60 <MAIN_MENU_Update_Value>
			}
		}

		REALTIME_Data.system_day = hds3231.current_day;
 8000ab8:	78e3      	ldrb	r3, [r4, #3]
 8000aba:	70ab      	strb	r3, [r5, #2]
		REALTIME_Data.system_hour = hds3231.current_hour;
 8000abc:	7823      	ldrb	r3, [r4, #0]
 8000abe:	702b      	strb	r3, [r5, #0]
		REALTIME_Data.system_minute = hds3231.current_minute;
 8000ac0:	7863      	ldrb	r3, [r4, #1]
 8000ac2:	706b      	strb	r3, [r5, #1]
		REALTIME_Data.system_date = hds3231.current_date;
 8000ac4:	7923      	ldrb	r3, [r4, #4]
 8000ac6:	70eb      	strb	r3, [r5, #3]
		REALTIME_Data.system_month = hds3231.current_month;
 8000ac8:	7963      	ldrb	r3, [r4, #5]
 8000aca:	712b      	strb	r3, [r5, #4]
		REALTIME_Data.system_year = hds3231.current_year;
 8000acc:	88e3      	ldrh	r3, [r4, #6]
 8000ace:	716b      	strb	r3, [r5, #5]
#endif
	}
}
 8000ad0:	bd38      	pop	{r3, r4, r5, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000144 	.word	0x20000144
 8000ad8:	2000013c 	.word	0x2000013c
 8000adc:	20000150 	.word	0x20000150

08000ae0 <REALTIME_Set_New_Realtime>:

void REALTIME_Set_New_Realtime(REALTIME_DATA_HandleTypeDef *p_new_realtime){
 8000ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ae2:	4604      	mov	r4, r0
	Date.Year = REALTIME_Data.system_year;

	if(HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
	if(HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
#else
	DS3231_Set_Time(&hds3231, p_new_realtime->system_hour, p_new_realtime->system_minute, 0, p_new_realtime->system_day);
 8000ae4:	7883      	ldrb	r3, [r0, #2]
 8000ae6:	4d0e      	ldr	r5, [pc, #56]	; (8000b20 <REALTIME_Set_New_Realtime+0x40>)
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	7842      	ldrb	r2, [r0, #1]
 8000aec:	7801      	ldrb	r1, [r0, #0]
 8000aee:	2300      	movs	r3, #0
 8000af0:	4628      	mov	r0, r5
 8000af2:	f003 f8cd 	bl	8003c90 <DS3231_Set_Time>
	DS3231_Set_Date(&hds3231, p_new_realtime->system_date, p_new_realtime->system_month, p_new_realtime->system_year);
 8000af6:	7963      	ldrb	r3, [r4, #5]
 8000af8:	7922      	ldrb	r2, [r4, #4]
 8000afa:	4628      	mov	r0, r5
 8000afc:	78e1      	ldrb	r1, [r4, #3]
 8000afe:	f003 f93b 	bl	8003d78 <DS3231_Set_Date>

	REALTIME_Data.system_day = p_new_realtime->system_day;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <REALTIME_Set_New_Realtime+0x44>)
 8000b04:	78a2      	ldrb	r2, [r4, #2]
 8000b06:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = p_new_realtime->system_hour;
 8000b08:	7822      	ldrb	r2, [r4, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = p_new_realtime->system_minute;
 8000b0c:	7862      	ldrb	r2, [r4, #1]
 8000b0e:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = p_new_realtime->system_date;
 8000b10:	78e2      	ldrb	r2, [r4, #3]
 8000b12:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = p_new_realtime->system_month;
 8000b14:	7922      	ldrb	r2, [r4, #4]
 8000b16:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = p_new_realtime->system_year;
 8000b18:	7962      	ldrb	r2, [r4, #5]
 8000b1a:	715a      	strb	r2, [r3, #5]
#endif
}
 8000b1c:	b003      	add	sp, #12
 8000b1e:	bd30      	pop	{r4, r5, pc}
 8000b20:	20000144 	.word	0x20000144
 8000b24:	2000013c 	.word	0x2000013c

08000b28 <MAIN_MENU_Init>:
		{0xFF, 0x02, 0xFF, 0xFF, 0x01, 0xFF},	// 8
		{0xFF, 0x02, 0xFF, 0x01, 0x01, 0xFF},	// 9
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00},	// Nothing
};

void MAIN_MENU_Init(){
 8000b28:	b530      	push	{r4, r5, lr}
 8000b2a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t num_char_0[] = {
 8000b2c:	466b      	mov	r3, sp
 8000b2e:	4c19      	ldr	r4, [pc, #100]	; (8000b94 <MAIN_MENU_Init+0x6c>)
			0b00000,
			0b00000,
			0b00000,
			0b00000,
	};
	LCD_Create_Char(MENU_Data.hlcd, 0, num_char_0);
 8000b30:	4d19      	ldr	r5, [pc, #100]	; (8000b98 <MAIN_MENU_Init+0x70>)
	uint8_t num_char_0[] = {
 8000b32:	6820      	ldr	r0, [r4, #0]
 8000b34:	6861      	ldr	r1, [r4, #4]
	LCD_Create_Char(MENU_Data.hlcd, 0, num_char_0);
 8000b36:	466a      	mov	r2, sp
	uint8_t num_char_0[] = {
 8000b38:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 0, num_char_0);
 8000b3a:	6868      	ldr	r0, [r5, #4]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f003 fafe 	bl	800413e <LCD_Create_Char>

	uint8_t num_char_1[] = {
 8000b42:	68a0      	ldr	r0, [r4, #8]
 8000b44:	68e1      	ldr	r1, [r4, #12]
 8000b46:	ab02      	add	r3, sp, #8
 8000b48:	c303      	stmia	r3!, {r0, r1}
			0b00000,
			0b00000,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 1, num_char_1);
 8000b4a:	aa02      	add	r2, sp, #8
 8000b4c:	6868      	ldr	r0, [r5, #4]
 8000b4e:	2101      	movs	r1, #1
 8000b50:	f003 faf5 	bl	800413e <LCD_Create_Char>

	uint8_t num_char_2[] = {
 8000b54:	6920      	ldr	r0, [r4, #16]
 8000b56:	6961      	ldr	r1, [r4, #20]
 8000b58:	ab04      	add	r3, sp, #16
 8000b5a:	c303      	stmia	r3!, {r0, r1}
			0b00000,
			0b00000,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 2, num_char_2);
 8000b5c:	aa04      	add	r2, sp, #16
 8000b5e:	6868      	ldr	r0, [r5, #4]
 8000b60:	2102      	movs	r1, #2
 8000b62:	f003 faec 	bl	800413e <LCD_Create_Char>

	uint8_t thermometro[8] = {
 8000b66:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <MAIN_MENU_Init+0x74>)
 8000b68:	ab06      	add	r3, sp, #24
 8000b6a:	6810      	ldr	r0, [r2, #0]
 8000b6c:	6851      	ldr	r1, [r2, #4]
			0b01110,
			0b11111,
			0b11111,
			0b01110
	};
	LCD_Create_Char(MENU_Data.hlcd, 3, thermometro);
 8000b6e:	aa06      	add	r2, sp, #24
	uint8_t thermometro[8] = {
 8000b70:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 3, thermometro);
 8000b72:	6868      	ldr	r0, [r5, #4]
 8000b74:	2103      	movs	r1, #3
 8000b76:	f003 fae2 	bl	800413e <LCD_Create_Char>

	uint8_t igrasia[8] = {
 8000b7a:	4a09      	ldr	r2, [pc, #36]	; (8000ba0 <MAIN_MENU_Init+0x78>)
 8000b7c:	ab08      	add	r3, sp, #32
 8000b7e:	6810      	ldr	r0, [r2, #0]
 8000b80:	6851      	ldr	r1, [r2, #4]
			0b10001,
			0b10001,
			0b10001,
			0b01110,
	};
	LCD_Create_Char(MENU_Data.hlcd, 4, igrasia);
 8000b82:	aa08      	add	r2, sp, #32
	uint8_t igrasia[8] = {
 8000b84:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 4, igrasia);
 8000b86:	2104      	movs	r1, #4
 8000b88:	6868      	ldr	r0, [r5, #4]
 8000b8a:	f003 fad8 	bl	800413e <LCD_Create_Char>

}
 8000b8e:	b00b      	add	sp, #44	; 0x2c
 8000b90:	bd30      	pop	{r4, r5, pc}
 8000b92:	bf00      	nop
 8000b94:	08004c88 	.word	0x08004c88
 8000b98:	20000150 	.word	0x20000150
 8000b9c:	08004ca0 	.word	0x08004ca0
 8000ba0:	08004ca9 	.word	0x08004ca9

08000ba4 <MAIN_MENU_Display_Num>:

void MAIN_MENU_Display_Num(uint8_t p_number, uint8_t p_col, uint8_t p_row){
	if(p_row > 2) return;
 8000ba4:	2a02      	cmp	r2, #2
void MAIN_MENU_Display_Num(uint8_t p_number, uint8_t p_col, uint8_t p_row){
 8000ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000baa:	4607      	mov	r7, r0
 8000bac:	4689      	mov	r9, r1
 8000bae:	4616      	mov	r6, r2
	if(p_row > 2) return;
 8000bb0:	d82b      	bhi.n	8000c0a <MAIN_MENU_Display_Num+0x66>

	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row);
 8000bb2:	f04f 0806 	mov.w	r8, #6
 8000bb6:	4c16      	ldr	r4, [pc, #88]	; (8000c10 <MAIN_MENU_Display_Num+0x6c>)
	for(int i = 0; i < 3; i++){
 8000bb8:	f04f 0a00 	mov.w	sl, #0
	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row);
 8000bbc:	6860      	ldr	r0, [r4, #4]
 8000bbe:	f003 fa17 	bl	8003ff0 <LCD_Set_Cursor>
	for(int i = 0; i < 3; i++){
 8000bc2:	4d14      	ldr	r5, [pc, #80]	; (8000c14 <MAIN_MENU_Display_Num+0x70>)
 8000bc4:	fb08 5807 	mla	r8, r8, r7, r5
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i]);
 8000bc8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8000bcc:	6860      	ldr	r0, [r4, #4]
	for(int i = 0; i < 3; i++){
 8000bce:	f10a 0a01 	add.w	sl, sl, #1
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i]);
 8000bd2:	f003 fa45 	bl	8004060 <LCD_Send_Data>
	for(int i = 0; i < 3; i++){
 8000bd6:	f1ba 0f03 	cmp.w	sl, #3
 8000bda:	d1f5      	bne.n	8000bc8 <MAIN_MENU_Display_Num+0x24>
	}

	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row + 1);
 8000bdc:	1c72      	adds	r2, r6, #1
 8000bde:	4649      	mov	r1, r9
 8000be0:	6860      	ldr	r0, [r4, #4]
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	f003 fa04 	bl	8003ff0 <LCD_Set_Cursor>
	for(int i = 0; i < 3; i++){
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i+3]);
 8000be8:	2006      	movs	r0, #6
 8000bea:	fb00 5507 	mla	r5, r0, r7, r5
 8000bee:	6860      	ldr	r0, [r4, #4]
 8000bf0:	78e9      	ldrb	r1, [r5, #3]
 8000bf2:	f003 fa35 	bl	8004060 <LCD_Send_Data>
 8000bf6:	7929      	ldrb	r1, [r5, #4]
 8000bf8:	6860      	ldr	r0, [r4, #4]
 8000bfa:	f003 fa31 	bl	8004060 <LCD_Send_Data>
 8000bfe:	7969      	ldrb	r1, [r5, #5]
 8000c00:	6860      	ldr	r0, [r4, #4]
	}

}
 8000c02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i+3]);
 8000c06:	f003 ba2b 	b.w	8004060 <LCD_Send_Data>
}
 8000c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000150 	.word	0x20000150
 8000c14:	08004cd9 	.word	0x08004cd9

08000c18 <MAIN_MENU_Display>:

void MAIN_MENU_Display(){
 8000c18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(MENU_Data.is_changing_menu){
 8000c1a:	4c44      	ldr	r4, [pc, #272]	; (8000d2c <MAIN_MENU_Display+0x114>)
 8000c1c:	7a63      	ldrb	r3, [r4, #9]
 8000c1e:	b123      	cbz	r3, 8000c2a <MAIN_MENU_Display+0x12>
		LCD_Clear(MENU_Data.hlcd);
 8000c20:	6860      	ldr	r0, [r4, #4]
 8000c22:	f003 f9fd 	bl	8004020 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	7263      	strb	r3, [r4, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 0);
	char t_day_string[] = "SUN";
	if(REALTIME_Data.system_day > 0){
 8000c2a:	4d41      	ldr	r5, [pc, #260]	; (8000d30 <MAIN_MENU_Display+0x118>)
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 0);
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	2200      	movs	r2, #0
 8000c30:	6860      	ldr	r0, [r4, #4]
 8000c32:	f003 f9dd 	bl	8003ff0 <LCD_Set_Cursor>
	char t_day_string[] = "SUN";
 8000c36:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <MAIN_MENU_Display+0x11c>)
	if(REALTIME_Data.system_day > 0){
 8000c38:	78a9      	ldrb	r1, [r5, #2]
	char t_day_string[] = "SUN";
 8000c3a:	9303      	str	r3, [sp, #12]
	if(REALTIME_Data.system_day > 0){
 8000c3c:	b131      	cbz	r1, 8000c4c <MAIN_MENU_Display+0x34>
		strcpy(t_day_string, DAY_Str[REALTIME_Data.system_day - 1]);
 8000c3e:	4b3e      	ldr	r3, [pc, #248]	; (8000d38 <MAIN_MENU_Display+0x120>)
 8000c40:	3901      	subs	r1, #1
 8000c42:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8000c46:	a803      	add	r0, sp, #12
 8000c48:	f003 fc8a 	bl	8004560 <strcpy>
	}
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000c4c:	796b      	ldrb	r3, [r5, #5]
 8000c4e:	493b      	ldr	r1, [pc, #236]	; (8000d3c <MAIN_MENU_Display+0x124>)
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	792b      	ldrb	r3, [r5, #4]
 8000c54:	aa03      	add	r2, sp, #12
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	6860      	ldr	r0, [r4, #4]
 8000c5a:	78eb      	ldrb	r3, [r5, #3]
 8000c5c:	f003 fa46 	bl	80040ec <LCD_Write>
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 1);
	LCD_Send_Data(MENU_Data.hlcd, 3);
	LCD_Write(MENU_Data.hlcd, "%02dC      ", (uint8_t)hdht.temperature);
 8000c60:	4e37      	ldr	r6, [pc, #220]	; (8000d40 <MAIN_MENU_Display+0x128>)
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 1);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2103      	movs	r1, #3
 8000c66:	6860      	ldr	r0, [r4, #4]
 8000c68:	f003 f9c2 	bl	8003ff0 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, 3);
 8000c6c:	2103      	movs	r1, #3
 8000c6e:	6860      	ldr	r0, [r4, #4]
 8000c70:	f003 f9f6 	bl	8004060 <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02dC      ", (uint8_t)hdht.temperature);
 8000c74:	68f0      	ldr	r0, [r6, #12]
 8000c76:	f7ff fc7d 	bl	8000574 <__aeabi_f2uiz>
 8000c7a:	4932      	ldr	r1, [pc, #200]	; (8000d44 <MAIN_MENU_Display+0x12c>)
 8000c7c:	b2c2      	uxtb	r2, r0
 8000c7e:	6860      	ldr	r0, [r4, #4]
 8000c80:	f003 fa34 	bl	80040ec <LCD_Write>
	LCD_Send_Data(MENU_Data.hlcd, 4);
 8000c84:	2104      	movs	r1, #4
 8000c86:	6860      	ldr	r0, [r4, #4]
 8000c88:	f003 f9ea 	bl	8004060 <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02d%%", (uint8_t)hdht.huminity);
 8000c8c:	6930      	ldr	r0, [r6, #16]
 8000c8e:	f7ff fc71 	bl	8000574 <__aeabi_f2uiz>
 8000c92:	492d      	ldr	r1, [pc, #180]	; (8000d48 <MAIN_MENU_Display+0x130>)
 8000c94:	b2c2      	uxtb	r2, r0
 8000c96:	6860      	ldr	r0, [r4, #4]
 8000c98:	f003 fa28 	bl	80040ec <LCD_Write>

	MAIN_MENU_Display_Num(REALTIME_Data.system_hour / 10, 2, 2);
 8000c9c:	260a      	movs	r6, #10
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	7828      	ldrb	r0, [r5, #0]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	fbb0 f0f6 	udiv	r0, r0, r6
 8000ca8:	f7ff ff7c 	bl	8000ba4 <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(REALTIME_Data.system_hour % 10, 6, 2);
 8000cac:	7828      	ldrb	r0, [r5, #0]
 8000cae:	2202      	movs	r2, #2
 8000cb0:	fbb0 f3f6 	udiv	r3, r0, r6
 8000cb4:	fb06 0013 	mls	r0, r6, r3, r0
 8000cb8:	2106      	movs	r1, #6
 8000cba:	b2c0      	uxtb	r0, r0
 8000cbc:	f7ff ff72 	bl	8000ba4 <MAIN_MENU_Display_Num>
	if(MENU_Data.blink_state){
 8000cc0:	7c23      	ldrb	r3, [r4, #16]
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	2109      	movs	r1, #9
 8000cc6:	6860      	ldr	r0, [r4, #4]
	if(MENU_Data.blink_state){
 8000cc8:	b313      	cbz	r3, 8000d10 <MAIN_MENU_Display+0xf8>
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8000cca:	f003 f991 	bl	8003ff0 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, '.');
 8000cce:	212e      	movs	r1, #46	; 0x2e
 8000cd0:	6860      	ldr	r0, [r4, #4]
 8000cd2:	f003 f9c5 	bl	8004060 <LCD_Send_Data>
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 8000cd6:	2109      	movs	r1, #9
 8000cd8:	2203      	movs	r2, #3
 8000cda:	6860      	ldr	r0, [r4, #4]
 8000cdc:	f003 f988 	bl	8003ff0 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, '.');
 8000ce0:	212e      	movs	r1, #46	; 0x2e
	} else{
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
		LCD_Send_Data(MENU_Data.hlcd, ' ');
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
		LCD_Send_Data(MENU_Data.hlcd, ' ');
 8000ce2:	6860      	ldr	r0, [r4, #4]
	}
	MAIN_MENU_Display_Num(REALTIME_Data.system_minute / 10, 10, 2);
 8000ce4:	240a      	movs	r4, #10
		LCD_Send_Data(MENU_Data.hlcd, ' ');
 8000ce6:	f003 f9bb 	bl	8004060 <LCD_Send_Data>
	MAIN_MENU_Display_Num(REALTIME_Data.system_minute / 10, 10, 2);
 8000cea:	7868      	ldrb	r0, [r5, #1]
 8000cec:	4621      	mov	r1, r4
 8000cee:	fbb0 f0f4 	udiv	r0, r0, r4
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	f7ff ff56 	bl	8000ba4 <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(REALTIME_Data.system_minute % 10, 14, 2);
 8000cf8:	7868      	ldrb	r0, [r5, #1]
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	fbb0 f1f4 	udiv	r1, r0, r4
 8000d00:	fb04 0011 	mls	r0, r4, r1, r0
 8000d04:	210e      	movs	r1, #14
 8000d06:	b2c0      	uxtb	r0, r0
 8000d08:	f7ff ff4c 	bl	8000ba4 <MAIN_MENU_Display_Num>
}
 8000d0c:	b004      	add	sp, #16
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8000d10:	f003 f96e 	bl	8003ff0 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, ' ');
 8000d14:	2120      	movs	r1, #32
 8000d16:	6860      	ldr	r0, [r4, #4]
 8000d18:	f003 f9a2 	bl	8004060 <LCD_Send_Data>
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 8000d1c:	2109      	movs	r1, #9
 8000d1e:	2203      	movs	r2, #3
 8000d20:	6860      	ldr	r0, [r4, #4]
 8000d22:	f003 f965 	bl	8003ff0 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, ' ');
 8000d26:	2120      	movs	r1, #32
 8000d28:	e7db      	b.n	8000ce2 <MAIN_MENU_Display+0xca>
 8000d2a:	bf00      	nop
 8000d2c:	20000150 	.word	0x20000150
 8000d30:	2000013c 	.word	0x2000013c
 8000d34:	004e5553 	.word	0x004e5553
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	08004cb2 	.word	0x08004cb2
 8000d40:	200001a8 	.word	0x200001a8
 8000d44:	08004cc6 	.word	0x08004cc6
 8000d48:	08004cd2 	.word	0x08004cd2

08000d4c <MAIN_MENU_Set_State>:

void MAIN_MENU_Set_State(){
	MENU_Data.menu_type = MAIN_MENU;
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <MAIN_MENU_Set_State+0x10>)
 8000d50:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d56:	811a      	strh	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000150 	.word	0x20000150

08000d60 <MAIN_MENU_Update_Value>:

void MAIN_MENU_Update_Value(){
	MENU_Data.menu_type = MAIN_MENU;
 8000d60:	2200      	movs	r2, #0
 8000d62:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <MAIN_MENU_Update_Value+0xc>)
 8000d64:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000d66:	721a      	strb	r2, [r3, #8]
}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000150 	.word	0x20000150

08000d70 <MENU_Init>:

#define BLINKING_CYCLE		1000

void MENU_Init(LCD_I2C_HandleTypeDef *p_hlcd){
	MENU_Data.hlcd = p_hlcd;
	MENU_Data.changed = 0;
 8000d70:	f44f 7280 	mov.w	r2, #256	; 0x100
void MENU_Init(LCD_I2C_HandleTypeDef *p_hlcd){
 8000d74:	b508      	push	{r3, lr}
	MENU_Data.hlcd = p_hlcd;
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MENU_Init+0x2c>)
	MENU_Data.changed = 0;
 8000d78:	811a      	strh	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
	MENU_Data.menu_type = MAIN_MENU;
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
	MENU_Data.blinking_timer = 0;
 8000d7e:	60da      	str	r2, [r3, #12]
	MENU_Data.blink_state = 1;
 8000d80:	2201      	movs	r2, #1
	MENU_Data.hlcd = p_hlcd;
 8000d82:	6058      	str	r0, [r3, #4]
	MENU_Data.blink_state = 1;
 8000d84:	741a      	strb	r2, [r3, #16]
	MAIN_MENU_Init();
 8000d86:	f7ff fecf 	bl	8000b28 <MAIN_MENU_Init>
	SR_MENU_Init();
 8000d8a:	f000 f837 	bl	8000dfc <SR_MENU_Init>
	TL_MENU_Init();
 8000d8e:	f000 fa1d 	bl	80011cc <TL_MENU_Init>
	ST_MENU_Init();
}
 8000d92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ST_MENU_Init();
 8000d96:	f000 b939 	b.w	800100c <ST_MENU_Init>
 8000d9a:	bf00      	nop
 8000d9c:	20000150 	.word	0x20000150

08000da0 <MENU_Handle>:
//		timer = HAL_GetTick();
//		count ++;
//	}
//}

void MENU_Handle(){
 8000da0:	b510      	push	{r4, lr}
	if(!MENU_Data.changed){
 8000da2:	4c15      	ldr	r4, [pc, #84]	; (8000df8 <MENU_Handle+0x58>)
 8000da4:	7a23      	ldrb	r3, [r4, #8]
 8000da6:	b953      	cbnz	r3, 8000dbe <MENU_Handle+0x1e>
		switch(MENU_Data.menu_type){
 8000da8:	7823      	ldrb	r3, [r4, #0]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d805      	bhi.n	8000dba <MENU_Handle+0x1a>
 8000dae:	e8df f003 	tbb	[pc, r3]
 8000db2:	1902      	.short	0x1902
 8000db4:	1f1c      	.short	0x1f1c
			case MAIN_MENU:
				MAIN_MENU_Display();
 8000db6:	f7ff ff2f 	bl	8000c18 <MAIN_MENU_Display>
				ST_MENU_Display();
				break;
			default:
				break;
		}
		MENU_Data.changed = 1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	7223      	strb	r3, [r4, #8]
	}

	if(HAL_GetTick() - MENU_Data.blinking_timer > BLINKING_CYCLE){
 8000dbe:	f000 ff5b 	bl	8001c78 <HAL_GetTick>
 8000dc2:	68e3      	ldr	r3, [r4, #12]
 8000dc4:	1ac0      	subs	r0, r0, r3
 8000dc6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000dca:	d90a      	bls.n	8000de2 <MENU_Handle+0x42>
		if(MENU_Data.menu_type == MAIN_MENU){
 8000dcc:	7823      	ldrb	r3, [r4, #0]
 8000dce:	b92b      	cbnz	r3, 8000ddc <MENU_Handle+0x3c>
			MENU_Data.changed = 0;
 8000dd0:	7223      	strb	r3, [r4, #8]
			MENU_Data.blink_state = !MENU_Data.blink_state;
 8000dd2:	7c23      	ldrb	r3, [r4, #16]
 8000dd4:	fab3 f383 	clz	r3, r3
 8000dd8:	095b      	lsrs	r3, r3, #5
 8000dda:	7423      	strb	r3, [r4, #16]
		}
		MENU_Data.blinking_timer = HAL_GetTick();
 8000ddc:	f000 ff4c 	bl	8001c78 <HAL_GetTick>
 8000de0:	60e0      	str	r0, [r4, #12]
	}

}
 8000de2:	bd10      	pop	{r4, pc}
				SR_MENU_Display();
 8000de4:	f000 f892 	bl	8000f0c <SR_MENU_Display>
				break;
 8000de8:	e7e7      	b.n	8000dba <MENU_Handle+0x1a>
				TL_MENU_Display();
 8000dea:	f000 fa8f 	bl	800130c <TL_MENU_Display>
				break;
 8000dee:	e7e4      	b.n	8000dba <MENU_Handle+0x1a>
				ST_MENU_Display();
 8000df0:	f000 f980 	bl	80010f4 <ST_MENU_Display>
				break;
 8000df4:	e7e1      	b.n	8000dba <MENU_Handle+0x1a>
 8000df6:	bf00      	nop
 8000df8:	20000150 	.word	0x20000150

08000dfc <SR_MENU_Init>:
};

extern char DAY_Str[7][4];

void SR_MENU_Init(){
	SR_MENU_Data.state = SETTING_HOUR;
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SR_MENU_Init+0x14>)
 8000e00:	701a      	strb	r2, [r3, #0]
	REALTIME_DATA_HandleTypeDef t_realtime = {0, 0, 0, 0, 0, 0};
	SR_MENU_Data.new_realtime = t_realtime;
 8000e02:	705a      	strb	r2, [r3, #1]
 8000e04:	709a      	strb	r2, [r3, #2]
 8000e06:	70da      	strb	r2, [r3, #3]
 8000e08:	711a      	strb	r2, [r3, #4]
 8000e0a:	715a      	strb	r2, [r3, #5]
 8000e0c:	719a      	strb	r2, [r3, #6]
}
 8000e0e:	4770      	bx	lr
 8000e10:	20000164 	.word	0x20000164

08000e14 <SR_MENU_Set_State>:

void SR_MENU_Set_State(){
	SR_MENU_Data.state = SETTING_HOUR;
 8000e14:	2200      	movs	r2, #0
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <SR_MENU_Set_State+0x20>)
 8000e18:	701a      	strb	r2, [r3, #0]
	REALTIME_DATA_HandleTypeDef t_realtime = {0, 0, 0, 0, 0, 0};
	SR_MENU_Data.new_realtime = t_realtime;
 8000e1a:	705a      	strb	r2, [r3, #1]
 8000e1c:	709a      	strb	r2, [r3, #2]
 8000e1e:	70da      	strb	r2, [r3, #3]
 8000e20:	711a      	strb	r2, [r3, #4]
 8000e22:	715a      	strb	r2, [r3, #5]
 8000e24:	719a      	strb	r2, [r3, #6]
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8000e26:	2201      	movs	r2, #1
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <SR_MENU_Set_State+0x24>)
 8000e2a:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e30:	811a      	strh	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
}
 8000e32:	4770      	bx	lr
 8000e34:	20000164 	.word	0x20000164
 8000e38:	20000150 	.word	0x20000150

08000e3c <SR_MENU_Change_Setting_State>:

void SR_MENU_Change_Setting_State(uint8_t p_is_increase){
 8000e3c:	b508      	push	{r3, lr}
	if(SR_MENU_Data.state == CHECKING_AGAIN){
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <SR_MENU_Change_Setting_State+0x3c>)
 8000e40:	7813      	ldrb	r3, [r2, #0]
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d106      	bne.n	8000e54 <SR_MENU_Change_Setting_State+0x18>
		REALTIME_Set_New_Realtime(&SR_MENU_Data.new_realtime);
 8000e46:	1c50      	adds	r0, r2, #1
 8000e48:	f7ff fe4a 	bl	8000ae0 <REALTIME_Set_New_Realtime>
			return;
		}
		MENU_Data.menu_type = SETTING_REALTIME_MENU;
		MENU_Data.changed = 0;
	}
}
 8000e4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			MAIN_MENU_Set_State();
 8000e50:	f7ff bf7c 	b.w	8000d4c <MAIN_MENU_Set_State>
		SR_MENU_Data.state += ((p_is_increase == INCREASE) ? 1 : -1);
 8000e54:	2801      	cmp	r0, #1
 8000e56:	bf18      	it	ne
 8000e58:	20ff      	movne	r0, #255	; 0xff
 8000e5a:	4403      	add	r3, r0
 8000e5c:	b2db      	uxtb	r3, r3
		if((int8_t)SR_MENU_Data.state < 0){
 8000e5e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000e62:	f04f 0100 	mov.w	r1, #0
		SR_MENU_Data.state += ((p_is_increase == INCREASE) ? 1 : -1);
 8000e66:	7013      	strb	r3, [r2, #0]
		if((int8_t)SR_MENU_Data.state < 0){
 8000e68:	d001      	beq.n	8000e6e <SR_MENU_Change_Setting_State+0x32>
			SR_MENU_Data.state = 0;
 8000e6a:	7011      	strb	r1, [r2, #0]
 8000e6c:	e7ee      	b.n	8000e4c <SR_MENU_Change_Setting_State+0x10>
		MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <SR_MENU_Change_Setting_State+0x40>)
 8000e72:	701a      	strb	r2, [r3, #0]
		MENU_Data.changed = 0;
 8000e74:	7219      	strb	r1, [r3, #8]
}
 8000e76:	bd08      	pop	{r3, pc}
 8000e78:	20000164 	.word	0x20000164
 8000e7c:	20000150 	.word	0x20000150

08000e80 <SR_MENU_Set_Value>:

void SR_MENU_Set_Value(uint8_t p_is_increase){
 8000e80:	b530      	push	{r4, r5, lr}
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <SR_MENU_Set_Value+0x80>)
 8000e84:	7819      	ldrb	r1, [r3, #0]
 8000e86:	2905      	cmp	r1, #5
 8000e88:	d828      	bhi.n	8000edc <SR_MENU_Set_Value+0x5c>
		int8_t *t_data_ptr = (int8_t *)(&SR_MENU_Data.new_realtime) + SR_MENU_Data.state;
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 8000e8a:	2801      	cmp	r0, #1
 8000e8c:	bf18      	it	ne
 8000e8e:	20ff      	movne	r0, #255	; 0xff
		int8_t *t_data_ptr = (int8_t *)(&SR_MENU_Data.new_realtime) + SR_MENU_Data.state;
 8000e90:	1c5c      	adds	r4, r3, #1
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 8000e92:	5c62      	ldrb	r2, [r4, r1]
		if(*t_data_ptr > __max_value[SR_MENU_Data.state]){
 8000e94:	4d1b      	ldr	r5, [pc, #108]	; (8000f04 <SR_MENU_Set_Value+0x84>)
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 8000e96:	4410      	add	r0, r2
 8000e98:	b240      	sxtb	r0, r0
 8000e9a:	5460      	strb	r0, [r4, r1]
		if(*t_data_ptr > __max_value[SR_MENU_Data.state]){
 8000e9c:	781a      	ldrb	r2, [r3, #0]
 8000e9e:	5cad      	ldrb	r5, [r5, r2]
 8000ea0:	42a8      	cmp	r0, r5
 8000ea2:	dd12      	ble.n	8000eca <SR_MENU_Set_Value+0x4a>
			*t_data_ptr = (SR_MENU_Data.state == SETTING_DATE) ? 1 : 0;
 8000ea4:	1ed0      	subs	r0, r2, #3
 8000ea6:	4242      	negs	r2, r0
 8000ea8:	4142      	adcs	r2, r0
 8000eaa:	5462      	strb	r2, [r4, r1]
		} else if(*t_data_ptr < 0){
			*t_data_ptr = __max_value[SR_MENU_Data.state];
		}
		if(SR_MENU_Data.state == SETTING_YEAR){
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	2a05      	cmp	r2, #5
 8000eb0:	d114      	bne.n	8000edc <SR_MENU_Set_Value+0x5c>
			uint8_t *t_date_ptr = &SR_MENU_Data.new_realtime.system_date;
			uint8_t *t_month_ptr = &SR_MENU_Data.new_realtime.system_month;
			uint8_t *t_year_ptr = &SR_MENU_Data.new_realtime.system_year;
			if(*t_month_ptr == 2){
 8000eb2:	795a      	ldrb	r2, [r3, #5]
 8000eb4:	2a02      	cmp	r2, #2
 8000eb6:	d10c      	bne.n	8000ed2 <SR_MENU_Set_Value+0x52>
				if(*t_date_ptr > ((*t_year_ptr % 4 == 0) ? 29 : 28)){
 8000eb8:	7999      	ldrb	r1, [r3, #6]
 8000eba:	791a      	ldrb	r2, [r3, #4]
 8000ebc:	0789      	lsls	r1, r1, #30
 8000ebe:	d01a      	beq.n	8000ef6 <SR_MENU_Set_Value+0x76>
 8000ec0:	2a1c      	cmp	r2, #28
 8000ec2:	dd0b      	ble.n	8000edc <SR_MENU_Set_Value+0x5c>
					*t_date_ptr = (*t_year_ptr % 4 == 0) ? 29 : 28;
 8000ec4:	221c      	movs	r2, #28
				}
			} else if((*t_month_ptr <= 7 && *t_month_ptr % 2 == 0) || (*t_month_ptr >= 8 && *t_month_ptr % 2 == 1)){
				if(*t_date_ptr > 30){
					*t_date_ptr = 30;
 8000ec6:	711a      	strb	r2, [r3, #4]
 8000ec8:	e008      	b.n	8000edc <SR_MENU_Set_Value+0x5c>
		} else if(*t_data_ptr < 0){
 8000eca:	2800      	cmp	r0, #0
			*t_data_ptr = __max_value[SR_MENU_Data.state];
 8000ecc:	bfb8      	it	lt
 8000ece:	5465      	strblt	r5, [r4, r1]
 8000ed0:	e7ec      	b.n	8000eac <SR_MENU_Set_Value+0x2c>
			} else if((*t_month_ptr <= 7 && *t_month_ptr % 2 == 0) || (*t_month_ptr >= 8 && *t_month_ptr % 2 == 1)){
 8000ed2:	2a07      	cmp	r2, #7
 8000ed4:	f002 0101 	and.w	r1, r2, #1
 8000ed8:	d806      	bhi.n	8000ee8 <SR_MENU_Set_Value+0x68>
 8000eda:	b139      	cbz	r1, 8000eec <SR_MENU_Set_Value+0x6c>
				}
			}
		}
	}
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8000edc:	2201      	movs	r2, #1
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <SR_MENU_Set_Value+0x88>)
 8000ee0:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	721a      	strb	r2, [r3, #8]
}
 8000ee6:	bd30      	pop	{r4, r5, pc}
			} else if((*t_month_ptr <= 7 && *t_month_ptr % 2 == 0) || (*t_month_ptr >= 8 && *t_month_ptr % 2 == 1)){
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	d0f7      	beq.n	8000edc <SR_MENU_Set_Value+0x5c>
				if(*t_date_ptr > 30){
 8000eec:	791a      	ldrb	r2, [r3, #4]
 8000eee:	2a1e      	cmp	r2, #30
 8000ef0:	d9f4      	bls.n	8000edc <SR_MENU_Set_Value+0x5c>
					*t_date_ptr = 30;
 8000ef2:	221e      	movs	r2, #30
 8000ef4:	e7e7      	b.n	8000ec6 <SR_MENU_Set_Value+0x46>
				if(*t_date_ptr > ((*t_year_ptr % 4 == 0) ? 29 : 28)){
 8000ef6:	2a1d      	cmp	r2, #29
 8000ef8:	ddf0      	ble.n	8000edc <SR_MENU_Set_Value+0x5c>
					*t_date_ptr = (*t_year_ptr % 4 == 0) ? 29 : 28;
 8000efa:	221d      	movs	r2, #29
 8000efc:	e7e3      	b.n	8000ec6 <SR_MENU_Set_Value+0x46>
 8000efe:	bf00      	nop
 8000f00:	20000164 	.word	0x20000164
 8000f04:	08004d62 	.word	0x08004d62
 8000f08:	20000150 	.word	0x20000150

08000f0c <SR_MENU_Display>:

void SR_MENU_Display(){
 8000f0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(MENU_Data.is_changing_menu){
 8000f0e:	4c37      	ldr	r4, [pc, #220]	; (8000fec <SR_MENU_Display+0xe0>)
 8000f10:	7a63      	ldrb	r3, [r4, #9]
 8000f12:	b123      	cbz	r3, 8000f1e <SR_MENU_Display+0x12>
		LCD_Clear(MENU_Data.hlcd);
 8000f14:	6860      	ldr	r0, [r4, #4]
 8000f16:	f003 f883 	bl	8004020 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	7263      	strb	r3, [r4, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 8000f1e:	2200      	movs	r2, #0
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 8000f20:	4d33      	ldr	r5, [pc, #204]	; (8000ff0 <SR_MENU_Display+0xe4>)
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 8000f22:	4611      	mov	r1, r2
 8000f24:	6860      	ldr	r0, [r4, #4]
 8000f26:	f003 f863 	bl	8003ff0 <LCD_Set_Cursor>
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 8000f2a:	782b      	ldrb	r3, [r5, #0]
 8000f2c:	2b05      	cmp	r3, #5
 8000f2e:	d857      	bhi.n	8000fe0 <SR_MENU_Display+0xd4>
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[SR_MENU_Data.state]);
 8000f30:	4a30      	ldr	r2, [pc, #192]	; (8000ff4 <SR_MENU_Display+0xe8>)
 8000f32:	4931      	ldr	r1, [pc, #196]	; (8000ff8 <SR_MENU_Display+0xec>)
 8000f34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f38:	6860      	ldr	r0, [r4, #4]
 8000f3a:	f003 f8d7 	bl	80040ec <LCD_Write>
	} else{
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 1);
 8000f3e:	2103      	movs	r1, #3
 8000f40:	2201      	movs	r2, #1
 8000f42:	6860      	ldr	r0, [r4, #4]
 8000f44:	f003 f854 	bl	8003ff0 <LCD_Set_Cursor>
	char t_day_string[] = "SUN";
 8000f48:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <SR_MENU_Display+0xf0>)
	if(SR_MENU_Data.new_realtime.system_day > 0){
 8000f4a:	78e9      	ldrb	r1, [r5, #3]
	char t_day_string[] = "SUN";
 8000f4c:	9303      	str	r3, [sp, #12]
	if(SR_MENU_Data.new_realtime.system_day > 0){
 8000f4e:	b131      	cbz	r1, 8000f5e <SR_MENU_Display+0x52>
		strcpy(t_day_string, DAY_Str[SR_MENU_Data.new_realtime.system_day - 1]);
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <SR_MENU_Display+0xf4>)
 8000f52:	3901      	subs	r1, #1
 8000f54:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8000f58:	a803      	add	r0, sp, #12
 8000f5a:	f003 fb01 	bl	8004560 <strcpy>
	}
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000f5e:	79ab      	ldrb	r3, [r5, #6]
 8000f60:	6860      	ldr	r0, [r4, #4]
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	796b      	ldrb	r3, [r5, #5]
 8000f66:	aa03      	add	r2, sp, #12
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	4926      	ldr	r1, [pc, #152]	; (8001004 <SR_MENU_Display+0xf8>)
 8000f6c:	792b      	ldrb	r3, [r5, #4]
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);

	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour / 10, 2, 2);
 8000f6e:	260a      	movs	r6, #10
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000f70:	f003 f8bc 	bl	80040ec <LCD_Write>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour / 10, 2, 2);
 8000f74:	2202      	movs	r2, #2
 8000f76:	7868      	ldrb	r0, [r5, #1]
 8000f78:	4611      	mov	r1, r2
 8000f7a:	fbb0 f0f6 	udiv	r0, r0, r6
 8000f7e:	f7ff fe11 	bl	8000ba4 <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour % 10, 6, 2);
 8000f82:	7868      	ldrb	r0, [r5, #1]
 8000f84:	2202      	movs	r2, #2
 8000f86:	fbb0 f3f6 	udiv	r3, r0, r6
 8000f8a:	fb06 0013 	mls	r0, r6, r3, r0
 8000f8e:	2106      	movs	r1, #6
 8000f90:	b2c0      	uxtb	r0, r0
 8000f92:	f7ff fe07 	bl	8000ba4 <MAIN_MENU_Display_Num>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8000f96:	2202      	movs	r2, #2
 8000f98:	6860      	ldr	r0, [r4, #4]
 8000f9a:	2109      	movs	r1, #9
 8000f9c:	f003 f828 	bl	8003ff0 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 8000fa0:	6860      	ldr	r0, [r4, #4]
 8000fa2:	212e      	movs	r1, #46	; 0x2e
 8000fa4:	f003 f85c 	bl	8004060 <LCD_Send_Data>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 8000fa8:	2203      	movs	r2, #3
 8000faa:	6860      	ldr	r0, [r4, #4]
 8000fac:	2109      	movs	r1, #9
 8000fae:	f003 f81f 	bl	8003ff0 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 8000fb2:	6860      	ldr	r0, [r4, #4]
 8000fb4:	212e      	movs	r1, #46	; 0x2e
 8000fb6:	f003 f853 	bl	8004060 <LCD_Send_Data>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_minute / 10, 10, 2);
 8000fba:	78a8      	ldrb	r0, [r5, #2]
 8000fbc:	4631      	mov	r1, r6
 8000fbe:	fbb0 f0f6 	udiv	r0, r0, r6
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f7ff fdee 	bl	8000ba4 <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_minute % 10, 14, 2);
 8000fc8:	78a8      	ldrb	r0, [r5, #2]
 8000fca:	2202      	movs	r2, #2
 8000fcc:	fbb0 f3f6 	udiv	r3, r0, r6
 8000fd0:	fb06 0013 	mls	r0, r6, r3, r0
 8000fd4:	210e      	movs	r1, #14
 8000fd6:	b2c0      	uxtb	r0, r0
 8000fd8:	f7ff fde4 	bl	8000ba4 <MAIN_MENU_Display_Num>
}
 8000fdc:	b004      	add	sp, #16
 8000fde:	bd70      	pop	{r4, r5, r6, pc}
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
 8000fe0:	4909      	ldr	r1, [pc, #36]	; (8001008 <SR_MENU_Display+0xfc>)
 8000fe2:	6860      	ldr	r0, [r4, #4]
 8000fe4:	f003 f882 	bl	80040ec <LCD_Write>
 8000fe8:	e7a9      	b.n	8000f3e <SR_MENU_Display+0x32>
 8000fea:	bf00      	nop
 8000fec:	20000150 	.word	0x20000150
 8000ff0:	20000164 	.word	0x20000164
 8000ff4:	2000001c 	.word	0x2000001c
 8000ff8:	08004d1b 	.word	0x08004d1b
 8000ffc:	004e5553 	.word	0x004e5553
 8001000:	20000000 	.word	0x20000000
 8001004:	08004cb2 	.word	0x08004cb2
 8001008:	08004d2d 	.word	0x08004d2d

0800100c <ST_MENU_Init>:
static uint8_t __max_value[] = {23, 59, 1, 1, 1, 1, 1, 1, 1};
extern char *__setting_type_str[6];

void ST_MENU_Init(){

}
 800100c:	4770      	bx	lr
	...

08001010 <ST_MENU_Set_State>:

void ST_MENU_Set_State(){
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 8001010:	2203      	movs	r2, #3
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <ST_MENU_Set_State+0x20>)
	MENU_Data.changed = 0;
	MENU_Data.is_changing_menu = 1;
	ST_MENU_Data.state = SETTING_ALARM_HOUR;
	FLASH_DATA_t t_timeline = {0, 0, 0, 1};
	ST_MENU_Data.timeline_data = t_timeline;
 8001014:	2101      	movs	r1, #1
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 8001016:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101c:	811a      	strh	r2, [r3, #8]
	ST_MENU_Data.state = SETTING_ALARM_HOUR;
 800101e:	2200      	movs	r2, #0
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <ST_MENU_Set_State+0x24>)
 8001022:	701a      	strb	r2, [r3, #0]
	ST_MENU_Data.timeline_data = t_timeline;
 8001024:	705a      	strb	r2, [r3, #1]
 8001026:	709a      	strb	r2, [r3, #2]
 8001028:	70da      	strb	r2, [r3, #3]
 800102a:	7119      	strb	r1, [r3, #4]
	ST_MENU_Data.current_day_state = 0;
 800102c:	715a      	strb	r2, [r3, #5]
}
 800102e:	4770      	bx	lr
 8001030:	20000150 	.word	0x20000150
 8001034:	2000016b 	.word	0x2000016b

08001038 <ST_MENU_Change_Setting_State>:

void ST_MENU_Change_Setting_State(uint8_t p_is_increase){
 8001038:	4602      	mov	r2, r0
	int8_t *t_value = (int8_t *)(&ST_MENU_Data.state);
	*t_value += ((p_is_increase == INCREASE) ? 1 : -1);
 800103a:	2a01      	cmp	r2, #1
 800103c:	bf18      	it	ne
 800103e:	22ff      	movne	r2, #255	; 0xff
void ST_MENU_Change_Setting_State(uint8_t p_is_increase){
 8001040:	b508      	push	{r3, lr}
	*t_value += ((p_is_increase == INCREASE) ? 1 : -1);
 8001042:	480e      	ldr	r0, [pc, #56]	; (800107c <ST_MENU_Change_Setting_State+0x44>)
 8001044:	7803      	ldrb	r3, [r0, #0]
 8001046:	4413      	add	r3, r2
 8001048:	b25b      	sxtb	r3, r3
	if(*t_value > CHECKING_ALARM_AGAIN){
 800104a:	2b09      	cmp	r3, #9
	*t_value += ((p_is_increase == INCREASE) ? 1 : -1);
 800104c:	7003      	strb	r3, [r0, #0]
	if(*t_value > CHECKING_ALARM_AGAIN){
 800104e:	dd08      	ble.n	8001062 <ST_MENU_Change_Setting_State+0x2a>
		*t_value = CHECKING_ALARM_AGAIN;
 8001050:	2309      	movs	r3, #9
 8001052:	f800 3b01 	strb.w	r3, [r0], #1
		TIMELINE_Add(&ST_MENU_Data.timeline_data);
 8001056:	f7ff fcb3 	bl	80009c0 <TIMELINE_Add>
		}
		ST_MENU_Data.current_day_state = 0;
		MENU_Data.menu_type = SETTING_TIMELINE_MENU;
		MENU_Data.changed = 0;
	}
}
 800105a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			TL_MENU_Set_State();
 800105e:	f000 b8bf 	b.w	80011e0 <TL_MENU_Set_State>
		if(*t_value < 0){
 8001062:	2b00      	cmp	r3, #0
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	da01      	bge.n	800106e <ST_MENU_Change_Setting_State+0x36>
			*t_value = 0;
 800106a:	7003      	strb	r3, [r0, #0]
 800106c:	e7f5      	b.n	800105a <ST_MENU_Change_Setting_State+0x22>
		MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 800106e:	2103      	movs	r1, #3
 8001070:	4a03      	ldr	r2, [pc, #12]	; (8001080 <ST_MENU_Change_Setting_State+0x48>)
		ST_MENU_Data.current_day_state = 0;
 8001072:	7143      	strb	r3, [r0, #5]
		MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 8001074:	7011      	strb	r1, [r2, #0]
		MENU_Data.changed = 0;
 8001076:	7213      	strb	r3, [r2, #8]
}
 8001078:	bd08      	pop	{r3, pc}
 800107a:	bf00      	nop
 800107c:	2000016b 	.word	0x2000016b
 8001080:	20000150 	.word	0x20000150

08001084 <ST_MENU_Set_Value>:

void ST_MENU_Set_Value(uint8_t p_is_increase){
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 8001084:	2203      	movs	r2, #3
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <ST_MENU_Set_Value+0x64>)
void ST_MENU_Set_Value(uint8_t p_is_increase){
 8001088:	b510      	push	{r4, lr}
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 800108a:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 800108c:	2200      	movs	r2, #0
 800108e:	721a      	strb	r2, [r3, #8]
	if(ST_MENU_Data.state < CHECKING_ALARM_AGAIN){
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <ST_MENU_Set_Value+0x68>)
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	2a08      	cmp	r2, #8
 8001096:	d823      	bhi.n	80010e0 <ST_MENU_Set_Value+0x5c>
		int8_t *t_data_ptr;
		if(ST_MENU_Data.state >= SETTING_ALARM_SUNDAY){
 8001098:	2a01      	cmp	r2, #1
			t_data_ptr = (int8_t *)(&ST_MENU_Data.current_day_state);
		} else{
			t_data_ptr = (int8_t *)(&ST_MENU_Data.timeline_data) + ST_MENU_Data.state;
 800109a:	bf9a      	itte	ls
 800109c:	1c59      	addls	r1, r3, #1
 800109e:	1852      	addls	r2, r2, r1
			t_data_ptr = (int8_t *)(&ST_MENU_Data.current_day_state);
 80010a0:	1d5a      	addhi	r2, r3, #5
		}
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 80010a2:	2801      	cmp	r0, #1
 80010a4:	bf18      	it	ne
 80010a6:	20ff      	movne	r0, #255	; 0xff
 80010a8:	7811      	ldrb	r1, [r2, #0]
		if(*t_data_ptr > __max_value[ST_MENU_Data.state]){
 80010aa:	4c11      	ldr	r4, [pc, #68]	; (80010f0 <ST_MENU_Set_Value+0x6c>)
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 80010ac:	4408      	add	r0, r1
 80010ae:	b240      	sxtb	r0, r0
 80010b0:	7010      	strb	r0, [r2, #0]
		if(*t_data_ptr > __max_value[ST_MENU_Data.state]){
 80010b2:	7819      	ldrb	r1, [r3, #0]
 80010b4:	5c61      	ldrb	r1, [r4, r1]
 80010b6:	4288      	cmp	r0, r1
 80010b8:	dd02      	ble.n	80010c0 <ST_MENU_Set_Value+0x3c>
			*t_data_ptr = 0;
 80010ba:	2100      	movs	r1, #0
		} else if(*t_data_ptr < 0){
			*t_data_ptr = __max_value[ST_MENU_Data.state];
 80010bc:	7011      	strb	r1, [r2, #0]
 80010be:	e001      	b.n	80010c4 <ST_MENU_Set_Value+0x40>
		} else if(*t_data_ptr < 0){
 80010c0:	2800      	cmp	r0, #0
 80010c2:	dbfb      	blt.n	80010bc <ST_MENU_Set_Value+0x38>
		}
		if(ST_MENU_Data.state >= SETTING_ALARM_SUNDAY){
 80010c4:	7818      	ldrb	r0, [r3, #0]
 80010c6:	2801      	cmp	r0, #1
 80010c8:	d90a      	bls.n	80010e0 <ST_MENU_Set_Value+0x5c>
			if(*t_data_ptr){
				ST_MENU_Data.timeline_data.day |= (0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 80010ca:	1e84      	subs	r4, r0, #2
 80010cc:	2001      	movs	r0, #1
			if(*t_data_ptr){
 80010ce:	f992 2000 	ldrsb.w	r2, [r2]
				ST_MENU_Data.timeline_data.day |= (0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 80010d2:	40a0      	lsls	r0, r4
 80010d4:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80010d8:	b240      	sxtb	r0, r0
			if(*t_data_ptr){
 80010da:	b112      	cbz	r2, 80010e2 <ST_MENU_Set_Value+0x5e>
				ST_MENU_Data.timeline_data.day |= (0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 80010dc:	4301      	orrs	r1, r0
			} else{
				ST_MENU_Data.timeline_data.day &= ~(0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 80010de:	70d9      	strb	r1, [r3, #3]
			}
		}
	}
}
 80010e0:	bd10      	pop	{r4, pc}
				ST_MENU_Data.timeline_data.day &= ~(0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 80010e2:	ea21 0100 	bic.w	r1, r1, r0
 80010e6:	e7fa      	b.n	80010de <ST_MENU_Set_Value+0x5a>
 80010e8:	20000150 	.word	0x20000150
 80010ec:	2000016b 	.word	0x2000016b
 80010f0:	08004d98 	.word	0x08004d98

080010f4 <ST_MENU_Display>:

void ST_MENU_Display(){
 80010f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(MENU_Data.is_changing_menu){
 80010f6:	4c2d      	ldr	r4, [pc, #180]	; (80011ac <ST_MENU_Display+0xb8>)
 80010f8:	7a63      	ldrb	r3, [r4, #9]
 80010fa:	b123      	cbz	r3, 8001106 <ST_MENU_Display+0x12>
		LCD_Clear(MENU_Data.hlcd);
 80010fc:	6860      	ldr	r0, [r4, #4]
 80010fe:	f002 ff8f 	bl	8004020 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	7263      	strb	r3, [r4, #9]
	}

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 1);
	LCD_Write(MENU_Data.hlcd, "Time: %02d:%02d", ST_MENU_Data.timeline_data.hour, ST_MENU_Data.timeline_data.minute);
 8001106:	4d2a      	ldr	r5, [pc, #168]	; (80011b0 <ST_MENU_Display+0xbc>)
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	2100      	movs	r1, #0
 800110c:	6860      	ldr	r0, [r4, #4]
 800110e:	f002 ff6f 	bl	8003ff0 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Time: %02d:%02d", ST_MENU_Data.timeline_data.hour, ST_MENU_Data.timeline_data.minute);
 8001112:	78ab      	ldrb	r3, [r5, #2]
 8001114:	786a      	ldrb	r2, [r5, #1]
 8001116:	4927      	ldr	r1, [pc, #156]	; (80011b4 <ST_MENU_Display+0xc0>)
 8001118:	6860      	ldr	r0, [r4, #4]
 800111a:	f002 ffe7 	bl	80040ec <LCD_Write>

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 2);
 800111e:	2202      	movs	r2, #2
 8001120:	2100      	movs	r1, #0
 8001122:	6860      	ldr	r0, [r4, #4]
 8001124:	f002 ff64 	bl	8003ff0 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Day: C234567");
 8001128:	4923      	ldr	r1, [pc, #140]	; (80011b8 <ST_MENU_Display+0xc4>)
 800112a:	6860      	ldr	r0, [r4, #4]
 800112c:	f002 ffde 	bl	80040ec <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 5, 3);
 8001130:	2203      	movs	r2, #3
 8001132:	2105      	movs	r1, #5
 8001134:	6860      	ldr	r0, [r4, #4]
 8001136:	f002 ff5b 	bl	8003ff0 <LCD_Set_Cursor>
	for(int i = 0; i < 7; i++){
 800113a:	2600      	movs	r6, #0
		uint8_t t_day_value = ST_MENU_Data.timeline_data.day & (1 << i);
 800113c:	2701      	movs	r7, #1
 800113e:	78ea      	ldrb	r2, [r5, #3]
 8001140:	fa07 f306 	lsl.w	r3, r7, r6
		if(t_day_value){
 8001144:	421a      	tst	r2, r3
			LCD_Send_Data(MENU_Data.hlcd, 0x00);
 8001146:	bf14      	ite	ne
 8001148:	2100      	movne	r1, #0
		} else{
			LCD_Send_Data(MENU_Data.hlcd, 0xFE);
 800114a:	21fe      	moveq	r1, #254	; 0xfe
			LCD_Send_Data(MENU_Data.hlcd, 0x00);
 800114c:	6860      	ldr	r0, [r4, #4]
	for(int i = 0; i < 7; i++){
 800114e:	3601      	adds	r6, #1
			LCD_Send_Data(MENU_Data.hlcd, 0xFE);
 8001150:	f002 ff86 	bl	8004060 <LCD_Send_Data>
	for(int i = 0; i < 7; i++){
 8001154:	2e07      	cmp	r6, #7
 8001156:	d1f2      	bne.n	800113e <ST_MENU_Display+0x4a>
		}
	}

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	6860      	ldr	r0, [r4, #4]
 800115c:	4611      	mov	r1, r2
 800115e:	f002 ff47 	bl	8003ff0 <LCD_Set_Cursor>
	if(ST_MENU_Data.state < SETTING_ALARM_SUNDAY){
 8001162:	782b      	ldrb	r3, [r5, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d80b      	bhi.n	8001180 <ST_MENU_Display+0x8c>
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[ST_MENU_Data.state]);
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <ST_MENU_Display+0xc8>)
 800116a:	4915      	ldr	r1, [pc, #84]	; (80011c0 <ST_MENU_Display+0xcc>)
 800116c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001170:	6860      	ldr	r0, [r4, #4]
 8001172:	f002 ffbb 	bl	80040ec <LCD_Write>
		LCD_Write(MENU_Data.hlcd, "  Setting : DAY   ");
		LCD_Cursor_Blink(MENU_Data.hlcd);
		LCD_Set_Cursor(MENU_Data.hlcd, 5 + ST_MENU_Data.state - SETTING_ALARM_SUNDAY, 2);
	} else{
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
		LCD_Cursor_No_Blink(MENU_Data.hlcd);
 8001176:	6860      	ldr	r0, [r4, #4]
	}
}
 8001178:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LCD_Cursor_No_Blink(MENU_Data.hlcd);
 800117c:	f002 bf68 	b.w	8004050 <LCD_Cursor_No_Blink>
	} else if(ST_MENU_Data.state < CHECKING_ALARM_AGAIN){
 8001180:	2b08      	cmp	r3, #8
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[ST_MENU_Data.state]);
 8001182:	6860      	ldr	r0, [r4, #4]
	} else if(ST_MENU_Data.state < CHECKING_ALARM_AGAIN){
 8001184:	d80e      	bhi.n	80011a4 <ST_MENU_Display+0xb0>
		LCD_Write(MENU_Data.hlcd, "  Setting : DAY   ");
 8001186:	490f      	ldr	r1, [pc, #60]	; (80011c4 <ST_MENU_Display+0xd0>)
 8001188:	f002 ffb0 	bl	80040ec <LCD_Write>
		LCD_Cursor_Blink(MENU_Data.hlcd);
 800118c:	6860      	ldr	r0, [r4, #4]
 800118e:	f002 ff57 	bl	8004040 <LCD_Cursor_Blink>
		LCD_Set_Cursor(MENU_Data.hlcd, 5 + ST_MENU_Data.state - SETTING_ALARM_SUNDAY, 2);
 8001192:	7829      	ldrb	r1, [r5, #0]
 8001194:	6860      	ldr	r0, [r4, #4]
 8001196:	3103      	adds	r1, #3
 8001198:	2202      	movs	r2, #2
}
 800119a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LCD_Set_Cursor(MENU_Data.hlcd, 5 + ST_MENU_Data.state - SETTING_ALARM_SUNDAY, 2);
 800119e:	b2c9      	uxtb	r1, r1
 80011a0:	f002 bf26 	b.w	8003ff0 <LCD_Set_Cursor>
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
 80011a4:	4908      	ldr	r1, [pc, #32]	; (80011c8 <ST_MENU_Display+0xd4>)
 80011a6:	f002 ffa1 	bl	80040ec <LCD_Write>
 80011aa:	e7e4      	b.n	8001176 <ST_MENU_Display+0x82>
 80011ac:	20000150 	.word	0x20000150
 80011b0:	2000016b 	.word	0x2000016b
 80011b4:	08004d68 	.word	0x08004d68
 80011b8:	08004d78 	.word	0x08004d78
 80011bc:	2000001c 	.word	0x2000001c
 80011c0:	08004d1b 	.word	0x08004d1b
 80011c4:	08004d85 	.word	0x08004d85
 80011c8:	08004d2d 	.word	0x08004d2d

080011cc <TL_MENU_Init>:
		}
	}
}

void TL_MENU_Init(){
	TL_MENU_Data.first_line = 0;
 80011cc:	2200      	movs	r2, #0
 80011ce:	4b03      	ldr	r3, [pc, #12]	; (80011dc <TL_MENU_Init+0x10>)
 80011d0:	701a      	strb	r2, [r3, #0]
	TL_MENU_Data.numer_of_choices = 0;
 80011d2:	705a      	strb	r2, [r3, #1]
	TL_MENU_Data.current_pointer = 0;
 80011d4:	709a      	strb	r2, [r3, #2]
	TL_MENU_Data.woking_state = NORMAL_STATE;
 80011d6:	70da      	strb	r2, [r3, #3]
	TIMELINE_Init();
 80011d8:	f7ff bb7c 	b.w	80008d4 <TIMELINE_Init>
 80011dc:	20000171 	.word	0x20000171

080011e0 <TL_MENU_Set_State>:
//		}
//	}
}

void TL_MENU_Set_State(){
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 80011e0:	2202      	movs	r2, #2
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <TL_MENU_Set_State+0x24>)
	MENU_Data.changed = 0;
	MENU_Data.is_changing_menu = 1;
	TL_MENU_Data.first_line = 0;
	TL_MENU_Data.current_pointer = 0;
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 80011e4:	4908      	ldr	r1, [pc, #32]	; (8001208 <TL_MENU_Set_State+0x28>)
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 80011e6:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80011e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ec:	811a      	strh	r2, [r3, #8]
	TL_MENU_Data.first_line = 0;
 80011ee:	2200      	movs	r2, #0
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 80011f0:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
	TL_MENU_Data.first_line = 0;
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <TL_MENU_Set_State+0x2c>)
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 80011f6:	3101      	adds	r1, #1
	TL_MENU_Data.first_line = 0;
 80011f8:	701a      	strb	r2, [r3, #0]
	TL_MENU_Data.current_pointer = 0;
 80011fa:	709a      	strb	r2, [r3, #2]
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 80011fc:	7059      	strb	r1, [r3, #1]
	TL_MENU_Data.woking_state = NORMAL_STATE;
 80011fe:	70da      	strb	r2, [r3, #3]
}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000150 	.word	0x20000150
 8001208:	200000fc 	.word	0x200000fc
 800120c:	20000171 	.word	0x20000171

08001210 <TL_MENU_Change_Working_State>:

void TL_MENU_Change_Working_State(){
 8001210:	b510      	push	{r4, lr}
	if(TL_MENU_Data.current_pointer == 0) return;
 8001212:	4c1a      	ldr	r4, [pc, #104]	; (800127c <TL_MENU_Change_Working_State+0x6c>)
 8001214:	f994 2002 	ldrsb.w	r2, [r4, #2]
 8001218:	b16a      	cbz	r2, 8001236 <TL_MENU_Change_Working_State+0x26>
	if(TL_MENU_Data.woking_state == NORMAL_STATE){
 800121a:	78e3      	ldrb	r3, [r4, #3]
 800121c:	b963      	cbnz	r3, 8001238 <TL_MENU_Change_Working_State+0x28>
		TL_MENU_Data.woking_state = CONFIG_TIMELINE_STATE;
 800121e:	2301      	movs	r3, #1
 8001220:	70e3      	strb	r3, [r4, #3]
		TL_MENU_Data.timeline_state = TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state;
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <TL_MENU_Change_Working_State+0x70>)
 8001224:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001228:	78db      	ldrb	r3, [r3, #3]
 800122a:	7123      	strb	r3, [r4, #4]
		} else{
			TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state = TL_MENU_Data.timeline_state;
			TIMELINE_Store_To_Flash();
		}
	}
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 800122c:	2202      	movs	r2, #2
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <TL_MENU_Change_Working_State+0x74>)
 8001230:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001232:	2200      	movs	r2, #0
 8001234:	721a      	strb	r2, [r3, #8]
}
 8001236:	bd10      	pop	{r4, pc}
		TL_MENU_Data.woking_state = NORMAL_STATE;
 8001238:	2300      	movs	r3, #0
 800123a:	70e3      	strb	r3, [r4, #3]
		if(TL_MENU_Data.timeline_state == DELETE_TIMELINE && !ALARM_Is_Buzzer_Running()){
 800123c:	7923      	ldrb	r3, [r4, #4]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d112      	bne.n	8001268 <TL_MENU_Change_Working_State+0x58>
 8001242:	f7ff fa63 	bl	800070c <ALARM_Is_Buzzer_Running>
 8001246:	b978      	cbnz	r0, 8001268 <TL_MENU_Change_Working_State+0x58>
			TIMELINE_Delete(TL_MENU_Data.current_pointer - 1);
 8001248:	78a0      	ldrb	r0, [r4, #2]
 800124a:	3801      	subs	r0, #1
 800124c:	b2c0      	uxtb	r0, r0
 800124e:	f7ff fbcd 	bl	80009ec <TIMELINE_Delete>
			TL_MENU_Data.numer_of_choices--;
 8001252:	7863      	ldrb	r3, [r4, #1]
			if(TL_MENU_Data.current_pointer > TL_MENU_Data.numer_of_choices - 1){
 8001254:	f994 1002 	ldrsb.w	r1, [r4, #2]
			TL_MENU_Data.numer_of_choices--;
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	b2d2      	uxtb	r2, r2
			if(TL_MENU_Data.current_pointer > TL_MENU_Data.numer_of_choices - 1){
 800125c:	428a      	cmp	r2, r1
			TL_MENU_Data.numer_of_choices--;
 800125e:	7062      	strb	r2, [r4, #1]
			if(TL_MENU_Data.current_pointer > TL_MENU_Data.numer_of_choices - 1){
 8001260:	dce4      	bgt.n	800122c <TL_MENU_Change_Working_State+0x1c>
				TL_MENU_Data.current_pointer = TL_MENU_Data.numer_of_choices - 1;
 8001262:	3b02      	subs	r3, #2
 8001264:	70a3      	strb	r3, [r4, #2]
 8001266:	e7e1      	b.n	800122c <TL_MENU_Change_Working_State+0x1c>
			TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state = TL_MENU_Data.timeline_state;
 8001268:	f994 2002 	ldrsb.w	r2, [r4, #2]
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <TL_MENU_Change_Working_State+0x70>)
 800126e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001272:	7922      	ldrb	r2, [r4, #4]
 8001274:	70da      	strb	r2, [r3, #3]
			TIMELINE_Store_To_Flash();
 8001276:	f7ff fb89 	bl	800098c <TIMELINE_Store_To_Flash>
 800127a:	e7d7      	b.n	800122c <TL_MENU_Change_Working_State+0x1c>
 800127c:	20000171 	.word	0x20000171
 8001280:	200000fc 	.word	0x200000fc
 8001284:	20000150 	.word	0x20000150

08001288 <TL_MENU_Change_Pointer>:

void TL_MENU_Change_Pointer(uint8_t p_is_increase){
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 8001288:	2202      	movs	r2, #2
	MENU_Data.changed = 0;
 800128a:	2100      	movs	r1, #0
	TL_MENU_Data.current_pointer += (p_is_increase == INCREASE) ? 1 : -1;
 800128c:	2801      	cmp	r0, #1
 800128e:	bf18      	it	ne
 8001290:	20ff      	movne	r0, #255	; 0xff
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <TL_MENU_Change_Pointer+0x48>)
 8001294:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001296:	7219      	strb	r1, [r3, #8]
	TL_MENU_Data.current_pointer += (p_is_increase == INCREASE) ? 1 : -1;
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <TL_MENU_Change_Pointer+0x4c>)
 800129a:	789a      	ldrb	r2, [r3, #2]
 800129c:	4410      	add	r0, r2
 800129e:	b240      	sxtb	r0, r0
	if(TL_MENU_Data.current_pointer < 0){
 80012a0:	4288      	cmp	r0, r1
	TL_MENU_Data.current_pointer += (p_is_increase == INCREASE) ? 1 : -1;
 80012a2:	7098      	strb	r0, [r3, #2]
	if(TL_MENU_Data.current_pointer < 0){
 80012a4:	da09      	bge.n	80012ba <TL_MENU_Change_Pointer+0x32>
		TL_MENU_Data.current_pointer = 0;
 80012a6:	7099      	strb	r1, [r3, #2]
	} else if(TL_MENU_Data.current_pointer >= TL_MENU_Data.numer_of_choices){
		TL_MENU_Data.current_pointer = TL_MENU_Data.numer_of_choices - 1;
	}

	if(TL_MENU_Data.current_pointer > TL_MENU_Data.first_line + 3){
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80012ae:	1cd0      	adds	r0, r2, #3
 80012b0:	4281      	cmp	r1, r0
 80012b2:	dd09      	ble.n	80012c8 <TL_MENU_Change_Pointer+0x40>
		TL_MENU_Data.first_line++;
 80012b4:	3201      	adds	r2, #1
	} else if(TL_MENU_Data.current_pointer < TL_MENU_Data.first_line){
		TL_MENU_Data.first_line--;
 80012b6:	701a      	strb	r2, [r3, #0]
	}
}
 80012b8:	4770      	bx	lr
	} else if(TL_MENU_Data.current_pointer >= TL_MENU_Data.numer_of_choices){
 80012ba:	785a      	ldrb	r2, [r3, #1]
 80012bc:	4290      	cmp	r0, r2
		TL_MENU_Data.current_pointer = TL_MENU_Data.numer_of_choices - 1;
 80012be:	bfa4      	itt	ge
 80012c0:	f102 32ff 	addge.w	r2, r2, #4294967295
 80012c4:	709a      	strbge	r2, [r3, #2]
 80012c6:	e7ef      	b.n	80012a8 <TL_MENU_Change_Pointer+0x20>
	} else if(TL_MENU_Data.current_pointer < TL_MENU_Data.first_line){
 80012c8:	4291      	cmp	r1, r2
 80012ca:	daf5      	bge.n	80012b8 <TL_MENU_Change_Pointer+0x30>
		TL_MENU_Data.first_line--;
 80012cc:	3a01      	subs	r2, #1
 80012ce:	e7f2      	b.n	80012b6 <TL_MENU_Change_Pointer+0x2e>
 80012d0:	20000150 	.word	0x20000150
 80012d4:	20000171 	.word	0x20000171

080012d8 <TL_MENU_Config_Timeline>:

void TL_MENU_Config_Timeline(uint8_t p_is_increase){
 80012d8:	b510      	push	{r4, lr}
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
	MENU_Data.changed = 0;
 80012da:	2100      	movs	r1, #0
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 80012dc:	2402      	movs	r4, #2

	TL_MENU_Data.timeline_state += (p_is_increase == INCREASE) ? 1 : -1;
 80012de:	2801      	cmp	r0, #1
 80012e0:	bf18      	it	ne
 80012e2:	20ff      	movne	r0, #255	; 0xff
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <TL_MENU_Config_Timeline+0x2c>)
 80012e6:	701c      	strb	r4, [r3, #0]
	MENU_Data.changed = 0;
 80012e8:	7219      	strb	r1, [r3, #8]
	TL_MENU_Data.timeline_state += (p_is_increase == INCREASE) ? 1 : -1;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <TL_MENU_Config_Timeline+0x30>)
 80012ec:	791a      	ldrb	r2, [r3, #4]
 80012ee:	4410      	add	r0, r2
 80012f0:	b2c2      	uxtb	r2, r0
	if((int8_t)TL_MENU_Data.timeline_state < 0){
 80012f2:	0600      	lsls	r0, r0, #24
 80012f4:	d501      	bpl.n	80012fa <TL_MENU_Config_Timeline+0x22>
		TL_MENU_Data.timeline_state = 2;
 80012f6:	711c      	strb	r4, [r3, #4]
	} else if(TL_MENU_Data.timeline_state > 2){
		TL_MENU_Data.timeline_state = 0;
	}
}
 80012f8:	bd10      	pop	{r4, pc}
	} else if(TL_MENU_Data.timeline_state > 2){
 80012fa:	2a02      	cmp	r2, #2
	TL_MENU_Data.timeline_state += (p_is_increase == INCREASE) ? 1 : -1;
 80012fc:	bf94      	ite	ls
 80012fe:	711a      	strbls	r2, [r3, #4]
		TL_MENU_Data.timeline_state = 0;
 8001300:	7119      	strbhi	r1, [r3, #4]
}
 8001302:	e7f9      	b.n	80012f8 <TL_MENU_Config_Timeline+0x20>
 8001304:	20000150 	.word	0x20000150
 8001308:	20000171 	.word	0x20000171

0800130c <TL_MENU_Display>:

void TL_MENU_Display(){
 800130c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(MENU_Data.is_changing_menu == 1){
 8001310:	4c46      	ldr	r4, [pc, #280]	; (800142c <TL_MENU_Display+0x120>)
void TL_MENU_Display(){
 8001312:	b087      	sub	sp, #28
	if(MENU_Data.is_changing_menu == 1){
 8001314:	7a63      	ldrb	r3, [r4, #9]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d104      	bne.n	8001324 <TL_MENU_Display+0x18>
		LCD_Clear(MENU_Data.hlcd);
 800131a:	6860      	ldr	r0, [r4, #4]
 800131c:	f002 fe80 	bl	8004020 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	7263      	strb	r3, [r4, #9]
void TL_MENU_Display(){
 8001324:	2600      	movs	r6, #0
	}
	for(int i = 0; i < 4; i++){
		uint8_t t_index = TL_MENU_Data.first_line + i;
 8001326:	4f42      	ldr	r7, [pc, #264]	; (8001430 <TL_MENU_Display+0x124>)
		LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
		if(t_index == 0){
			LCD_Write(MENU_Data.hlcd, " Add...             ");
		} else if(t_index - 1 < TIMELINE_Data.len){
 8001328:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8001434 <TL_MENU_Display+0x128>
		uint8_t t_index = TL_MENU_Data.first_line + i;
 800132c:	783d      	ldrb	r5, [r7, #0]
 800132e:	fa5f f886 	uxtb.w	r8, r6
 8001332:	4445      	add	r5, r8
 8001334:	b2ed      	uxtb	r5, r5
		LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 8001336:	4642      	mov	r2, r8
 8001338:	2100      	movs	r1, #0
 800133a:	6860      	ldr	r0, [r4, #4]
 800133c:	f002 fe58 	bl	8003ff0 <LCD_Set_Cursor>
		if(t_index == 0){
 8001340:	b925      	cbnz	r5, 800134c <TL_MENU_Display+0x40>
			LCD_Write(MENU_Data.hlcd, " Add...             ");
 8001342:	493d      	ldr	r1, [pc, #244]	; (8001438 <TL_MENU_Display+0x12c>)
 8001344:	6860      	ldr	r0, [r4, #4]
			char day_str[8] = {};
			__create_day_string(day_str, TIMELINE_Data.flash_data[t_index - 1].day);
			LCD_Write(MENU_Data.hlcd, " %02d:%02d %7s  %s ", TIMELINE_Data.flash_data[t_index - 1].hour, TIMELINE_Data.flash_data[t_index - 1].minute,
					day_str, (TIMELINE_Data.flash_data[t_index - 1].timeline_state == TIMELINE_ON) ? " ON" : "OFF");
		} else{
			LCD_Write(MENU_Data.hlcd, "                    ");
 8001346:	f002 fed1 	bl	80040ec <LCD_Write>
 800134a:	e03f      	b.n	80013cc <TL_MENU_Display+0xc0>
			LCD_Write(MENU_Data.hlcd, " Add...             ");
 800134c:	6863      	ldr	r3, [r4, #4]
 800134e:	9302      	str	r3, [sp, #8]
		} else if(t_index - 1 < TIMELINE_Data.len){
 8001350:	f899 303c 	ldrb.w	r3, [r9, #60]	; 0x3c
 8001354:	42ab      	cmp	r3, r5
 8001356:	d34d      	bcc.n	80013f4 <TL_MENU_Display+0xe8>
			char day_str[8] = {};
 8001358:	2300      	movs	r3, #0
			__create_day_string(day_str, TIMELINE_Data.flash_data[t_index - 1].day);
 800135a:	1e6a      	subs	r2, r5, #1
 800135c:	0091      	lsls	r1, r2, #2
 800135e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8001362:	7992      	ldrb	r2, [r2, #6]
		uint8_t t_day_value = day & (1 << i);
 8001364:	f04f 0e01 	mov.w	lr, #1
			__create_day_string(day_str, TIMELINE_Data.flash_data[t_index - 1].day);
 8001368:	4610      	mov	r0, r2
				str[t_num_of_day++] = 'C';
 800136a:	f04f 0a43 	mov.w	sl, #67	; 0x43
	for(int i = 0; i < 7; i++){
 800136e:	461a      	mov	r2, r3
			char day_str[8] = {};
 8001370:	e9cd 3304 	strd	r3, r3, [sp, #16]
			__create_day_string(day_str, TIMELINE_Data.flash_data[t_index - 1].day);
 8001374:	9103      	str	r1, [sp, #12]
				str[t_num_of_day++] = 'C';
 8001376:	f10d 0c10 	add.w	ip, sp, #16
		uint8_t t_day_value = day & (1 << i);
 800137a:	fa0e f102 	lsl.w	r1, lr, r2
 800137e:	4001      	ands	r1, r0
 8001380:	fa4f fb81 	sxtb.w	fp, r1
		if(t_day_value){
 8001384:	b161      	cbz	r1, 80013a0 <TL_MENU_Display+0x94>
			if(t_day_value == 1){
 8001386:	f1bb 0f01 	cmp.w	fp, #1
				str[t_num_of_day++] = 'C';
 800138a:	f103 0101 	add.w	r1, r3, #1
 800138e:	b2c9      	uxtb	r1, r1
				str[t_num_of_day++] = '1' + i;
 8001390:	bf16      	itet	ne
 8001392:	f102 0b31 	addne.w	fp, r2, #49	; 0x31
				str[t_num_of_day++] = 'C';
 8001396:	f80c a003 	strbeq.w	sl, [ip, r3]
				str[t_num_of_day++] = '1' + i;
 800139a:	f80c b003 	strbne.w	fp, [ip, r3]
 800139e:	460b      	mov	r3, r1
	for(int i = 0; i < 7; i++){
 80013a0:	3201      	adds	r2, #1
 80013a2:	2a07      	cmp	r2, #7
 80013a4:	d1e9      	bne.n	800137a <TL_MENU_Display+0x6e>
			LCD_Write(MENU_Data.hlcd, " %02d:%02d %7s  %s ", TIMELINE_Data.flash_data[t_index - 1].hour, TIMELINE_Data.flash_data[t_index - 1].minute,
 80013a6:	9a03      	ldr	r2, [sp, #12]
 80013a8:	4924      	ldr	r1, [pc, #144]	; (800143c <TL_MENU_Display+0x130>)
 80013aa:	444a      	add	r2, r9
 80013ac:	f892 c007 	ldrb.w	ip, [r2, #7]
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <TL_MENU_Display+0x134>)
 80013b2:	9802      	ldr	r0, [sp, #8]
 80013b4:	f1bc 0f01 	cmp.w	ip, #1
 80013b8:	bf18      	it	ne
 80013ba:	460b      	movne	r3, r1
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	ab04      	add	r3, sp, #16
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	7953      	ldrb	r3, [r2, #5]
 80013c4:	491f      	ldr	r1, [pc, #124]	; (8001444 <TL_MENU_Display+0x138>)
 80013c6:	7912      	ldrb	r2, [r2, #4]
 80013c8:	f002 fe90 	bl	80040ec <LCD_Write>
		}
		if(TL_MENU_Data.current_pointer == t_index){
 80013cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80013d0:	42ab      	cmp	r3, r5
 80013d2:	d109      	bne.n	80013e8 <TL_MENU_Display+0xdc>
			if(TL_MENU_Data.woking_state == NORMAL_STATE){
 80013d4:	78f9      	ldrb	r1, [r7, #3]
				LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 80013d6:	4642      	mov	r2, r8
 80013d8:	6860      	ldr	r0, [r4, #4]
			if(TL_MENU_Data.woking_state == NORMAL_STATE){
 80013da:	b971      	cbnz	r1, 80013fa <TL_MENU_Display+0xee>
				LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 80013dc:	f002 fe08 	bl	8003ff0 <LCD_Set_Cursor>
				LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 80013e0:	217e      	movs	r1, #126	; 0x7e
				} else if(TL_MENU_Data.timeline_state == TURN_ON_TIMELINE){
					LCD_Write(MENU_Data.hlcd, " ON");
				} else if(TL_MENU_Data.timeline_state == DELETE_TIMELINE){
					LCD_Write(MENU_Data.hlcd, "DEL");
				}
				LCD_Send_Data(MENU_Data.hlcd, 0x7F);
 80013e2:	6860      	ldr	r0, [r4, #4]
 80013e4:	f002 fe3c 	bl	8004060 <LCD_Send_Data>
	for(int i = 0; i < 4; i++){
 80013e8:	3601      	adds	r6, #1
 80013ea:	2e04      	cmp	r6, #4
 80013ec:	d19e      	bne.n	800132c <TL_MENU_Display+0x20>
			}
		}
	}
}
 80013ee:	b007      	add	sp, #28
 80013f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LCD_Write(MENU_Data.hlcd, "                    ");
 80013f4:	4914      	ldr	r1, [pc, #80]	; (8001448 <TL_MENU_Display+0x13c>)
 80013f6:	9802      	ldr	r0, [sp, #8]
 80013f8:	e7a5      	b.n	8001346 <TL_MENU_Display+0x3a>
				LCD_Set_Cursor(MENU_Data.hlcd, 15, i);
 80013fa:	210f      	movs	r1, #15
 80013fc:	f002 fdf8 	bl	8003ff0 <LCD_Set_Cursor>
				LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 8001400:	217e      	movs	r1, #126	; 0x7e
 8001402:	6860      	ldr	r0, [r4, #4]
 8001404:	f002 fe2c 	bl	8004060 <LCD_Send_Data>
				if(TL_MENU_Data.timeline_state == TURN_OFF_TIMELINE){
 8001408:	793b      	ldrb	r3, [r7, #4]
 800140a:	b92b      	cbnz	r3, 8001418 <TL_MENU_Display+0x10c>
					LCD_Write(MENU_Data.hlcd, "OFF");
 800140c:	490b      	ldr	r1, [pc, #44]	; (800143c <TL_MENU_Display+0x130>)
 800140e:	6860      	ldr	r0, [r4, #4]
					LCD_Write(MENU_Data.hlcd, "DEL");
 8001410:	f002 fe6c 	bl	80040ec <LCD_Write>
				LCD_Send_Data(MENU_Data.hlcd, 0x7F);
 8001414:	217f      	movs	r1, #127	; 0x7f
 8001416:	e7e4      	b.n	80013e2 <TL_MENU_Display+0xd6>
				} else if(TL_MENU_Data.timeline_state == TURN_ON_TIMELINE){
 8001418:	2b01      	cmp	r3, #1
					LCD_Write(MENU_Data.hlcd, "OFF");
 800141a:	6860      	ldr	r0, [r4, #4]
				} else if(TL_MENU_Data.timeline_state == TURN_ON_TIMELINE){
 800141c:	d101      	bne.n	8001422 <TL_MENU_Display+0x116>
					LCD_Write(MENU_Data.hlcd, " ON");
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <TL_MENU_Display+0x134>)
 8001420:	e7f6      	b.n	8001410 <TL_MENU_Display+0x104>
				} else if(TL_MENU_Data.timeline_state == DELETE_TIMELINE){
 8001422:	2b02      	cmp	r3, #2
 8001424:	d1f6      	bne.n	8001414 <TL_MENU_Display+0x108>
					LCD_Write(MENU_Data.hlcd, "DEL");
 8001426:	4909      	ldr	r1, [pc, #36]	; (800144c <TL_MENU_Display+0x140>)
 8001428:	e7f2      	b.n	8001410 <TL_MENU_Display+0x104>
 800142a:	bf00      	nop
 800142c:	20000150 	.word	0x20000150
 8001430:	20000171 	.word	0x20000171
 8001434:	200000fc 	.word	0x200000fc
 8001438:	08004da9 	.word	0x08004da9
 800143c:	08004da5 	.word	0x08004da5
 8001440:	08004da1 	.word	0x08004da1
 8001444:	08004dbe 	.word	0x08004dbe
 8001448:	08004dd2 	.word	0x08004dd2
 800144c:	08004de7 	.word	0x08004de7

08001450 <TEMP_AND_HUM_Handle>:

LCD_I2C_HandleTypeDef hlcd;
DHT_HandleTypeDef hdht;

#define CHECKING_SENSOR_TIME	2000
void TEMP_AND_HUM_Handle(){
 8001450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static uint32_t timer = 0;
	static uint8_t system_temperature = 0;
	static uint8_t system_huminity = 0;
	if(HAL_GetTick() - timer >= CHECKING_SENSOR_TIME){
 8001454:	f000 fc10 	bl	8001c78 <HAL_GetTick>
 8001458:	4e19      	ldr	r6, [pc, #100]	; (80014c0 <TEMP_AND_HUM_Handle+0x70>)
 800145a:	6833      	ldr	r3, [r6, #0]
 800145c:	1ac0      	subs	r0, r0, r3
 800145e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8001462:	d32b      	bcc.n	80014bc <TEMP_AND_HUM_Handle+0x6c>
		HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
		DHT_Read_Value(&hdht);
 8001464:	4c17      	ldr	r4, [pc, #92]	; (80014c4 <TEMP_AND_HUM_Handle+0x74>)
		HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
 8001466:	213c      	movs	r1, #60	; 0x3c
 8001468:	4817      	ldr	r0, [pc, #92]	; (80014c8 <TEMP_AND_HUM_Handle+0x78>)
 800146a:	f002 f8c4 	bl	80035f6 <HAL_TIM_Encoder_Stop_IT>
		DHT_Read_Value(&hdht);
 800146e:	4620      	mov	r0, r4
 8001470:	f002 fb5a 	bl	8003b28 <DHT_Read_Value>
		HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001474:	213c      	movs	r1, #60	; 0x3c
 8001476:	4814      	ldr	r0, [pc, #80]	; (80014c8 <TEMP_AND_HUM_Handle+0x78>)
 8001478:	f002 f84e 	bl	8003518 <HAL_TIM_Encoder_Start_IT>
		if(system_huminity != (uint8_t)hdht.huminity || system_temperature != (uint8_t)hdht.temperature){
 800147c:	6920      	ldr	r0, [r4, #16]
 800147e:	f7ff f879 	bl	8000574 <__aeabi_f2uiz>
 8001482:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80014cc <TEMP_AND_HUM_Handle+0x7c>
 8001486:	b2c5      	uxtb	r5, r0
 8001488:	f898 3000 	ldrb.w	r3, [r8]
 800148c:	4f10      	ldr	r7, [pc, #64]	; (80014d0 <TEMP_AND_HUM_Handle+0x80>)
 800148e:	42ab      	cmp	r3, r5
 8001490:	d106      	bne.n	80014a0 <TEMP_AND_HUM_Handle+0x50>
 8001492:	68e0      	ldr	r0, [r4, #12]
 8001494:	f7ff f86e 	bl	8000574 <__aeabi_f2uiz>
 8001498:	783b      	ldrb	r3, [r7, #0]
 800149a:	b2c0      	uxtb	r0, r0
 800149c:	4298      	cmp	r0, r3
 800149e:	d00a      	beq.n	80014b6 <TEMP_AND_HUM_Handle+0x66>
			system_huminity = hdht.huminity;
			system_temperature = hdht.temperature;
 80014a0:	68e0      	ldr	r0, [r4, #12]
			system_huminity = hdht.huminity;
 80014a2:	f888 5000 	strb.w	r5, [r8]
			system_temperature = hdht.temperature;
 80014a6:	f7ff f865 	bl	8000574 <__aeabi_f2uiz>
			if(MENU_Data.menu_type == MAIN_MENU){
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <TEMP_AND_HUM_Handle+0x84>)
			system_temperature = hdht.temperature;
 80014ac:	7038      	strb	r0, [r7, #0]
			if(MENU_Data.menu_type == MAIN_MENU){
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b90b      	cbnz	r3, 80014b6 <TEMP_AND_HUM_Handle+0x66>
				MAIN_MENU_Update_Value();
 80014b2:	f7ff fc55 	bl	8000d60 <MAIN_MENU_Update_Value>
			}
		}

		timer = HAL_GetTick();
 80014b6:	f000 fbdf 	bl	8001c78 <HAL_GetTick>
 80014ba:	6030      	str	r0, [r6, #0]
	}
}
 80014bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014c0:	20000360 	.word	0x20000360
 80014c4:	200001a8 	.word	0x200001a8
 80014c8:	200002cc 	.word	0x200002cc
 80014cc:	2000035c 	.word	0x2000035c
 80014d0:	2000035d 	.word	0x2000035d
 80014d4:	20000150 	.word	0x20000150

080014d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d8:	b510      	push	{r4, lr}
 80014da:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014dc:	2214      	movs	r2, #20
 80014de:	2100      	movs	r1, #0
 80014e0:	a80c      	add	r0, sp, #48	; 0x30
 80014e2:	f002 ff49 	bl	8004378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e6:	2214      	movs	r2, #20
 80014e8:	2100      	movs	r1, #0
 80014ea:	eb0d 0002 	add.w	r0, sp, r2
 80014ee:	f002 ff43 	bl	8004378 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f2:	2210      	movs	r2, #16
 80014f4:	2100      	movs	r1, #0
 80014f6:	a801      	add	r0, sp, #4
 80014f8:	f002 ff3e 	bl	8004378 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fc:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001502:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001504:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001508:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800150c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001510:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001512:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001514:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001516:	f001 fbaf 	bl	8002c78 <HAL_RCC_OscConfig>
 800151a:	b108      	cbz	r0, 8001520 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800151e:	e7fe      	b.n	800151e <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001520:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001522:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001526:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152c:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001530:	4621      	mov	r1, r4
 8001532:	a805      	add	r0, sp, #20
 8001534:	f001 fd76 	bl	8003024 <HAL_RCC_ClockConfig>
 8001538:	b108      	cbz	r0, 800153e <SystemClock_Config+0x66>
 800153a:	b672      	cpsid	i
  while (1)
 800153c:	e7fe      	b.n	800153c <SystemClock_Config+0x64>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800153e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001542:	2203      	movs	r2, #3
 8001544:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154c:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800154e:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001550:	f001 fe24 	bl	800319c <HAL_RCCEx_PeriphCLKConfig>
 8001554:	b108      	cbz	r0, 800155a <SystemClock_Config+0x82>
 8001556:	b672      	cpsid	i
  while (1)
 8001558:	e7fe      	b.n	8001558 <SystemClock_Config+0x80>
}
 800155a:	b014      	add	sp, #80	; 0x50
 800155c:	bd10      	pop	{r4, pc}
	...

08001560 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f04f 0910 	mov.w	r9, #16
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8001568:	f000 fb68 	bl	8001c3c <HAL_Init>
  SystemClock_Config();
 800156c:	f7ff ffb4 	bl	80014d8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	464a      	mov	r2, r9
 8001572:	2100      	movs	r1, #0
 8001574:	a809      	add	r0, sp, #36	; 0x24
 8001576:	f002 feff 	bl	8004378 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4b9c      	ldr	r3, [pc, #624]	; (80017ec <main+0x28c>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800157c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001580:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001582:	489b      	ldr	r0, [pc, #620]	; (80017f0 <main+0x290>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001584:	ea42 0209 	orr.w	r2, r2, r9
 8001588:	619a      	str	r2, [r3, #24]
 800158a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	ea02 0209 	and.w	r2, r2, r9
 8001592:	9203      	str	r2, [sp, #12]
 8001594:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001596:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800159a:	f042 0220 	orr.w	r2, r2, #32
 800159e:	619a      	str	r2, [r3, #24]
 80015a0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a4:	f002 0220 	and.w	r2, r2, #32
 80015a8:	9204      	str	r2, [sp, #16]
 80015aa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	699a      	ldr	r2, [r3, #24]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ae:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	f042 0204 	orr.w	r2, r2, #4
 80015b6:	619a      	str	r2, [r3, #24]
 80015b8:	699a      	ldr	r2, [r3, #24]
  hi2c1.Init.ClockSpeed = 100000;
 80015ba:	f8df 8238 	ldr.w	r8, [pc, #568]	; 80017f4 <main+0x294>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	f002 0204 	and.w	r2, r2, #4
 80015c2:	9205      	str	r2, [sp, #20]
 80015c4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	699a      	ldr	r2, [r3, #24]
 80015c8:	f042 0208 	orr.w	r2, r2, #8
 80015cc:	619a      	str	r2, [r3, #24]
 80015ce:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	9306      	str	r3, [sp, #24]
 80015d8:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015da:	f000 fef1 	bl	80023c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 80015de:	2200      	movs	r2, #0
 80015e0:	f640 7103 	movw	r1, #3843	; 0xf03
 80015e4:	4884      	ldr	r0, [pc, #528]	; (80017f8 <main+0x298>)
 80015e6:	f000 feeb 	bl	80023c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80015f0:	4882      	ldr	r0, [pc, #520]	; (80017fc <main+0x29c>)
 80015f2:	f000 fee5 	bl	80023c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fa:	487d      	ldr	r0, [pc, #500]	; (80017f0 <main+0x290>)
 80015fc:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001606:	f000 fdfb 	bl	8002200 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 800160a:	f640 7303 	movw	r3, #3843	; 0xf03
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	487a      	ldr	r0, [pc, #488]	; (80017f8 <main+0x298>)
 8001610:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f000 fdf1 	bl	8002200 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800161e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001622:	4876      	ldr	r0, [pc, #472]	; (80017fc <main+0x29c>)
 8001624:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f000 fde7 	bl	8002200 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	4872      	ldr	r0, [pc, #456]	; (80017fc <main+0x29c>)
 8001634:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	e9cd 9409 	strd	r9, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f000 fde0 	bl	8002200 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001640:	486f      	ldr	r0, [pc, #444]	; (8001800 <main+0x2a0>)
  hi2c1.Init.ClockSpeed = 100000;
 8001642:	4b70      	ldr	r3, [pc, #448]	; (8001804 <main+0x2a4>)
  hi2c1.Init.OwnAddress1 = 0;
 8001644:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8001648:	e9c0 3800 	strd	r3, r8, [r0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800164c:	e9c0 7404 	strd	r7, r4, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001654:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001656:	f001 f893 	bl	8002780 <HAL_I2C_Init>
 800165a:	4682      	mov	sl, r0
 800165c:	b108      	cbz	r0, 8001662 <main+0x102>
 800165e:	b672      	cpsid	i
  while (1)
 8001660:	e7fe      	b.n	8001660 <main+0x100>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	464a      	mov	r2, r9
 8001664:	4601      	mov	r1, r0
 8001666:	a809      	add	r0, sp, #36	; 0x24
 8001668:	f002 fe86 	bl	8004378 <memset>
  htim4.Init.Period = 65535;
 800166c:	f64f 79ff 	movw	r9, #65535	; 0xffff
  htim4.Init.Prescaler = 63;
 8001670:	233f      	movs	r3, #63	; 0x3f
  htim4.Instance = TIM4;
 8001672:	4c65      	ldr	r4, [pc, #404]	; (8001808 <main+0x2a8>)
  htim4.Init.Prescaler = 63;
 8001674:	f8df c194 	ldr.w	ip, [pc, #404]	; 800180c <main+0x2ac>
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001678:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167a:	e9cd aa07 	strd	sl, sl, [sp, #28]
  htim4.Init.Prescaler = 63;
 800167e:	e9c4 c300 	strd	ip, r3, [r4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001682:	e9c4 9a03 	strd	r9, sl, [r4, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001686:	f8c4 a008 	str.w	sl, [r4, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168a:	f8c4 a018 	str.w	sl, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800168e:	f002 f8dd 	bl	800384c <HAL_TIM_Base_Init>
 8001692:	b108      	cbz	r0, 8001698 <main+0x138>
 8001694:	b672      	cpsid	i
  while (1)
 8001696:	e7fe      	b.n	8001696 <main+0x136>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800169c:	4620      	mov	r0, r4
 800169e:	a909      	add	r1, sp, #36	; 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016a2:	f002 f95e 	bl	8003962 <HAL_TIM_ConfigClockSource>
 80016a6:	b108      	cbz	r0, 80016ac <main+0x14c>
 80016a8:	b672      	cpsid	i
  while (1)
 80016aa:	e7fe      	b.n	80016aa <main+0x14a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ac:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016b0:	a907      	add	r1, sp, #28
 80016b2:	4620      	mov	r0, r4
 80016b4:	f002 f9ea 	bl	8003a8c <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	4604      	mov	r4, r0
 80016ba:	b108      	cbz	r0, 80016c0 <main+0x160>
 80016bc:	b672      	cpsid	i
  while (1)
 80016be:	e7fe      	b.n	80016be <main+0x15e>
  TIM_Encoder_InitTypeDef sConfig = {0};
 80016c0:	4601      	mov	r1, r0
 80016c2:	221c      	movs	r2, #28
 80016c4:	a80a      	add	r0, sp, #40	; 0x28
 80016c6:	f002 fe57 	bl	8004378 <memset>
  htim2.Instance = TIM2;
 80016ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ce:	f8df a140 	ldr.w	sl, [pc, #320]	; 8001810 <main+0x2b0>
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016d2:	a909      	add	r1, sp, #36	; 0x24
  htim2.Init.Prescaler = 0;
 80016d4:	e9ca 3400 	strd	r3, r4, [sl]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016d8:	2303      	movs	r3, #3
 80016da:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC1Filter = 10;
 80016dc:	230a      	movs	r3, #10
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016de:	4650      	mov	r0, sl
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	e9cd 4407 	strd	r4, r4, [sp, #28]
  htim2.Init.Period = 65535;
 80016e4:	e9ca 4902 	strd	r4, r9, [sl, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	f8ca 4010 	str.w	r4, [sl, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ec:	f8ca 4018 	str.w	r4, [sl, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016f0:	950b      	str	r5, [sp, #44]	; 0x2c
  sConfig.IC1Filter = 10;
 80016f2:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016f4:	950f      	str	r5, [sp, #60]	; 0x3c
  sConfig.IC2Filter = 10;
 80016f6:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016f8:	f002 f8d4 	bl	80038a4 <HAL_TIM_Encoder_Init>
 80016fc:	b108      	cbz	r0, 8001702 <main+0x1a2>
 80016fe:	b672      	cpsid	i
  while (1)
 8001700:	e7fe      	b.n	8001700 <main+0x1a0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001702:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001706:	a907      	add	r1, sp, #28
 8001708:	4650      	mov	r0, sl
 800170a:	f002 f9bf 	bl	8003a8c <HAL_TIMEx_MasterConfigSynchronization>
 800170e:	b108      	cbz	r0, 8001714 <main+0x1b4>
 8001710:	b672      	cpsid	i
  while (1)
 8001712:	e7fe      	b.n	8001712 <main+0x1b2>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001714:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance = RTC;
 8001718:	483e      	ldr	r0, [pc, #248]	; (8001814 <main+0x2b4>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800171a:	4c3f      	ldr	r4, [pc, #252]	; (8001818 <main+0x2b8>)
 800171c:	e9c0 4300 	strd	r4, r3, [r0]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001724:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001726:	f001 fe6f 	bl	8003408 <HAL_RTC_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	b108      	cbz	r0, 8001732 <main+0x1d2>
 800172e:	b672      	cpsid	i
  while (1)
 8001730:	e7fe      	b.n	8001730 <main+0x1d0>
  hi2c2.Instance = I2C2;
 8001732:	483a      	ldr	r0, [pc, #232]	; (800181c <main+0x2bc>)
 8001734:	4a3a      	ldr	r2, [pc, #232]	; (8001820 <main+0x2c0>)
  hi2c2.Init.OwnAddress1 = 0;
 8001736:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.ClockSpeed = 100000;
 800173a:	e9c0 2800 	strd	r2, r8, [r0]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800173e:	e9c0 7304 	strd	r7, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001742:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001746:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001748:	f001 f81a 	bl	8002780 <HAL_I2C_Init>
 800174c:	b108      	cbz	r0, 8001752 <main+0x1f2>
 800174e:	b672      	cpsid	i
  while (1)
 8001750:	e7fe      	b.n	8001750 <main+0x1f0>
  hadc1.Instance = ADC1;
 8001752:	4c34      	ldr	r4, [pc, #208]	; (8001824 <main+0x2c4>)
 8001754:	4b34      	ldr	r3, [pc, #208]	; (8001828 <main+0x2c8>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001756:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  hadc1.Instance = ADC1;
 800175a:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800175c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001760:	900b      	str	r0, [sp, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001762:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001764:	7320      	strb	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001766:	7520      	strb	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001768:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800176a:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800176c:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 800176e:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001770:	f000 fb3e 	bl	8001df0 <HAL_ADC_Init>
 8001774:	b108      	cbz	r0, 800177a <main+0x21a>
 8001776:	b672      	cpsid	i
  while (1)
 8001778:	e7fe      	b.n	8001778 <main+0x218>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800177a:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800177c:	4620      	mov	r0, r4
 800177e:	a909      	add	r1, sp, #36	; 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001780:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001784:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001786:	f000 fa8f 	bl	8001ca8 <HAL_ADC_ConfigChannel>
 800178a:	b108      	cbz	r0, 8001790 <main+0x230>
 800178c:	b672      	cpsid	i
  while (1)
 800178e:	e7fe      	b.n	800178e <main+0x22e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001790:	2210      	movs	r2, #16
 8001792:	2100      	movs	r1, #0
 8001794:	a809      	add	r0, sp, #36	; 0x24
 8001796:	f002 fdef 	bl	8004378 <memset>
  htim1.Init.Prescaler = 71;
 800179a:	2247      	movs	r2, #71	; 0x47
  htim1.Instance = TIM1;
 800179c:	4c23      	ldr	r4, [pc, #140]	; (800182c <main+0x2cc>)
  htim1.Init.Prescaler = 71;
 800179e:	4924      	ldr	r1, [pc, #144]	; (8001830 <main+0x2d0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 71;
 80017a2:	e9c4 1200 	strd	r1, r2, [r4]
  htim1.Init.Period = 65535;
 80017a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017aa:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b0:	e9c4 2303 	strd	r2, r3, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b4:	e9c4 3305 	strd	r3, r3, [r4, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	60a3      	str	r3, [r4, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ba:	f002 f847 	bl	800384c <HAL_TIM_Base_Init>
 80017be:	b108      	cbz	r0, 80017c4 <main+0x264>
 80017c0:	b672      	cpsid	i
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <main+0x262>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017c8:	4620      	mov	r0, r4
 80017ca:	a909      	add	r1, sp, #36	; 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017cc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017ce:	f002 f8c8 	bl	8003962 <HAL_TIM_ConfigClockSource>
 80017d2:	b108      	cbz	r0, 80017d8 <main+0x278>
 80017d4:	b672      	cpsid	i
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <main+0x276>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d8:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017dc:	a907      	add	r1, sp, #28
 80017de:	4620      	mov	r0, r4
 80017e0:	f002 f954 	bl	8003a8c <HAL_TIMEx_MasterConfigSynchronization>
 80017e4:	4605      	mov	r5, r0
 80017e6:	b328      	cbz	r0, 8001834 <main+0x2d4>
 80017e8:	b672      	cpsid	i
  while (1)
 80017ea:	e7fe      	b.n	80017ea <main+0x28a>
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40011000 	.word	0x40011000
 80017f4:	000186a0 	.word	0x000186a0
 80017f8:	40010800 	.word	0x40010800
 80017fc:	40010c00 	.word	0x40010c00
 8001800:	200001bc 	.word	0x200001bc
 8001804:	40005400 	.word	0x40005400
 8001808:	20000314 	.word	0x20000314
 800180c:	40000800 	.word	0x40000800
 8001810:	200002cc 	.word	0x200002cc
 8001814:	20000270 	.word	0x20000270
 8001818:	40002800 	.word	0x40002800
 800181c:	20000210 	.word	0x20000210
 8001820:	40005800 	.word	0x40005800
 8001824:	20000178 	.word	0x20000178
 8001828:	40012400 	.word	0x40012400
 800182c:	20000284 	.word	0x20000284
 8001830:	40012c00 	.word	0x40012c00
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001834:	4602      	mov	r2, r0
 8001836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800183a:	481c      	ldr	r0, [pc, #112]	; (80018ac <main+0x34c>)
 800183c:	f000 fdc0 	bl	80023c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001840:	462a      	mov	r2, r5
 8001842:	2101      	movs	r1, #1
 8001844:	481a      	ldr	r0, [pc, #104]	; (80018b0 <main+0x350>)
 8001846:	f000 fdbb 	bl	80023c0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800184a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800184e:	f000 fa19 	bl	8001c84 <HAL_Delay>
  REALTIME_Init();
 8001852:	f7ff f8ed 	bl	8000a30 <REALTIME_Init>
  DHT_Init(&hdht, &htim4, DHT11, GPIOA, GPIO_PIN_0);
 8001856:	2301      	movs	r3, #1
 8001858:	462a      	mov	r2, r5
 800185a:	4916      	ldr	r1, [pc, #88]	; (80018b4 <main+0x354>)
 800185c:	4816      	ldr	r0, [pc, #88]	; (80018b8 <main+0x358>)
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <main+0x350>)
 8001862:	f002 f951 	bl	8003b08 <DHT_Init>
  LCD_Init(&hlcd, &hi2c1, 20, 4, 0x4E);
 8001866:	234e      	movs	r3, #78	; 0x4e
 8001868:	2214      	movs	r2, #20
 800186a:	4914      	ldr	r1, [pc, #80]	; (80018bc <main+0x35c>)
 800186c:	4814      	ldr	r0, [pc, #80]	; (80018c0 <main+0x360>)
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2304      	movs	r3, #4
 8001872:	f002 fb7b 	bl	8003f6c <LCD_Init>
  MENU_Init(&hlcd);
 8001876:	4812      	ldr	r0, [pc, #72]	; (80018c0 <main+0x360>)
 8001878:	f7ff fa7a 	bl	8000d70 <MENU_Init>
  ROTARY_ENCODER_Init();
 800187c:	f7fe fff6 	bl	800086c <ROTARY_ENCODER_Init>
  ALARM_Init(GPIOA, GPIO_PIN_1);
 8001880:	2102      	movs	r1, #2
 8001882:	480b      	ldr	r0, [pc, #44]	; (80018b0 <main+0x350>)
 8001884:	f7fe fe9e 	bl	80005c4 <ALARM_Init>
  DELAY_US_Init(&htim1);
 8001888:	4620      	mov	r0, r4
 800188a:	f002 fad5 	bl	8003e38 <DELAY_US_Init>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800188e:	213c      	movs	r1, #60	; 0x3c
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <main+0x364>)
 8001892:	f001 fe41 	bl	8003518 <HAL_TIM_Encoder_Start_IT>
	  REALTIME_Handle();
 8001896:	f7ff f8f5 	bl	8000a84 <REALTIME_Handle>
	  TEMP_AND_HUM_Handle();
 800189a:	f7ff fdd9 	bl	8001450 <TEMP_AND_HUM_Handle>
	  MENU_Handle();
 800189e:	f7ff fa7f 	bl	8000da0 <MENU_Handle>
	  ROTARY_ENCODER_Handle();
 80018a2:	f7ff f809 	bl	80008b8 <ROTARY_ENCODER_Handle>
	  ALARM_Handle();
 80018a6:	f7fe fe97 	bl	80005d8 <ALARM_Handle>
  while (1)
 80018aa:	e7f4      	b.n	8001896 <main+0x336>
 80018ac:	40011000 	.word	0x40011000
 80018b0:	40010800 	.word	0x40010800
 80018b4:	20000314 	.word	0x20000314
 80018b8:	200001a8 	.word	0x200001a8
 80018bc:	200001bc 	.word	0x200001bc
 80018c0:	20000264 	.word	0x20000264
 80018c4:	200002cc 	.word	0x200002cc

080018c8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_MspInit+0x3c>)
{
 80018ca:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	619a      	str	r2, [r3, #24]
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	f002 0201 	and.w	r2, r2, #1
 80018da:	9200      	str	r2, [sp, #0]
 80018dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	69da      	ldr	r2, [r3, #28]
 80018e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018e4:	61da      	str	r2, [r3, #28]
 80018e6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018f2:	6853      	ldr	r3, [r2, #4]
 80018f4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fe:	b002      	add	sp, #8
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	40010000 	.word	0x40010000

0800190c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800190c:	b510      	push	{r4, lr}
 800190e:	4604      	mov	r4, r0
 8001910:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	2210      	movs	r2, #16
 8001914:	2100      	movs	r1, #0
 8001916:	a802      	add	r0, sp, #8
 8001918:	f002 fd2e 	bl	8004378 <memset>
  if(hadc->Instance==ADC1)
 800191c:	6822      	ldr	r2, [r4, #0]
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_ADC_MspInit+0x54>)
 8001920:	429a      	cmp	r2, r3
 8001922:	d11b      	bne.n	800195c <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001924:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001928:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	480e      	ldr	r0, [pc, #56]	; (8001964 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800192c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001930:	619a      	str	r2, [r3, #24]
 8001932:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001936:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800193a:	9200      	str	r2, [sp, #0]
 800193c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	699a      	ldr	r2, [r3, #24]
 8001940:	f042 0204 	orr.w	r2, r2, #4
 8001944:	619a      	str	r2, [r3, #24]
 8001946:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001948:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001952:	2303      	movs	r3, #3
 8001954:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f000 fc52 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800195c:	b006      	add	sp, #24
 800195e:	bd10      	pop	{r4, pc}
 8001960:	40012400 	.word	0x40012400
 8001964:	40010800 	.word	0x40010800

08001968 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	2210      	movs	r2, #16
{
 800196a:	b510      	push	{r4, lr}
 800196c:	4604      	mov	r4, r0
 800196e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	eb0d 0002 	add.w	r0, sp, r2
 8001974:	2100      	movs	r1, #0
 8001976:	f002 fcff 	bl	8004378 <memset>
  if(hi2c->Instance==I2C1)
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	4a21      	ldr	r2, [pc, #132]	; (8001a04 <HAL_I2C_MspInit+0x9c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d11e      	bne.n	80019c0 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	4c21      	ldr	r4, [pc, #132]	; (8001a08 <HAL_I2C_MspInit+0xa0>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001984:	21c0      	movs	r1, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	4820      	ldr	r0, [pc, #128]	; (8001a0c <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	61a3      	str	r3, [r4, #24]
 8001990:	69a3      	ldr	r3, [r4, #24]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199a:	2312      	movs	r3, #18
 800199c:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a6:	f000 fc2b 	bl	8002200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019aa:	69e3      	ldr	r3, [r4, #28]
 80019ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019b0:	61e3      	str	r3, [r4, #28]
 80019b2:	69e3      	ldr	r3, [r4, #28]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019bc:	b008      	add	sp, #32
 80019be:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 80019c0:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <HAL_I2C_MspInit+0xa8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d1fa      	bne.n	80019bc <HAL_I2C_MspInit+0x54>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	4c10      	ldr	r4, [pc, #64]	; (8001a08 <HAL_I2C_MspInit+0xa0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019cc:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ce:	480f      	ldr	r0, [pc, #60]	; (8001a0c <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d0:	f043 0308 	orr.w	r3, r3, #8
 80019d4:	61a3      	str	r3, [r4, #24]
 80019d6:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d8:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	9302      	str	r3, [sp, #8]
 80019e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e2:	2312      	movs	r3, #18
 80019e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f000 fc08 	bl	8002200 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019f0:	69e3      	ldr	r3, [r4, #28]
 80019f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019f6:	61e3      	str	r3, [r4, #28]
 80019f8:	69e3      	ldr	r3, [r4, #28]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	9303      	str	r3, [sp, #12]
 8001a00:	9b03      	ldr	r3, [sp, #12]
}
 8001a02:	e7db      	b.n	80019bc <HAL_I2C_MspInit+0x54>
 8001a04:	40005400 	.word	0x40005400
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010c00 	.word	0x40010c00
 8001a10:	40005800 	.word	0x40005800

08001a14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a14:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RTC_MspInit+0x30>)
 8001a18:	6802      	ldr	r2, [r0, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d10f      	bne.n	8001a3e <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001a1e:	f001 f925 	bl	8002c6c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_RTC_MspInit+0x34>)
 8001a24:	69da      	ldr	r2, [r3, #28]
 8001a26:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001a2a:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a2c:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a34:	9301      	str	r3, [sp, #4]
 8001a36:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <HAL_RTC_MspInit+0x38>)
 8001a3a:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a3e:	b003      	add	sp, #12
 8001a40:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a44:	40002800 	.word	0x40002800
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	42420000 	.word	0x42420000

08001a50 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001a50:	6803      	ldr	r3, [r0, #0]
 8001a52:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <HAL_TIM_Base_MspInit+0x40>)
{
 8001a54:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10b      	bne.n	8001a72 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_TIM_Base_MspInit+0x44>)
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a62:	619a      	str	r2, [r3, #24]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a6e:	b002      	add	sp, #8
 8001a70:	4770      	bx	lr
  else if(htim_base->Instance==TIM4)
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_TIM_Base_MspInit+0x48>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d1fa      	bne.n	8001a6e <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_TIM_Base_MspInit+0x44>)
 8001a7a:	69da      	ldr	r2, [r3, #28]
 8001a7c:	f042 0204 	orr.w	r2, r2, #4
 8001a80:	61da      	str	r2, [r3, #28]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	9b01      	ldr	r3, [sp, #4]
}
 8001a8c:	e7ef      	b.n	8001a6e <HAL_TIM_Base_MspInit+0x1e>
 8001a8e:	bf00      	nop
 8001a90:	40012c00 	.word	0x40012c00
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40000800 	.word	0x40000800

08001a9c <HAL_TIM_Encoder_MspInit>:
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	2210      	movs	r2, #16
{
 8001a9e:	b510      	push	{r4, lr}
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	eb0d 0002 	add.w	r0, sp, r2
 8001aaa:	f002 fc65 	bl	8004378 <memset>
  if(htim_encoder->Instance==TIM2)
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab4:	d13d      	bne.n	8001b32 <HAL_TIM_Encoder_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ab6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001aba:	69da      	ldr	r2, [r3, #28]
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	481e      	ldr	r0, [pc, #120]	; (8001b38 <HAL_TIM_Encoder_MspInit+0x9c>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	61da      	str	r2, [r3, #28]
 8001ac4:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac8:	f002 0201 	and.w	r2, r2, #1
 8001acc:	9201      	str	r2, [sp, #4]
 8001ace:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad2:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	f042 0204 	orr.w	r2, r2, #4
 8001ad8:	619a      	str	r2, [r3, #24]
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	f002 0204 	and.w	r2, r2, #4
 8001ae0:	9202      	str	r2, [sp, #8]
 8001ae2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	f042 0208 	orr.w	r2, r2, #8
 8001aea:	619a      	str	r2, [r3, #24]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	9303      	str	r3, [sp, #12]
 8001af4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001afa:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	f000 fb80 	bl	8002200 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b00:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b02:	480e      	ldr	r0, [pc, #56]	; (8001b3c <HAL_TIM_Encoder_MspInit+0xa0>)
 8001b04:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b06:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0c:	f000 fb78 	bl	8002200 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <HAL_TIM_Encoder_MspInit+0xa4>)

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b12:	201c      	movs	r0, #28
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001b14:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b16:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b1c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b24:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b26:	4622      	mov	r2, r4
 8001b28:	f000 f9f2 	bl	8001f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b2c:	201c      	movs	r0, #28
 8001b2e:	f000 fa21 	bl	8001f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b32:	b008      	add	sp, #32
 8001b34:	bd10      	pop	{r4, pc}
 8001b36:	bf00      	nop
 8001b38:	40010800 	.word	0x40010800
 8001b3c:	40010c00 	.word	0x40010c00
 8001b40:	40010000 	.word	0x40010000

08001b44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <NMI_Handler>

08001b46 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler>

08001b48 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <MemManage_Handler>

08001b4a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <BusFault_Handler>

08001b4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <UsageFault_Handler>

08001b4e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4e:	4770      	bx	lr

08001b50 <DebugMon_Handler>:
 8001b50:	4770      	bx	lr

08001b52 <PendSV_Handler>:
 8001b52:	4770      	bx	lr

08001b54 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b54:	f000 b884 	b.w	8001c60 <HAL_IncTick>

08001b58 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b58:	4801      	ldr	r0, [pc, #4]	; (8001b60 <TIM2_IRQHandler+0x8>)
 8001b5a:	f001 bd9c 	b.w	8003696 <HAL_TIM_IRQHandler>
 8001b5e:	bf00      	nop
 8001b60:	200002cc 	.word	0x200002cc

08001b64 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <_sbrk+0x30>)
{
 8001b66:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001b68:	6811      	ldr	r1, [r2, #0]
{
 8001b6a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001b6c:	b909      	cbnz	r1, 8001b72 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001b6e:	490a      	ldr	r1, [pc, #40]	; (8001b98 <_sbrk+0x34>)
 8001b70:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b72:	6810      	ldr	r0, [r2, #0]
 8001b74:	4909      	ldr	r1, [pc, #36]	; (8001b9c <_sbrk+0x38>)
 8001b76:	4c0a      	ldr	r4, [pc, #40]	; (8001ba0 <_sbrk+0x3c>)
 8001b78:	4403      	add	r3, r0
 8001b7a:	1b09      	subs	r1, r1, r4
 8001b7c:	428b      	cmp	r3, r1
 8001b7e:	d906      	bls.n	8001b8e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001b80:	f002 fbb2 	bl	80042e8 <__errno>
 8001b84:	230c      	movs	r3, #12
 8001b86:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001b8c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001b8e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001b90:	e7fc      	b.n	8001b8c <_sbrk+0x28>
 8001b92:	bf00      	nop
 8001b94:	20000364 	.word	0x20000364
 8001b98:	200003c0 	.word	0x200003c0
 8001b9c:	20005000 	.word	0x20005000
 8001ba0:	00000400 	.word	0x00000400

08001ba4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba4:	4770      	bx	lr
	...

08001ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001baa:	490d      	ldr	r1, [pc, #52]	; (8001be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bac:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	; (8001bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bce:	f7ff ffe9 	bl	8001ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f002 fb8f 	bl	80042f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd6:	f7ff fcc3 	bl	8001560 <main>
  bx lr
 8001bda:	4770      	bx	lr
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001be4:	08004e50 	.word	0x08004e50
  ldr r2, =_sbss
 8001be8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001bec:	200003bc 	.word	0x200003bc

08001bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_2_IRQHandler>
	...

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HAL_InitTick+0x3c>)
{
 8001bf8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfa:	7818      	ldrb	r0, [r3, #0]
 8001bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c00:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c04:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <HAL_InitTick+0x40>)
 8001c06:	6810      	ldr	r0, [r2, #0]
 8001c08:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c0c:	f000 f9c0 	bl	8001f90 <HAL_SYSTICK_Config>
 8001c10:	4604      	mov	r4, r0
 8001c12:	b958      	cbnz	r0, 8001c2c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c14:	2d0f      	cmp	r5, #15
 8001c16:	d809      	bhi.n	8001c2c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 f976 	bl	8001f10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4620      	mov	r0, r4
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <HAL_InitTick+0x44>)
 8001c28:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001c2a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	e7fc      	b.n	8001c2a <HAL_InitTick+0x36>
 8001c30:	20000038 	.word	0x20000038
 8001c34:	20000034 	.word	0x20000034
 8001c38:	2000003c 	.word	0x2000003c

08001c3c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <HAL_Init+0x20>)
{
 8001c3e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c40:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c42:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c44:	f043 0310 	orr.w	r3, r3, #16
 8001c48:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4a:	f000 f94f 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	200f      	movs	r0, #15
 8001c50:	f7ff ffd0 	bl	8001bf4 <HAL_InitTick>
  HAL_MspInit();
 8001c54:	f7ff fe38 	bl	80018c8 <HAL_MspInit>
}
 8001c58:	2000      	movs	r0, #0
 8001c5a:	bd08      	pop	{r3, pc}
 8001c5c:	40022000 	.word	0x40022000

08001c60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c60:	4a03      	ldr	r2, [pc, #12]	; (8001c70 <HAL_IncTick+0x10>)
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <HAL_IncTick+0x14>)
 8001c64:	6811      	ldr	r1, [r2, #0]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	440b      	add	r3, r1
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000368 	.word	0x20000368
 8001c74:	20000038 	.word	0x20000038

08001c78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c78:	4b01      	ldr	r3, [pc, #4]	; (8001c80 <HAL_GetTick+0x8>)
 8001c7a:	6818      	ldr	r0, [r3, #0]
}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000368 	.word	0x20000368

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b538      	push	{r3, r4, r5, lr}
 8001c86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff fff6 	bl	8001c78 <HAL_GetTick>
 8001c8c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001c90:	bf1e      	ittt	ne
 8001c92:	4b04      	ldrne	r3, [pc, #16]	; (8001ca4 <HAL_Delay+0x20>)
 8001c94:	781b      	ldrbne	r3, [r3, #0]
 8001c96:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c98:	f7ff ffee 	bl	8001c78 <HAL_GetTick>
 8001c9c:	1b43      	subs	r3, r0, r5
 8001c9e:	42a3      	cmp	r3, r4
 8001ca0:	d3fa      	bcc.n	8001c98 <HAL_Delay+0x14>
  {
  }
}
 8001ca2:	bd38      	pop	{r3, r4, r5, pc}
 8001ca4:	20000038 	.word	0x20000038

08001ca8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001ca8:	2300      	movs	r3, #0
{ 
 8001caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001cac:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cae:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8001cb2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d06c      	beq.n	8001d92 <HAL_ADC_ConfigChannel+0xea>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cbe:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cc0:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8001cc2:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cc4:	6808      	ldr	r0, [r1, #0]
 8001cc6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8001cca:	d822      	bhi.n	8001d12 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ccc:	261f      	movs	r6, #31
 8001cce:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8001cd0:	3b05      	subs	r3, #5
 8001cd2:	409e      	lsls	r6, r3
 8001cd4:	ea25 0506 	bic.w	r5, r5, r6
 8001cd8:	fa00 f303 	lsl.w	r3, r0, r3
 8001cdc:	432b      	orrs	r3, r5
 8001cde:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ce0:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ce2:	688b      	ldr	r3, [r1, #8]
 8001ce4:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001ce8:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cec:	d929      	bls.n	8001d42 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cee:	68d6      	ldr	r6, [r2, #12]
 8001cf0:	3d1e      	subs	r5, #30
 8001cf2:	40a9      	lsls	r1, r5
 8001cf4:	ea26 0101 	bic.w	r1, r6, r1
 8001cf8:	40ab      	lsls	r3, r5
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cfe:	f1a0 0310 	sub.w	r3, r0, #16
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d925      	bls.n	8001d52 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d06:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001d0e:	b002      	add	sp, #8
 8001d10:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001d12:	2d0c      	cmp	r5, #12
 8001d14:	f04f 051f 	mov.w	r5, #31
 8001d18:	d809      	bhi.n	8001d2e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d1a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001d1c:	3b23      	subs	r3, #35	; 0x23
 8001d1e:	409d      	lsls	r5, r3
 8001d20:	ea26 0505 	bic.w	r5, r6, r5
 8001d24:	fa00 f303 	lsl.w	r3, r0, r3
 8001d28:	432b      	orrs	r3, r5
 8001d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2c:	e7d8      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d2e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001d30:	3b41      	subs	r3, #65	; 0x41
 8001d32:	409d      	lsls	r5, r3
 8001d34:	ea26 0505 	bic.w	r5, r6, r5
 8001d38:	fa00 f303 	lsl.w	r3, r0, r3
 8001d3c:	432b      	orrs	r3, r5
 8001d3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001d40:	e7ce      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d42:	6910      	ldr	r0, [r2, #16]
 8001d44:	40a9      	lsls	r1, r5
 8001d46:	ea20 0101 	bic.w	r1, r0, r1
 8001d4a:	40ab      	lsls	r3, r5
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	6113      	str	r3, [r2, #16]
 8001d50:	e7d9      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_ADC_ConfigChannel+0xf0>)
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d116      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d58:	6893      	ldr	r3, [r2, #8]
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	d4d3      	bmi.n	8001d06 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d5e:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d60:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d66:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d68:	d1cd      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_ADC_ConfigChannel+0xf4>)
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <HAL_ADC_ConfigChannel+0xf8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d74:	220a      	movs	r2, #10
 8001d76:	4353      	muls	r3, r2
            wait_loop_index--;
 8001d78:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001d7a:	9b01      	ldr	r3, [sp, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0c2      	beq.n	8001d06 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8001d80:	9b01      	ldr	r3, [sp, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	e7f8      	b.n	8001d78 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001d88:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8a:	f043 0320 	orr.w	r3, r3, #32
 8001d8e:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001d90:	e7ba      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8001d92:	2002      	movs	r0, #2
 8001d94:	e7bb      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x66>
 8001d96:	bf00      	nop
 8001d98:	40012400 	.word	0x40012400
 8001d9c:	20000034 	.word	0x20000034
 8001da0:	000f4240 	.word	0x000f4240

08001da4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001da4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001da6:	6803      	ldr	r3, [r0, #0]
{
 8001da8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	07d1      	lsls	r1, r2, #31
 8001dae:	d401      	bmi.n	8001db4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001db0:	2000      	movs	r0, #0
}
 8001db2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	f022 0201 	bic.w	r2, r2, #1
 8001dba:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001dbc:	f7ff ff5c 	bl	8001c78 <HAL_GetTick>
 8001dc0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	07db      	lsls	r3, r3, #31
 8001dc8:	d5f2      	bpl.n	8001db0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dca:	f7ff ff55 	bl	8001c78 <HAL_GetTick>
 8001dce:	1b40      	subs	r0, r0, r5
 8001dd0:	2802      	cmp	r0, #2
 8001dd2:	d9f6      	bls.n	8001dc2 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	07da      	lsls	r2, r3, #31
 8001dda:	d5f2      	bpl.n	8001dc2 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ddc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001dde:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de0:	f043 0310 	orr.w	r3, r3, #16
 8001de4:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001dee:	e7e0      	b.n	8001db2 <ADC_ConversionStop_Disable+0xe>

08001df0 <HAL_ADC_Init>:
{
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8001df2:	4604      	mov	r4, r0
 8001df4:	2800      	cmp	r0, #0
 8001df6:	d06e      	beq.n	8001ed6 <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001df8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001dfa:	b923      	cbnz	r3, 8001e06 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001dfc:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001dfe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001e02:	f7ff fd83 	bl	800190c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e06:	4620      	mov	r0, r4
 8001e08:	f7ff ffcc 	bl	8001da4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e0e:	f013 0310 	ands.w	r3, r3, #16
 8001e12:	d162      	bne.n	8001eda <HAL_ADC_Init+0xea>
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d160      	bne.n	8001eda <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8001e18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e1a:	69e5      	ldr	r5, [r4, #28]
 8001e1c:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001e1e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001e22:	f022 0202 	bic.w	r2, r2, #2
 8001e26:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e2a:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e2c:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e30:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e32:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e36:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e3a:	d037      	beq.n	8001eac <HAL_ADC_Init+0xbc>
 8001e3c:	2d01      	cmp	r5, #1
 8001e3e:	bf14      	ite	ne
 8001e40:	2700      	movne	r7, #0
 8001e42:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e46:	7d26      	ldrb	r6, [r4, #20]
 8001e48:	2e01      	cmp	r6, #1
 8001e4a:	d106      	bne.n	8001e5a <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e4c:	bb82      	cbnz	r2, 8001eb0 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e4e:	69a2      	ldr	r2, [r4, #24]
 8001e50:	3a01      	subs	r2, #1
 8001e52:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 8001e56:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001e5a:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e5c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001e60:	6856      	ldr	r6, [r2, #4]
 8001e62:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8001e66:	ea46 0607 	orr.w	r6, r6, r7
 8001e6a:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001e6c:	6897      	ldr	r7, [r2, #8]
 8001e6e:	4e1d      	ldr	r6, [pc, #116]	; (8001ee4 <HAL_ADC_Init+0xf4>)
 8001e70:	ea06 0607 	and.w	r6, r6, r7
 8001e74:	ea46 0601 	orr.w	r6, r6, r1
 8001e78:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e7a:	d001      	beq.n	8001e80 <HAL_ADC_Init+0x90>
 8001e7c:	2d01      	cmp	r5, #1
 8001e7e:	d102      	bne.n	8001e86 <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e80:	6923      	ldr	r3, [r4, #16]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001e86:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8001e88:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001e8c:	432b      	orrs	r3, r5
 8001e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e90:	6892      	ldr	r2, [r2, #8]
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_ADC_Init+0xf8>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	4299      	cmp	r1, r3
 8001e98:	d113      	bne.n	8001ec2 <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001e9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ea0:	f023 0303 	bic.w	r3, r3, #3
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001eac:	462f      	mov	r7, r5
 8001eae:	e7ca      	b.n	8001e46 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001ec0:	e7cb      	b.n	8001e5a <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8001ec2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ec4:	f023 0312 	bic.w	r3, r3, #18
 8001ec8:	f043 0310 	orr.w	r3, r3, #16
 8001ecc:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ece:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	e7e7      	b.n	8001eaa <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001edc:	f043 0310 	orr.w	r3, r3, #16
 8001ee0:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001ee2:	e7f8      	b.n	8001ed6 <HAL_ADC_Init+0xe6>
 8001ee4:	ffe1f7fd 	.word	0xffe1f7fd
 8001ee8:	ff1f0efe 	.word	0xff1f0efe

08001eec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4907      	ldr	r1, [pc, #28]	; (8001f0c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eee:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ef2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001efa:	0412      	lsls	r2, r2, #16
 8001efc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001f08:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f12:	b530      	push	{r4, r5, lr}
 8001f14:	68dc      	ldr	r4, [r3, #12]
 8001f16:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f1a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	bf28      	it	cs
 8001f24:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f26:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2c:	bf98      	it	ls
 8001f2e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f34:	bf88      	it	hi
 8001f36:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	ea21 0303 	bic.w	r3, r1, r3
 8001f3c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f3e:	fa05 f404 	lsl.w	r4, r5, r4
 8001f42:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001f46:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	bfac      	ite	ge
 8001f4e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f52:	4a07      	ldrlt	r2, [pc, #28]	; (8001f70 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	bfab      	itete	ge
 8001f5c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f68:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f6a:	bd30      	pop	{r4, r5, pc}
 8001f6c:	e000ed00 	.word	0xe000ed00
 8001f70:	e000ed14 	.word	0xe000ed14

08001f74 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f74:	2800      	cmp	r0, #0
 8001f76:	db08      	blt.n	8001f8a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f78:	2301      	movs	r3, #1
 8001f7a:	0942      	lsrs	r2, r0, #5
 8001f7c:	f000 001f 	and.w	r0, r0, #31
 8001f80:	fa03 f000 	lsl.w	r0, r3, r0
 8001f84:	4b01      	ldr	r3, [pc, #4]	; (8001f8c <HAL_NVIC_EnableIRQ+0x18>)
 8001f86:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100

08001f90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f90:	3801      	subs	r0, #1
 8001f92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f96:	d20b      	bcs.n	8001fb0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9c:	21f0      	movs	r1, #240	; 0xf0
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001faa:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fac:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001fb0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001fb8:	4a11      	ldr	r2, [pc, #68]	; (8002000 <FLASH_SetErrorCode+0x48>)
 8001fba:	68d3      	ldr	r3, [r2, #12]
 8001fbc:	f013 0310 	ands.w	r3, r3, #16
 8001fc0:	d005      	beq.n	8001fce <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001fc2:	4910      	ldr	r1, [pc, #64]	; (8002004 <FLASH_SetErrorCode+0x4c>)
 8001fc4:	69cb      	ldr	r3, [r1, #28]
 8001fc6:	f043 0302 	orr.w	r3, r3, #2
 8001fca:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001fcc:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001fce:	68d2      	ldr	r2, [r2, #12]
 8001fd0:	0750      	lsls	r0, r2, #29
 8001fd2:	d506      	bpl.n	8001fe2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001fd4:	490b      	ldr	r1, [pc, #44]	; (8002004 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001fda:	69ca      	ldr	r2, [r1, #28]
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001fe2:	4a07      	ldr	r2, [pc, #28]	; (8002000 <FLASH_SetErrorCode+0x48>)
 8001fe4:	69d1      	ldr	r1, [r2, #28]
 8001fe6:	07c9      	lsls	r1, r1, #31
 8001fe8:	d508      	bpl.n	8001ffc <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001fea:	4806      	ldr	r0, [pc, #24]	; (8002004 <FLASH_SetErrorCode+0x4c>)
 8001fec:	69c1      	ldr	r1, [r0, #28]
 8001fee:	f041 0104 	orr.w	r1, r1, #4
 8001ff2:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001ff4:	69d1      	ldr	r1, [r2, #28]
 8001ff6:	f021 0101 	bic.w	r1, r1, #1
 8001ffa:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001ffc:	60d3      	str	r3, [r2, #12]
}  
 8001ffe:	4770      	bx	lr
 8002000:	40022000 	.word	0x40022000
 8002004:	20000370 	.word	0x20000370

08002008 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_FLASH_Unlock+0x1c>)
 800200a:	6918      	ldr	r0, [r3, #16]
 800200c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002010:	d007      	beq.n	8002022 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002012:	4a05      	ldr	r2, [pc, #20]	; (8002028 <HAL_FLASH_Unlock+0x20>)
 8002014:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002016:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800201a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800201c:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800201e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8002022:	4770      	bx	lr
 8002024:	40022000 	.word	0x40022000
 8002028:	45670123 	.word	0x45670123

0800202c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800202c:	4a03      	ldr	r2, [pc, #12]	; (800203c <HAL_FLASH_Lock+0x10>)
}
 800202e:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002030:	6913      	ldr	r3, [r2, #16]
 8002032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002036:	6113      	str	r3, [r2, #16]
}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40022000 	.word	0x40022000

08002040 <FLASH_WaitForLastOperation>:
{
 8002040:	b570      	push	{r4, r5, r6, lr}
 8002042:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff fe18 	bl	8001c78 <HAL_GetTick>
 8002048:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800204a:	4c11      	ldr	r4, [pc, #68]	; (8002090 <FLASH_WaitForLastOperation+0x50>)
 800204c:	68e3      	ldr	r3, [r4, #12]
 800204e:	07d8      	lsls	r0, r3, #31
 8002050:	d412      	bmi.n	8002078 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002052:	68e3      	ldr	r3, [r4, #12]
 8002054:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002056:	bf44      	itt	mi
 8002058:	2320      	movmi	r3, #32
 800205a:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800205c:	68e3      	ldr	r3, [r4, #12]
 800205e:	06da      	lsls	r2, r3, #27
 8002060:	d406      	bmi.n	8002070 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002062:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002064:	07db      	lsls	r3, r3, #31
 8002066:	d403      	bmi.n	8002070 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002068:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800206a:	f010 0004 	ands.w	r0, r0, #4
 800206e:	d007      	beq.n	8002080 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 8002070:	f7ff ffa2 	bl	8001fb8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002074:	2001      	movs	r0, #1
 8002076:	e003      	b.n	8002080 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8002078:	1c6b      	adds	r3, r5, #1
 800207a:	d0e7      	beq.n	800204c <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800207c:	b90d      	cbnz	r5, 8002082 <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 800207e:	2003      	movs	r0, #3
}
 8002080:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002082:	f7ff fdf9 	bl	8001c78 <HAL_GetTick>
 8002086:	1b80      	subs	r0, r0, r6
 8002088:	42a8      	cmp	r0, r5
 800208a:	d9df      	bls.n	800204c <FLASH_WaitForLastOperation+0xc>
 800208c:	e7f7      	b.n	800207e <FLASH_WaitForLastOperation+0x3e>
 800208e:	bf00      	nop
 8002090:	40022000 	.word	0x40022000

08002094 <HAL_FLASH_Program>:
{
 8002094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8002098:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800212c <HAL_FLASH_Program+0x98>
{
 800209c:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 800209e:	f899 3018 	ldrb.w	r3, [r9, #24]
{
 80020a2:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 80020a4:	2b01      	cmp	r3, #1
{
 80020a6:	460f      	mov	r7, r1
 80020a8:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80020aa:	d03d      	beq.n	8002128 <HAL_FLASH_Program+0x94>
 80020ac:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80020ae:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80020b2:	f889 3018 	strb.w	r3, [r9, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80020b6:	f7ff ffc3 	bl	8002040 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80020ba:	bb80      	cbnz	r0, 800211e <HAL_FLASH_Program+0x8a>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80020bc:	2c01      	cmp	r4, #1
 80020be:	d003      	beq.n	80020c8 <HAL_FLASH_Program+0x34>
      nbiterations = 4U;
 80020c0:	2c02      	cmp	r4, #2
 80020c2:	bf0c      	ite	eq
 80020c4:	2402      	moveq	r4, #2
 80020c6:	2404      	movne	r4, #4
 80020c8:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020ca:	46ab      	mov	fp, r5
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80020cc:	f8df a060 	ldr.w	sl, [pc, #96]	; 8002130 <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80020d0:	0128      	lsls	r0, r5, #4
 80020d2:	f1c0 0220 	rsb	r2, r0, #32
 80020d6:	f1a0 0320 	sub.w	r3, r0, #32
 80020da:	fa06 f202 	lsl.w	r2, r6, r2
 80020de:	fa28 f000 	lsr.w	r0, r8, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020e2:	f8c9 b01c 	str.w	fp, [r9, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80020e6:	4310      	orrs	r0, r2
 80020e8:	fa26 f303 	lsr.w	r3, r6, r3
 80020ec:	4318      	orrs	r0, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80020ee:	f8da 3010 	ldr.w	r3, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80020f2:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	f8ca 3010 	str.w	r3, [sl, #16]
  *(__IO uint16_t*)Address = Data;
 80020fc:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002100:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002104:	f7ff ff9c 	bl	8002040 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002108:	f8da 3010 	ldr.w	r3, [sl, #16]
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 8002114:	b918      	cbnz	r0, 800211e <HAL_FLASH_Program+0x8a>
    for (index = 0U; index < nbiterations; index++)
 8002116:	3501      	adds	r5, #1
 8002118:	b2eb      	uxtb	r3, r5
 800211a:	429c      	cmp	r4, r3
 800211c:	d8d8      	bhi.n	80020d0 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 800211e:	2300      	movs	r3, #0
 8002120:	f889 3018 	strb.w	r3, [r9, #24]
}
 8002124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8002128:	2002      	movs	r0, #2
 800212a:	e7fb      	b.n	8002124 <HAL_FLASH_Program+0x90>
 800212c:	20000370 	.word	0x20000370
 8002130:	40022000 	.word	0x40022000

08002134 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002134:	2200      	movs	r2, #0
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <FLASH_PageErase+0x1c>)
 8002138:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <FLASH_PageErase+0x20>)
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	f042 0202 	orr.w	r2, r2, #2
 8002142:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002144:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800214c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800214e:	4770      	bx	lr
 8002150:	20000370 	.word	0x20000370
 8002154:	40022000 	.word	0x40022000

08002158 <HAL_FLASHEx_Erase>:
{
 8002158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800215c:	4f26      	ldr	r7, [pc, #152]	; (80021f8 <HAL_FLASHEx_Erase+0xa0>)
{
 800215e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8002160:	7e3b      	ldrb	r3, [r7, #24]
{
 8002162:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8002164:	2b01      	cmp	r3, #1
 8002166:	d044      	beq.n	80021f2 <HAL_FLASHEx_Erase+0x9a>
 8002168:	2401      	movs	r4, #1
 800216a:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800216c:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800216e:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002172:	2b02      	cmp	r3, #2
 8002174:	d11a      	bne.n	80021ac <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002176:	f7ff ff63 	bl	8002040 <FLASH_WaitForLastOperation>
 800217a:	b120      	cbz	r0, 8002186 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 800217c:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800217e:	2300      	movs	r3, #0
 8002180:	763b      	strb	r3, [r7, #24]
}
 8002182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002186:	4c1d      	ldr	r4, [pc, #116]	; (80021fc <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002188:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800218a:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800218c:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002196:	6923      	ldr	r3, [r4, #16]
 8002198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800219c:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800219e:	f7ff ff4f 	bl	8002040 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80021a2:	6923      	ldr	r3, [r4, #16]
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	6123      	str	r3, [r4, #16]
 80021aa:	e7e8      	b.n	800217e <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80021ac:	f7ff ff48 	bl	8002040 <FLASH_WaitForLastOperation>
 80021b0:	2800      	cmp	r0, #0
 80021b2:	d1e3      	bne.n	800217c <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295
 80021b8:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021bc:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80021be:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80021c0:	4c0e      	ldr	r4, [pc, #56]	; (80021fc <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80021c2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80021c6:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 80021ca:	42b3      	cmp	r3, r6
 80021cc:	d9d7      	bls.n	800217e <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80021ce:	4630      	mov	r0, r6
 80021d0:	f7ff ffb0 	bl	8002134 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021d8:	f7ff ff32 	bl	8002040 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80021dc:	6923      	ldr	r3, [r4, #16]
 80021de:	f023 0302 	bic.w	r3, r3, #2
 80021e2:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80021e4:	b110      	cbz	r0, 80021ec <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 80021e6:	f8c8 6000 	str.w	r6, [r8]
            break;
 80021ea:	e7c8      	b.n	800217e <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 80021ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021f0:	e7e7      	b.n	80021c2 <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 80021f2:	2002      	movs	r0, #2
 80021f4:	e7c5      	b.n	8002182 <HAL_FLASHEx_Erase+0x2a>
 80021f6:	bf00      	nop
 80021f8:	20000370 	.word	0x20000370
 80021fc:	40022000 	.word	0x40022000

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002204:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002206:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002208:	4f64      	ldr	r7, [pc, #400]	; (800239c <HAL_GPIO_Init+0x19c>)
 800220a:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 800220c:	f8df c194 	ldr.w	ip, [pc, #404]	; 80023a4 <HAL_GPIO_Init+0x1a4>
 8002210:	f8df e194 	ldr.w	lr, [pc, #404]	; 80023a8 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002214:	680d      	ldr	r5, [r1, #0]
 8002216:	fa35 f406 	lsrs.w	r4, r5, r6
 800221a:	d102      	bne.n	8002222 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 800221c:	b003      	add	sp, #12
 800221e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002222:	f04f 0801 	mov.w	r8, #1
 8002226:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222a:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 800222e:	ea38 0505 	bics.w	r5, r8, r5
 8002232:	d17b      	bne.n	800232c <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8002234:	684d      	ldr	r5, [r1, #4]
 8002236:	2d03      	cmp	r5, #3
 8002238:	d807      	bhi.n	800224a <HAL_GPIO_Init+0x4a>
 800223a:	3d01      	subs	r5, #1
 800223c:	2d02      	cmp	r5, #2
 800223e:	f200 8088 	bhi.w	8002352 <HAL_GPIO_Init+0x152>
 8002242:	e8df f005 	tbb	[pc, r5]
 8002246:	9b96      	.short	0x9b96
 8002248:	a1          	.byte	0xa1
 8002249:	00          	.byte	0x00
 800224a:	2d12      	cmp	r5, #18
 800224c:	f000 8099 	beq.w	8002382 <HAL_GPIO_Init+0x182>
 8002250:	d86e      	bhi.n	8002330 <HAL_GPIO_Init+0x130>
 8002252:	2d11      	cmp	r5, #17
 8002254:	f000 808f 	beq.w	8002376 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002258:	2cff      	cmp	r4, #255	; 0xff
 800225a:	bf98      	it	ls
 800225c:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800225e:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002262:	bf88      	it	hi
 8002264:	f100 0a04 	addhi.w	sl, r0, #4
 8002268:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800226c:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002270:	bf88      	it	hi
 8002272:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002274:	fa09 fb05 	lsl.w	fp, r9, r5
 8002278:	ea28 080b 	bic.w	r8, r8, fp
 800227c:	fa02 f505 	lsl.w	r5, r2, r5
 8002280:	ea48 0505 	orr.w	r5, r8, r5
 8002284:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002288:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800228c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002290:	d04c      	beq.n	800232c <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002292:	69bd      	ldr	r5, [r7, #24]
 8002294:	f026 0803 	bic.w	r8, r6, #3
 8002298:	f045 0501 	orr.w	r5, r5, #1
 800229c:	61bd      	str	r5, [r7, #24]
 800229e:	69bd      	ldr	r5, [r7, #24]
 80022a0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80022a4:	f005 0501 	and.w	r5, r5, #1
 80022a8:	9501      	str	r5, [sp, #4]
 80022aa:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ae:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022b2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022b4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80022b8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022bc:	fa09 f90b 	lsl.w	r9, r9, fp
 80022c0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022c4:	4d39      	ldr	r5, [pc, #228]	; (80023ac <HAL_GPIO_Init+0x1ac>)
 80022c6:	42a8      	cmp	r0, r5
 80022c8:	d062      	beq.n	8002390 <HAL_GPIO_Init+0x190>
 80022ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022ce:	42a8      	cmp	r0, r5
 80022d0:	d060      	beq.n	8002394 <HAL_GPIO_Init+0x194>
 80022d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022d6:	42a8      	cmp	r0, r5
 80022d8:	d05e      	beq.n	8002398 <HAL_GPIO_Init+0x198>
 80022da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022de:	42a8      	cmp	r0, r5
 80022e0:	bf0c      	ite	eq
 80022e2:	2503      	moveq	r5, #3
 80022e4:	2504      	movne	r5, #4
 80022e6:	fa05 f50b 	lsl.w	r5, r5, fp
 80022ea:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80022ee:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80022f2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80022f8:	bf14      	ite	ne
 80022fa:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022fc:	43a5      	biceq	r5, r4
 80022fe:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002300:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002302:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002306:	bf14      	ite	ne
 8002308:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800230a:	43a5      	biceq	r5, r4
 800230c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800230e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002310:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002314:	bf14      	ite	ne
 8002316:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002318:	43a5      	biceq	r5, r4
 800231a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800231c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800231e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002322:	bf14      	ite	ne
 8002324:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002326:	ea25 0404 	biceq.w	r4, r5, r4
 800232a:	60dc      	str	r4, [r3, #12]
	position++;
 800232c:	3601      	adds	r6, #1
 800232e:	e771      	b.n	8002214 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002330:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80023b0 <HAL_GPIO_Init+0x1b0>
 8002334:	454d      	cmp	r5, r9
 8002336:	d00c      	beq.n	8002352 <HAL_GPIO_Init+0x152>
 8002338:	d817      	bhi.n	800236a <HAL_GPIO_Init+0x16a>
 800233a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800233e:	454d      	cmp	r5, r9
 8002340:	d007      	beq.n	8002352 <HAL_GPIO_Init+0x152>
 8002342:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002346:	454d      	cmp	r5, r9
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_Init+0x152>
 800234a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800234e:	454d      	cmp	r5, r9
 8002350:	d182      	bne.n	8002258 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002352:	688a      	ldr	r2, [r1, #8]
 8002354:	b1d2      	cbz	r2, 800238c <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002356:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002358:	bf08      	it	eq
 800235a:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800235e:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002362:	bf18      	it	ne
 8002364:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002368:	e776      	b.n	8002258 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800236a:	4565      	cmp	r5, ip
 800236c:	d0f1      	beq.n	8002352 <HAL_GPIO_Init+0x152>
 800236e:	4575      	cmp	r5, lr
 8002370:	e7ee      	b.n	8002350 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002372:	68ca      	ldr	r2, [r1, #12]
          break;
 8002374:	e770      	b.n	8002258 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002376:	68ca      	ldr	r2, [r1, #12]
 8002378:	3204      	adds	r2, #4
          break;
 800237a:	e76d      	b.n	8002258 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800237c:	68ca      	ldr	r2, [r1, #12]
 800237e:	3208      	adds	r2, #8
          break;
 8002380:	e76a      	b.n	8002258 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002382:	68ca      	ldr	r2, [r1, #12]
 8002384:	320c      	adds	r2, #12
          break;
 8002386:	e767      	b.n	8002258 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002388:	2200      	movs	r2, #0
 800238a:	e765      	b.n	8002258 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800238c:	2204      	movs	r2, #4
 800238e:	e763      	b.n	8002258 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002390:	2500      	movs	r5, #0
 8002392:	e7a8      	b.n	80022e6 <HAL_GPIO_Init+0xe6>
 8002394:	2501      	movs	r5, #1
 8002396:	e7a6      	b.n	80022e6 <HAL_GPIO_Init+0xe6>
 8002398:	2502      	movs	r5, #2
 800239a:	e7a4      	b.n	80022e6 <HAL_GPIO_Init+0xe6>
 800239c:	40021000 	.word	0x40021000
 80023a0:	40010400 	.word	0x40010400
 80023a4:	10310000 	.word	0x10310000
 80023a8:	10320000 	.word	0x10320000
 80023ac:	40010800 	.word	0x40010800
 80023b0:	10220000 	.word	0x10220000

080023b4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b4:	6883      	ldr	r3, [r0, #8]
 80023b6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80023b8:	bf14      	ite	ne
 80023ba:	2001      	movne	r0, #1
 80023bc:	2000      	moveq	r0, #0
 80023be:	4770      	bx	lr

080023c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023c0:	b10a      	cbz	r2, 80023c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023c2:	6101      	str	r1, [r0, #16]
  }
}
 80023c4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023c6:	0409      	lsls	r1, r1, #16
 80023c8:	e7fb      	b.n	80023c2 <HAL_GPIO_WritePin+0x2>

080023ca <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ca:	6801      	ldr	r1, [r0, #0]
 80023cc:	2200      	movs	r2, #0
 80023ce:	694b      	ldr	r3, [r1, #20]
 80023d0:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80023d4:	d010      	beq.n	80023f8 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80023da:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80023dc:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80023de:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e4:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023e8:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80023f4:	2001      	movs	r0, #1
 80023f6:	4770      	bx	lr
  }
  return HAL_OK;
 80023f8:	4618      	mov	r0, r3
}
 80023fa:	4770      	bx	lr

080023fc <I2C_WaitOnFlagUntilTimeout>:
{
 80023fc:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8002400:	4606      	mov	r6, r0
 8002402:	460f      	mov	r7, r1
 8002404:	4691      	mov	r9, r2
 8002406:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002408:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800240c:	6833      	ldr	r3, [r6, #0]
 800240e:	f1ba 0f01 	cmp.w	sl, #1
 8002412:	bf0c      	ite	eq
 8002414:	695c      	ldreq	r4, [r3, #20]
 8002416:	699c      	ldrne	r4, [r3, #24]
 8002418:	ea27 0404 	bic.w	r4, r7, r4
 800241c:	b2a4      	uxth	r4, r4
 800241e:	fab4 f484 	clz	r4, r4
 8002422:	0964      	lsrs	r4, r4, #5
 8002424:	45a1      	cmp	r9, r4
 8002426:	d001      	beq.n	800242c <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002428:	2000      	movs	r0, #0
 800242a:	e017      	b.n	800245c <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800242c:	1c6a      	adds	r2, r5, #1
 800242e:	d0ee      	beq.n	800240e <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002430:	f7ff fc22 	bl	8001c78 <HAL_GetTick>
 8002434:	9b08      	ldr	r3, [sp, #32]
 8002436:	1ac0      	subs	r0, r0, r3
 8002438:	42a8      	cmp	r0, r5
 800243a:	d801      	bhi.n	8002440 <I2C_WaitOnFlagUntilTimeout+0x44>
 800243c:	2d00      	cmp	r5, #0
 800243e:	d1e5      	bne.n	800240c <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002440:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002442:	2220      	movs	r2, #32
        return HAL_ERROR;
 8002444:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002446:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002448:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800244c:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002450:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002452:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002456:	f042 0220 	orr.w	r2, r2, #32
 800245a:	6432      	str	r2, [r6, #64]	; 0x40
}
 800245c:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08002460 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002464:	4604      	mov	r4, r0
 8002466:	460f      	mov	r7, r1
 8002468:	4616      	mov	r6, r2
 800246a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800246c:	6825      	ldr	r5, [r4, #0]
 800246e:	6968      	ldr	r0, [r5, #20]
 8002470:	ea27 0000 	bic.w	r0, r7, r0
 8002474:	b280      	uxth	r0, r0
 8002476:	b1b8      	cbz	r0, 80024a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002478:	696b      	ldr	r3, [r5, #20]
 800247a:	055a      	lsls	r2, r3, #21
 800247c:	d516      	bpl.n	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247e:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002480:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002486:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002488:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800248c:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800248e:	2300      	movs	r3, #0
 8002490:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002492:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002496:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800249a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800249c:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 80024a0:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024a2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80024a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80024a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80024ac:	1c73      	adds	r3, r6, #1
 80024ae:	d0de      	beq.n	800246e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b0:	f7ff fbe2 	bl	8001c78 <HAL_GetTick>
 80024b4:	eba0 0008 	sub.w	r0, r0, r8
 80024b8:	42b0      	cmp	r0, r6
 80024ba:	d801      	bhi.n	80024c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 80024bc:	2e00      	cmp	r6, #0
 80024be:	d1d5      	bne.n	800246c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024c0:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80024c2:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024c4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024d0:	f042 0220 	orr.w	r2, r2, #32
 80024d4:	e7e4      	b.n	80024a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

080024d6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80024d6:	b570      	push	{r4, r5, r6, lr}
 80024d8:	4604      	mov	r4, r0
 80024da:	460d      	mov	r5, r1
 80024dc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024de:	6821      	ldr	r1, [r4, #0]
 80024e0:	694b      	ldr	r3, [r1, #20]
 80024e2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80024e6:	d001      	beq.n	80024ec <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80024e8:	2000      	movs	r0, #0
 80024ea:	e010      	b.n	800250e <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024ec:	694a      	ldr	r2, [r1, #20]
 80024ee:	06d2      	lsls	r2, r2, #27
 80024f0:	d50e      	bpl.n	8002510 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f2:	f06f 0210 	mvn.w	r2, #16
 80024f6:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80024f8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80024fa:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002500:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002504:	6c22      	ldr	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002506:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002508:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800250a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800250e:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002510:	f7ff fbb2 	bl	8001c78 <HAL_GetTick>
 8002514:	1b80      	subs	r0, r0, r6
 8002516:	42a8      	cmp	r0, r5
 8002518:	d801      	bhi.n	800251e <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800251a:	2d00      	cmp	r5, #0
 800251c:	d1df      	bne.n	80024de <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800251e:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8002520:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002522:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002524:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002528:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800252c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800252e:	f042 0220 	orr.w	r2, r2, #32
 8002532:	e7e8      	b.n	8002506 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08002534 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	4604      	mov	r4, r0
 8002538:	460d      	mov	r5, r1
 800253a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	075b      	lsls	r3, r3, #29
 8002542:	d501      	bpl.n	8002548 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002544:	2000      	movs	r0, #0
}
 8002546:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff ff3e 	bl	80023ca <I2C_IsAcknowledgeFailed>
 800254e:	b9a8      	cbnz	r0, 800257c <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002550:	1c6a      	adds	r2, r5, #1
 8002552:	d0f3      	beq.n	800253c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002554:	f7ff fb90 	bl	8001c78 <HAL_GetTick>
 8002558:	1b80      	subs	r0, r0, r6
 800255a:	42a8      	cmp	r0, r5
 800255c:	d801      	bhi.n	8002562 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800255e:	2d00      	cmp	r5, #0
 8002560:	d1ec      	bne.n	800253c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002562:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002564:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002566:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002568:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800256c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002570:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002572:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002576:	f042 0220 	orr.w	r2, r2, #32
 800257a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800257c:	2001      	movs	r0, #1
 800257e:	e7e2      	b.n	8002546 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08002580 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002580:	b570      	push	{r4, r5, r6, lr}
 8002582:	4604      	mov	r4, r0
 8002584:	460d      	mov	r5, r1
 8002586:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	061b      	lsls	r3, r3, #24
 800258e:	d501      	bpl.n	8002594 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002590:	2000      	movs	r0, #0
}
 8002592:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002594:	4620      	mov	r0, r4
 8002596:	f7ff ff18 	bl	80023ca <I2C_IsAcknowledgeFailed>
 800259a:	b9a8      	cbnz	r0, 80025c8 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800259c:	1c6a      	adds	r2, r5, #1
 800259e:	d0f3      	beq.n	8002588 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a0:	f7ff fb6a 	bl	8001c78 <HAL_GetTick>
 80025a4:	1b80      	subs	r0, r0, r6
 80025a6:	42a8      	cmp	r0, r5
 80025a8:	d801      	bhi.n	80025ae <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80025aa:	2d00      	cmp	r5, #0
 80025ac:	d1ec      	bne.n	8002588 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025ae:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80025b0:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025b2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025b4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80025be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c2:	f042 0220 	orr.w	r2, r2, #32
 80025c6:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80025c8:	2001      	movs	r0, #1
 80025ca:	e7e2      	b.n	8002592 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

080025cc <I2C_RequestMemoryWrite>:
{
 80025cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025d0:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d2:	6802      	ldr	r2, [r0, #0]
{
 80025d4:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d6:	6813      	ldr	r3, [r2, #0]
{
 80025d8:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025de:	6013      	str	r3, [r2, #0]
{
 80025e0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80025e4:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e6:	463b      	mov	r3, r7
 80025e8:	2200      	movs	r2, #0
 80025ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025ee:	f8cd 8000 	str.w	r8, [sp]
{
 80025f2:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025f4:	f7ff ff02 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	b138      	cbz	r0, 800260c <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	05db      	lsls	r3, r3, #23
 8002600:	d502      	bpl.n	8002608 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002606:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002608:	2003      	movs	r0, #3
 800260a:	e00a      	b.n	8002622 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800260c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8002610:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002612:	463a      	mov	r2, r7
 8002614:	4643      	mov	r3, r8
 8002616:	4620      	mov	r0, r4
 8002618:	4917      	ldr	r1, [pc, #92]	; (8002678 <I2C_RequestMemoryWrite+0xac>)
 800261a:	f7ff ff21 	bl	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800261e:	b118      	cbz	r0, 8002628 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8002620:	2001      	movs	r0, #1
}
 8002622:	b005      	add	sp, #20
 8002624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	9003      	str	r0, [sp, #12]
 800262c:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800262e:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002630:	9203      	str	r2, [sp, #12]
 8002632:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002634:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002636:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002638:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800263c:	f7ff ffa0 	bl	8002580 <I2C_WaitOnTXEFlagUntilTimeout>
 8002640:	b140      	cbz	r0, 8002654 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002642:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002644:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002646:	bf01      	itttt	eq
 8002648:	6822      	ldreq	r2, [r4, #0]
 800264a:	6813      	ldreq	r3, [r2, #0]
 800264c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002650:	6013      	streq	r3, [r2, #0]
 8002652:	e7e5      	b.n	8002620 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002654:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800265a:	d102      	bne.n	8002662 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800265c:	b2ed      	uxtb	r5, r5
 800265e:	611d      	str	r5, [r3, #16]
 8002660:	e7df      	b.n	8002622 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002662:	0a2a      	lsrs	r2, r5, #8
 8002664:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002666:	4639      	mov	r1, r7
 8002668:	4642      	mov	r2, r8
 800266a:	4620      	mov	r0, r4
 800266c:	f7ff ff88 	bl	8002580 <I2C_WaitOnTXEFlagUntilTimeout>
 8002670:	2800      	cmp	r0, #0
 8002672:	d1e6      	bne.n	8002642 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	e7f1      	b.n	800265c <I2C_RequestMemoryWrite+0x90>
 8002678:	00010002 	.word	0x00010002

0800267c <I2C_RequestMemoryRead>:
{
 800267c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002680:	469a      	mov	sl, r3
 8002682:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002686:	6803      	ldr	r3, [r0, #0]
{
 8002688:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268a:	681a      	ldr	r2, [r3, #0]
{
 800268c:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002692:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002694:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800269a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269e:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026a0:	463b      	mov	r3, r7
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8cd 8000 	str.w	r8, [sp]
{
 80026a8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026aa:	f7ff fea7 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	b148      	cbz	r0, 80026c6 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026b2:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026b4:	05db      	lsls	r3, r3, #23
 80026b6:	d502      	bpl.n	80026be <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026bc:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80026be:	2003      	movs	r0, #3
}
 80026c0:	b004      	add	sp, #16
 80026c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026c6:	fa5f f986 	uxtb.w	r9, r6
 80026ca:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80026ce:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026d0:	463a      	mov	r2, r7
 80026d2:	4643      	mov	r3, r8
 80026d4:	4620      	mov	r0, r4
 80026d6:	4929      	ldr	r1, [pc, #164]	; (800277c <I2C_RequestMemoryRead+0x100>)
 80026d8:	f7ff fec2 	bl	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026dc:	b108      	cbz	r0, 80026e2 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 80026de:	2001      	movs	r0, #1
 80026e0:	e7ee      	b.n	80026c0 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	9003      	str	r0, [sp, #12]
 80026e6:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e8:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ea:	9203      	str	r2, [sp, #12]
 80026ec:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ee:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f0:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f2:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f4:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f6:	f7ff ff43 	bl	8002580 <I2C_WaitOnTXEFlagUntilTimeout>
 80026fa:	b140      	cbz	r0, 800270e <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026fe:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002700:	bf01      	itttt	eq
 8002702:	6822      	ldreq	r2, [r4, #0]
 8002704:	6813      	ldreq	r3, [r2, #0]
 8002706:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800270a:	6013      	streq	r3, [r2, #0]
 800270c:	e7e7      	b.n	80026de <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800270e:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002712:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002714:	d11a      	bne.n	800274c <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002716:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002718:	4642      	mov	r2, r8
 800271a:	4639      	mov	r1, r7
 800271c:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800271e:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002720:	f7ff ff2e 	bl	8002580 <I2C_WaitOnTXEFlagUntilTimeout>
 8002724:	4602      	mov	r2, r0
 8002726:	2800      	cmp	r0, #0
 8002728:	d1e8      	bne.n	80026fc <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800272a:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800272c:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800272e:	680b      	ldr	r3, [r1, #0]
 8002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002734:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002736:	463b      	mov	r3, r7
 8002738:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800273c:	f8cd 8000 	str.w	r8, [sp]
 8002740:	f7ff fe5c 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 8002744:	6822      	ldr	r2, [r4, #0]
 8002746:	b160      	cbz	r0, 8002762 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002748:	6813      	ldr	r3, [r2, #0]
 800274a:	e7b3      	b.n	80026b4 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800274c:	0a2a      	lsrs	r2, r5, #8
 800274e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002750:	4639      	mov	r1, r7
 8002752:	4642      	mov	r2, r8
 8002754:	4620      	mov	r0, r4
 8002756:	f7ff ff13 	bl	8002580 <I2C_WaitOnTXEFlagUntilTimeout>
 800275a:	2800      	cmp	r0, #0
 800275c:	d1ce      	bne.n	80026fc <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	e7d9      	b.n	8002716 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002762:	f049 0301 	orr.w	r3, r9, #1
 8002766:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002768:	4620      	mov	r0, r4
 800276a:	4643      	mov	r3, r8
 800276c:	463a      	mov	r2, r7
 800276e:	4903      	ldr	r1, [pc, #12]	; (800277c <I2C_RequestMemoryRead+0x100>)
 8002770:	f7ff fe76 	bl	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8002774:	3800      	subs	r0, #0
 8002776:	bf18      	it	ne
 8002778:	2001      	movne	r0, #1
 800277a:	e7a1      	b.n	80026c0 <I2C_RequestMemoryRead+0x44>
 800277c:	00010002 	.word	0x00010002

08002780 <HAL_I2C_Init>:
{
 8002780:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002782:	4604      	mov	r4, r0
 8002784:	b908      	cbnz	r0, 800278a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002786:	2001      	movs	r0, #1
}
 8002788:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800278a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800278e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002792:	b91b      	cbnz	r3, 800279c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002794:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002798:	f7ff f8e6 	bl	8001968 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	2324      	movs	r3, #36	; 0x24
 800279e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ba:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027bc:	f000 fcce 	bl	800315c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027c0:	4a3f      	ldr	r2, [pc, #252]	; (80028c0 <HAL_I2C_Init+0x140>)
 80027c2:	6863      	ldr	r3, [r4, #4]
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bf94      	ite	ls
 80027c8:	4a3e      	ldrls	r2, [pc, #248]	; (80028c4 <HAL_I2C_Init+0x144>)
 80027ca:	4a3f      	ldrhi	r2, [pc, #252]	; (80028c8 <HAL_I2C_Init+0x148>)
 80027cc:	4290      	cmp	r0, r2
 80027ce:	bf8c      	ite	hi
 80027d0:	2200      	movhi	r2, #0
 80027d2:	2201      	movls	r2, #1
 80027d4:	2a00      	cmp	r2, #0
 80027d6:	d1d6      	bne.n	8002786 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027d8:	4e39      	ldr	r6, [pc, #228]	; (80028c0 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 80027da:	493c      	ldr	r1, [pc, #240]	; (80028cc <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027dc:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 80027de:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027e2:	bf88      	it	hi
 80027e4:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027e8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027ea:	f100 30ff 	add.w	r0, r0, #4294967295
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ee:	6855      	ldr	r5, [r2, #4]
 80027f0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80027f4:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027f8:	bf82      	ittt	hi
 80027fa:	4371      	mulhi	r1, r6
 80027fc:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002800:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002804:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002806:	6a15      	ldr	r5, [r2, #32]
 8002808:	3101      	adds	r1, #1
 800280a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800280e:	4329      	orrs	r1, r5
 8002810:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002812:	69d1      	ldr	r1, [r2, #28]
 8002814:	4d2a      	ldr	r5, [pc, #168]	; (80028c0 <HAL_I2C_Init+0x140>)
 8002816:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800281a:	42ab      	cmp	r3, r5
 800281c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002820:	d832      	bhi.n	8002888 <HAL_I2C_Init+0x108>
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fbb0 f0f3 	udiv	r0, r0, r3
 8002828:	1c43      	adds	r3, r0, #1
 800282a:	f640 70fc 	movw	r0, #4092	; 0xffc
 800282e:	4203      	tst	r3, r0
 8002830:	d042      	beq.n	80028b8 <HAL_I2C_Init+0x138>
 8002832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002836:	430b      	orrs	r3, r1
 8002838:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800283a:	6811      	ldr	r1, [r2, #0]
 800283c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002840:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002844:	4303      	orrs	r3, r0
 8002846:	430b      	orrs	r3, r1
 8002848:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800284a:	6891      	ldr	r1, [r2, #8]
 800284c:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002850:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002854:	4303      	orrs	r3, r0
 8002856:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800285a:	430b      	orrs	r3, r1
 800285c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800285e:	68d1      	ldr	r1, [r2, #12]
 8002860:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002864:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002868:	4303      	orrs	r3, r0
 800286a:	430b      	orrs	r3, r1
 800286c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800286e:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002870:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002878:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800287a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800287c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002880:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002882:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002886:	e77f      	b.n	8002788 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002888:	68a5      	ldr	r5, [r4, #8]
 800288a:	b955      	cbnz	r5, 80028a2 <HAL_I2C_Init+0x122>
 800288c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002890:	fbb0 f3f3 	udiv	r3, r0, r3
 8002894:	3301      	adds	r3, #1
 8002896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289a:	b17b      	cbz	r3, 80028bc <HAL_I2C_Init+0x13c>
 800289c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a0:	e7c9      	b.n	8002836 <HAL_I2C_Init+0xb6>
 80028a2:	2519      	movs	r5, #25
 80028a4:	436b      	muls	r3, r5
 80028a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b0:	b123      	cbz	r3, 80028bc <HAL_I2C_Init+0x13c>
 80028b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b6:	e7be      	b.n	8002836 <HAL_I2C_Init+0xb6>
 80028b8:	2304      	movs	r3, #4
 80028ba:	e7bc      	b.n	8002836 <HAL_I2C_Init+0xb6>
 80028bc:	2301      	movs	r3, #1
 80028be:	e7ba      	b.n	8002836 <HAL_I2C_Init+0xb6>
 80028c0:	000186a0 	.word	0x000186a0
 80028c4:	001e847f 	.word	0x001e847f
 80028c8:	003d08ff 	.word	0x003d08ff
 80028cc:	000f4240 	.word	0x000f4240

080028d0 <HAL_I2C_Mem_Write>:
{
 80028d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80028d4:	4604      	mov	r4, r0
 80028d6:	4699      	mov	r9, r3
 80028d8:	460f      	mov	r7, r1
 80028da:	4690      	mov	r8, r2
 80028dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80028de:	f7ff f9cb 	bl	8001c78 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80028e6:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e8:	2b20      	cmp	r3, #32
 80028ea:	d003      	beq.n	80028f4 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80028ec:	2002      	movs	r0, #2
}
 80028ee:	b003      	add	sp, #12
 80028f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028f4:	9000      	str	r0, [sp, #0]
 80028f6:	2319      	movs	r3, #25
 80028f8:	2201      	movs	r2, #1
 80028fa:	4620      	mov	r0, r4
 80028fc:	493a      	ldr	r1, [pc, #232]	; (80029e8 <HAL_I2C_Mem_Write+0x118>)
 80028fe:	f7ff fd7d 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 8002902:	2800      	cmp	r0, #0
 8002904:	d1f2      	bne.n	80028ec <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8002906:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800290a:	2b01      	cmp	r3, #1
 800290c:	d0ee      	beq.n	80028ec <HAL_I2C_Mem_Write+0x1c>
 800290e:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002910:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8002912:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002916:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002918:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800291a:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800291c:	bf58      	it	pl
 800291e:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002920:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8002922:	bf5c      	itt	pl
 8002924:	f043 0301 	orrpl.w	r3, r3, #1
 8002928:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800292a:	6803      	ldr	r3, [r0, #0]
 800292c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002930:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002932:	2321      	movs	r3, #33	; 0x21
 8002934:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002938:	2340      	movs	r3, #64	; 0x40
 800293a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800293e:	2300      	movs	r3, #0
 8002940:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002944:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8002946:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002948:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800294c:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 8002950:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002952:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002954:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002956:	4b25      	ldr	r3, [pc, #148]	; (80029ec <HAL_I2C_Mem_Write+0x11c>)
 8002958:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800295a:	464b      	mov	r3, r9
 800295c:	f7ff fe36 	bl	80025cc <I2C_RequestMemoryWrite>
 8002960:	2800      	cmp	r0, #0
 8002962:	d02a      	beq.n	80029ba <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8002964:	2001      	movs	r0, #1
 8002966:	e7c2      	b.n	80028ee <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002968:	f7ff fe0a 	bl	8002580 <I2C_WaitOnTXEFlagUntilTimeout>
 800296c:	b140      	cbz	r0, 8002980 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002970:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002972:	bf01      	itttt	eq
 8002974:	6822      	ldreq	r2, [r4, #0]
 8002976:	6813      	ldreq	r3, [r2, #0]
 8002978:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800297c:	6013      	streq	r3, [r2, #0]
 800297e:	e7f1      	b.n	8002964 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002982:	6827      	ldr	r7, [r4, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	f812 1b01 	ldrb.w	r1, [r2], #1
 800298a:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800298c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800298e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002990:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002992:	3a01      	subs	r2, #1
 8002994:	b292      	uxth	r2, r2
 8002996:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002998:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 800299a:	1e48      	subs	r0, r1, #1
 800299c:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800299e:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80029a0:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029a2:	d50a      	bpl.n	80029ba <HAL_I2C_Mem_Write+0xea>
 80029a4:	b148      	cbz	r0, 80029ba <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029a6:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 80029a8:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029aa:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80029ac:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80029ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80029b0:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80029b6:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80029b8:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029bc:	462a      	mov	r2, r5
 80029be:	4631      	mov	r1, r6
 80029c0:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1d0      	bne.n	8002968 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c6:	f7ff fdb5 	bl	8002534 <I2C_WaitOnBTFFlagUntilTimeout>
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d1cf      	bne.n	800296e <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ce:	6822      	ldr	r2, [r4, #0]
 80029d0:	6813      	ldr	r3, [r2, #0]
 80029d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80029da:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80029de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80029e6:	e782      	b.n	80028ee <HAL_I2C_Mem_Write+0x1e>
 80029e8:	00100002 	.word	0x00100002
 80029ec:	ffff0000 	.word	0xffff0000

080029f0 <HAL_I2C_Mem_Read>:
{
 80029f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029f4:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 80029f6:	2300      	movs	r3, #0
{
 80029f8:	4604      	mov	r4, r0
 80029fa:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 80029fc:	9303      	str	r3, [sp, #12]
{
 80029fe:	460d      	mov	r5, r1
 8002a00:	4690      	mov	r8, r2
 8002a02:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8002a04:	f7ff f938 	bl	8001c78 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a08:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d004      	beq.n	8002a1c <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8002a12:	2502      	movs	r5, #2
}
 8002a14:	4628      	mov	r0, r5
 8002a16:	b009      	add	sp, #36	; 0x24
 8002a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a1c:	9000      	str	r0, [sp, #0]
 8002a1e:	2319      	movs	r3, #25
 8002a20:	2201      	movs	r2, #1
 8002a22:	4620      	mov	r0, r4
 8002a24:	498d      	ldr	r1, [pc, #564]	; (8002c5c <HAL_I2C_Mem_Read+0x26c>)
 8002a26:	f7ff fce9 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	d1f1      	bne.n	8002a12 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8002a2e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d0ed      	beq.n	8002a12 <HAL_I2C_Mem_Read+0x22>
 8002a36:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a38:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8002a3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a3e:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a40:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a42:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8002a44:	bf58      	it	pl
 8002a46:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a48:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8002a4a:	bf5c      	itt	pl
 8002a4c:	f043 0301 	orrpl.w	r3, r3, #1
 8002a50:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a52:	6803      	ldr	r3, [r0, #0]
 8002a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a58:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a5a:	2322      	movs	r3, #34	; 0x22
 8002a5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a60:	2340      	movs	r3, #64	; 0x40
 8002a62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a6c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8002a6e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a70:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a74:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8002a78:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a7c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a7e:	4b78      	ldr	r3, [pc, #480]	; (8002c60 <HAL_I2C_Mem_Read+0x270>)
 8002a80:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a82:	464b      	mov	r3, r9
 8002a84:	f7ff fdfa 	bl	800267c <I2C_RequestMemoryRead>
 8002a88:	4605      	mov	r5, r0
 8002a8a:	b108      	cbz	r0, 8002a90 <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 8002a8c:	2501      	movs	r5, #1
 8002a8e:	e7c1      	b.n	8002a14 <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8002a90:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8002a94:	b9c2      	cbnz	r2, 8002ac8 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a96:	9004      	str	r0, [sp, #16]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	9204      	str	r2, [sp, #16]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	9204      	str	r2, [sp, #16]
 8002aa0:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa8:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aaa:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8002c64 <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002aae:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8002c68 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 8002ab2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d137      	bne.n	8002b28 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8002aba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002ac6:	e7a5      	b.n	8002a14 <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8002ac8:	2a01      	cmp	r2, #1
 8002aca:	d111      	bne.n	8002af0 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	9005      	str	r0, [sp, #20]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	9205      	str	r2, [sp, #20]
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	9205      	str	r2, [sp, #20]
 8002ae2:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002aec:	b662      	cpsie	i
}
 8002aee:	e7dc      	b.n	8002aaa <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 8002af0:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af2:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8002af4:	d10e      	bne.n	8002b14 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002afa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002afc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	9006      	str	r0, [sp, #24]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	9206      	str	r2, [sp, #24]
 8002b06:	699a      	ldr	r2, [r3, #24]
 8002b08:	9206      	str	r2, [sp, #24]
 8002b0a:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b12:	e7ea      	b.n	8002aea <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b18:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1a:	9007      	str	r0, [sp, #28]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	9207      	str	r2, [sp, #28]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	9307      	str	r3, [sp, #28]
 8002b24:	9b07      	ldr	r3, [sp, #28]
 8002b26:	e7c0      	b.n	8002aaa <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d878      	bhi.n	8002c1e <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d115      	bne.n	8002b5c <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b30:	4632      	mov	r2, r6
 8002b32:	4639      	mov	r1, r7
 8002b34:	4620      	mov	r0, r4
 8002b36:	f7ff fcce 	bl	80024d6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d1a6      	bne.n	8002a8c <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b44:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b48:	3301      	adds	r3, #1
 8002b4a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002b4c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002b5a:	e7aa      	b.n	8002ab2 <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8002b5c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	463b      	mov	r3, r7
 8002b64:	4641      	mov	r1, r8
 8002b66:	4620      	mov	r0, r4
 8002b68:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8002b6a:	d118      	bne.n	8002b9e <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6c:	f7ff fc46 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	d18b      	bne.n	8002a8c <HAL_I2C_Mem_Read+0x9c>
 8002b74:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b84:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b88:	3301      	adds	r3, #1
 8002b8a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002b8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b9a:	b662      	cpsie	i
 8002b9c:	e7cf      	b.n	8002b3e <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b9e:	f7ff fc2d 	bl	80023fc <I2C_WaitOnFlagUntilTimeout>
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	f47f af72 	bne.w	8002a8c <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba8:	6822      	ldr	r2, [r4, #0]
 8002baa:	6813      	ldr	r3, [r2, #0]
 8002bac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bb0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb2:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002bb4:	f246 11a8 	movw	r1, #25000	; 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bbe:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002bc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002bc2:	1c53      	adds	r3, r2, #1
 8002bc4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002bc6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002bcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002bd4:	f8d9 3000 	ldr.w	r3, [r9]
 8002bd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bdc:	2123      	movs	r1, #35	; 0x23
 8002bde:	434b      	muls	r3, r1
 8002be0:	9303      	str	r3, [sp, #12]
            count--;
 8002be2:	9b03      	ldr	r3, [sp, #12]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8002be8:	9b03      	ldr	r3, [sp, #12]
 8002bea:	b96b      	cbnz	r3, 8002c08 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8002bec:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002bee:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002bf0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002bfa:	f042 0220 	orr.w	r2, r2, #32
 8002bfe:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002c00:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8002c02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002c06:	e741      	b.n	8002a8c <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	6959      	ldr	r1, [r3, #20]
 8002c0c:	0748      	lsls	r0, r1, #29
 8002c0e:	d5e8      	bpl.n	8002be2 <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c10:	6819      	ldr	r1, [r3, #0]
 8002c12:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002c16:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	7053      	strb	r3, [r2, #1]
 8002c1c:	e7b3      	b.n	8002b86 <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1e:	4632      	mov	r2, r6
 8002c20:	4639      	mov	r1, r7
 8002c22:	4620      	mov	r0, r4
 8002c24:	f7ff fc57 	bl	80024d6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	f47f af2f 	bne.w	8002a8c <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c34:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c38:	1c53      	adds	r3, r2, #1
 8002c3a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002c3c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002c42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	6959      	ldr	r1, [r3, #20]
 8002c4e:	0749      	lsls	r1, r1, #29
 8002c50:	f57f af2f 	bpl.w	8002ab2 <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	7053      	strb	r3, [r2, #1]
 8002c58:	e775      	b.n	8002b46 <HAL_I2C_Mem_Read+0x156>
 8002c5a:	bf00      	nop
 8002c5c:	00100002 	.word	0x00100002
 8002c60:	ffff0000 	.word	0xffff0000
 8002c64:	00010004 	.word	0x00010004
 8002c68:	20000034 	.word	0x20000034

08002c6c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	4b01      	ldr	r3, [pc, #4]	; (8002c74 <HAL_PWR_EnableBkUpAccess+0x8>)
 8002c70:	621a      	str	r2, [r3, #32]
}
 8002c72:	4770      	bx	lr
 8002c74:	420e0000 	.word	0x420e0000

08002c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c7c:	4605      	mov	r5, r0
 8002c7e:	b338      	cbz	r0, 8002cd0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c80:	6803      	ldr	r3, [r0, #0]
 8002c82:	07db      	lsls	r3, r3, #31
 8002c84:	d410      	bmi.n	8002ca8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c86:	682b      	ldr	r3, [r5, #0]
 8002c88:	079f      	lsls	r7, r3, #30
 8002c8a:	d45e      	bmi.n	8002d4a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8c:	682b      	ldr	r3, [r5, #0]
 8002c8e:	0719      	lsls	r1, r3, #28
 8002c90:	f100 8095 	bmi.w	8002dbe <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c94:	682b      	ldr	r3, [r5, #0]
 8002c96:	075a      	lsls	r2, r3, #29
 8002c98:	f100 80c1 	bmi.w	8002e1e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9c:	69e8      	ldr	r0, [r5, #28]
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	f040 812c 	bne.w	8002efc <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	e029      	b.n	8002cfc <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca8:	4c90      	ldr	r4, [pc, #576]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002caa:	6863      	ldr	r3, [r4, #4]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d007      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cb4:	6863      	ldr	r3, [r4, #4]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x5c>
 8002cbe:	6863      	ldr	r3, [r4, #4]
 8002cc0:	03de      	lsls	r6, r3, #15
 8002cc2:	d507      	bpl.n	8002cd4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	039c      	lsls	r4, r3, #14
 8002cc8:	d5dd      	bpl.n	8002c86 <HAL_RCC_OscConfig+0xe>
 8002cca:	686b      	ldr	r3, [r5, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1da      	bne.n	8002c86 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	e013      	b.n	8002cfc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd4:	686b      	ldr	r3, [r5, #4]
 8002cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cda:	d112      	bne.n	8002d02 <HAL_RCC_OscConfig+0x8a>
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002ce4:	f7fe ffc8 	bl	8001c78 <HAL_GetTick>
 8002ce8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	0398      	lsls	r0, r3, #14
 8002cee:	d4ca      	bmi.n	8002c86 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7fe ffc2 	bl	8001c78 <HAL_GetTick>
 8002cf4:	1b80      	subs	r0, r0, r6
 8002cf6:	2864      	cmp	r0, #100	; 0x64
 8002cf8:	d9f7      	bls.n	8002cea <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8002cfa:	2003      	movs	r0, #3
}
 8002cfc:	b002      	add	sp, #8
 8002cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d02:	b99b      	cbnz	r3, 8002d2c <HAL_RCC_OscConfig+0xb4>
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0a:	6023      	str	r3, [r4, #0]
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d12:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d14:	f7fe ffb0 	bl	8001c78 <HAL_GetTick>
 8002d18:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	0399      	lsls	r1, r3, #14
 8002d1e:	d5b2      	bpl.n	8002c86 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d20:	f7fe ffaa 	bl	8001c78 <HAL_GetTick>
 8002d24:	1b80      	subs	r0, r0, r6
 8002d26:	2864      	cmp	r0, #100	; 0x64
 8002d28:	d9f7      	bls.n	8002d1a <HAL_RCC_OscConfig+0xa2>
 8002d2a:	e7e6      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	d103      	bne.n	8002d3c <HAL_RCC_OscConfig+0xc4>
 8002d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d38:	6023      	str	r3, [r4, #0]
 8002d3a:	e7cf      	b.n	8002cdc <HAL_RCC_OscConfig+0x64>
 8002d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d40:	6023      	str	r3, [r4, #0]
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d48:	e7cb      	b.n	8002ce2 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d4a:	4c68      	ldr	r4, [pc, #416]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d4c:	6863      	ldr	r3, [r4, #4]
 8002d4e:	f013 0f0c 	tst.w	r3, #12
 8002d52:	d007      	beq.n	8002d64 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d54:	6863      	ldr	r3, [r4, #4]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d110      	bne.n	8002d80 <HAL_RCC_OscConfig+0x108>
 8002d5e:	6863      	ldr	r3, [r4, #4]
 8002d60:	03da      	lsls	r2, r3, #15
 8002d62:	d40d      	bmi.n	8002d80 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	079b      	lsls	r3, r3, #30
 8002d68:	d502      	bpl.n	8002d70 <HAL_RCC_OscConfig+0xf8>
 8002d6a:	692b      	ldr	r3, [r5, #16]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d1af      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	696a      	ldr	r2, [r5, #20]
 8002d74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	e785      	b.n	8002c8c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d80:	692a      	ldr	r2, [r5, #16]
 8002d82:	4b5b      	ldr	r3, [pc, #364]	; (8002ef0 <HAL_RCC_OscConfig+0x278>)
 8002d84:	b16a      	cbz	r2, 8002da2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d8a:	f7fe ff75 	bl	8001c78 <HAL_GetTick>
 8002d8e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	079f      	lsls	r7, r3, #30
 8002d94:	d4ec      	bmi.n	8002d70 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fe ff6f 	bl	8001c78 <HAL_GetTick>
 8002d9a:	1b80      	subs	r0, r0, r6
 8002d9c:	2802      	cmp	r0, #2
 8002d9e:	d9f7      	bls.n	8002d90 <HAL_RCC_OscConfig+0x118>
 8002da0:	e7ab      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8002da2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002da4:	f7fe ff68 	bl	8001c78 <HAL_GetTick>
 8002da8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	0798      	lsls	r0, r3, #30
 8002dae:	f57f af6d 	bpl.w	8002c8c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db2:	f7fe ff61 	bl	8001c78 <HAL_GetTick>
 8002db6:	1b80      	subs	r0, r0, r6
 8002db8:	2802      	cmp	r0, #2
 8002dba:	d9f6      	bls.n	8002daa <HAL_RCC_OscConfig+0x132>
 8002dbc:	e79d      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dbe:	69aa      	ldr	r2, [r5, #24]
 8002dc0:	4e4a      	ldr	r6, [pc, #296]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002dc2:	4b4b      	ldr	r3, [pc, #300]	; (8002ef0 <HAL_RCC_OscConfig+0x278>)
 8002dc4:	b1e2      	cbz	r2, 8002e00 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002dcc:	f7fe ff54 	bl	8001c78 <HAL_GetTick>
 8002dd0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002dd4:	079b      	lsls	r3, r3, #30
 8002dd6:	d50d      	bpl.n	8002df4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dd8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002ddc:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <HAL_RCC_OscConfig+0x27c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002de4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002de6:	bf00      	nop
  }
  while (Delay --);
 8002de8:	9b01      	ldr	r3, [sp, #4]
 8002dea:	1e5a      	subs	r2, r3, #1
 8002dec:	9201      	str	r2, [sp, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f9      	bne.n	8002de6 <HAL_RCC_OscConfig+0x16e>
 8002df2:	e74f      	b.n	8002c94 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df4:	f7fe ff40 	bl	8001c78 <HAL_GetTick>
 8002df8:	1b00      	subs	r0, r0, r4
 8002dfa:	2802      	cmp	r0, #2
 8002dfc:	d9e9      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x15a>
 8002dfe:	e77c      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002e00:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002e04:	f7fe ff38 	bl	8001c78 <HAL_GetTick>
 8002e08:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002e0c:	079f      	lsls	r7, r3, #30
 8002e0e:	f57f af41 	bpl.w	8002c94 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e12:	f7fe ff31 	bl	8001c78 <HAL_GetTick>
 8002e16:	1b00      	subs	r0, r0, r4
 8002e18:	2802      	cmp	r0, #2
 8002e1a:	d9f6      	bls.n	8002e0a <HAL_RCC_OscConfig+0x192>
 8002e1c:	e76d      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4c33      	ldr	r4, [pc, #204]	; (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e20:	69e3      	ldr	r3, [r4, #28]
 8002e22:	00d8      	lsls	r0, r3, #3
 8002e24:	d424      	bmi.n	8002e70 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8002e26:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e28:	69e3      	ldr	r3, [r4, #28]
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	61e3      	str	r3, [r4, #28]
 8002e30:	69e3      	ldr	r3, [r4, #28]
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	4e2f      	ldr	r6, [pc, #188]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e3c:	6833      	ldr	r3, [r6, #0]
 8002e3e:	05d9      	lsls	r1, r3, #23
 8002e40:	d518      	bpl.n	8002e74 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e42:	68eb      	ldr	r3, [r5, #12]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d126      	bne.n	8002e96 <HAL_RCC_OscConfig+0x21e>
 8002e48:	6a23      	ldr	r3, [r4, #32]
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002e50:	f7fe ff12 	bl	8001c78 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e58:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5a:	6a23      	ldr	r3, [r4, #32]
 8002e5c:	079b      	lsls	r3, r3, #30
 8002e5e:	d53f      	bpl.n	8002ee0 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8002e60:	2f00      	cmp	r7, #0
 8002e62:	f43f af1b 	beq.w	8002c9c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e66:	69e3      	ldr	r3, [r4, #28]
 8002e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	61e3      	str	r3, [r4, #28]
 8002e6e:	e715      	b.n	8002c9c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002e70:	2700      	movs	r7, #0
 8002e72:	e7e2      	b.n	8002e3a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e74:	6833      	ldr	r3, [r6, #0]
 8002e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002e7c:	f7fe fefc 	bl	8001c78 <HAL_GetTick>
 8002e80:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e82:	6833      	ldr	r3, [r6, #0]
 8002e84:	05da      	lsls	r2, r3, #23
 8002e86:	d4dc      	bmi.n	8002e42 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e88:	f7fe fef6 	bl	8001c78 <HAL_GetTick>
 8002e8c:	eba0 0008 	sub.w	r0, r0, r8
 8002e90:	2864      	cmp	r0, #100	; 0x64
 8002e92:	d9f6      	bls.n	8002e82 <HAL_RCC_OscConfig+0x20a>
 8002e94:	e731      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e96:	b9ab      	cbnz	r3, 8002ec4 <HAL_RCC_OscConfig+0x24c>
 8002e98:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	6223      	str	r3, [r4, #32]
 8002ea4:	6a23      	ldr	r3, [r4, #32]
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002eac:	f7fe fee4 	bl	8001c78 <HAL_GetTick>
 8002eb0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb2:	6a23      	ldr	r3, [r4, #32]
 8002eb4:	0798      	lsls	r0, r3, #30
 8002eb6:	d5d3      	bpl.n	8002e60 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fede 	bl	8001c78 <HAL_GetTick>
 8002ebc:	1b80      	subs	r0, r0, r6
 8002ebe:	4540      	cmp	r0, r8
 8002ec0:	d9f7      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x23a>
 8002ec2:	e71a      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	6a23      	ldr	r3, [r4, #32]
 8002ec8:	d103      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x25a>
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6223      	str	r3, [r4, #32]
 8002ed0:	e7ba      	b.n	8002e48 <HAL_RCC_OscConfig+0x1d0>
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	6223      	str	r3, [r4, #32]
 8002ed8:	6a23      	ldr	r3, [r4, #32]
 8002eda:	f023 0304 	bic.w	r3, r3, #4
 8002ede:	e7b6      	b.n	8002e4e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fe feca 	bl	8001c78 <HAL_GetTick>
 8002ee4:	1b80      	subs	r0, r0, r6
 8002ee6:	4540      	cmp	r0, r8
 8002ee8:	d9b7      	bls.n	8002e5a <HAL_RCC_OscConfig+0x1e2>
 8002eea:	e706      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	42420000 	.word	0x42420000
 8002ef4:	20000034 	.word	0x20000034
 8002ef8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002efc:	4c2a      	ldr	r4, [pc, #168]	; (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002efe:	6863      	ldr	r3, [r4, #4]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d03e      	beq.n	8002f86 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_RCC_OscConfig+0x334>)
 8002f0c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f10:	d12c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002f12:	f7fe feb1 	bl	8001c78 <HAL_GetTick>
 8002f16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	0199      	lsls	r1, r3, #6
 8002f1c:	d420      	bmi.n	8002f60 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f1e:	6a2b      	ldr	r3, [r5, #32]
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f24:	d105      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f26:	6862      	ldr	r2, [r4, #4]
 8002f28:	68a9      	ldr	r1, [r5, #8]
 8002f2a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f32:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002f34:	6862      	ldr	r2, [r4, #4]
 8002f36:	430b      	orrs	r3, r1
 8002f38:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002f3c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002f3e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f40:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f42:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_RCC_OscConfig+0x334>)
 8002f44:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002f46:	f7fe fe97 	bl	8001c78 <HAL_GetTick>
 8002f4a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	019a      	lsls	r2, r3, #6
 8002f50:	f53f aea8 	bmi.w	8002ca4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fe fe90 	bl	8001c78 <HAL_GetTick>
 8002f58:	1b40      	subs	r0, r0, r5
 8002f5a:	2802      	cmp	r0, #2
 8002f5c:	d9f6      	bls.n	8002f4c <HAL_RCC_OscConfig+0x2d4>
 8002f5e:	e6cc      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fe fe8a 	bl	8001c78 <HAL_GetTick>
 8002f64:	1b80      	subs	r0, r0, r6
 8002f66:	2802      	cmp	r0, #2
 8002f68:	d9d6      	bls.n	8002f18 <HAL_RCC_OscConfig+0x2a0>
 8002f6a:	e6c6      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fe84 	bl	8001c78 <HAL_GetTick>
 8002f70:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	f57f ae95 	bpl.w	8002ca4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fe fe7d 	bl	8001c78 <HAL_GetTick>
 8002f7e:	1b40      	subs	r0, r0, r5
 8002f80:	2802      	cmp	r0, #2
 8002f82:	d9f6      	bls.n	8002f72 <HAL_RCC_OscConfig+0x2fa>
 8002f84:	e6b9      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f86:	2801      	cmp	r0, #1
 8002f88:	f43f aeb8 	beq.w	8002cfc <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8002f8c:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	6a2a      	ldr	r2, [r5, #32]
 8002f90:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002f94:	4291      	cmp	r1, r2
 8002f96:	f47f ae9b 	bne.w	8002cd0 <HAL_RCC_OscConfig+0x58>
 8002f9a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	f43f ae7f 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x2c>
 8002fa6:	e693      	b.n	8002cd0 <HAL_RCC_OscConfig+0x58>
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	42420000 	.word	0x42420000

08002fb0 <HAL_RCC_GetSysClockFreq>:
{
 8002fb0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8002fb4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fb6:	ac02      	add	r4, sp, #8
 8002fb8:	f103 0510 	add.w	r5, r3, #16
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	3308      	adds	r3, #8
 8002fc4:	c203      	stmia	r2!, {r0, r1}
 8002fc6:	42ab      	cmp	r3, r5
 8002fc8:	4614      	mov	r4, r2
 8002fca:	d1f7      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fcc:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8002fd0:	4911      	ldr	r1, [pc, #68]	; (8003018 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fd2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002fd6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002fd8:	f003 020c 	and.w	r2, r3, #12
 8002fdc:	2a08      	cmp	r2, #8
 8002fde:	d117      	bne.n	8003010 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fe0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002fe4:	3218      	adds	r2, #24
 8002fe6:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fe8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fea:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fee:	d50c      	bpl.n	800300a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ff0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	; (800301c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ff4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ff8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ffa:	3318      	adds	r3, #24
 8002ffc:	446b      	add	r3, sp
 8002ffe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003002:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003006:	b007      	add	sp, #28
 8003008:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetSysClockFreq+0x70>)
 800300c:	4358      	muls	r0, r3
 800300e:	e7fa      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8003010:	4802      	ldr	r0, [pc, #8]	; (800301c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8003012:	e7f8      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x56>
 8003014:	08004e03 	.word	0x08004e03
 8003018:	40021000 	.word	0x40021000
 800301c:	007a1200 	.word	0x007a1200
 8003020:	003d0900 	.word	0x003d0900

08003024 <HAL_RCC_ClockConfig>:
{
 8003024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003028:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800302a:	4604      	mov	r4, r0
 800302c:	b910      	cbnz	r0, 8003034 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800302e:	2001      	movs	r0, #1
}
 8003030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003034:	4a44      	ldr	r2, [pc, #272]	; (8003148 <HAL_RCC_ClockConfig+0x124>)
 8003036:	6813      	ldr	r3, [r2, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	428b      	cmp	r3, r1
 800303e:	d328      	bcc.n	8003092 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003040:	6821      	ldr	r1, [r4, #0]
 8003042:	078e      	lsls	r6, r1, #30
 8003044:	d430      	bmi.n	80030a8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003046:	07ca      	lsls	r2, r1, #31
 8003048:	d443      	bmi.n	80030d2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800304a:	4a3f      	ldr	r2, [pc, #252]	; (8003148 <HAL_RCC_ClockConfig+0x124>)
 800304c:	6813      	ldr	r3, [r2, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	42ab      	cmp	r3, r5
 8003054:	d865      	bhi.n	8003122 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003056:	6822      	ldr	r2, [r4, #0]
 8003058:	4d3c      	ldr	r5, [pc, #240]	; (800314c <HAL_RCC_ClockConfig+0x128>)
 800305a:	f012 0f04 	tst.w	r2, #4
 800305e:	d16c      	bne.n	800313a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	0713      	lsls	r3, r2, #28
 8003062:	d506      	bpl.n	8003072 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003064:	686b      	ldr	r3, [r5, #4]
 8003066:	6922      	ldr	r2, [r4, #16]
 8003068:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800306c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003070:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003072:	f7ff ff9d 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8003076:	686b      	ldr	r3, [r5, #4]
 8003078:	4a35      	ldr	r2, [pc, #212]	; (8003150 <HAL_RCC_ClockConfig+0x12c>)
 800307a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800307e:	5cd3      	ldrb	r3, [r2, r3]
 8003080:	40d8      	lsrs	r0, r3
 8003082:	4b34      	ldr	r3, [pc, #208]	; (8003154 <HAL_RCC_ClockConfig+0x130>)
 8003084:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003086:	4b34      	ldr	r3, [pc, #208]	; (8003158 <HAL_RCC_ClockConfig+0x134>)
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	f7fe fdb3 	bl	8001bf4 <HAL_InitTick>
  return HAL_OK;
 800308e:	2000      	movs	r0, #0
 8003090:	e7ce      	b.n	8003030 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	6813      	ldr	r3, [r2, #0]
 8003094:	f023 0307 	bic.w	r3, r3, #7
 8003098:	430b      	orrs	r3, r1
 800309a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309c:	6813      	ldr	r3, [r2, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	428b      	cmp	r3, r1
 80030a4:	d1c3      	bne.n	800302e <HAL_RCC_ClockConfig+0xa>
 80030a6:	e7cb      	b.n	8003040 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	4b28      	ldr	r3, [pc, #160]	; (800314c <HAL_RCC_ClockConfig+0x128>)
 80030aa:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ae:	bf1e      	ittt	ne
 80030b0:	685a      	ldrne	r2, [r3, #4]
 80030b2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80030b6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ba:	bf42      	ittt	mi
 80030bc:	685a      	ldrmi	r2, [r3, #4]
 80030be:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80030c2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	68a0      	ldr	r0, [r4, #8]
 80030c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030cc:	4302      	orrs	r2, r0
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	e7b9      	b.n	8003046 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	6862      	ldr	r2, [r4, #4]
 80030d4:	4e1d      	ldr	r6, [pc, #116]	; (800314c <HAL_RCC_ClockConfig+0x128>)
 80030d6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030da:	d11a      	bne.n	8003112 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	d0a5      	beq.n	800302e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e8:	f023 0303 	bic.w	r3, r3, #3
 80030ec:	4313      	orrs	r3, r2
 80030ee:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80030f0:	f7fe fdc2 	bl	8001c78 <HAL_GetTick>
 80030f4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	6873      	ldr	r3, [r6, #4]
 80030f8:	6862      	ldr	r2, [r4, #4]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003102:	d0a2      	beq.n	800304a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003104:	f7fe fdb8 	bl	8001c78 <HAL_GetTick>
 8003108:	1bc0      	subs	r0, r0, r7
 800310a:	4540      	cmp	r0, r8
 800310c:	d9f3      	bls.n	80030f6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800310e:	2003      	movs	r0, #3
 8003110:	e78e      	b.n	8003030 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003112:	2a02      	cmp	r2, #2
 8003114:	d102      	bne.n	800311c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800311a:	e7e1      	b.n	80030e0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	f013 0f02 	tst.w	r3, #2
 8003120:	e7de      	b.n	80030e0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	6813      	ldr	r3, [r2, #0]
 8003124:	f023 0307 	bic.w	r3, r3, #7
 8003128:	432b      	orrs	r3, r5
 800312a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312c:	6813      	ldr	r3, [r2, #0]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	42ab      	cmp	r3, r5
 8003134:	f47f af7b 	bne.w	800302e <HAL_RCC_ClockConfig+0xa>
 8003138:	e78d      	b.n	8003056 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313a:	686b      	ldr	r3, [r5, #4]
 800313c:	68e1      	ldr	r1, [r4, #12]
 800313e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003142:	430b      	orrs	r3, r1
 8003144:	606b      	str	r3, [r5, #4]
 8003146:	e78b      	b.n	8003060 <HAL_RCC_ClockConfig+0x3c>
 8003148:	40022000 	.word	0x40022000
 800314c:	40021000 	.word	0x40021000
 8003150:	08004deb 	.word	0x08004deb
 8003154:	20000034 	.word	0x20000034
 8003158:	2000003c 	.word	0x2000003c

0800315c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <HAL_RCC_GetPCLK1Freq+0x14>)
 800315e:	4a05      	ldr	r2, [pc, #20]	; (8003174 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003166:	5cd3      	ldrb	r3, [r2, r3]
 8003168:	4a03      	ldr	r2, [pc, #12]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800316a:	6810      	ldr	r0, [r2, #0]
}
 800316c:	40d8      	lsrs	r0, r3
 800316e:	4770      	bx	lr
 8003170:	40021000 	.word	0x40021000
 8003174:	08004dfb 	.word	0x08004dfb
 8003178:	20000034 	.word	0x20000034

0800317c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <HAL_RCC_GetPCLK2Freq+0x14>)
 800317e:	4a05      	ldr	r2, [pc, #20]	; (8003194 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003186:	5cd3      	ldrb	r3, [r2, r3]
 8003188:	4a03      	ldr	r2, [pc, #12]	; (8003198 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800318a:	6810      	ldr	r0, [r2, #0]
}
 800318c:	40d8      	lsrs	r0, r3
 800318e:	4770      	bx	lr
 8003190:	40021000 	.word	0x40021000
 8003194:	08004dfb 	.word	0x08004dfb
 8003198:	20000034 	.word	0x20000034

0800319c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800319c:	6803      	ldr	r3, [r0, #0]
{
 800319e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031a2:	07d9      	lsls	r1, r3, #31
{
 80031a4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031a6:	d520      	bpl.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a8:	4c36      	ldr	r4, [pc, #216]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031aa:	69e3      	ldr	r3, [r4, #28]
 80031ac:	00da      	lsls	r2, r3, #3
 80031ae:	d432      	bmi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80031b0:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	69e3      	ldr	r3, [r4, #28]
 80031b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b8:	61e3      	str	r3, [r4, #28]
 80031ba:	69e3      	ldr	r3, [r4, #28]
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	4f30      	ldr	r7, [pc, #192]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	05db      	lsls	r3, r3, #23
 80031ca:	d526      	bpl.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031cc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ce:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80031d2:	d136      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d4:	6a23      	ldr	r3, [r4, #32]
 80031d6:	686a      	ldr	r2, [r5, #4]
 80031d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031dc:	4313      	orrs	r3, r2
 80031de:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031e0:	b11e      	cbz	r6, 80031ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e2:	69e3      	ldr	r3, [r4, #28]
 80031e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031ea:	6828      	ldr	r0, [r5, #0]
 80031ec:	0783      	lsls	r3, r0, #30
 80031ee:	d506      	bpl.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031f0:	4924      	ldr	r1, [pc, #144]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031f2:	68ab      	ldr	r3, [r5, #8]
 80031f4:	684a      	ldr	r2, [r1, #4]
 80031f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80031fa:	431a      	orrs	r2, r3
 80031fc:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031fe:	f010 0010 	ands.w	r0, r0, #16
 8003202:	d01b      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003204:	4a1f      	ldr	r2, [pc, #124]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003206:	68e9      	ldr	r1, [r5, #12]
 8003208:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800320a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800320c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003210:	430b      	orrs	r3, r1
 8003212:	6053      	str	r3, [r2, #4]
 8003214:	e012      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8003216:	2600      	movs	r6, #0
 8003218:	e7d4      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003220:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003222:	f7fe fd29 	bl	8001c78 <HAL_GetTick>
 8003226:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	05d8      	lsls	r0, r3, #23
 800322c:	d4ce      	bmi.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322e:	f7fe fd23 	bl	8001c78 <HAL_GetTick>
 8003232:	eba0 0008 	sub.w	r0, r0, r8
 8003236:	2864      	cmp	r0, #100	; 0x64
 8003238:	d9f6      	bls.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800323a:	2003      	movs	r0, #3
}
 800323c:	b002      	add	sp, #8
 800323e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003242:	686a      	ldr	r2, [r5, #4]
 8003244:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003248:	429a      	cmp	r2, r3
 800324a:	d0c3      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800324c:	2001      	movs	r0, #1
 800324e:	4a0f      	ldr	r2, [pc, #60]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003250:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003252:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003256:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003258:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800325c:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8003260:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003262:	07d9      	lsls	r1, r3, #31
 8003264:	d5b6      	bpl.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003266:	f7fe fd07 	bl	8001c78 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800326e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003270:	6a23      	ldr	r3, [r4, #32]
 8003272:	079a      	lsls	r2, r3, #30
 8003274:	d4ae      	bmi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7fe fcff 	bl	8001c78 <HAL_GetTick>
 800327a:	1bc0      	subs	r0, r0, r7
 800327c:	4540      	cmp	r0, r8
 800327e:	d9f7      	bls.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003280:	e7db      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000
 8003288:	40007000 	.word	0x40007000
 800328c:	42420000 	.word	0x42420000

08003290 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003290:	4602      	mov	r2, r0
 8003292:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003294:	4b33      	ldr	r3, [pc, #204]	; (8003364 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
{
 8003296:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003298:	ad02      	add	r5, sp, #8
 800329a:	f103 0610 	add.w	r6, r3, #16
 800329e:	462c      	mov	r4, r5
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	3308      	adds	r3, #8
 80032a6:	c403      	stmia	r4!, {r0, r1}
 80032a8:	42b3      	cmp	r3, r6
 80032aa:	4625      	mov	r5, r4
 80032ac:	d1f7      	bne.n	800329e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032ae:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80032b2:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032b4:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 80032b8:	d047      	beq.n	800334a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80032ba:	2a10      	cmp	r2, #16
 80032bc:	d003      	beq.n	80032c6 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 80032be:	2a01      	cmp	r2, #1
 80032c0:	d024      	beq.n	800330c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  uint32_t temp_reg = 0U, frequency = 0U;
 80032c2:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 80032c4:	e036      	b.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      temp_reg = RCC->CFGR;
 80032c6:	4a28      	ldr	r2, [pc, #160]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 80032c8:	6851      	ldr	r1, [r2, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80032ca:	6810      	ldr	r0, [r2, #0]
 80032cc:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80032d0:	d030      	beq.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032d2:	f3c1 4383 	ubfx	r3, r1, #18, #4
 80032d6:	3318      	adds	r3, #24
 80032d8:	446b      	add	r3, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032da:	03c9      	lsls	r1, r1, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032dc:	f813 0c10 	ldrb.w	r0, [r3, #-16]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032e0:	bf49      	itett	mi
 80032e2:	6853      	ldrmi	r3, [r2, #4]
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032e4:	4b21      	ldrpl	r3, [pc, #132]	; (800336c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032e6:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
 80032ea:	3318      	addmi	r3, #24
 80032ec:	bf41      	itttt	mi
 80032ee:	446b      	addmi	r3, sp
 80032f0:	f813 1c14 	ldrbmi.w	r1, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80032f4:	4b1e      	ldrmi	r3, [pc, #120]	; (8003370 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80032f6:	fbb3 f3f1 	udivmi	r3, r3, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032fa:	4358      	muls	r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80032fc:	6853      	ldr	r3, [r2, #4]
 80032fe:	025b      	lsls	r3, r3, #9
 8003300:	d418      	bmi.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          frequency = (pllclk * 2) / 3;
 8003302:	2303      	movs	r3, #3
 8003304:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003306:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800330a:	e013      	b.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800330c:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8003310:	4a15      	ldr	r2, [pc, #84]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8003312:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003314:	4019      	ands	r1, r3
 8003316:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800331a:	d01f      	beq.n	800335c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800331c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003324:	d108      	bne.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        frequency = LSI_VALUE;
 8003326:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800332a:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800332c:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8003330:	bf18      	it	ne
 8003332:	4618      	movne	r0, r3
}
 8003334:	b006      	add	sp, #24
 8003336:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800333c:	d1c1      	bne.n	80032c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 800333e:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8003340:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003344:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003348:	e7f2      	b.n	8003330 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800334a:	f7ff ff17 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003356:	3301      	adds	r3, #1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	e7d4      	b.n	8003306 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSE_VALUE;
 800335c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003360:	e7e8      	b.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8003362:	bf00      	nop
 8003364:	08004e03 	.word	0x08004e03
 8003368:	40021000 	.word	0x40021000
 800336c:	003d0900 	.word	0x003d0900
 8003370:	007a1200 	.word	0x007a1200

08003374 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003374:	b538      	push	{r3, r4, r5, lr}
 8003376:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8003378:	f7fe fc7e 	bl	8001c78 <HAL_GetTick>
 800337c:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	0692      	lsls	r2, r2, #26
 8003384:	d505      	bpl.n	8003392 <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 8003386:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	f042 0210 	orr.w	r2, r2, #16
 800338e:	605a      	str	r2, [r3, #4]
}
 8003390:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003392:	f7fe fc71 	bl	8001c78 <HAL_GetTick>
 8003396:	1b40      	subs	r0, r0, r5
 8003398:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800339c:	d9ef      	bls.n	800337e <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 800339e:	2003      	movs	r0, #3
 80033a0:	e7f6      	b.n	8003390 <RTC_EnterInitMode+0x1c>

080033a2 <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033a2:	6802      	ldr	r2, [r0, #0]
{
 80033a4:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033a6:	6853      	ldr	r3, [r2, #4]
{
 80033a8:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033aa:	f023 0310 	bic.w	r3, r3, #16
 80033ae:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 80033b0:	f7fe fc62 	bl	8001c78 <HAL_GetTick>
 80033b4:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	069b      	lsls	r3, r3, #26
 80033bc:	d501      	bpl.n	80033c2 <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80033be:	2000      	movs	r0, #0
}
 80033c0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80033c2:	f7fe fc59 	bl	8001c78 <HAL_GetTick>
 80033c6:	1b40      	subs	r0, r0, r5
 80033c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80033cc:	d9f3      	bls.n	80033b6 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80033ce:	2003      	movs	r0, #3
 80033d0:	e7f6      	b.n	80033c0 <RTC_ExitInitMode+0x1e>

080033d2 <HAL_RTC_WaitForSynchro>:
{
 80033d2:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80033d4:	4604      	mov	r4, r0
 80033d6:	b1a8      	cbz	r0, 8003404 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80033d8:	6802      	ldr	r2, [r0, #0]
 80033da:	6853      	ldr	r3, [r2, #4]
 80033dc:	f023 0308 	bic.w	r3, r3, #8
 80033e0:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80033e2:	f7fe fc49 	bl	8001c78 <HAL_GetTick>
 80033e6:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	071b      	lsls	r3, r3, #28
 80033ee:	d501      	bpl.n	80033f4 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 80033f0:	2000      	movs	r0, #0
}
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80033f4:	f7fe fc40 	bl	8001c78 <HAL_GetTick>
 80033f8:	1b40      	subs	r0, r0, r5
 80033fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80033fe:	d9f3      	bls.n	80033e8 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8003400:	2003      	movs	r0, #3
 8003402:	e7f6      	b.n	80033f2 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8003404:	2001      	movs	r0, #1
 8003406:	e7f4      	b.n	80033f2 <HAL_RTC_WaitForSynchro+0x20>

08003408 <HAL_RTC_Init>:
{
 8003408:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 800340a:	4604      	mov	r4, r0
 800340c:	b170      	cbz	r0, 800342c <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800340e:	7c43      	ldrb	r3, [r0, #17]
 8003410:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003414:	b913      	cbnz	r3, 800341c <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8003416:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8003418:	f7fe fafc 	bl	8001a14 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800341c:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800341e:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003420:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003422:	f7ff ffd6 	bl	80033d2 <HAL_RTC_WaitForSynchro>
 8003426:	b118      	cbz	r0, 8003430 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003428:	2304      	movs	r3, #4
 800342a:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 800342c:	2001      	movs	r0, #1
 800342e:	e036      	b.n	800349e <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003430:	4620      	mov	r0, r4
 8003432:	f7ff ff9f 	bl	8003374 <RTC_EnterInitMode>
 8003436:	2800      	cmp	r0, #0
 8003438:	d1f6      	bne.n	8003428 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800343a:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800343c:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800343e:	6853      	ldr	r3, [r2, #4]
 8003440:	f023 0307 	bic.w	r3, r3, #7
 8003444:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003446:	4a16      	ldr	r2, [pc, #88]	; (80034a0 <HAL_RTC_Init+0x98>)
 8003448:	b118      	cbz	r0, 8003452 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800344a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800344c:	f021 0101 	bic.w	r1, r1, #1
 8003450:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003452:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003454:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8003458:	4303      	orrs	r3, r0
 800345a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800345c:	6860      	ldr	r0, [r4, #4]
 800345e:	1c43      	adds	r3, r0, #1
 8003460:	d105      	bne.n	800346e <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003462:	2001      	movs	r0, #1
 8003464:	f7ff ff14 	bl	8003290 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8003468:	2800      	cmp	r0, #0
 800346a:	d0dd      	beq.n	8003428 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 800346c:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800346e:	6822      	ldr	r2, [r4, #0]
 8003470:	6893      	ldr	r3, [r2, #8]
 8003472:	f023 030f 	bic.w	r3, r3, #15
 8003476:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800347a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800347c:	68d3      	ldr	r3, [r2, #12]
 800347e:	b280      	uxth	r0, r0
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	041b      	lsls	r3, r3, #16
 8003484:	4318      	orrs	r0, r3
 8003486:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003488:	4620      	mov	r0, r4
 800348a:	f7ff ff8a 	bl	80033a2 <RTC_ExitInitMode>
 800348e:	2301      	movs	r3, #1
 8003490:	b110      	cbz	r0, 8003498 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003492:	2204      	movs	r2, #4
 8003494:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8003496:	e7c9      	b.n	800342c <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003498:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800349a:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800349c:	7463      	strb	r3, [r4, #17]
}
 800349e:	bd10      	pop	{r4, pc}
 80034a0:	40006c00 	.word	0x40006c00

080034a4 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d11c      	bne.n	80034e6 <HAL_TIM_Base_Start+0x42>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ae:	4a0f      	ldr	r2, [pc, #60]	; (80034ec <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 80034b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b4:	6803      	ldr	r3, [r0, #0]
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00a      	beq.n	80034d0 <HAL_TIM_Base_Start+0x2c>
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034be:	d007      	beq.n	80034d0 <HAL_TIM_Base_Start+0x2c>
 80034c0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d003      	beq.n	80034d0 <HAL_TIM_Base_Start+0x2c>
 80034c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d104      	bne.n	80034da <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d6:	2a06      	cmp	r2, #6
 80034d8:	d003      	beq.n	80034e2 <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	f042 0201 	orr.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034e2:	2000      	movs	r0, #0
}
 80034e4:	4770      	bx	lr
    return HAL_ERROR;
 80034e6:	2001      	movs	r0, #1
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40012c00 	.word	0x40012c00

080034f0 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034f0:	f241 1211 	movw	r2, #4369	; 0x1111
 80034f4:	6803      	ldr	r3, [r0, #0]
 80034f6:	6a19      	ldr	r1, [r3, #32]
 80034f8:	4211      	tst	r1, r2
 80034fa:	d108      	bne.n	800350e <HAL_TIM_Base_Stop+0x1e>
 80034fc:	f240 4244 	movw	r2, #1092	; 0x444
 8003500:	6a19      	ldr	r1, [r3, #32]
 8003502:	4211      	tst	r1, r2
 8003504:	bf02      	ittt	eq
 8003506:	681a      	ldreq	r2, [r3, #0]
 8003508:	f022 0201 	biceq.w	r2, r2, #1
 800350c:	601a      	streq	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800350e:	2301      	movs	r3, #1
 8003510:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8003514:	2000      	movs	r0, #0
 8003516:	4770      	bx	lr

08003518 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003518:	4603      	mov	r3, r0
 800351a:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800351c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003520:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003524:	f893 5042 	ldrb.w	r5, [r3, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003528:	f893 4043 	ldrb.w	r4, [r3, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800352c:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800352e:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003530:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003532:	b2e4      	uxtb	r4, r4

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003534:	b9e1      	cbnz	r1, 8003570 <HAL_TIM_Encoder_Start_IT+0x58>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003536:	2a01      	cmp	r2, #1
 8003538:	d159      	bne.n	80035ee <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800353a:	2d01      	cmp	r5, #1
 800353c:	d159      	bne.n	80035f2 <HAL_TIM_Encoder_Start_IT+0xda>
    {
      return HAL_ERROR;
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003548:	681a      	ldr	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800354a:	6a11      	ldr	r1, [r2, #32]
 800354c:	f021 0101 	bic.w	r1, r1, #1
 8003550:	6211      	str	r1, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003552:	6a11      	ldr	r1, [r2, #32]
 8003554:	f041 0101 	orr.w	r1, r1, #1
 8003558:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800355a:	68d1      	ldr	r1, [r2, #12]
 800355c:	f041 0102 	orr.w	r1, r1, #2
  return HAL_OK;
 8003560:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003562:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	6813      	ldr	r3, [r2, #0]
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	6013      	str	r3, [r2, #0]
}
 800356e:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 8003570:	2904      	cmp	r1, #4
 8003572:	d115      	bne.n	80035a0 <HAL_TIM_Encoder_Start_IT+0x88>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003574:	2801      	cmp	r0, #1
 8003576:	d13a      	bne.n	80035ee <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003578:	2c01      	cmp	r4, #1
 800357a:	d1f8      	bne.n	800356e <HAL_TIM_Encoder_Start_IT+0x56>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800357c:	2202      	movs	r2, #2
 800357e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003582:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003586:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8003588:	6a11      	ldr	r1, [r2, #32]
 800358a:	f021 0110 	bic.w	r1, r1, #16
 800358e:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003590:	6a11      	ldr	r1, [r2, #32]
 8003592:	f041 0110 	orr.w	r1, r1, #16
 8003596:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003598:	68d1      	ldr	r1, [r2, #12]
 800359a:	f041 0104 	orr.w	r1, r1, #4
 800359e:	e7df      	b.n	8003560 <HAL_TIM_Encoder_Start_IT+0x48>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80035a0:	2a01      	cmp	r2, #1
 80035a2:	d124      	bne.n	80035ee <HAL_TIM_Encoder_Start_IT+0xd6>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80035a4:	2801      	cmp	r0, #1
 80035a6:	d124      	bne.n	80035f2 <HAL_TIM_Encoder_Start_IT+0xda>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80035a8:	2d01      	cmp	r5, #1
 80035aa:	d1e0      	bne.n	800356e <HAL_TIM_Encoder_Start_IT+0x56>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80035ac:	2c01      	cmp	r4, #1
 80035ae:	d1de      	bne.n	800356e <HAL_TIM_Encoder_Start_IT+0x56>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035c2:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 80035c4:	6a11      	ldr	r1, [r2, #32]
 80035c6:	f021 0101 	bic.w	r1, r1, #1
 80035ca:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035cc:	6a11      	ldr	r1, [r2, #32]
 80035ce:	f041 0101 	orr.w	r1, r1, #1
 80035d2:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 80035d4:	6a11      	ldr	r1, [r2, #32]
 80035d6:	f021 0110 	bic.w	r1, r1, #16
 80035da:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035dc:	6a11      	ldr	r1, [r2, #32]
 80035de:	f041 0110 	orr.w	r1, r1, #16
 80035e2:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80035e4:	68d1      	ldr	r1, [r2, #12]
 80035e6:	f041 0102 	orr.w	r1, r1, #2
 80035ea:	60d1      	str	r1, [r2, #12]
 80035ec:	e7d4      	b.n	8003598 <HAL_TIM_Encoder_Start_IT+0x80>
      return HAL_ERROR;
 80035ee:	2001      	movs	r0, #1
 80035f0:	e7bd      	b.n	800356e <HAL_TIM_Encoder_Start_IT+0x56>
 80035f2:	4610      	mov	r0, r2
 80035f4:	e7bb      	b.n	800356e <HAL_TIM_Encoder_Start_IT+0x56>

080035f6 <HAL_TIM_Encoder_Stop_IT>:
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80035f6:	6803      	ldr	r3, [r0, #0]
{
 80035f8:	b510      	push	{r4, lr}
  TIMx->CCER &= ~tmp;
 80035fa:	6a1a      	ldr	r2, [r3, #32]
  if (Channel == TIM_CHANNEL_1)
 80035fc:	b9f9      	cbnz	r1, 800363e <HAL_TIM_Encoder_Stop_IT+0x48>
  TIMx->CCER &= ~tmp;
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003604:	6a1a      	ldr	r2, [r3, #32]
 8003606:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	f022 0202 	bic.w	r2, r2, #2
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800360e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8003610:	f241 1211 	movw	r2, #4369	; 0x1111
 8003614:	6a1c      	ldr	r4, [r3, #32]
 8003616:	4214      	tst	r4, r2
 8003618:	d108      	bne.n	800362c <HAL_TIM_Encoder_Stop_IT+0x36>
 800361a:	f240 4244 	movw	r2, #1092	; 0x444
 800361e:	6a1c      	ldr	r4, [r3, #32]
 8003620:	4214      	tst	r4, r2
 8003622:	bf02      	ittt	eq
 8003624:	681a      	ldreq	r2, [r3, #0]
 8003626:	f022 0201 	biceq.w	r2, r2, #1
 800362a:	601a      	streq	r2, [r3, #0]
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800362c:	2301      	movs	r3, #1
 800362e:	b309      	cbz	r1, 8003674 <HAL_TIM_Encoder_Stop_IT+0x7e>
 8003630:	2904      	cmp	r1, #4
 8003632:	d125      	bne.n	8003680 <HAL_TIM_Encoder_Stop_IT+0x8a>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003634:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003638:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 800363c:	e01e      	b.n	800367c <HAL_TIM_Encoder_Stop_IT+0x86>
  else if (Channel == TIM_CHANNEL_2)
 800363e:	2904      	cmp	r1, #4
 8003640:	d108      	bne.n	8003654 <HAL_TIM_Encoder_Stop_IT+0x5e>
  TIMx->CCER &= ~tmp;
 8003642:	f022 0210 	bic.w	r2, r2, #16
 8003646:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003648:	6a1a      	ldr	r2, [r3, #32]
 800364a:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	f022 0204 	bic.w	r2, r2, #4
 8003652:	e7dc      	b.n	800360e <HAL_TIM_Encoder_Stop_IT+0x18>
  TIMx->CCER &= ~tmp;
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800365a:	6a1a      	ldr	r2, [r3, #32]
 800365c:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 800365e:	6a1a      	ldr	r2, [r3, #32]
 8003660:	f022 0210 	bic.w	r2, r2, #16
 8003664:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003666:	6a1a      	ldr	r2, [r3, #32]
 8003668:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	f022 0202 	bic.w	r2, r2, #2
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	e7eb      	b.n	800364c <HAL_TIM_Encoder_Stop_IT+0x56>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003678:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
}
 800367c:	2000      	movs	r0, #0
 800367e:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 800368c:	e7d4      	b.n	8003638 <HAL_TIM_Encoder_Stop_IT+0x42>

0800368e <HAL_TIM_PeriodElapsedCallback>:
 800368e:	4770      	bx	lr

08003690 <HAL_TIM_OC_DelayElapsedCallback>:
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003692:	4770      	bx	lr

08003694 <HAL_TIM_TriggerCallback>:
 8003694:	4770      	bx	lr

08003696 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003696:	6803      	ldr	r3, [r0, #0]
{
 8003698:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800369a:	691a      	ldr	r2, [r3, #16]
{
 800369c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800369e:	0791      	lsls	r1, r2, #30
 80036a0:	d50e      	bpl.n	80036c0 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	0792      	lsls	r2, r2, #30
 80036a6:	d50b      	bpl.n	80036c0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036a8:	f06f 0202 	mvn.w	r2, #2
 80036ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ae:	2201      	movs	r2, #1
 80036b0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	079b      	lsls	r3, r3, #30
 80036b6:	d077      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80036b8:	f000 fbf0 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036bc:	2300      	movs	r3, #0
 80036be:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	0750      	lsls	r0, r2, #29
 80036c6:	d510      	bpl.n	80036ea <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	0751      	lsls	r1, r2, #29
 80036cc:	d50d      	bpl.n	80036ea <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036ce:	f06f 0204 	mvn.w	r2, #4
 80036d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036d4:	2202      	movs	r2, #2
 80036d6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036d8:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036dc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80036e0:	d068      	beq.n	80037b4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	f000 fbdb 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e6:	2300      	movs	r3, #0
 80036e8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	0712      	lsls	r2, r2, #28
 80036f0:	d50f      	bpl.n	8003712 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	0710      	lsls	r0, r2, #28
 80036f6:	d50c      	bpl.n	8003712 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036f8:	f06f 0208 	mvn.w	r2, #8
 80036fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036fe:	2204      	movs	r2, #4
 8003700:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003702:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003704:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003706:	0799      	lsls	r1, r3, #30
 8003708:	d05a      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800370a:	f000 fbc7 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	2300      	movs	r3, #0
 8003710:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	06d2      	lsls	r2, r2, #27
 8003718:	d510      	bpl.n	800373c <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	06d0      	lsls	r0, r2, #27
 800371e:	d50d      	bpl.n	800373c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003720:	f06f 0210 	mvn.w	r2, #16
 8003724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003726:	2208      	movs	r2, #8
 8003728:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800372a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800372c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800372e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003732:	d04b      	beq.n	80037cc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003734:	f000 fbb2 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003738:	2300      	movs	r3, #0
 800373a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	07d1      	lsls	r1, r2, #31
 8003742:	d508      	bpl.n	8003756 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	07d2      	lsls	r2, r2, #31
 8003748:	d505      	bpl.n	8003756 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800374a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800374e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003750:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003752:	f7ff ff9c 	bl	800368e <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	0610      	lsls	r0, r2, #24
 800375c:	d508      	bpl.n	8003770 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	0611      	lsls	r1, r2, #24
 8003762:	d505      	bpl.n	8003770 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003764:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003768:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800376a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800376c:	f000 f9bd 	bl	8003aea <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	0652      	lsls	r2, r2, #25
 8003776:	d508      	bpl.n	800378a <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	0650      	lsls	r0, r2, #25
 800377c:	d505      	bpl.n	800378a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800377e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8003782:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003784:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003786:	f7ff ff85 	bl	8003694 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	0691      	lsls	r1, r2, #26
 8003790:	d522      	bpl.n	80037d8 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	0692      	lsls	r2, r2, #26
 8003796:	d51f      	bpl.n	80037d8 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003798:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800379c:	4620      	mov	r0, r4
}
 800379e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80037a4:	f000 b9a0 	b.w	8003ae8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a8:	f7ff ff72 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ac:	4620      	mov	r0, r4
 80037ae:	f7ff ff70 	bl	8003692 <HAL_TIM_PWM_PulseFinishedCallback>
 80037b2:	e783      	b.n	80036bc <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b4:	f7ff ff6c 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	4620      	mov	r0, r4
 80037ba:	f7ff ff6a 	bl	8003692 <HAL_TIM_PWM_PulseFinishedCallback>
 80037be:	e792      	b.n	80036e6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c0:	f7ff ff66 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7ff ff64 	bl	8003692 <HAL_TIM_PWM_PulseFinishedCallback>
 80037ca:	e7a0      	b.n	800370e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037cc:	f7ff ff60 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d0:	4620      	mov	r0, r4
 80037d2:	f7ff ff5e 	bl	8003692 <HAL_TIM_PWM_PulseFinishedCallback>
 80037d6:	e7af      	b.n	8003738 <HAL_TIM_IRQHandler+0xa2>
}
 80037d8:	bd10      	pop	{r4, pc}
	...

080037dc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037dc:	4a1a      	ldr	r2, [pc, #104]	; (8003848 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80037de:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e0:	4290      	cmp	r0, r2
 80037e2:	d00a      	beq.n	80037fa <TIM_Base_SetConfig+0x1e>
 80037e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80037e8:	d007      	beq.n	80037fa <TIM_Base_SetConfig+0x1e>
 80037ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80037ee:	4290      	cmp	r0, r2
 80037f0:	d003      	beq.n	80037fa <TIM_Base_SetConfig+0x1e>
 80037f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037f6:	4290      	cmp	r0, r2
 80037f8:	d115      	bne.n	8003826 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80037fa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003800:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003802:	4a11      	ldr	r2, [pc, #68]	; (8003848 <TIM_Base_SetConfig+0x6c>)
 8003804:	4290      	cmp	r0, r2
 8003806:	d00a      	beq.n	800381e <TIM_Base_SetConfig+0x42>
 8003808:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800380c:	d007      	beq.n	800381e <TIM_Base_SetConfig+0x42>
 800380e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003812:	4290      	cmp	r0, r2
 8003814:	d003      	beq.n	800381e <TIM_Base_SetConfig+0x42>
 8003816:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800381a:	4290      	cmp	r0, r2
 800381c:	d103      	bne.n	8003826 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800381e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003824:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003826:	694a      	ldr	r2, [r1, #20]
 8003828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800382c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800382e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003830:	688b      	ldr	r3, [r1, #8]
 8003832:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003834:	680b      	ldr	r3, [r1, #0]
 8003836:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <TIM_Base_SetConfig+0x6c>)
 800383a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800383c:	bf04      	itt	eq
 800383e:	690b      	ldreq	r3, [r1, #16]
 8003840:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003842:	2301      	movs	r3, #1
 8003844:	6143      	str	r3, [r0, #20]
}
 8003846:	4770      	bx	lr
 8003848:	40012c00 	.word	0x40012c00

0800384c <HAL_TIM_Base_Init>:
{
 800384c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800384e:	4604      	mov	r4, r0
 8003850:	b330      	cbz	r0, 80038a0 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003852:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003856:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800385a:	b91b      	cbnz	r3, 8003864 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800385c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003860:	f7fe f8f6 	bl	8001a50 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003866:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800386c:	1d21      	adds	r1, r4, #4
 800386e:	f7ff ffb5 	bl	80037dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003872:	2301      	movs	r3, #1
  return HAL_OK;
 8003874:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003876:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800387e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003882:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003886:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800388e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003892:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800389a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800389e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80038a0:	2001      	movs	r0, #1
 80038a2:	e7fc      	b.n	800389e <HAL_TIM_Base_Init+0x52>

080038a4 <HAL_TIM_Encoder_Init>:
{
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	460d      	mov	r5, r1
  if (htim == NULL)
 80038a8:	4604      	mov	r4, r0
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d04d      	beq.n	800394a <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 80038ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80038b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80038b6:	b91b      	cbnz	r3, 80038c0 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 80038b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80038bc:	f7fe f8ee 	bl	8001a9c <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038c2:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038c8:	f851 0b04 	ldr.w	r0, [r1], #4
 80038cc:	6883      	ldr	r3, [r0, #8]
 80038ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038d2:	f023 0307 	bic.w	r3, r3, #7
 80038d6:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d8:	f7ff ff80 	bl	80037dc <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80038dc:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 80038de:	682a      	ldr	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 80038e0:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80038e2:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038e4:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 80038e6:	4316      	orrs	r6, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038e8:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038ee:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038f2:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038f6:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038f8:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038fc:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038fe:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003906:	68e9      	ldr	r1, [r5, #12]
  tmpccer = htim->Instance->CCER;
 8003908:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800390a:	430b      	orrs	r3, r1
 800390c:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800390e:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003912:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003916:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003918:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800391a:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800391e:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8003920:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003922:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8003926:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003928:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800392a:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 800392c:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 800392e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003930:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003934:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003938:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800393c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8003944:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800394a:	2001      	movs	r0, #1
 800394c:	e7fc      	b.n	8003948 <HAL_TIM_Encoder_Init+0xa4>

0800394e <TIM_ETR_SetConfig>:
{
 800394e:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8003950:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003952:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003954:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003958:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800395c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800395e:	6082      	str	r2, [r0, #8]
}
 8003960:	bd10      	pop	{r4, pc}

08003962 <HAL_TIM_ConfigClockSource>:
{
 8003962:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003964:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003968:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800396a:	2b01      	cmp	r3, #1
 800396c:	f04f 0002 	mov.w	r0, #2
 8003970:	d027      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x60>
 8003972:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003978:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800397a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800397e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003980:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003984:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003988:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800398a:	680b      	ldr	r3, [r1, #0]
 800398c:	2b60      	cmp	r3, #96	; 0x60
 800398e:	d04d      	beq.n	8003a2c <HAL_TIM_ConfigClockSource+0xca>
 8003990:	d832      	bhi.n	80039f8 <HAL_TIM_ConfigClockSource+0x96>
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	d062      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0xfa>
 8003996:	d815      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x62>
 8003998:	2b20      	cmp	r3, #32
 800399a:	d003      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0x42>
 800399c:	d809      	bhi.n	80039b2 <HAL_TIM_ConfigClockSource+0x50>
 800399e:	f033 0210 	bics.w	r2, r3, #16
 80039a2:	d108      	bne.n	80039b6 <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 80039a4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f043 0307 	orr.w	r3, r3, #7
 80039b0:	e020      	b.n	80039f4 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80039b2:	2b30      	cmp	r3, #48	; 0x30
 80039b4:	d0f6      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 80039b6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80039b8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80039ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80039be:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80039c2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80039c4:	2b50      	cmp	r3, #80	; 0x50
 80039c6:	d1f6      	bne.n	80039b6 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c8:	684a      	ldr	r2, [r1, #4]
 80039ca:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80039cc:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ce:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d4:	f025 0501 	bic.w	r5, r5, #1
 80039d8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039da:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80039dc:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80039e6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80039e8:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80039ea:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039f0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80039f4:	6083      	str	r3, [r0, #8]
}
 80039f6:	e7de      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 80039f8:	2b70      	cmp	r3, #112	; 0x70
 80039fa:	d00c      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0xb4>
 80039fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a00:	d1d9      	bne.n	80039b6 <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 8003a02:	68cb      	ldr	r3, [r1, #12]
 8003a04:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a08:	f7ff ffa1 	bl	800394e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a0c:	6822      	ldr	r2, [r4, #0]
 8003a0e:	6893      	ldr	r3, [r2, #8]
 8003a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a14:	e008      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8003a16:	68cb      	ldr	r3, [r1, #12]
 8003a18:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a1c:	f7ff ff97 	bl	800394e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a20:	6822      	ldr	r2, [r4, #0]
 8003a22:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a28:	6093      	str	r3, [r2, #8]
      break;
 8003a2a:	e7c4      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a2c:	684d      	ldr	r5, [r1, #4]
 8003a2e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a30:	6a01      	ldr	r1, [r0, #32]
 8003a32:	f021 0110 	bic.w	r1, r1, #16
 8003a36:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a38:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003a3a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a3c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a44:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a48:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003a4c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a4e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a50:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a56:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003a5a:	e7cb      	b.n	80039f4 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a5c:	684a      	ldr	r2, [r1, #4]
 8003a5e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003a60:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a62:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a64:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a68:	f025 0501 	bic.w	r5, r5, #1
 8003a6c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003a70:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a76:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003a7a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a7c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a7e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a84:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003a88:	e7b4      	b.n	80039f4 <HAL_TIM_ConfigClockSource+0x92>
	...

08003a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a8c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003a92:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	f04f 0002 	mov.w	r0, #2
 8003a9a:	d022      	beq.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a9c:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003aa2:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aa6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aaa:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8003aac:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aae:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab0:	4c0c      	ldr	r4, [pc, #48]	; (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003ab2:	42a3      	cmp	r3, r4
 8003ab4:	d00a      	beq.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aba:	d007      	beq.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003abc:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003ac0:	42a3      	cmp	r3, r4
 8003ac2:	d003      	beq.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003ac4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ac8:	42a3      	cmp	r3, r4
 8003aca:	d104      	bne.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003acc:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ace:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ad2:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad4:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad6:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003ad8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003ada:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003ade:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8003ae2:	bd30      	pop	{r4, r5, pc}
 8003ae4:	40012c00 	.word	0x40012c00

08003ae8 <HAL_TIMEx_CommutCallback>:
 8003ae8:	4770      	bx	lr

08003aea <HAL_TIMEx_BreakCallback>:
 8003aea:	4770      	bx	lr

08003aec <DHT_Set_Pin_Input>:
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
}

static void DHT_Set_Pin_Input(DHT_HandleTypeDef* p_DHT){
 8003aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aee:	2300      	movs	r3, #0
 8003af0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8003af4:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8003af6:	8903      	ldrh	r3, [r0, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8003af8:	4669      	mov	r1, sp
 8003afa:	6840      	ldr	r0, [r0, #4]
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8003afc:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8003afe:	f7fe fb7f 	bl	8002200 <HAL_GPIO_Init>
}
 8003b02:	b005      	add	sp, #20
 8003b04:	f85d fb04 	ldr.w	pc, [sp], #4

08003b08 <DHT_Init>:
		}
	}
	return DHT_OK;
}

void DHT_Init(DHT_HandleTypeDef* p_DHT, TIM_HandleTypeDef* p_htim, uint8_t p_sensor_type, GPIO_TypeDef* p_Port, uint16_t p_Pin){
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	4604      	mov	r4, r0
	DELAY_US_Init(p_htim);
 8003b0c:	4608      	mov	r0, r1
void DHT_Init(DHT_HandleTypeDef* p_DHT, TIM_HandleTypeDef* p_htim, uint8_t p_sensor_type, GPIO_TypeDef* p_Port, uint16_t p_Pin){
 8003b0e:	461d      	mov	r5, r3
 8003b10:	4616      	mov	r6, r2
	DELAY_US_Init(p_htim);
 8003b12:	f000 f991 	bl	8003e38 <DELAY_US_Init>
	p_DHT->sensor_type = p_sensor_type;
	p_DHT->DHT_Port = p_Port;
	p_DHT->DHT_Pin = p_Pin;
 8003b16:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	p_DHT->sensor_type = p_sensor_type;
 8003b1a:	7026      	strb	r6, [r4, #0]
	p_DHT->DHT_Pin = p_Pin;
 8003b1c:	8123      	strh	r3, [r4, #8]
	p_DHT->temperature = 0.0;
 8003b1e:	2300      	movs	r3, #0
	p_DHT->DHT_Port = p_Port;
 8003b20:	6065      	str	r5, [r4, #4]
	p_DHT->temperature = 0.0;
 8003b22:	60e3      	str	r3, [r4, #12]
	p_DHT->huminity = 0.0;
 8003b24:	6123      	str	r3, [r4, #16]
}
 8003b26:	bd70      	pop	{r4, r5, r6, pc}

08003b28 <DHT_Read_Value>:

uint8_t DHT_Read_Value(DHT_HandleTypeDef* p_DHT){
 8003b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8003b2c:	8903      	ldrh	r3, [r0, #8]
uint8_t DHT_Read_Value(DHT_HandleTypeDef* p_DHT){
 8003b2e:	b087      	sub	sp, #28
 8003b30:	4604      	mov	r4, r0
	uint8_t t_data[5] = {};
 8003b32:	2500      	movs	r5, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b34:	2601      	movs	r6, #1
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8003b36:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b38:	2302      	movs	r3, #2
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8003b3a:	6840      	ldr	r0, [r0, #4]
 8003b3c:	a902      	add	r1, sp, #8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3e:	9305      	str	r3, [sp, #20]
	uint8_t t_data[5] = {};
 8003b40:	9500      	str	r5, [sp, #0]
 8003b42:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b46:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b48:	9603      	str	r6, [sp, #12]
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8003b4a:	f7fe fb59 	bl	8002200 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(p_DHT->DHT_Port, p_DHT->DHT_Pin, 0);
 8003b4e:	8921      	ldrh	r1, [r4, #8]
 8003b50:	462a      	mov	r2, r5
 8003b52:	6860      	ldr	r0, [r4, #4]
 8003b54:	f7fe fc34 	bl	80023c0 <HAL_GPIO_WritePin>
	DELAY_US_Run((p_DHT->sensor_type == DHT11) ? DHT11_STARTTIME : DHT22_STARTTIME);
 8003b58:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8003b5c:	f244 6250 	movw	r2, #18000	; 0x4650
 8003b60:	7820      	ldrb	r0, [r4, #0]
 8003b62:	42a8      	cmp	r0, r5
 8003b64:	bf0c      	ite	eq
 8003b66:	4610      	moveq	r0, r2
 8003b68:	4618      	movne	r0, r3
 8003b6a:	f000 f96b 	bl	8003e44 <DELAY_US_Run>
	HAL_GPIO_WritePin(p_DHT->DHT_Port, p_DHT->DHT_Pin, 1);
 8003b6e:	8921      	ldrh	r1, [r4, #8]
 8003b70:	4632      	mov	r2, r6
 8003b72:	6860      	ldr	r0, [r4, #4]
 8003b74:	f7fe fc24 	bl	80023c0 <HAL_GPIO_WritePin>
	DHT_Set_Pin_Input(p_DHT);
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f7ff ffb7 	bl	8003aec <DHT_Set_Pin_Input>
	DELAY_US_Run(40);
 8003b7e:	2028      	movs	r0, #40	; 0x28
 8003b80:	f000 f960 	bl	8003e44 <DELAY_US_Run>
	if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8003b84:	8921      	ldrh	r1, [r4, #8]
 8003b86:	6860      	ldr	r0, [r4, #4]
 8003b88:	f7fe fc14 	bl	80023b4 <HAL_GPIO_ReadPin>
 8003b8c:	b118      	cbz	r0, 8003b96 <DHT_Read_Value+0x6e>
	DHT_Start(p_DHT);
	if(DHT_Check_Response(p_DHT) == DHT_FAIL)
		return DHT_FAIL;
 8003b8e:	2000      	movs	r0, #0
		p_DHT->temperature = t_data[2] / 1.0;
	else
		return DHT_FAIL;

	return DHT_OK;
}
 8003b90:	b007      	add	sp, #28
 8003b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		DELAY_US_Run(80);
 8003b96:	2050      	movs	r0, #80	; 0x50
 8003b98:	f000 f954 	bl	8003e44 <DELAY_US_Run>
		if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8003b9c:	8921      	ldrh	r1, [r4, #8]
 8003b9e:	6860      	ldr	r0, [r4, #4]
 8003ba0:	f7fe fc08 	bl	80023b4 <HAL_GPIO_ReadPin>
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d0f2      	beq.n	8003b8e <DHT_Read_Value+0x66>
	uint32_t timer_out = HAL_GetTick();
 8003ba8:	f7fe f866 	bl	8001c78 <HAL_GetTick>
 8003bac:	4606      	mov	r6, r0
	while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8003bae:	8921      	ldrh	r1, [r4, #8]
 8003bb0:	6860      	ldr	r0, [r4, #4]
 8003bb2:	f7fe fbff 	bl	80023b4 <HAL_GPIO_ReadPin>
 8003bb6:	4605      	mov	r5, r0
 8003bb8:	b930      	cbnz	r0, 8003bc8 <DHT_Read_Value+0xa0>
	DHT_Set_Pin_Input(p_DHT);
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f7ff ff96 	bl	8003aec <DHT_Set_Pin_Input>
	for(int i = 0; i < 5; i++){
 8003bc0:	466e      	mov	r6, sp
				*(p_data + i) &= ~(1 << (7-j));
 8003bc2:	f04f 0801 	mov.w	r8, #1
 8003bc6:	e02c      	b.n	8003c22 <DHT_Read_Value+0xfa>
		if(HAL_GetTick() - timer_out > TIME_OUT){
 8003bc8:	f7fe f856 	bl	8001c78 <HAL_GetTick>
 8003bcc:	1b80      	subs	r0, r0, r6
 8003bce:	280a      	cmp	r0, #10
 8003bd0:	d9ed      	bls.n	8003bae <DHT_Read_Value+0x86>
 8003bd2:	e7dc      	b.n	8003b8e <DHT_Read_Value+0x66>
			uint32_t timer_out = HAL_GetTick();
 8003bd4:	f7fe f850 	bl	8001c78 <HAL_GetTick>
 8003bd8:	4681      	mov	r9, r0
			while(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8003bda:	8921      	ldrh	r1, [r4, #8]
 8003bdc:	6860      	ldr	r0, [r4, #4]
 8003bde:	f7fe fbe9 	bl	80023b4 <HAL_GPIO_ReadPin>
 8003be2:	b300      	cbz	r0, 8003c26 <DHT_Read_Value+0xfe>
			DELAY_US_Run(40);
 8003be4:	2028      	movs	r0, #40	; 0x28
 8003be6:	f000 f92d 	bl	8003e44 <DELAY_US_Run>
			if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin))
 8003bea:	8921      	ldrh	r1, [r4, #8]
 8003bec:	6860      	ldr	r0, [r4, #4]
 8003bee:	f7fe fbe1 	bl	80023b4 <HAL_GPIO_ReadPin>
				*(p_data + i) &= ~(1 << (7-j));
 8003bf2:	fa08 f207 	lsl.w	r2, r8, r7
 8003bf6:	f996 3000 	ldrsb.w	r3, [r6]
 8003bfa:	b252      	sxtb	r2, r2
			if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin))
 8003bfc:	b9d0      	cbnz	r0, 8003c34 <DHT_Read_Value+0x10c>
				*(p_data + i) &= ~(1 << (7-j));
 8003bfe:	ea23 0302 	bic.w	r3, r3, r2
				*(p_data + i) |= (1 << (7-j));
 8003c02:	7033      	strb	r3, [r6, #0]
			timer_out = HAL_GetTick();
 8003c04:	f7fe f838 	bl	8001c78 <HAL_GetTick>
 8003c08:	4681      	mov	r9, r0
			while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8003c0a:	8921      	ldrh	r1, [r4, #8]
 8003c0c:	6860      	ldr	r0, [r4, #4]
 8003c0e:	f7fe fbd1 	bl	80023b4 <HAL_GPIO_ReadPin>
 8003c12:	b988      	cbnz	r0, 8003c38 <DHT_Read_Value+0x110>
		for(int j = 0; j < 8; j++)
 8003c14:	3f01      	subs	r7, #1
 8003c16:	d2dd      	bcs.n	8003bd4 <DHT_Read_Value+0xac>
	for(int i = 0; i < 5; i++){
 8003c18:	3501      	adds	r5, #1
 8003c1a:	2d05      	cmp	r5, #5
 8003c1c:	f106 0601 	add.w	r6, r6, #1
 8003c20:	d011      	beq.n	8003c46 <DHT_Read_Value+0x11e>
	DELAY_US_Run((p_DHT->sensor_type == DHT11) ? DHT11_STARTTIME : DHT22_STARTTIME);
 8003c22:	2707      	movs	r7, #7
 8003c24:	e7d6      	b.n	8003bd4 <DHT_Read_Value+0xac>
				if(HAL_GetTick() - timer_out > TIME_OUT){
 8003c26:	f7fe f827 	bl	8001c78 <HAL_GetTick>
 8003c2a:	eba0 0009 	sub.w	r0, r0, r9
 8003c2e:	280a      	cmp	r0, #10
 8003c30:	d9d3      	bls.n	8003bda <DHT_Read_Value+0xb2>
 8003c32:	e7ac      	b.n	8003b8e <DHT_Read_Value+0x66>
				*(p_data + i) |= (1 << (7-j));
 8003c34:	4313      	orrs	r3, r2
 8003c36:	e7e4      	b.n	8003c02 <DHT_Read_Value+0xda>
				if(HAL_GetTick() - timer_out > TIME_OUT){
 8003c38:	f7fe f81e 	bl	8001c78 <HAL_GetTick>
 8003c3c:	eba0 0009 	sub.w	r0, r0, r9
 8003c40:	280a      	cmp	r0, #10
 8003c42:	d9e2      	bls.n	8003c0a <DHT_Read_Value+0xe2>
 8003c44:	e7a3      	b.n	8003b8e <DHT_Read_Value+0x66>
	if(((t_data[0] + t_data[1] + t_data[2] + t_data[3]) & 0xFF) != t_data[4])
 8003c46:	f89d 0000 	ldrb.w	r0, [sp]
 8003c4a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003c4e:	f89d 5002 	ldrb.w	r5, [sp, #2]
 8003c52:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003c56:	4403      	add	r3, r0
 8003c58:	442b      	add	r3, r5
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d193      	bne.n	8003b8e <DHT_Read_Value+0x66>
	if(t_data[0] < 100 && t_data[0] > 0)
 8003c66:	1e43      	subs	r3, r0, #1
 8003c68:	2b62      	cmp	r3, #98	; 0x62
 8003c6a:	d890      	bhi.n	8003b8e <DHT_Read_Value+0x66>
		p_DHT->huminity = t_data[0] / 1.0;
 8003c6c:	f7fc fbc8 	bl	8000400 <__aeabi_i2d>
 8003c70:	f7fc fc30 	bl	80004d4 <__aeabi_d2f>
	if(t_data[2] < 100 && t_data[2] > 0)
 8003c74:	1e6b      	subs	r3, r5, #1
 8003c76:	2b62      	cmp	r3, #98	; 0x62
		p_DHT->huminity = t_data[0] / 1.0;
 8003c78:	6120      	str	r0, [r4, #16]
	if(t_data[2] < 100 && t_data[2] > 0)
 8003c7a:	d888      	bhi.n	8003b8e <DHT_Read_Value+0x66>
		p_DHT->temperature = t_data[2] / 1.0;
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f7fc fbbf 	bl	8000400 <__aeabi_i2d>
 8003c82:	f7fc fc27 	bl	80004d4 <__aeabi_d2f>
 8003c86:	60e0      	str	r0, [r4, #12]
	return DHT_OK;
 8003c88:	2001      	movs	r0, #1
 8003c8a:	e781      	b.n	8003b90 <DHT_Read_Value+0x68>

08003c8c <DS3231_Init>:
static uint8_t DEC_To_BCD(uint8_t p_DEC_value){
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
}

void DS3231_Init(DS3231_HandleTypeDef *p_ds3231, I2C_HandleTypeDef *p_hi2c){
	p_ds3231->hi2c = p_hi2c;
 8003c8c:	6081      	str	r1, [r0, #8]
}
 8003c8e:	4770      	bx	lr

08003c90 <DS3231_Set_Time>:

void DS3231_Set_Time(DS3231_HandleTypeDef *p_ds3231, uint8_t p_hour, uint8_t p_minute, uint8_t p_second, uint8_t p_day){
 8003c90:	b570      	push	{r4, r5, r6, lr}
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003c92:	240a      	movs	r4, #10
 8003c94:	fbb3 f6f4 	udiv	r6, r3, r4
 8003c98:	fb04 3316 	mls	r3, r4, r6, r3
void DS3231_Set_Time(DS3231_HandleTypeDef *p_ds3231, uint8_t p_hour, uint8_t p_minute, uint8_t p_second, uint8_t p_day){
 8003c9c:	b086      	sub	sp, #24
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003c9e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	uint8_t t_i2c_buffer[4];
	t_i2c_buffer[0] = DEC_To_BCD(p_second);
 8003ca2:	f88d 3014 	strb.w	r3, [sp, #20]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003ca6:	fbb2 f3f4 	udiv	r3, r2, r4
 8003caa:	fb04 2213 	mls	r2, r4, r3, r2
 8003cae:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 8003cb2:	fbb1 f3f4 	udiv	r3, r1, r4
 8003cb6:	fb04 1113 	mls	r1, r4, r3, r1
void DS3231_Set_Time(DS3231_HandleTypeDef *p_ds3231, uint8_t p_hour, uint8_t p_minute, uint8_t p_second, uint8_t p_day){
 8003cba:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003cbe:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
 8003cc2:	fbb5 f3f4 	udiv	r3, r5, r4
 8003cc6:	fb04 5513 	mls	r5, r4, r3, r5
	t_i2c_buffer[1] = DEC_To_BCD(p_minute);
 8003cca:	f88d 2015 	strb.w	r2, [sp, #21]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003cce:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
	t_i2c_buffer[2] = DEC_To_BCD(p_hour) & (~USING_12_HOURS_TIME);
	t_i2c_buffer[3] = DEC_To_BCD(p_day);
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000);
 8003cd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003cdc:	ab05      	add	r3, sp, #20
 8003cde:	9300      	str	r3, [sp, #0]
	t_i2c_buffer[2] = DEC_To_BCD(p_hour) & (~USING_12_HOURS_TIME);
 8003ce0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003ce4:	f88d 1016 	strb.w	r1, [sp, #22]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000);
 8003ce8:	2301      	movs	r3, #1
 8003cea:	2200      	movs	r2, #0
 8003cec:	21d0      	movs	r1, #208	; 0xd0
 8003cee:	6880      	ldr	r0, [r0, #8]
	t_i2c_buffer[3] = DEC_To_BCD(p_day);
 8003cf0:	f88d 5017 	strb.w	r5, [sp, #23]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000);
 8003cf4:	f7fe fdec 	bl	80028d0 <HAL_I2C_Mem_Write>
}
 8003cf8:	b006      	add	sp, #24
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}

08003cfc <DS3231_Get_Time>:

uint8_t DS3231_Get_Time(DS3231_HandleTypeDef *p_ds3231){
	uint8_t t_i2c_buffer[4];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000) != HAL_OK){
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
uint8_t DS3231_Get_Time(DS3231_HandleTypeDef *p_ds3231){
 8003d02:	b510      	push	{r4, lr}
 8003d04:	b086      	sub	sp, #24
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000) != HAL_OK){
 8003d06:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d0a:	ab05      	add	r3, sp, #20
 8003d0c:	9300      	str	r3, [sp, #0]
uint8_t DS3231_Get_Time(DS3231_HandleTypeDef *p_ds3231){
 8003d0e:	4604      	mov	r4, r0
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000) != HAL_OK){
 8003d10:	2301      	movs	r3, #1
 8003d12:	2200      	movs	r2, #0
 8003d14:	21d0      	movs	r1, #208	; 0xd0
 8003d16:	6880      	ldr	r0, [r0, #8]
 8003d18:	f7fe fe6a 	bl	80029f0 <HAL_I2C_Mem_Read>
 8003d1c:	bb50      	cbnz	r0, 8003d74 <DS3231_Get_Time+0x78>
	}
	p_ds3231->current_second = BCD_To_DEC(t_i2c_buffer[0]);
	p_ds3231->current_minute = BCD_To_DEC(t_i2c_buffer[1]);
	p_ds3231->current_hour = BCD_To_DEC(t_i2c_buffer[2]);
	p_ds3231->current_day = BCD_To_DEC(t_i2c_buffer[3]);
	return DS3231_OK;
 8003d1e:	2001      	movs	r0, #1
	p_ds3231->current_second = BCD_To_DEC(t_i2c_buffer[0]);
 8003d20:	f89d 3014 	ldrb.w	r3, [sp, #20]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 8003d24:	091a      	lsrs	r2, r3, #4
 8003d26:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_second = BCD_To_DEC(t_i2c_buffer[0]);
 8003d32:	70a3      	strb	r3, [r4, #2]
	p_ds3231->current_minute = BCD_To_DEC(t_i2c_buffer[1]);
 8003d34:	f89d 3015 	ldrb.w	r3, [sp, #21]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 8003d38:	091a      	lsrs	r2, r3, #4
 8003d3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_minute = BCD_To_DEC(t_i2c_buffer[1]);
 8003d46:	7063      	strb	r3, [r4, #1]
	p_ds3231->current_hour = BCD_To_DEC(t_i2c_buffer[2]);
 8003d48:	f89d 3016 	ldrb.w	r3, [sp, #22]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 8003d4c:	091a      	lsrs	r2, r3, #4
 8003d4e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_hour = BCD_To_DEC(t_i2c_buffer[2]);
 8003d5a:	7023      	strb	r3, [r4, #0]
	p_ds3231->current_day = BCD_To_DEC(t_i2c_buffer[3]);
 8003d5c:	f89d 3017 	ldrb.w	r3, [sp, #23]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 8003d60:	091a      	lsrs	r2, r3, #4
 8003d62:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_day = BCD_To_DEC(t_i2c_buffer[3]);
 8003d6e:	70e3      	strb	r3, [r4, #3]
}
 8003d70:	b006      	add	sp, #24
 8003d72:	bd10      	pop	{r4, pc}
		return DS3231_FAIL;
 8003d74:	2000      	movs	r0, #0
 8003d76:	e7fb      	b.n	8003d70 <DS3231_Get_Time+0x74>

08003d78 <DS3231_Set_Date>:

void DS3231_Set_Date(DS3231_HandleTypeDef *p_ds3231, uint8_t p_date, uint8_t p_month, uint8_t p_year){
 8003d78:	b530      	push	{r4, r5, lr}
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003d7a:	240a      	movs	r4, #10
 8003d7c:	fbb1 f5f4 	udiv	r5, r1, r4
 8003d80:	fb04 1115 	mls	r1, r4, r5, r1
void DS3231_Set_Date(DS3231_HandleTypeDef *p_ds3231, uint8_t p_date, uint8_t p_month, uint8_t p_year){
 8003d84:	b087      	sub	sp, #28
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003d86:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
	uint8_t t_i2c_buffer[3];
	t_i2c_buffer[0] = DEC_To_BCD(p_date);
 8003d8a:	f88d 1014 	strb.w	r1, [sp, #20]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003d8e:	fbb2 f1f4 	udiv	r1, r2, r4
 8003d92:	fb04 2211 	mls	r2, r4, r1, r2
 8003d96:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
	t_i2c_buffer[1] = DEC_To_BCD(p_month);
 8003d9a:	f88d 2015 	strb.w	r2, [sp, #21]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003d9e:	fbb3 f2f4 	udiv	r2, r3, r4
 8003da2:	fb04 3312 	mls	r3, r4, r2, r3
 8003da6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
	t_i2c_buffer[2] = DEC_To_BCD(p_year);
 8003daa:	f88d 3016 	strb.w	r3, [sp, #22]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000);
 8003dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003db2:	2303      	movs	r3, #3
 8003db4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003db8:	ab05      	add	r3, sp, #20
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	21d0      	movs	r1, #208	; 0xd0
 8003dc2:	6880      	ldr	r0, [r0, #8]
 8003dc4:	f7fe fd84 	bl	80028d0 <HAL_I2C_Mem_Write>
}
 8003dc8:	b007      	add	sp, #28
 8003dca:	bd30      	pop	{r4, r5, pc}

08003dcc <DS3231_Get_Date>:

uint8_t DS3231_Get_Date(DS3231_HandleTypeDef *p_ds3231){
	uint8_t t_i2c_buffer[3];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000) != HAL_OK){
 8003dcc:	2303      	movs	r3, #3
 8003dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
uint8_t DS3231_Get_Date(DS3231_HandleTypeDef *p_ds3231){
 8003dd2:	b510      	push	{r4, lr}
 8003dd4:	b086      	sub	sp, #24
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000) != HAL_OK){
 8003dd6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003dda:	ab05      	add	r3, sp, #20
 8003ddc:	9300      	str	r3, [sp, #0]
uint8_t DS3231_Get_Date(DS3231_HandleTypeDef *p_ds3231){
 8003dde:	4604      	mov	r4, r0
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000) != HAL_OK){
 8003de0:	2301      	movs	r3, #1
 8003de2:	2204      	movs	r2, #4
 8003de4:	21d0      	movs	r1, #208	; 0xd0
 8003de6:	6880      	ldr	r0, [r0, #8]
 8003de8:	f7fe fe02 	bl	80029f0 <HAL_I2C_Mem_Read>
 8003dec:	bb08      	cbnz	r0, 8003e32 <DS3231_Get_Date+0x66>
		return DS3231_FAIL;
	}
	p_ds3231->current_date = BCD_To_DEC(t_i2c_buffer[0]);
	p_ds3231->current_month = BCD_To_DEC(t_i2c_buffer[1]);
	p_ds3231->current_year = BCD_To_DEC(t_i2c_buffer[2]);
	return DS3231_OK;
 8003dee:	2001      	movs	r0, #1
	p_ds3231->current_date = BCD_To_DEC(t_i2c_buffer[0]);
 8003df0:	f89d 3014 	ldrb.w	r3, [sp, #20]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 8003df4:	091a      	lsrs	r2, r3, #4
 8003df6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_date = BCD_To_DEC(t_i2c_buffer[0]);
 8003e02:	7123      	strb	r3, [r4, #4]
	p_ds3231->current_month = BCD_To_DEC(t_i2c_buffer[1]);
 8003e04:	f89d 3015 	ldrb.w	r3, [sp, #21]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 8003e08:	091a      	lsrs	r2, r3, #4
 8003e0a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_month = BCD_To_DEC(t_i2c_buffer[1]);
 8003e16:	7163      	strb	r3, [r4, #5]
	p_ds3231->current_year = BCD_To_DEC(t_i2c_buffer[2]);
 8003e18:	f89d 3016 	ldrb.w	r3, [sp, #22]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 8003e1c:	091a      	lsrs	r2, r3, #4
 8003e1e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_year = BCD_To_DEC(t_i2c_buffer[2]);
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	80e3      	strh	r3, [r4, #6]
}
 8003e2e:	b006      	add	sp, #24
 8003e30:	bd10      	pop	{r4, pc}
		return DS3231_FAIL;
 8003e32:	2000      	movs	r0, #0
 8003e34:	e7fb      	b.n	8003e2e <DS3231_Get_Date+0x62>
	...

08003e38 <DELAY_US_Init>:
#include "Delay_us.h"

TIM_HandleTypeDef *delay_timer;

void DELAY_US_Init(TIM_HandleTypeDef *p_htim){
	delay_timer = p_htim;
 8003e38:	4b01      	ldr	r3, [pc, #4]	; (8003e40 <DELAY_US_Init+0x8>)
 8003e3a:	6018      	str	r0, [r3, #0]
}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000390 	.word	0x20000390

08003e44 <DELAY_US_Run>:

void DELAY_US_Run(uint32_t p_delay_time){
	delay_timer->Instance->CNT = 0;
 8003e44:	2200      	movs	r2, #0
void DELAY_US_Run(uint32_t p_delay_time){
 8003e46:	b538      	push	{r3, r4, r5, lr}
	delay_timer->Instance->CNT = 0;
 8003e48:	4d07      	ldr	r5, [pc, #28]	; (8003e68 <DELAY_US_Run+0x24>)
void DELAY_US_Run(uint32_t p_delay_time){
 8003e4a:	4604      	mov	r4, r0
	delay_timer->Instance->CNT = 0;
 8003e4c:	6828      	ldr	r0, [r5, #0]
 8003e4e:	6803      	ldr	r3, [r0, #0]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(delay_timer);
 8003e52:	f7ff fb27 	bl	80034a4 <HAL_TIM_Base_Start>
	while(delay_timer->Instance->CNT < p_delay_time);
 8003e56:	6828      	ldr	r0, [r5, #0]
 8003e58:	6802      	ldr	r2, [r0, #0]
 8003e5a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003e5c:	42a3      	cmp	r3, r4
 8003e5e:	d3fc      	bcc.n	8003e5a <DELAY_US_Run+0x16>
	HAL_TIM_Base_Stop(delay_timer);
}
 8003e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_Base_Stop(delay_timer);
 8003e64:	f7ff bb44 	b.w	80034f0 <HAL_TIM_Base_Stop>
 8003e68:	20000390 	.word	0x20000390

08003e6c <ENCODER_Init>:
}
#endif

void ENCODER_Init(ENCODER_HandleTypeDef *p_encoder, TIM_HandleTypeDef *p_encoder_timer){
	p_encoder->encoder_timer = p_encoder_timer;
	p_encoder->current_possition = 0;
 8003e6c:	2300      	movs	r3, #0
	p_encoder->encoder_timer = p_encoder_timer;
 8003e6e:	6001      	str	r1, [r0, #0]
	p_encoder->current_possition = 0;
 8003e70:	6043      	str	r3, [r0, #4]
	p_encoder->last_position = 0;
}
 8003e72:	4770      	bx	lr

08003e74 <ENCODER_Set_Callback_Function>:

void ENCODER_Set_Callback_Function(encoder_callback_function_t p_forward_callback_function, encoder_callback_function_t p_backward_callback_function){
	__ENCODER_Forward_Callback = p_forward_callback_function;
 8003e74:	4b02      	ldr	r3, [pc, #8]	; (8003e80 <ENCODER_Set_Callback_Function+0xc>)
 8003e76:	6018      	str	r0, [r3, #0]
	__ENCODER_Backward_Callback = p_backward_callback_function;
 8003e78:	4b02      	ldr	r3, [pc, #8]	; (8003e84 <ENCODER_Set_Callback_Function+0x10>)
 8003e7a:	6019      	str	r1, [r3, #0]
}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000398 	.word	0x20000398
 8003e84:	20000394 	.word	0x20000394

08003e88 <ENCODER_IT_Handle>:

void ENCODER_IT_Handle(ENCODER_HandleTypeDef *p_encoder){
	uint32_t t_counter = __HAL_TIM_GET_COUNTER(p_encoder->encoder_timer);
 8003e88:	6803      	ldr	r3, [r0, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	p_encoder->current_possition =  (int16_t)t_counter / 4;
 8003e8e:	b21b      	sxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bfb8      	it	lt
 8003e94:	3303      	addlt	r3, #3
 8003e96:	109b      	asrs	r3, r3, #2
 8003e98:	8083      	strh	r3, [r0, #4]
}
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIM_IC_CaptureCallback>:
	if(h_encoder.encoder_timer->Instance == htim->Instance){
 8003e9c:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <HAL_TIM_IC_CaptureCallback+0x14>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	6811      	ldr	r1, [r2, #0]
 8003ea2:	6802      	ldr	r2, [r0, #0]
 8003ea4:	4291      	cmp	r1, r2
 8003ea6:	d102      	bne.n	8003eae <HAL_TIM_IC_CaptureCallback+0x12>
		ENCODER_IT_Handle(&h_encoder);
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff bfed 	b.w	8003e88 <ENCODER_IT_Handle>
}
 8003eae:	4770      	bx	lr
 8003eb0:	200000dc 	.word	0x200000dc

08003eb4 <ENCODER_Handle>:

void ENCODER_Handle(ENCODER_HandleTypeDef *p_encoder){
	if(p_encoder->current_possition > p_encoder->last_position){
 8003eb4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8003eb8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
void ENCODER_Handle(ENCODER_HandleTypeDef *p_encoder){
 8003ebc:	b510      	push	{r4, lr}
	if(p_encoder->current_possition > p_encoder->last_position){
 8003ebe:	429a      	cmp	r2, r3
void ENCODER_Handle(ENCODER_HandleTypeDef *p_encoder){
 8003ec0:	4604      	mov	r4, r0
	if(p_encoder->current_possition > p_encoder->last_position){
 8003ec2:	dd06      	ble.n	8003ed2 <ENCODER_Handle+0x1e>
		if(__ENCODER_Forward_Callback != NULL){
 8003ec4:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <ENCODER_Handle+0x24>)
			__ENCODER_Forward_Callback(p_encoder);
		}
		p_encoder->last_position = p_encoder->current_possition;
	}
	if(p_encoder->current_possition < p_encoder->last_position){
		if(__ENCODER_Backward_Callback != NULL){
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	b103      	cbz	r3, 8003ecc <ENCODER_Handle+0x18>
			__ENCODER_Backward_Callback(p_encoder);
 8003eca:	4798      	blx	r3
		}
		p_encoder->last_position = p_encoder->current_possition;
 8003ecc:	88a3      	ldrh	r3, [r4, #4]
 8003ece:	80e3      	strh	r3, [r4, #6]
	}
}
 8003ed0:	bd10      	pop	{r4, pc}
	if(p_encoder->current_possition < p_encoder->last_position){
 8003ed2:	dafd      	bge.n	8003ed0 <ENCODER_Handle+0x1c>
		if(__ENCODER_Backward_Callback != NULL){
 8003ed4:	4b01      	ldr	r3, [pc, #4]	; (8003edc <ENCODER_Handle+0x28>)
 8003ed6:	e7f6      	b.n	8003ec6 <ENCODER_Handle+0x12>
 8003ed8:	20000398 	.word	0x20000398
 8003edc:	20000394 	.word	0x20000394

08003ee0 <LCD_Send_Command>:
void LCD_Display_Off(LCD_I2C_HandleTypeDef *p_lcd){
	p_lcd->LCD_Display_Option &= ~LCD_DISPLAYON;
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
}

void LCD_Send_Command(LCD_I2C_HandleTypeDef *p_lcd, char cmd){
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	460d      	mov	r5, r1
#ifdef LCD_4BIT_CONTROL
	GPIOA->ODR &= ~0x0F00;
 8003ee4:	4e1f      	ldr	r6, [pc, #124]	; (8003f64 <LCD_Send_Command+0x84>)
void LCD_Send_Command(LCD_I2C_HandleTypeDef *p_lcd, char cmd){
 8003ee6:	4607      	mov	r7, r0
	GPIOA->ODR &= ~0x0F00;
 8003ee8:	68f3      	ldr	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(cmd & 0xF0) << 4);
	GPIOB->ODR &= ~0xF000;
 8003eea:	4c1f      	ldr	r4, [pc, #124]	; (8003f68 <LCD_Send_Command+0x88>)
	GPIOA->ODR &= ~0x0F00;
 8003eec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ef0:	60f3      	str	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(cmd & 0xF0) << 4);
 8003ef2:	68f2      	ldr	r2, [r6, #12]
 8003ef4:	010b      	lsls	r3, r1, #4
 8003ef6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60f3      	str	r3, [r6, #12]
	GPIOB->ODR &= ~0xF000;
 8003efe:	68e3      	ldr	r3, [r4, #12]
	DELAY_US_Run(40);
	GPIOB->ODR &= ~(En << 12);
	DELAY_US_Run(40);

	GPIOA->ODR &= ~0x0F00;
	GPIOA->ODR |= ((uint16_t)(cmd & 0x0F) << 8);
 8003f00:	022d      	lsls	r5, r5, #8
	GPIOB->ODR &= ~0xF000;
 8003f02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f06:	60e3      	str	r3, [r4, #12]
	GPIOB->ODR |= (SENDING_CMD_MASK | p_lcd->LCD_Backlight_Value) << 12;
 8003f08:	78c2      	ldrb	r2, [r0, #3]
 8003f0a:	68e3      	ldr	r3, [r4, #12]
 8003f0c:	f042 0204 	orr.w	r2, r2, #4
 8003f10:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	DELAY_US_Run(40);
 8003f14:	2028      	movs	r0, #40	; 0x28
	GPIOB->ODR |= (SENDING_CMD_MASK | p_lcd->LCD_Backlight_Value) << 12;
 8003f16:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 8003f18:	f7ff ff94 	bl	8003e44 <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 8003f1c:	68e3      	ldr	r3, [r4, #12]
	DELAY_US_Run(40);
 8003f1e:	2028      	movs	r0, #40	; 0x28
	GPIOB->ODR &= ~(En << 12);
 8003f20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f24:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 8003f26:	f7ff ff8d 	bl	8003e44 <DELAY_US_Run>
	GPIOA->ODR &= ~0x0F00;
 8003f2a:	68f3      	ldr	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(cmd & 0x0F) << 8);
 8003f2c:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
	GPIOA->ODR &= ~0x0F00;
 8003f30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f34:	60f3      	str	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(cmd & 0x0F) << 8);
 8003f36:	68f3      	ldr	r3, [r6, #12]
	GPIOB->ODR &= ~0xF000;
	GPIOB->ODR |= (SENDING_CMD_MASK | p_lcd->LCD_Backlight_Value) << 12;
	DELAY_US_Run(40);
 8003f38:	2028      	movs	r0, #40	; 0x28
	GPIOA->ODR |= ((uint16_t)(cmd & 0x0F) << 8);
 8003f3a:	431d      	orrs	r5, r3
 8003f3c:	60f5      	str	r5, [r6, #12]
	GPIOB->ODR &= ~0xF000;
 8003f3e:	68e3      	ldr	r3, [r4, #12]
 8003f40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f44:	60e3      	str	r3, [r4, #12]
	GPIOB->ODR |= (SENDING_CMD_MASK | p_lcd->LCD_Backlight_Value) << 12;
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	68e3      	ldr	r3, [r4, #12]
 8003f4a:	f042 0204 	orr.w	r2, r2, #4
 8003f4e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003f52:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 8003f54:	f7ff ff76 	bl	8003e44 <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 8003f58:	68e3      	ldr	r3, [r4, #12]
 8003f5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f5e:	60e3      	str	r3, [r4, #12]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En;
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value;

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
#endif
}
 8003f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40010800 	.word	0x40010800
 8003f68:	40010c00 	.word	0x40010c00

08003f6c <LCD_Init>:
void LCD_Init(LCD_I2C_HandleTypeDef *p_lcd, I2C_HandleTypeDef *p_hi2c, uint8_t p_cols, uint8_t p_rows, uint8_t p_SLAVE_ADDRESS){
 8003f6c:	b510      	push	{r4, lr}
 8003f6e:	4604      	mov	r4, r0
 8003f70:	f89d 0008 	ldrb.w	r0, [sp, #8]
	p_lcd->LCD_Rows = p_rows;
 8003f74:	7063      	strb	r3, [r4, #1]
	p_lcd->SLAVE_ADDRESS = p_SLAVE_ADDRESS;
 8003f76:	70a0      	strb	r0, [r4, #2]
	p_lcd->LCD_Display_Option = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8003f78:	2304      	movs	r3, #4
	p_lcd->LCD_Backlight_Value = LCD_BACKLIGHT;
 8003f7a:	2008      	movs	r0, #8
	p_lcd->LCD_Columns = p_cols;
 8003f7c:	7022      	strb	r2, [r4, #0]
	p_lcd->LCD_Display_Option = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8003f7e:	7123      	strb	r3, [r4, #4]
	p_lcd->LCD_Backlight_Value = LCD_BACKLIGHT;
 8003f80:	70e0      	strb	r0, [r4, #3]
	p_lcd->hi2c = p_hi2c;
 8003f82:	60a1      	str	r1, [r4, #8]
	HAL_Delay(50);
 8003f84:	2032      	movs	r0, #50	; 0x32
 8003f86:	f7fd fe7d 	bl	8001c84 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x33);
 8003f8a:	2133      	movs	r1, #51	; 0x33
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f7ff ffa7 	bl	8003ee0 <LCD_Send_Command>
	HAL_Delay(5);
 8003f92:	2005      	movs	r0, #5
 8003f94:	f7fd fe76 	bl	8001c84 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x33);
 8003f98:	2133      	movs	r1, #51	; 0x33
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	f7ff ffa0 	bl	8003ee0 <LCD_Send_Command>
	HAL_Delay(5);
 8003fa0:	2005      	movs	r0, #5
 8003fa2:	f7fd fe6f 	bl	8001c84 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x32);
 8003fa6:	2132      	movs	r1, #50	; 0x32
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f7ff ff99 	bl	8003ee0 <LCD_Send_Command>
	HAL_Delay(5);
 8003fae:	2005      	movs	r0, #5
 8003fb0:	f7fd fe68 	bl	8001c84 <HAL_Delay>
	LCD_Send_Command(p_lcd, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	2106      	movs	r1, #6
 8003fb8:	f7ff ff92 	bl	8003ee0 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	210c      	movs	r1, #12
 8003fc0:	f7ff ff8e 	bl	8003ee0 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT);
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	2114      	movs	r1, #20
 8003fc8:	f7ff ff8a 	bl	8003ee0 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8003fcc:	4620      	mov	r0, r4
 8003fce:	2128      	movs	r1, #40	; 0x28
 8003fd0:	f7ff ff86 	bl	8003ee0 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	f7ff ff82 	bl	8003ee0 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_RETURNHOME);
 8003fdc:	4620      	mov	r0, r4
 8003fde:	2102      	movs	r1, #2
 8003fe0:	f7ff ff7e 	bl	8003ee0 <LCD_Send_Command>
}
 8003fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(500);
 8003fe8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003fec:	f7fd be4a 	b.w	8001c84 <HAL_Delay>

08003ff0 <LCD_Set_Cursor>:
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	; (800401c <LCD_Set_Cursor+0x2c>)
void LCD_Set_Cursor(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_col, uint8_t p_row){
 8003ff2:	b082      	sub	sp, #8
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8003ff4:	9301      	str	r3, [sp, #4]
	if(p_row > p_lcd->LCD_Rows) p_row = p_lcd->LCD_Rows - 1;
 8003ff6:	7843      	ldrb	r3, [r0, #1]
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	bf3c      	itt	cc
 8003ffc:	f103 32ff 	addcc.w	r2, r3, #4294967295
 8004000:	b2d2      	uxtbcc	r2, r2
	LCD_Send_Command(p_lcd, LCD_SETDDRAMADDR | (p_col + t_row_Offets[p_row]));
 8004002:	f102 0308 	add.w	r3, r2, #8
 8004006:	eb0d 0203 	add.w	r2, sp, r3
 800400a:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800400e:	4419      	add	r1, r3
 8004010:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8004014:	b2c9      	uxtb	r1, r1
}
 8004016:	b002      	add	sp, #8
	LCD_Send_Command(p_lcd, LCD_SETDDRAMADDR | (p_col + t_row_Offets[p_row]));
 8004018:	f7ff bf62 	b.w	8003ee0 <LCD_Send_Command>
 800401c:	54144000 	.word	0x54144000

08004020 <LCD_Clear>:
void LCD_Clear(LCD_I2C_HandleTypeDef *p_lcd){
 8004020:	b510      	push	{r4, lr}
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 8004022:	2101      	movs	r1, #1
void LCD_Clear(LCD_I2C_HandleTypeDef *p_lcd){
 8004024:	4604      	mov	r4, r0
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 8004026:	f7ff ff5b 	bl	8003ee0 <LCD_Send_Command>
	DELAY_US_Run(1600);
 800402a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800402e:	f7ff ff09 	bl	8003e44 <DELAY_US_Run>
	LCD_Set_Cursor(p_lcd, 0, 0);
 8004032:	2200      	movs	r2, #0
 8004034:	4620      	mov	r0, r4
}
 8004036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_Set_Cursor(p_lcd, 0, 0);
 800403a:	4611      	mov	r1, r2
 800403c:	f7ff bfd8 	b.w	8003ff0 <LCD_Set_Cursor>

08004040 <LCD_Cursor_Blink>:
	p_lcd->LCD_Display_Option |= LCD_BLINKON;
 8004040:	7901      	ldrb	r1, [r0, #4]
 8004042:	f041 0201 	orr.w	r2, r1, #1
 8004046:	7102      	strb	r2, [r0, #4]
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
 8004048:	f041 0109 	orr.w	r1, r1, #9
 800404c:	f7ff bf48 	b.w	8003ee0 <LCD_Send_Command>

08004050 <LCD_Cursor_No_Blink>:
	p_lcd->LCD_Display_Option &= ~LCD_BLINKON;
 8004050:	7901      	ldrb	r1, [r0, #4]
 8004052:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8004056:	7101      	strb	r1, [r0, #4]
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
 8004058:	f041 0108 	orr.w	r1, r1, #8
 800405c:	f7ff bf40 	b.w	8003ee0 <LCD_Send_Command>

08004060 <LCD_Send_Data>:

void LCD_Send_Data(LCD_I2C_HandleTypeDef *p_lcd, char data){
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	460d      	mov	r5, r1
#ifdef LCD_4BIT_CONTROL
	GPIOA->ODR &= ~0x0F00;
 8004064:	4e1f      	ldr	r6, [pc, #124]	; (80040e4 <LCD_Send_Data+0x84>)
void LCD_Send_Data(LCD_I2C_HandleTypeDef *p_lcd, char data){
 8004066:	4607      	mov	r7, r0
	GPIOA->ODR &= ~0x0F00;
 8004068:	68f3      	ldr	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(data & 0xF0) << 4);
	GPIOB->ODR &= ~0xF000;
 800406a:	4c1f      	ldr	r4, [pc, #124]	; (80040e8 <LCD_Send_Data+0x88>)
	GPIOA->ODR &= ~0x0F00;
 800406c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004070:	60f3      	str	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(data & 0xF0) << 4);
 8004072:	68f2      	ldr	r2, [r6, #12]
 8004074:	010b      	lsls	r3, r1, #4
 8004076:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800407a:	4313      	orrs	r3, r2
 800407c:	60f3      	str	r3, [r6, #12]
	GPIOB->ODR &= ~0xF000;
 800407e:	68e3      	ldr	r3, [r4, #12]
	DELAY_US_Run(40);
	GPIOB->ODR &= ~(En << 12);
	DELAY_US_Run(40);

	GPIOA->ODR &= ~0x0F00;
	GPIOA->ODR |= ((uint16_t)(data & 0x0F) << 8);
 8004080:	022d      	lsls	r5, r5, #8
	GPIOB->ODR &= ~0xF000;
 8004082:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004086:	60e3      	str	r3, [r4, #12]
	GPIOB->ODR |= (SENDING_DATA_MASK | p_lcd->LCD_Backlight_Value) << 12;
 8004088:	78c2      	ldrb	r2, [r0, #3]
 800408a:	68e3      	ldr	r3, [r4, #12]
 800408c:	f042 0205 	orr.w	r2, r2, #5
 8004090:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	DELAY_US_Run(40);
 8004094:	2028      	movs	r0, #40	; 0x28
	GPIOB->ODR |= (SENDING_DATA_MASK | p_lcd->LCD_Backlight_Value) << 12;
 8004096:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 8004098:	f7ff fed4 	bl	8003e44 <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 800409c:	68e3      	ldr	r3, [r4, #12]
	DELAY_US_Run(40);
 800409e:	2028      	movs	r0, #40	; 0x28
	GPIOB->ODR &= ~(En << 12);
 80040a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040a4:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 80040a6:	f7ff fecd 	bl	8003e44 <DELAY_US_Run>
	GPIOA->ODR &= ~0x0F00;
 80040aa:	68f3      	ldr	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(data & 0x0F) << 8);
 80040ac:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
	GPIOA->ODR &= ~0x0F00;
 80040b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040b4:	60f3      	str	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(data & 0x0F) << 8);
 80040b6:	68f3      	ldr	r3, [r6, #12]
	GPIOB->ODR &= ~0xF000;
	GPIOB->ODR |= (SENDING_DATA_MASK | p_lcd->LCD_Backlight_Value) << 12;
	DELAY_US_Run(40);
 80040b8:	2028      	movs	r0, #40	; 0x28
	GPIOA->ODR |= ((uint16_t)(data & 0x0F) << 8);
 80040ba:	431d      	orrs	r5, r3
 80040bc:	60f5      	str	r5, [r6, #12]
	GPIOB->ODR &= ~0xF000;
 80040be:	68e3      	ldr	r3, [r4, #12]
 80040c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040c4:	60e3      	str	r3, [r4, #12]
	GPIOB->ODR |= (SENDING_DATA_MASK | p_lcd->LCD_Backlight_Value) << 12;
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	68e3      	ldr	r3, [r4, #12]
 80040ca:	f042 0205 	orr.w	r2, r2, #5
 80040ce:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80040d2:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 80040d4:	f7ff feb6 	bl	8003e44 <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 80040d8:	68e3      	ldr	r3, [r4, #12]
 80040da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040de:	60e3      	str	r3, [r4, #12]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En | Rs;
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value | Rs;

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
#endif
}
 80040e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40010800 	.word	0x40010800
 80040e8:	40010c00 	.word	0x40010c00

080040ec <LCD_Write>:
void LCD_Write(LCD_I2C_HandleTypeDef *p_lcd, const char *p_str, ...){
 80040ec:	b40e      	push	{r1, r2, r3}
 80040ee:	b5f0      	push	{r4, r5, r6, r7, lr}
	char t_stringArray[21] = {};
 80040f0:	2400      	movs	r4, #0
void LCD_Write(LCD_I2C_HandleTypeDef *p_lcd, const char *p_str, ...){
 80040f2:	b088      	sub	sp, #32
 80040f4:	ae0d      	add	r6, sp, #52	; 0x34
 80040f6:	f856 7b04 	ldr.w	r7, [r6], #4
	char t_stringArray[21] = {};
 80040fa:	2211      	movs	r2, #17
 80040fc:	4621      	mov	r1, r4
void LCD_Write(LCD_I2C_HandleTypeDef *p_lcd, const char *p_str, ...){
 80040fe:	4605      	mov	r5, r0
	char t_stringArray[21] = {};
 8004100:	a803      	add	r0, sp, #12
 8004102:	9402      	str	r4, [sp, #8]
 8004104:	f000 f938 	bl	8004378 <memset>
	vsprintf(t_stringArray, p_str, t_args);
 8004108:	4632      	mov	r2, r6
 800410a:	4639      	mov	r1, r7
 800410c:	a802      	add	r0, sp, #8
	va_start(t_args, p_str);
 800410e:	9601      	str	r6, [sp, #4]
	vsprintf(t_stringArray, p_str, t_args);
 8004110:	f000 fa44 	bl	800459c <vsiprintf>
	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 8004114:	ae02      	add	r6, sp, #8
 8004116:	a802      	add	r0, sp, #8
 8004118:	f7fc f818 	bl	800014c <strlen>
 800411c:	42a0      	cmp	r0, r4
 800411e:	d902      	bls.n	8004126 <LCD_Write+0x3a>
 8004120:	782b      	ldrb	r3, [r5, #0]
 8004122:	42a3      	cmp	r3, r4
 8004124:	dc04      	bgt.n	8004130 <LCD_Write+0x44>
}
 8004126:	b008      	add	sp, #32
 8004128:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800412c:	b003      	add	sp, #12
 800412e:	4770      	bx	lr
		LCD_Send_Data(p_lcd, t_stringArray[i]);
 8004130:	4628      	mov	r0, r5
 8004132:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004136:	f7ff ff93 	bl	8004060 <LCD_Send_Data>
	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 800413a:	3401      	adds	r4, #1
 800413c:	e7eb      	b.n	8004116 <LCD_Write+0x2a>

0800413e <LCD_Create_Char>:
	p_location <<= 3;
 800413e:	00c9      	lsls	r1, r1, #3
 8004140:	f001 0138 	and.w	r1, r1, #56	; 0x38
void LCD_Create_Char(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_location, uint8_t p_charMap[]){
 8004144:	b570      	push	{r4, r5, r6, lr}
	LCD_Send_Command(p_lcd, LCD_SETCGRAMADDR | p_location);
 8004146:	f041 0140 	orr.w	r1, r1, #64	; 0x40
void LCD_Create_Char(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_location, uint8_t p_charMap[]){
 800414a:	4614      	mov	r4, r2
 800414c:	4606      	mov	r6, r0
	LCD_Send_Command(p_lcd, LCD_SETCGRAMADDR | p_location);
 800414e:	f7ff fec7 	bl	8003ee0 <LCD_Send_Command>
	for(int i = 0; i < 8; i++) LCD_Send_Data(p_lcd, p_charMap[i]);
 8004152:	1e65      	subs	r5, r4, #1
 8004154:	3407      	adds	r4, #7
 8004156:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800415a:	4630      	mov	r0, r6
 800415c:	f7ff ff80 	bl	8004060 <LCD_Send_Data>
 8004160:	42a5      	cmp	r5, r4
 8004162:	d1f8      	bne.n	8004156 <LCD_Create_Char+0x18>
}
 8004164:	bd70      	pop	{r4, r5, r6, pc}
	...

08004168 <BUTTON_Handle>:
button_callback_function_t __BUTTON_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Releasing_Callback = NULL;
button_callback_function_t __BUTTON_Short_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Long_Pressing_Callback = NULL;

void BUTTON_Handle(BUTTON_HandleTypedef *ButtonX){
 8004168:	b510      	push	{r4, lr}
 800416a:	4604      	mov	r4, r0
	uint8_t state = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 800416c:	8a81      	ldrh	r1, [r0, #20]
 800416e:	6900      	ldr	r0, [r0, #16]
 8004170:	f7fe f920 	bl	80023b4 <HAL_GPIO_ReadPin>
	if(state != ButtonX->BTN_Filter){
 8004174:	78a3      	ldrb	r3, [r4, #2]
 8004176:	4283      	cmp	r3, r0
 8004178:	d005      	beq.n	8004186 <BUTTON_Handle+0x1e>
		ButtonX->BTN_Filter = state;
		ButtonX->is_debouncing = 1;
 800417a:	2301      	movs	r3, #1
		ButtonX->BTN_Filter = state;
 800417c:	70a0      	strb	r0, [r4, #2]
		ButtonX->is_debouncing = 1;
 800417e:	70e3      	strb	r3, [r4, #3]
		ButtonX->time_debounce = HAL_GetTick();
 8004180:	f7fd fd7a 	bl	8001c78 <HAL_GetTick>
 8004184:	60a0      	str	r0, [r4, #8]
	}

	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->time_debounce >= 15)){
 8004186:	78e3      	ldrb	r3, [r4, #3]
 8004188:	b14b      	cbz	r3, 800419e <BUTTON_Handle+0x36>
 800418a:	f7fd fd75 	bl	8001c78 <HAL_GetTick>
 800418e:	68a3      	ldr	r3, [r4, #8]
 8004190:	1ac0      	subs	r0, r0, r3
 8004192:	280e      	cmp	r0, #14
		ButtonX->BTN_Current = ButtonX->BTN_Filter;
 8004194:	bf81      	itttt	hi
 8004196:	78a3      	ldrbhi	r3, [r4, #2]
 8004198:	7023      	strbhi	r3, [r4, #0]
		ButtonX->is_debouncing = 0;
 800419a:	2300      	movhi	r3, #0
 800419c:	70e3      	strbhi	r3, [r4, #3]
	}

	if(ButtonX->BTN_Current != ButtonX->BTN_Last){
 800419e:	7823      	ldrb	r3, [r4, #0]
 80041a0:	7862      	ldrb	r2, [r4, #1]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d00c      	beq.n	80041c0 <BUTTON_Handle+0x58>
		if(ButtonX->BTN_Current == 0){
 80041a6:	b9e3      	cbnz	r3, 80041e2 <BUTTON_Handle+0x7a>
			if(__BUTTON_Pressing_Callback != NULL){
 80041a8:	4b18      	ldr	r3, [pc, #96]	; (800420c <BUTTON_Handle+0xa4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	b10b      	cbz	r3, 80041b2 <BUTTON_Handle+0x4a>
				__BUTTON_Pressing_Callback(ButtonX);
 80041ae:	4620      	mov	r0, r4
 80041b0:	4798      	blx	r3
			}
			ButtonX->is_press = 1;
 80041b2:	2301      	movs	r3, #1
 80041b4:	7123      	strb	r3, [r4, #4]
			ButtonX->time_start_press = HAL_GetTick();
 80041b6:	f7fd fd5f 	bl	8001c78 <HAL_GetTick>
 80041ba:	60e0      	str	r0, [r4, #12]
			}
			if(__BUTTON_Releasing_Callback != NULL){
				__BUTTON_Releasing_Callback(ButtonX);
			}
		}
		ButtonX->BTN_Last = ButtonX->BTN_Current;
 80041bc:	7823      	ldrb	r3, [r4, #0]
 80041be:	7063      	strb	r3, [r4, #1]
	}

	if(ButtonX->is_press && (HAL_GetTick() - ButtonX->time_start_press >= TIME_FOR_LONG_PRESSING)){
 80041c0:	7923      	ldrb	r3, [r4, #4]
 80041c2:	b16b      	cbz	r3, 80041e0 <BUTTON_Handle+0x78>
 80041c4:	f7fd fd58 	bl	8001c78 <HAL_GetTick>
 80041c8:	68e3      	ldr	r3, [r4, #12]
 80041ca:	1ac0      	subs	r0, r0, r3
 80041cc:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80041d0:	d306      	bcc.n	80041e0 <BUTTON_Handle+0x78>
		if(__BUTTON_Long_Pressing_Callback != NULL){
 80041d2:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <BUTTON_Handle+0xa8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	b10b      	cbz	r3, 80041dc <BUTTON_Handle+0x74>
			__BUTTON_Long_Pressing_Callback(ButtonX);
 80041d8:	4620      	mov	r0, r4
 80041da:	4798      	blx	r3
		}
		ButtonX->is_press = 0;
 80041dc:	2300      	movs	r3, #0
 80041de:	7123      	strb	r3, [r4, #4]
	}
}
 80041e0:	bd10      	pop	{r4, pc}
			ButtonX->is_press = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	7123      	strb	r3, [r4, #4]
			if(HAL_GetTick() - ButtonX->time_start_press <= 1000){
 80041e6:	f7fd fd47 	bl	8001c78 <HAL_GetTick>
 80041ea:	68e3      	ldr	r3, [r4, #12]
 80041ec:	1ac0      	subs	r0, r0, r3
 80041ee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80041f2:	d804      	bhi.n	80041fe <BUTTON_Handle+0x96>
				if(__BUTTON_Short_Pressing_Callback != NULL){
 80041f4:	4b07      	ldr	r3, [pc, #28]	; (8004214 <BUTTON_Handle+0xac>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	b10b      	cbz	r3, 80041fe <BUTTON_Handle+0x96>
					__BUTTON_Short_Pressing_Callback(ButtonX);
 80041fa:	4620      	mov	r0, r4
 80041fc:	4798      	blx	r3
			if(__BUTTON_Releasing_Callback != NULL){
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <BUTTON_Handle+0xb0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0da      	beq.n	80041bc <BUTTON_Handle+0x54>
				__BUTTON_Releasing_Callback(ButtonX);
 8004206:	4620      	mov	r0, r4
 8004208:	4798      	blx	r3
 800420a:	e7d7      	b.n	80041bc <BUTTON_Handle+0x54>
 800420c:	200003a0 	.word	0x200003a0
 8004210:	2000039c 	.word	0x2000039c
 8004214:	200003a8 	.word	0x200003a8
 8004218:	200003a4 	.word	0x200003a4

0800421c <BUTTON_Init>:

void BUTTON_Init(BUTTON_HandleTypedef *ButtonX, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
	ButtonX->GPIOx = GPIOx;
	ButtonX->GPIO_Pin = GPIO_Pin;
	ButtonX->BTN_Current = 1;
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <BUTTON_Init+0x10>)
	ButtonX->GPIOx = GPIOx;
 800421e:	6101      	str	r1, [r0, #16]
	ButtonX->BTN_Current = 1;
 8004220:	6003      	str	r3, [r0, #0]
	ButtonX->BTN_Last = 1;
	ButtonX->BTN_Filter = 1;
	ButtonX->is_debouncing = 0;
	ButtonX->is_press = 0;
 8004222:	2300      	movs	r3, #0
	ButtonX->GPIO_Pin = GPIO_Pin;
 8004224:	8282      	strh	r2, [r0, #20]
	ButtonX->is_press = 0;
 8004226:	7103      	strb	r3, [r0, #4]
}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	00010101 	.word	0x00010101

08004230 <BUTTON_Set_Callback_Function>:

void BUTTON_Set_Callback_Function(button_callback_function_t p_pressing_callback_function,
								button_callback_function_t p_releasing_callback_function,
								button_callback_function_t p_short_pressing_callback_function,
								button_callback_function_t p_long_pressing_callback_function){
 8004230:	b510      	push	{r4, lr}
	__BUTTON_Pressing_Callback = p_pressing_callback_function;
 8004232:	4c04      	ldr	r4, [pc, #16]	; (8004244 <BUTTON_Set_Callback_Function+0x14>)
 8004234:	6020      	str	r0, [r4, #0]
	__BUTTON_Releasing_Callback = p_releasing_callback_function;
 8004236:	4804      	ldr	r0, [pc, #16]	; (8004248 <BUTTON_Set_Callback_Function+0x18>)
 8004238:	6001      	str	r1, [r0, #0]
	__BUTTON_Short_Pressing_Callback = p_short_pressing_callback_function;
 800423a:	4904      	ldr	r1, [pc, #16]	; (800424c <BUTTON_Set_Callback_Function+0x1c>)
 800423c:	600a      	str	r2, [r1, #0]
	__BUTTON_Long_Pressing_Callback = p_long_pressing_callback_function;
 800423e:	4a04      	ldr	r2, [pc, #16]	; (8004250 <BUTTON_Set_Callback_Function+0x20>)
 8004240:	6013      	str	r3, [r2, #0]
}
 8004242:	bd10      	pop	{r4, pc}
 8004244:	200003a0 	.word	0x200003a0
 8004248:	200003a4 	.word	0x200003a4
 800424c:	200003a8 	.word	0x200003a8
 8004250:	2000039c 	.word	0x2000039c

08004254 <FLASH_Erase>:
#include "flash.h"

void FLASH_Erase(uint32_t p_page){
 8004254:	b510      	push	{r4, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	4604      	mov	r4, r0
	HAL_FLASH_Unlock();
 800425a:	f7fd fed5 	bl	8002008 <HAL_FLASH_Unlock>
	eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
#endif

#ifdef __STM32F1xx_HAL_H
	eraseInit.Banks = 1;
 800425e:	2301      	movs	r3, #1
 8004260:	9303      	str	r3, [sp, #12]
	eraseInit.NbPages = 1;
 8004262:	9305      	str	r3, [sp, #20]
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8004264:	2300      	movs	r3, #0
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 8004266:	f504 3400 	add.w	r4, r4, #131072	; 0x20000
	eraseInit.NbPages = 1;
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
#endif

	HAL_FLASHEx_Erase(&eraseInit, &t_PageError);
 800426a:	a901      	add	r1, sp, #4
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 800426c:	02a4      	lsls	r4, r4, #10
	HAL_FLASHEx_Erase(&eraseInit, &t_PageError);
 800426e:	a802      	add	r0, sp, #8
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8004270:	9302      	str	r3, [sp, #8]
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 8004272:	9404      	str	r4, [sp, #16]
	HAL_FLASHEx_Erase(&eraseInit, &t_PageError);
 8004274:	f7fd ff70 	bl	8002158 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8004278:	f7fd fed8 	bl	800202c <HAL_FLASH_Lock>
//	while(FLASH->CR & FLASH_SR_BSY);
//	FLASH->CR &= ~FLASH_CR_PER;
//	FLASH->CR &= ~FLASH_CR_STRT;
//
//	FLASH->CR |= FLASH_CR_LOCK;
}
 800427c:	b006      	add	sp, #24
 800427e:	bd10      	pop	{r4, pc}

08004280 <FLASH_Write>:

void FLASH_Write(uint32_t p_page, uint8_t *p_data, uint16_t p_len){
 8004280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004282:	4605      	mov	r5, r0
 8004284:	460c      	mov	r4, r1
	FLASH_Erase(63);
 8004286:	203f      	movs	r0, #63	; 0x3f
#ifdef __STM32F4xx_HAL_H
	uint32_t t_add = SECTOR_7_ADD;
#endif
#ifdef __STM32F1xx_HAL_H
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 8004288:	f505 3500 	add.w	r5, r5, #131072	; 0x20000
void FLASH_Write(uint32_t p_page, uint8_t *p_data, uint16_t p_len){
 800428c:	4616      	mov	r6, r2
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 800428e:	02af      	lsls	r7, r5, #10
	FLASH_Erase(63);
 8004290:	f7ff ffe0 	bl	8004254 <FLASH_Erase>
#endif
#ifdef __STM32F0xx_HAL_H
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
#endif
	HAL_FLASH_Unlock();
	for(int i = 0; i < p_len; i += 2){
 8004294:	2500      	movs	r5, #0
	HAL_FLASH_Unlock();
 8004296:	f7fd feb7 	bl	8002008 <HAL_FLASH_Unlock>
	for(int i = 0; i < p_len; i += 2){
 800429a:	3401      	adds	r4, #1
 800429c:	42ae      	cmp	r6, r5
 800429e:	dc03      	bgt.n	80042a8 <FLASH_Write+0x28>
//	}
//	FLASH->CR |= FLASH_CR_PG;
//	for(int i = 0; i < p_len; i += 2){
//		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, t_add + i, p_data[i] | (uint16_t)((i+1 >= p_len) ? 0xFF : p_data[i+1]) << 8);
//	}
}
 80042a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_FLASH_Lock();
 80042a4:	f7fd bec2 	b.w	800202c <HAL_FLASH_Lock>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, t_add + i, p_data[i] | ((uint16_t)((i+1 >= p_len) ? 0xFF : p_data[i+1]) << 8));
 80042a8:	1c6b      	adds	r3, r5, #1
 80042aa:	429e      	cmp	r6, r3
 80042ac:	bfd4      	ite	le
 80042ae:	f44f 437f 	movle.w	r3, #65280	; 0xff00
 80042b2:	7823      	ldrbgt	r3, [r4, #0]
 80042b4:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80042b8:	bfc8      	it	gt
 80042ba:	021b      	lslgt	r3, r3, #8
 80042bc:	1979      	adds	r1, r7, r5
 80042be:	431a      	orrs	r2, r3
 80042c0:	2001      	movs	r0, #1
 80042c2:	2300      	movs	r3, #0
 80042c4:	f7fd fee6 	bl	8002094 <HAL_FLASH_Program>
	for(int i = 0; i < p_len; i += 2){
 80042c8:	3502      	adds	r5, #2
 80042ca:	3402      	adds	r4, #2
 80042cc:	e7e6      	b.n	800429c <FLASH_Write+0x1c>

080042ce <FLASH_Read>:

void FLASH_Read(uint32_t add, uint8_t *p_data, uint16_t p_len){
	for(int i = 0; i < p_len; i += 2){
 80042ce:	2300      	movs	r3, #0
void FLASH_Read(uint32_t add, uint8_t *p_data, uint16_t p_len){
 80042d0:	b530      	push	{r4, r5, lr}
		uint16_t t_data = *(volatile uint16_t *)(add + i);
		p_data[i] = t_data;
		p_data[i+1] = t_data >> 8;
 80042d2:	1c4d      	adds	r5, r1, #1
	for(int i = 0; i < p_len; i += 2){
 80042d4:	429a      	cmp	r2, r3
 80042d6:	dc00      	bgt.n	80042da <FLASH_Read+0xc>
	}
}
 80042d8:	bd30      	pop	{r4, r5, pc}
		uint16_t t_data = *(volatile uint16_t *)(add + i);
 80042da:	5ac4      	ldrh	r4, [r0, r3]
 80042dc:	b2a4      	uxth	r4, r4
		p_data[i] = t_data;
 80042de:	54cc      	strb	r4, [r1, r3]
		p_data[i+1] = t_data >> 8;
 80042e0:	0a24      	lsrs	r4, r4, #8
 80042e2:	54ec      	strb	r4, [r5, r3]
	for(int i = 0; i < p_len; i += 2){
 80042e4:	3302      	adds	r3, #2
 80042e6:	e7f5      	b.n	80042d4 <FLASH_Read+0x6>

080042e8 <__errno>:
 80042e8:	4b01      	ldr	r3, [pc, #4]	; (80042f0 <__errno+0x8>)
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000040 	.word	0x20000040

080042f4 <__libc_init_array>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	2600      	movs	r6, #0
 80042f8:	4d0c      	ldr	r5, [pc, #48]	; (800432c <__libc_init_array+0x38>)
 80042fa:	4c0d      	ldr	r4, [pc, #52]	; (8004330 <__libc_init_array+0x3c>)
 80042fc:	1b64      	subs	r4, r4, r5
 80042fe:	10a4      	asrs	r4, r4, #2
 8004300:	42a6      	cmp	r6, r4
 8004302:	d109      	bne.n	8004318 <__libc_init_array+0x24>
 8004304:	f000 fcb4 	bl	8004c70 <_init>
 8004308:	2600      	movs	r6, #0
 800430a:	4d0a      	ldr	r5, [pc, #40]	; (8004334 <__libc_init_array+0x40>)
 800430c:	4c0a      	ldr	r4, [pc, #40]	; (8004338 <__libc_init_array+0x44>)
 800430e:	1b64      	subs	r4, r4, r5
 8004310:	10a4      	asrs	r4, r4, #2
 8004312:	42a6      	cmp	r6, r4
 8004314:	d105      	bne.n	8004322 <__libc_init_array+0x2e>
 8004316:	bd70      	pop	{r4, r5, r6, pc}
 8004318:	f855 3b04 	ldr.w	r3, [r5], #4
 800431c:	4798      	blx	r3
 800431e:	3601      	adds	r6, #1
 8004320:	e7ee      	b.n	8004300 <__libc_init_array+0xc>
 8004322:	f855 3b04 	ldr.w	r3, [r5], #4
 8004326:	4798      	blx	r3
 8004328:	3601      	adds	r6, #1
 800432a:	e7f2      	b.n	8004312 <__libc_init_array+0x1e>
 800432c:	08004e48 	.word	0x08004e48
 8004330:	08004e48 	.word	0x08004e48
 8004334:	08004e48 	.word	0x08004e48
 8004338:	08004e4c 	.word	0x08004e4c

0800433c <malloc>:
 800433c:	4b02      	ldr	r3, [pc, #8]	; (8004348 <malloc+0xc>)
 800433e:	4601      	mov	r1, r0
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	f000 b889 	b.w	8004458 <_malloc_r>
 8004346:	bf00      	nop
 8004348:	20000040 	.word	0x20000040

0800434c <free>:
 800434c:	4b02      	ldr	r3, [pc, #8]	; (8004358 <free+0xc>)
 800434e:	4601      	mov	r1, r0
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	f000 b819 	b.w	8004388 <_free_r>
 8004356:	bf00      	nop
 8004358:	20000040 	.word	0x20000040

0800435c <memcpy>:
 800435c:	440a      	add	r2, r1
 800435e:	4291      	cmp	r1, r2
 8004360:	f100 33ff 	add.w	r3, r0, #4294967295
 8004364:	d100      	bne.n	8004368 <memcpy+0xc>
 8004366:	4770      	bx	lr
 8004368:	b510      	push	{r4, lr}
 800436a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800436e:	4291      	cmp	r1, r2
 8004370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004374:	d1f9      	bne.n	800436a <memcpy+0xe>
 8004376:	bd10      	pop	{r4, pc}

08004378 <memset>:
 8004378:	4603      	mov	r3, r0
 800437a:	4402      	add	r2, r0
 800437c:	4293      	cmp	r3, r2
 800437e:	d100      	bne.n	8004382 <memset+0xa>
 8004380:	4770      	bx	lr
 8004382:	f803 1b01 	strb.w	r1, [r3], #1
 8004386:	e7f9      	b.n	800437c <memset+0x4>

08004388 <_free_r>:
 8004388:	b538      	push	{r3, r4, r5, lr}
 800438a:	4605      	mov	r5, r0
 800438c:	2900      	cmp	r1, #0
 800438e:	d040      	beq.n	8004412 <_free_r+0x8a>
 8004390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004394:	1f0c      	subs	r4, r1, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	bfb8      	it	lt
 800439a:	18e4      	addlt	r4, r4, r3
 800439c:	f000 f908 	bl	80045b0 <__malloc_lock>
 80043a0:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <_free_r+0x8c>)
 80043a2:	6813      	ldr	r3, [r2, #0]
 80043a4:	b933      	cbnz	r3, 80043b4 <_free_r+0x2c>
 80043a6:	6063      	str	r3, [r4, #4]
 80043a8:	6014      	str	r4, [r2, #0]
 80043aa:	4628      	mov	r0, r5
 80043ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043b0:	f000 b904 	b.w	80045bc <__malloc_unlock>
 80043b4:	42a3      	cmp	r3, r4
 80043b6:	d908      	bls.n	80043ca <_free_r+0x42>
 80043b8:	6820      	ldr	r0, [r4, #0]
 80043ba:	1821      	adds	r1, r4, r0
 80043bc:	428b      	cmp	r3, r1
 80043be:	bf01      	itttt	eq
 80043c0:	6819      	ldreq	r1, [r3, #0]
 80043c2:	685b      	ldreq	r3, [r3, #4]
 80043c4:	1809      	addeq	r1, r1, r0
 80043c6:	6021      	streq	r1, [r4, #0]
 80043c8:	e7ed      	b.n	80043a6 <_free_r+0x1e>
 80043ca:	461a      	mov	r2, r3
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	b10b      	cbz	r3, 80043d4 <_free_r+0x4c>
 80043d0:	42a3      	cmp	r3, r4
 80043d2:	d9fa      	bls.n	80043ca <_free_r+0x42>
 80043d4:	6811      	ldr	r1, [r2, #0]
 80043d6:	1850      	adds	r0, r2, r1
 80043d8:	42a0      	cmp	r0, r4
 80043da:	d10b      	bne.n	80043f4 <_free_r+0x6c>
 80043dc:	6820      	ldr	r0, [r4, #0]
 80043de:	4401      	add	r1, r0
 80043e0:	1850      	adds	r0, r2, r1
 80043e2:	4283      	cmp	r3, r0
 80043e4:	6011      	str	r1, [r2, #0]
 80043e6:	d1e0      	bne.n	80043aa <_free_r+0x22>
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	4401      	add	r1, r0
 80043ee:	6011      	str	r1, [r2, #0]
 80043f0:	6053      	str	r3, [r2, #4]
 80043f2:	e7da      	b.n	80043aa <_free_r+0x22>
 80043f4:	d902      	bls.n	80043fc <_free_r+0x74>
 80043f6:	230c      	movs	r3, #12
 80043f8:	602b      	str	r3, [r5, #0]
 80043fa:	e7d6      	b.n	80043aa <_free_r+0x22>
 80043fc:	6820      	ldr	r0, [r4, #0]
 80043fe:	1821      	adds	r1, r4, r0
 8004400:	428b      	cmp	r3, r1
 8004402:	bf01      	itttt	eq
 8004404:	6819      	ldreq	r1, [r3, #0]
 8004406:	685b      	ldreq	r3, [r3, #4]
 8004408:	1809      	addeq	r1, r1, r0
 800440a:	6021      	streq	r1, [r4, #0]
 800440c:	6063      	str	r3, [r4, #4]
 800440e:	6054      	str	r4, [r2, #4]
 8004410:	e7cb      	b.n	80043aa <_free_r+0x22>
 8004412:	bd38      	pop	{r3, r4, r5, pc}
 8004414:	200003ac 	.word	0x200003ac

08004418 <sbrk_aligned>:
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	4e0e      	ldr	r6, [pc, #56]	; (8004454 <sbrk_aligned+0x3c>)
 800441c:	460c      	mov	r4, r1
 800441e:	6831      	ldr	r1, [r6, #0]
 8004420:	4605      	mov	r5, r0
 8004422:	b911      	cbnz	r1, 800442a <sbrk_aligned+0x12>
 8004424:	f000 f88c 	bl	8004540 <_sbrk_r>
 8004428:	6030      	str	r0, [r6, #0]
 800442a:	4621      	mov	r1, r4
 800442c:	4628      	mov	r0, r5
 800442e:	f000 f887 	bl	8004540 <_sbrk_r>
 8004432:	1c43      	adds	r3, r0, #1
 8004434:	d00a      	beq.n	800444c <sbrk_aligned+0x34>
 8004436:	1cc4      	adds	r4, r0, #3
 8004438:	f024 0403 	bic.w	r4, r4, #3
 800443c:	42a0      	cmp	r0, r4
 800443e:	d007      	beq.n	8004450 <sbrk_aligned+0x38>
 8004440:	1a21      	subs	r1, r4, r0
 8004442:	4628      	mov	r0, r5
 8004444:	f000 f87c 	bl	8004540 <_sbrk_r>
 8004448:	3001      	adds	r0, #1
 800444a:	d101      	bne.n	8004450 <sbrk_aligned+0x38>
 800444c:	f04f 34ff 	mov.w	r4, #4294967295
 8004450:	4620      	mov	r0, r4
 8004452:	bd70      	pop	{r4, r5, r6, pc}
 8004454:	200003b0 	.word	0x200003b0

08004458 <_malloc_r>:
 8004458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800445c:	1ccd      	adds	r5, r1, #3
 800445e:	f025 0503 	bic.w	r5, r5, #3
 8004462:	3508      	adds	r5, #8
 8004464:	2d0c      	cmp	r5, #12
 8004466:	bf38      	it	cc
 8004468:	250c      	movcc	r5, #12
 800446a:	2d00      	cmp	r5, #0
 800446c:	4607      	mov	r7, r0
 800446e:	db01      	blt.n	8004474 <_malloc_r+0x1c>
 8004470:	42a9      	cmp	r1, r5
 8004472:	d905      	bls.n	8004480 <_malloc_r+0x28>
 8004474:	230c      	movs	r3, #12
 8004476:	2600      	movs	r6, #0
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	4630      	mov	r0, r6
 800447c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004480:	4e2e      	ldr	r6, [pc, #184]	; (800453c <_malloc_r+0xe4>)
 8004482:	f000 f895 	bl	80045b0 <__malloc_lock>
 8004486:	6833      	ldr	r3, [r6, #0]
 8004488:	461c      	mov	r4, r3
 800448a:	bb34      	cbnz	r4, 80044da <_malloc_r+0x82>
 800448c:	4629      	mov	r1, r5
 800448e:	4638      	mov	r0, r7
 8004490:	f7ff ffc2 	bl	8004418 <sbrk_aligned>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	4604      	mov	r4, r0
 8004498:	d14d      	bne.n	8004536 <_malloc_r+0xde>
 800449a:	6834      	ldr	r4, [r6, #0]
 800449c:	4626      	mov	r6, r4
 800449e:	2e00      	cmp	r6, #0
 80044a0:	d140      	bne.n	8004524 <_malloc_r+0xcc>
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	4631      	mov	r1, r6
 80044a6:	4638      	mov	r0, r7
 80044a8:	eb04 0803 	add.w	r8, r4, r3
 80044ac:	f000 f848 	bl	8004540 <_sbrk_r>
 80044b0:	4580      	cmp	r8, r0
 80044b2:	d13a      	bne.n	800452a <_malloc_r+0xd2>
 80044b4:	6821      	ldr	r1, [r4, #0]
 80044b6:	3503      	adds	r5, #3
 80044b8:	1a6d      	subs	r5, r5, r1
 80044ba:	f025 0503 	bic.w	r5, r5, #3
 80044be:	3508      	adds	r5, #8
 80044c0:	2d0c      	cmp	r5, #12
 80044c2:	bf38      	it	cc
 80044c4:	250c      	movcc	r5, #12
 80044c6:	4638      	mov	r0, r7
 80044c8:	4629      	mov	r1, r5
 80044ca:	f7ff ffa5 	bl	8004418 <sbrk_aligned>
 80044ce:	3001      	adds	r0, #1
 80044d0:	d02b      	beq.n	800452a <_malloc_r+0xd2>
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	442b      	add	r3, r5
 80044d6:	6023      	str	r3, [r4, #0]
 80044d8:	e00e      	b.n	80044f8 <_malloc_r+0xa0>
 80044da:	6822      	ldr	r2, [r4, #0]
 80044dc:	1b52      	subs	r2, r2, r5
 80044de:	d41e      	bmi.n	800451e <_malloc_r+0xc6>
 80044e0:	2a0b      	cmp	r2, #11
 80044e2:	d916      	bls.n	8004512 <_malloc_r+0xba>
 80044e4:	1961      	adds	r1, r4, r5
 80044e6:	42a3      	cmp	r3, r4
 80044e8:	6025      	str	r5, [r4, #0]
 80044ea:	bf18      	it	ne
 80044ec:	6059      	strne	r1, [r3, #4]
 80044ee:	6863      	ldr	r3, [r4, #4]
 80044f0:	bf08      	it	eq
 80044f2:	6031      	streq	r1, [r6, #0]
 80044f4:	5162      	str	r2, [r4, r5]
 80044f6:	604b      	str	r3, [r1, #4]
 80044f8:	4638      	mov	r0, r7
 80044fa:	f104 060b 	add.w	r6, r4, #11
 80044fe:	f000 f85d 	bl	80045bc <__malloc_unlock>
 8004502:	f026 0607 	bic.w	r6, r6, #7
 8004506:	1d23      	adds	r3, r4, #4
 8004508:	1af2      	subs	r2, r6, r3
 800450a:	d0b6      	beq.n	800447a <_malloc_r+0x22>
 800450c:	1b9b      	subs	r3, r3, r6
 800450e:	50a3      	str	r3, [r4, r2]
 8004510:	e7b3      	b.n	800447a <_malloc_r+0x22>
 8004512:	6862      	ldr	r2, [r4, #4]
 8004514:	42a3      	cmp	r3, r4
 8004516:	bf0c      	ite	eq
 8004518:	6032      	streq	r2, [r6, #0]
 800451a:	605a      	strne	r2, [r3, #4]
 800451c:	e7ec      	b.n	80044f8 <_malloc_r+0xa0>
 800451e:	4623      	mov	r3, r4
 8004520:	6864      	ldr	r4, [r4, #4]
 8004522:	e7b2      	b.n	800448a <_malloc_r+0x32>
 8004524:	4634      	mov	r4, r6
 8004526:	6876      	ldr	r6, [r6, #4]
 8004528:	e7b9      	b.n	800449e <_malloc_r+0x46>
 800452a:	230c      	movs	r3, #12
 800452c:	4638      	mov	r0, r7
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	f000 f844 	bl	80045bc <__malloc_unlock>
 8004534:	e7a1      	b.n	800447a <_malloc_r+0x22>
 8004536:	6025      	str	r5, [r4, #0]
 8004538:	e7de      	b.n	80044f8 <_malloc_r+0xa0>
 800453a:	bf00      	nop
 800453c:	200003ac 	.word	0x200003ac

08004540 <_sbrk_r>:
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	2300      	movs	r3, #0
 8004544:	4d05      	ldr	r5, [pc, #20]	; (800455c <_sbrk_r+0x1c>)
 8004546:	4604      	mov	r4, r0
 8004548:	4608      	mov	r0, r1
 800454a:	602b      	str	r3, [r5, #0]
 800454c:	f7fd fb0a 	bl	8001b64 <_sbrk>
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	d102      	bne.n	800455a <_sbrk_r+0x1a>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	b103      	cbz	r3, 800455a <_sbrk_r+0x1a>
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	bd38      	pop	{r3, r4, r5, pc}
 800455c:	200003b4 	.word	0x200003b4

08004560 <strcpy>:
 8004560:	4603      	mov	r3, r0
 8004562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004566:	f803 2b01 	strb.w	r2, [r3], #1
 800456a:	2a00      	cmp	r2, #0
 800456c:	d1f9      	bne.n	8004562 <strcpy+0x2>
 800456e:	4770      	bx	lr

08004570 <_vsiprintf_r>:
 8004570:	b500      	push	{lr}
 8004572:	b09b      	sub	sp, #108	; 0x6c
 8004574:	9100      	str	r1, [sp, #0]
 8004576:	9104      	str	r1, [sp, #16]
 8004578:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800457c:	9105      	str	r1, [sp, #20]
 800457e:	9102      	str	r1, [sp, #8]
 8004580:	4905      	ldr	r1, [pc, #20]	; (8004598 <_vsiprintf_r+0x28>)
 8004582:	9103      	str	r1, [sp, #12]
 8004584:	4669      	mov	r1, sp
 8004586:	f000 f87b 	bl	8004680 <_svfiprintf_r>
 800458a:	2200      	movs	r2, #0
 800458c:	9b00      	ldr	r3, [sp, #0]
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	b01b      	add	sp, #108	; 0x6c
 8004592:	f85d fb04 	ldr.w	pc, [sp], #4
 8004596:	bf00      	nop
 8004598:	ffff0208 	.word	0xffff0208

0800459c <vsiprintf>:
 800459c:	4613      	mov	r3, r2
 800459e:	460a      	mov	r2, r1
 80045a0:	4601      	mov	r1, r0
 80045a2:	4802      	ldr	r0, [pc, #8]	; (80045ac <vsiprintf+0x10>)
 80045a4:	6800      	ldr	r0, [r0, #0]
 80045a6:	f7ff bfe3 	b.w	8004570 <_vsiprintf_r>
 80045aa:	bf00      	nop
 80045ac:	20000040 	.word	0x20000040

080045b0 <__malloc_lock>:
 80045b0:	4801      	ldr	r0, [pc, #4]	; (80045b8 <__malloc_lock+0x8>)
 80045b2:	f000 bafb 	b.w	8004bac <__retarget_lock_acquire_recursive>
 80045b6:	bf00      	nop
 80045b8:	200003b8 	.word	0x200003b8

080045bc <__malloc_unlock>:
 80045bc:	4801      	ldr	r0, [pc, #4]	; (80045c4 <__malloc_unlock+0x8>)
 80045be:	f000 baf6 	b.w	8004bae <__retarget_lock_release_recursive>
 80045c2:	bf00      	nop
 80045c4:	200003b8 	.word	0x200003b8

080045c8 <__ssputs_r>:
 80045c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045cc:	688e      	ldr	r6, [r1, #8]
 80045ce:	4682      	mov	sl, r0
 80045d0:	429e      	cmp	r6, r3
 80045d2:	460c      	mov	r4, r1
 80045d4:	4690      	mov	r8, r2
 80045d6:	461f      	mov	r7, r3
 80045d8:	d838      	bhi.n	800464c <__ssputs_r+0x84>
 80045da:	898a      	ldrh	r2, [r1, #12]
 80045dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045e0:	d032      	beq.n	8004648 <__ssputs_r+0x80>
 80045e2:	6825      	ldr	r5, [r4, #0]
 80045e4:	6909      	ldr	r1, [r1, #16]
 80045e6:	3301      	adds	r3, #1
 80045e8:	eba5 0901 	sub.w	r9, r5, r1
 80045ec:	6965      	ldr	r5, [r4, #20]
 80045ee:	444b      	add	r3, r9
 80045f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045f8:	106d      	asrs	r5, r5, #1
 80045fa:	429d      	cmp	r5, r3
 80045fc:	bf38      	it	cc
 80045fe:	461d      	movcc	r5, r3
 8004600:	0553      	lsls	r3, r2, #21
 8004602:	d531      	bpl.n	8004668 <__ssputs_r+0xa0>
 8004604:	4629      	mov	r1, r5
 8004606:	f7ff ff27 	bl	8004458 <_malloc_r>
 800460a:	4606      	mov	r6, r0
 800460c:	b950      	cbnz	r0, 8004624 <__ssputs_r+0x5c>
 800460e:	230c      	movs	r3, #12
 8004610:	f04f 30ff 	mov.w	r0, #4294967295
 8004614:	f8ca 3000 	str.w	r3, [sl]
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800461e:	81a3      	strh	r3, [r4, #12]
 8004620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004624:	464a      	mov	r2, r9
 8004626:	6921      	ldr	r1, [r4, #16]
 8004628:	f7ff fe98 	bl	800435c <memcpy>
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004636:	81a3      	strh	r3, [r4, #12]
 8004638:	6126      	str	r6, [r4, #16]
 800463a:	444e      	add	r6, r9
 800463c:	6026      	str	r6, [r4, #0]
 800463e:	463e      	mov	r6, r7
 8004640:	6165      	str	r5, [r4, #20]
 8004642:	eba5 0509 	sub.w	r5, r5, r9
 8004646:	60a5      	str	r5, [r4, #8]
 8004648:	42be      	cmp	r6, r7
 800464a:	d900      	bls.n	800464e <__ssputs_r+0x86>
 800464c:	463e      	mov	r6, r7
 800464e:	4632      	mov	r2, r6
 8004650:	4641      	mov	r1, r8
 8004652:	6820      	ldr	r0, [r4, #0]
 8004654:	f000 faba 	bl	8004bcc <memmove>
 8004658:	68a3      	ldr	r3, [r4, #8]
 800465a:	2000      	movs	r0, #0
 800465c:	1b9b      	subs	r3, r3, r6
 800465e:	60a3      	str	r3, [r4, #8]
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	4433      	add	r3, r6
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	e7db      	b.n	8004620 <__ssputs_r+0x58>
 8004668:	462a      	mov	r2, r5
 800466a:	f000 fac9 	bl	8004c00 <_realloc_r>
 800466e:	4606      	mov	r6, r0
 8004670:	2800      	cmp	r0, #0
 8004672:	d1e1      	bne.n	8004638 <__ssputs_r+0x70>
 8004674:	4650      	mov	r0, sl
 8004676:	6921      	ldr	r1, [r4, #16]
 8004678:	f7ff fe86 	bl	8004388 <_free_r>
 800467c:	e7c7      	b.n	800460e <__ssputs_r+0x46>
	...

08004680 <_svfiprintf_r>:
 8004680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004684:	4698      	mov	r8, r3
 8004686:	898b      	ldrh	r3, [r1, #12]
 8004688:	4607      	mov	r7, r0
 800468a:	061b      	lsls	r3, r3, #24
 800468c:	460d      	mov	r5, r1
 800468e:	4614      	mov	r4, r2
 8004690:	b09d      	sub	sp, #116	; 0x74
 8004692:	d50e      	bpl.n	80046b2 <_svfiprintf_r+0x32>
 8004694:	690b      	ldr	r3, [r1, #16]
 8004696:	b963      	cbnz	r3, 80046b2 <_svfiprintf_r+0x32>
 8004698:	2140      	movs	r1, #64	; 0x40
 800469a:	f7ff fedd 	bl	8004458 <_malloc_r>
 800469e:	6028      	str	r0, [r5, #0]
 80046a0:	6128      	str	r0, [r5, #16]
 80046a2:	b920      	cbnz	r0, 80046ae <_svfiprintf_r+0x2e>
 80046a4:	230c      	movs	r3, #12
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	e0d1      	b.n	8004852 <_svfiprintf_r+0x1d2>
 80046ae:	2340      	movs	r3, #64	; 0x40
 80046b0:	616b      	str	r3, [r5, #20]
 80046b2:	2300      	movs	r3, #0
 80046b4:	9309      	str	r3, [sp, #36]	; 0x24
 80046b6:	2320      	movs	r3, #32
 80046b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046bc:	2330      	movs	r3, #48	; 0x30
 80046be:	f04f 0901 	mov.w	r9, #1
 80046c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80046c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800486c <_svfiprintf_r+0x1ec>
 80046ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046ce:	4623      	mov	r3, r4
 80046d0:	469a      	mov	sl, r3
 80046d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046d6:	b10a      	cbz	r2, 80046dc <_svfiprintf_r+0x5c>
 80046d8:	2a25      	cmp	r2, #37	; 0x25
 80046da:	d1f9      	bne.n	80046d0 <_svfiprintf_r+0x50>
 80046dc:	ebba 0b04 	subs.w	fp, sl, r4
 80046e0:	d00b      	beq.n	80046fa <_svfiprintf_r+0x7a>
 80046e2:	465b      	mov	r3, fp
 80046e4:	4622      	mov	r2, r4
 80046e6:	4629      	mov	r1, r5
 80046e8:	4638      	mov	r0, r7
 80046ea:	f7ff ff6d 	bl	80045c8 <__ssputs_r>
 80046ee:	3001      	adds	r0, #1
 80046f0:	f000 80aa 	beq.w	8004848 <_svfiprintf_r+0x1c8>
 80046f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046f6:	445a      	add	r2, fp
 80046f8:	9209      	str	r2, [sp, #36]	; 0x24
 80046fa:	f89a 3000 	ldrb.w	r3, [sl]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 80a2 	beq.w	8004848 <_svfiprintf_r+0x1c8>
 8004704:	2300      	movs	r3, #0
 8004706:	f04f 32ff 	mov.w	r2, #4294967295
 800470a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800470e:	f10a 0a01 	add.w	sl, sl, #1
 8004712:	9304      	str	r3, [sp, #16]
 8004714:	9307      	str	r3, [sp, #28]
 8004716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800471a:	931a      	str	r3, [sp, #104]	; 0x68
 800471c:	4654      	mov	r4, sl
 800471e:	2205      	movs	r2, #5
 8004720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004724:	4851      	ldr	r0, [pc, #324]	; (800486c <_svfiprintf_r+0x1ec>)
 8004726:	f000 fa43 	bl	8004bb0 <memchr>
 800472a:	9a04      	ldr	r2, [sp, #16]
 800472c:	b9d8      	cbnz	r0, 8004766 <_svfiprintf_r+0xe6>
 800472e:	06d0      	lsls	r0, r2, #27
 8004730:	bf44      	itt	mi
 8004732:	2320      	movmi	r3, #32
 8004734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004738:	0711      	lsls	r1, r2, #28
 800473a:	bf44      	itt	mi
 800473c:	232b      	movmi	r3, #43	; 0x2b
 800473e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004742:	f89a 3000 	ldrb.w	r3, [sl]
 8004746:	2b2a      	cmp	r3, #42	; 0x2a
 8004748:	d015      	beq.n	8004776 <_svfiprintf_r+0xf6>
 800474a:	4654      	mov	r4, sl
 800474c:	2000      	movs	r0, #0
 800474e:	f04f 0c0a 	mov.w	ip, #10
 8004752:	9a07      	ldr	r2, [sp, #28]
 8004754:	4621      	mov	r1, r4
 8004756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800475a:	3b30      	subs	r3, #48	; 0x30
 800475c:	2b09      	cmp	r3, #9
 800475e:	d94e      	bls.n	80047fe <_svfiprintf_r+0x17e>
 8004760:	b1b0      	cbz	r0, 8004790 <_svfiprintf_r+0x110>
 8004762:	9207      	str	r2, [sp, #28]
 8004764:	e014      	b.n	8004790 <_svfiprintf_r+0x110>
 8004766:	eba0 0308 	sub.w	r3, r0, r8
 800476a:	fa09 f303 	lsl.w	r3, r9, r3
 800476e:	4313      	orrs	r3, r2
 8004770:	46a2      	mov	sl, r4
 8004772:	9304      	str	r3, [sp, #16]
 8004774:	e7d2      	b.n	800471c <_svfiprintf_r+0x9c>
 8004776:	9b03      	ldr	r3, [sp, #12]
 8004778:	1d19      	adds	r1, r3, #4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	9103      	str	r1, [sp, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	bfbb      	ittet	lt
 8004782:	425b      	neglt	r3, r3
 8004784:	f042 0202 	orrlt.w	r2, r2, #2
 8004788:	9307      	strge	r3, [sp, #28]
 800478a:	9307      	strlt	r3, [sp, #28]
 800478c:	bfb8      	it	lt
 800478e:	9204      	strlt	r2, [sp, #16]
 8004790:	7823      	ldrb	r3, [r4, #0]
 8004792:	2b2e      	cmp	r3, #46	; 0x2e
 8004794:	d10c      	bne.n	80047b0 <_svfiprintf_r+0x130>
 8004796:	7863      	ldrb	r3, [r4, #1]
 8004798:	2b2a      	cmp	r3, #42	; 0x2a
 800479a:	d135      	bne.n	8004808 <_svfiprintf_r+0x188>
 800479c:	9b03      	ldr	r3, [sp, #12]
 800479e:	3402      	adds	r4, #2
 80047a0:	1d1a      	adds	r2, r3, #4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	9203      	str	r2, [sp, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bfb8      	it	lt
 80047aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80047ae:	9305      	str	r3, [sp, #20]
 80047b0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004870 <_svfiprintf_r+0x1f0>
 80047b4:	2203      	movs	r2, #3
 80047b6:	4650      	mov	r0, sl
 80047b8:	7821      	ldrb	r1, [r4, #0]
 80047ba:	f000 f9f9 	bl	8004bb0 <memchr>
 80047be:	b140      	cbz	r0, 80047d2 <_svfiprintf_r+0x152>
 80047c0:	2340      	movs	r3, #64	; 0x40
 80047c2:	eba0 000a 	sub.w	r0, r0, sl
 80047c6:	fa03 f000 	lsl.w	r0, r3, r0
 80047ca:	9b04      	ldr	r3, [sp, #16]
 80047cc:	3401      	adds	r4, #1
 80047ce:	4303      	orrs	r3, r0
 80047d0:	9304      	str	r3, [sp, #16]
 80047d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d6:	2206      	movs	r2, #6
 80047d8:	4826      	ldr	r0, [pc, #152]	; (8004874 <_svfiprintf_r+0x1f4>)
 80047da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047de:	f000 f9e7 	bl	8004bb0 <memchr>
 80047e2:	2800      	cmp	r0, #0
 80047e4:	d038      	beq.n	8004858 <_svfiprintf_r+0x1d8>
 80047e6:	4b24      	ldr	r3, [pc, #144]	; (8004878 <_svfiprintf_r+0x1f8>)
 80047e8:	bb1b      	cbnz	r3, 8004832 <_svfiprintf_r+0x1b2>
 80047ea:	9b03      	ldr	r3, [sp, #12]
 80047ec:	3307      	adds	r3, #7
 80047ee:	f023 0307 	bic.w	r3, r3, #7
 80047f2:	3308      	adds	r3, #8
 80047f4:	9303      	str	r3, [sp, #12]
 80047f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047f8:	4433      	add	r3, r6
 80047fa:	9309      	str	r3, [sp, #36]	; 0x24
 80047fc:	e767      	b.n	80046ce <_svfiprintf_r+0x4e>
 80047fe:	460c      	mov	r4, r1
 8004800:	2001      	movs	r0, #1
 8004802:	fb0c 3202 	mla	r2, ip, r2, r3
 8004806:	e7a5      	b.n	8004754 <_svfiprintf_r+0xd4>
 8004808:	2300      	movs	r3, #0
 800480a:	f04f 0c0a 	mov.w	ip, #10
 800480e:	4619      	mov	r1, r3
 8004810:	3401      	adds	r4, #1
 8004812:	9305      	str	r3, [sp, #20]
 8004814:	4620      	mov	r0, r4
 8004816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800481a:	3a30      	subs	r2, #48	; 0x30
 800481c:	2a09      	cmp	r2, #9
 800481e:	d903      	bls.n	8004828 <_svfiprintf_r+0x1a8>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0c5      	beq.n	80047b0 <_svfiprintf_r+0x130>
 8004824:	9105      	str	r1, [sp, #20]
 8004826:	e7c3      	b.n	80047b0 <_svfiprintf_r+0x130>
 8004828:	4604      	mov	r4, r0
 800482a:	2301      	movs	r3, #1
 800482c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004830:	e7f0      	b.n	8004814 <_svfiprintf_r+0x194>
 8004832:	ab03      	add	r3, sp, #12
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	462a      	mov	r2, r5
 8004838:	4638      	mov	r0, r7
 800483a:	4b10      	ldr	r3, [pc, #64]	; (800487c <_svfiprintf_r+0x1fc>)
 800483c:	a904      	add	r1, sp, #16
 800483e:	f3af 8000 	nop.w
 8004842:	1c42      	adds	r2, r0, #1
 8004844:	4606      	mov	r6, r0
 8004846:	d1d6      	bne.n	80047f6 <_svfiprintf_r+0x176>
 8004848:	89ab      	ldrh	r3, [r5, #12]
 800484a:	065b      	lsls	r3, r3, #25
 800484c:	f53f af2c 	bmi.w	80046a8 <_svfiprintf_r+0x28>
 8004850:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004852:	b01d      	add	sp, #116	; 0x74
 8004854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004858:	ab03      	add	r3, sp, #12
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	462a      	mov	r2, r5
 800485e:	4638      	mov	r0, r7
 8004860:	4b06      	ldr	r3, [pc, #24]	; (800487c <_svfiprintf_r+0x1fc>)
 8004862:	a904      	add	r1, sp, #16
 8004864:	f000 f87c 	bl	8004960 <_printf_i>
 8004868:	e7eb      	b.n	8004842 <_svfiprintf_r+0x1c2>
 800486a:	bf00      	nop
 800486c:	08004e14 	.word	0x08004e14
 8004870:	08004e1a 	.word	0x08004e1a
 8004874:	08004e1e 	.word	0x08004e1e
 8004878:	00000000 	.word	0x00000000
 800487c:	080045c9 	.word	0x080045c9

08004880 <_printf_common>:
 8004880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004884:	4616      	mov	r6, r2
 8004886:	4699      	mov	r9, r3
 8004888:	688a      	ldr	r2, [r1, #8]
 800488a:	690b      	ldr	r3, [r1, #16]
 800488c:	4607      	mov	r7, r0
 800488e:	4293      	cmp	r3, r2
 8004890:	bfb8      	it	lt
 8004892:	4613      	movlt	r3, r2
 8004894:	6033      	str	r3, [r6, #0]
 8004896:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800489a:	460c      	mov	r4, r1
 800489c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048a0:	b10a      	cbz	r2, 80048a6 <_printf_common+0x26>
 80048a2:	3301      	adds	r3, #1
 80048a4:	6033      	str	r3, [r6, #0]
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	0699      	lsls	r1, r3, #26
 80048aa:	bf42      	ittt	mi
 80048ac:	6833      	ldrmi	r3, [r6, #0]
 80048ae:	3302      	addmi	r3, #2
 80048b0:	6033      	strmi	r3, [r6, #0]
 80048b2:	6825      	ldr	r5, [r4, #0]
 80048b4:	f015 0506 	ands.w	r5, r5, #6
 80048b8:	d106      	bne.n	80048c8 <_printf_common+0x48>
 80048ba:	f104 0a19 	add.w	sl, r4, #25
 80048be:	68e3      	ldr	r3, [r4, #12]
 80048c0:	6832      	ldr	r2, [r6, #0]
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	42ab      	cmp	r3, r5
 80048c6:	dc28      	bgt.n	800491a <_printf_common+0x9a>
 80048c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048cc:	1e13      	subs	r3, r2, #0
 80048ce:	6822      	ldr	r2, [r4, #0]
 80048d0:	bf18      	it	ne
 80048d2:	2301      	movne	r3, #1
 80048d4:	0692      	lsls	r2, r2, #26
 80048d6:	d42d      	bmi.n	8004934 <_printf_common+0xb4>
 80048d8:	4649      	mov	r1, r9
 80048da:	4638      	mov	r0, r7
 80048dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e0:	47c0      	blx	r8
 80048e2:	3001      	adds	r0, #1
 80048e4:	d020      	beq.n	8004928 <_printf_common+0xa8>
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	68e5      	ldr	r5, [r4, #12]
 80048ea:	f003 0306 	and.w	r3, r3, #6
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	bf18      	it	ne
 80048f2:	2500      	movne	r5, #0
 80048f4:	6832      	ldr	r2, [r6, #0]
 80048f6:	f04f 0600 	mov.w	r6, #0
 80048fa:	68a3      	ldr	r3, [r4, #8]
 80048fc:	bf08      	it	eq
 80048fe:	1aad      	subeq	r5, r5, r2
 8004900:	6922      	ldr	r2, [r4, #16]
 8004902:	bf08      	it	eq
 8004904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004908:	4293      	cmp	r3, r2
 800490a:	bfc4      	itt	gt
 800490c:	1a9b      	subgt	r3, r3, r2
 800490e:	18ed      	addgt	r5, r5, r3
 8004910:	341a      	adds	r4, #26
 8004912:	42b5      	cmp	r5, r6
 8004914:	d11a      	bne.n	800494c <_printf_common+0xcc>
 8004916:	2000      	movs	r0, #0
 8004918:	e008      	b.n	800492c <_printf_common+0xac>
 800491a:	2301      	movs	r3, #1
 800491c:	4652      	mov	r2, sl
 800491e:	4649      	mov	r1, r9
 8004920:	4638      	mov	r0, r7
 8004922:	47c0      	blx	r8
 8004924:	3001      	adds	r0, #1
 8004926:	d103      	bne.n	8004930 <_printf_common+0xb0>
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004930:	3501      	adds	r5, #1
 8004932:	e7c4      	b.n	80048be <_printf_common+0x3e>
 8004934:	2030      	movs	r0, #48	; 0x30
 8004936:	18e1      	adds	r1, r4, r3
 8004938:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004942:	4422      	add	r2, r4
 8004944:	3302      	adds	r3, #2
 8004946:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800494a:	e7c5      	b.n	80048d8 <_printf_common+0x58>
 800494c:	2301      	movs	r3, #1
 800494e:	4622      	mov	r2, r4
 8004950:	4649      	mov	r1, r9
 8004952:	4638      	mov	r0, r7
 8004954:	47c0      	blx	r8
 8004956:	3001      	adds	r0, #1
 8004958:	d0e6      	beq.n	8004928 <_printf_common+0xa8>
 800495a:	3601      	adds	r6, #1
 800495c:	e7d9      	b.n	8004912 <_printf_common+0x92>
	...

08004960 <_printf_i>:
 8004960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004964:	7e0f      	ldrb	r7, [r1, #24]
 8004966:	4691      	mov	r9, r2
 8004968:	2f78      	cmp	r7, #120	; 0x78
 800496a:	4680      	mov	r8, r0
 800496c:	460c      	mov	r4, r1
 800496e:	469a      	mov	sl, r3
 8004970:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004972:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004976:	d807      	bhi.n	8004988 <_printf_i+0x28>
 8004978:	2f62      	cmp	r7, #98	; 0x62
 800497a:	d80a      	bhi.n	8004992 <_printf_i+0x32>
 800497c:	2f00      	cmp	r7, #0
 800497e:	f000 80d9 	beq.w	8004b34 <_printf_i+0x1d4>
 8004982:	2f58      	cmp	r7, #88	; 0x58
 8004984:	f000 80a4 	beq.w	8004ad0 <_printf_i+0x170>
 8004988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800498c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004990:	e03a      	b.n	8004a08 <_printf_i+0xa8>
 8004992:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004996:	2b15      	cmp	r3, #21
 8004998:	d8f6      	bhi.n	8004988 <_printf_i+0x28>
 800499a:	a101      	add	r1, pc, #4	; (adr r1, 80049a0 <_printf_i+0x40>)
 800499c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049a0:	080049f9 	.word	0x080049f9
 80049a4:	08004a0d 	.word	0x08004a0d
 80049a8:	08004989 	.word	0x08004989
 80049ac:	08004989 	.word	0x08004989
 80049b0:	08004989 	.word	0x08004989
 80049b4:	08004989 	.word	0x08004989
 80049b8:	08004a0d 	.word	0x08004a0d
 80049bc:	08004989 	.word	0x08004989
 80049c0:	08004989 	.word	0x08004989
 80049c4:	08004989 	.word	0x08004989
 80049c8:	08004989 	.word	0x08004989
 80049cc:	08004b1b 	.word	0x08004b1b
 80049d0:	08004a3d 	.word	0x08004a3d
 80049d4:	08004afd 	.word	0x08004afd
 80049d8:	08004989 	.word	0x08004989
 80049dc:	08004989 	.word	0x08004989
 80049e0:	08004b3d 	.word	0x08004b3d
 80049e4:	08004989 	.word	0x08004989
 80049e8:	08004a3d 	.word	0x08004a3d
 80049ec:	08004989 	.word	0x08004989
 80049f0:	08004989 	.word	0x08004989
 80049f4:	08004b05 	.word	0x08004b05
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	1d1a      	adds	r2, r3, #4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	602a      	str	r2, [r5, #0]
 8004a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0a4      	b.n	8004b56 <_printf_i+0x1f6>
 8004a0c:	6820      	ldr	r0, [r4, #0]
 8004a0e:	6829      	ldr	r1, [r5, #0]
 8004a10:	0606      	lsls	r6, r0, #24
 8004a12:	f101 0304 	add.w	r3, r1, #4
 8004a16:	d50a      	bpl.n	8004a2e <_printf_i+0xce>
 8004a18:	680e      	ldr	r6, [r1, #0]
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	2e00      	cmp	r6, #0
 8004a1e:	da03      	bge.n	8004a28 <_printf_i+0xc8>
 8004a20:	232d      	movs	r3, #45	; 0x2d
 8004a22:	4276      	negs	r6, r6
 8004a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a28:	230a      	movs	r3, #10
 8004a2a:	485e      	ldr	r0, [pc, #376]	; (8004ba4 <_printf_i+0x244>)
 8004a2c:	e019      	b.n	8004a62 <_printf_i+0x102>
 8004a2e:	680e      	ldr	r6, [r1, #0]
 8004a30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a34:	602b      	str	r3, [r5, #0]
 8004a36:	bf18      	it	ne
 8004a38:	b236      	sxthne	r6, r6
 8004a3a:	e7ef      	b.n	8004a1c <_printf_i+0xbc>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	6820      	ldr	r0, [r4, #0]
 8004a40:	1d19      	adds	r1, r3, #4
 8004a42:	6029      	str	r1, [r5, #0]
 8004a44:	0601      	lsls	r1, r0, #24
 8004a46:	d501      	bpl.n	8004a4c <_printf_i+0xec>
 8004a48:	681e      	ldr	r6, [r3, #0]
 8004a4a:	e002      	b.n	8004a52 <_printf_i+0xf2>
 8004a4c:	0646      	lsls	r6, r0, #25
 8004a4e:	d5fb      	bpl.n	8004a48 <_printf_i+0xe8>
 8004a50:	881e      	ldrh	r6, [r3, #0]
 8004a52:	2f6f      	cmp	r7, #111	; 0x6f
 8004a54:	bf0c      	ite	eq
 8004a56:	2308      	moveq	r3, #8
 8004a58:	230a      	movne	r3, #10
 8004a5a:	4852      	ldr	r0, [pc, #328]	; (8004ba4 <_printf_i+0x244>)
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a62:	6865      	ldr	r5, [r4, #4]
 8004a64:	2d00      	cmp	r5, #0
 8004a66:	bfa8      	it	ge
 8004a68:	6821      	ldrge	r1, [r4, #0]
 8004a6a:	60a5      	str	r5, [r4, #8]
 8004a6c:	bfa4      	itt	ge
 8004a6e:	f021 0104 	bicge.w	r1, r1, #4
 8004a72:	6021      	strge	r1, [r4, #0]
 8004a74:	b90e      	cbnz	r6, 8004a7a <_printf_i+0x11a>
 8004a76:	2d00      	cmp	r5, #0
 8004a78:	d04d      	beq.n	8004b16 <_printf_i+0x1b6>
 8004a7a:	4615      	mov	r5, r2
 8004a7c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a80:	fb03 6711 	mls	r7, r3, r1, r6
 8004a84:	5dc7      	ldrb	r7, [r0, r7]
 8004a86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a8a:	4637      	mov	r7, r6
 8004a8c:	42bb      	cmp	r3, r7
 8004a8e:	460e      	mov	r6, r1
 8004a90:	d9f4      	bls.n	8004a7c <_printf_i+0x11c>
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d10b      	bne.n	8004aae <_printf_i+0x14e>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	07de      	lsls	r6, r3, #31
 8004a9a:	d508      	bpl.n	8004aae <_printf_i+0x14e>
 8004a9c:	6923      	ldr	r3, [r4, #16]
 8004a9e:	6861      	ldr	r1, [r4, #4]
 8004aa0:	4299      	cmp	r1, r3
 8004aa2:	bfde      	ittt	le
 8004aa4:	2330      	movle	r3, #48	; 0x30
 8004aa6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aaa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aae:	1b52      	subs	r2, r2, r5
 8004ab0:	6122      	str	r2, [r4, #16]
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	4640      	mov	r0, r8
 8004ab8:	f8cd a000 	str.w	sl, [sp]
 8004abc:	aa03      	add	r2, sp, #12
 8004abe:	f7ff fedf 	bl	8004880 <_printf_common>
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d14c      	bne.n	8004b60 <_printf_i+0x200>
 8004ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aca:	b004      	add	sp, #16
 8004acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad0:	4834      	ldr	r0, [pc, #208]	; (8004ba4 <_printf_i+0x244>)
 8004ad2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ad6:	6829      	ldr	r1, [r5, #0]
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ade:	6029      	str	r1, [r5, #0]
 8004ae0:	061d      	lsls	r5, r3, #24
 8004ae2:	d514      	bpl.n	8004b0e <_printf_i+0x1ae>
 8004ae4:	07df      	lsls	r7, r3, #31
 8004ae6:	bf44      	itt	mi
 8004ae8:	f043 0320 	orrmi.w	r3, r3, #32
 8004aec:	6023      	strmi	r3, [r4, #0]
 8004aee:	b91e      	cbnz	r6, 8004af8 <_printf_i+0x198>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	f023 0320 	bic.w	r3, r3, #32
 8004af6:	6023      	str	r3, [r4, #0]
 8004af8:	2310      	movs	r3, #16
 8004afa:	e7af      	b.n	8004a5c <_printf_i+0xfc>
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	f043 0320 	orr.w	r3, r3, #32
 8004b02:	6023      	str	r3, [r4, #0]
 8004b04:	2378      	movs	r3, #120	; 0x78
 8004b06:	4828      	ldr	r0, [pc, #160]	; (8004ba8 <_printf_i+0x248>)
 8004b08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b0c:	e7e3      	b.n	8004ad6 <_printf_i+0x176>
 8004b0e:	0659      	lsls	r1, r3, #25
 8004b10:	bf48      	it	mi
 8004b12:	b2b6      	uxthmi	r6, r6
 8004b14:	e7e6      	b.n	8004ae4 <_printf_i+0x184>
 8004b16:	4615      	mov	r5, r2
 8004b18:	e7bb      	b.n	8004a92 <_printf_i+0x132>
 8004b1a:	682b      	ldr	r3, [r5, #0]
 8004b1c:	6826      	ldr	r6, [r4, #0]
 8004b1e:	1d18      	adds	r0, r3, #4
 8004b20:	6961      	ldr	r1, [r4, #20]
 8004b22:	6028      	str	r0, [r5, #0]
 8004b24:	0635      	lsls	r5, r6, #24
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	d501      	bpl.n	8004b2e <_printf_i+0x1ce>
 8004b2a:	6019      	str	r1, [r3, #0]
 8004b2c:	e002      	b.n	8004b34 <_printf_i+0x1d4>
 8004b2e:	0670      	lsls	r0, r6, #25
 8004b30:	d5fb      	bpl.n	8004b2a <_printf_i+0x1ca>
 8004b32:	8019      	strh	r1, [r3, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	4615      	mov	r5, r2
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	e7ba      	b.n	8004ab2 <_printf_i+0x152>
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	2100      	movs	r1, #0
 8004b40:	1d1a      	adds	r2, r3, #4
 8004b42:	602a      	str	r2, [r5, #0]
 8004b44:	681d      	ldr	r5, [r3, #0]
 8004b46:	6862      	ldr	r2, [r4, #4]
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f000 f831 	bl	8004bb0 <memchr>
 8004b4e:	b108      	cbz	r0, 8004b54 <_printf_i+0x1f4>
 8004b50:	1b40      	subs	r0, r0, r5
 8004b52:	6060      	str	r0, [r4, #4]
 8004b54:	6863      	ldr	r3, [r4, #4]
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b5e:	e7a8      	b.n	8004ab2 <_printf_i+0x152>
 8004b60:	462a      	mov	r2, r5
 8004b62:	4649      	mov	r1, r9
 8004b64:	4640      	mov	r0, r8
 8004b66:	6923      	ldr	r3, [r4, #16]
 8004b68:	47d0      	blx	sl
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d0ab      	beq.n	8004ac6 <_printf_i+0x166>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	079b      	lsls	r3, r3, #30
 8004b72:	d413      	bmi.n	8004b9c <_printf_i+0x23c>
 8004b74:	68e0      	ldr	r0, [r4, #12]
 8004b76:	9b03      	ldr	r3, [sp, #12]
 8004b78:	4298      	cmp	r0, r3
 8004b7a:	bfb8      	it	lt
 8004b7c:	4618      	movlt	r0, r3
 8004b7e:	e7a4      	b.n	8004aca <_printf_i+0x16a>
 8004b80:	2301      	movs	r3, #1
 8004b82:	4632      	mov	r2, r6
 8004b84:	4649      	mov	r1, r9
 8004b86:	4640      	mov	r0, r8
 8004b88:	47d0      	blx	sl
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	d09b      	beq.n	8004ac6 <_printf_i+0x166>
 8004b8e:	3501      	adds	r5, #1
 8004b90:	68e3      	ldr	r3, [r4, #12]
 8004b92:	9903      	ldr	r1, [sp, #12]
 8004b94:	1a5b      	subs	r3, r3, r1
 8004b96:	42ab      	cmp	r3, r5
 8004b98:	dcf2      	bgt.n	8004b80 <_printf_i+0x220>
 8004b9a:	e7eb      	b.n	8004b74 <_printf_i+0x214>
 8004b9c:	2500      	movs	r5, #0
 8004b9e:	f104 0619 	add.w	r6, r4, #25
 8004ba2:	e7f5      	b.n	8004b90 <_printf_i+0x230>
 8004ba4:	08004e25 	.word	0x08004e25
 8004ba8:	08004e36 	.word	0x08004e36

08004bac <__retarget_lock_acquire_recursive>:
 8004bac:	4770      	bx	lr

08004bae <__retarget_lock_release_recursive>:
 8004bae:	4770      	bx	lr

08004bb0 <memchr>:
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	b510      	push	{r4, lr}
 8004bb4:	b2c9      	uxtb	r1, r1
 8004bb6:	4402      	add	r2, r0
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	d101      	bne.n	8004bc2 <memchr+0x12>
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	e003      	b.n	8004bca <memchr+0x1a>
 8004bc2:	7804      	ldrb	r4, [r0, #0]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	428c      	cmp	r4, r1
 8004bc8:	d1f6      	bne.n	8004bb8 <memchr+0x8>
 8004bca:	bd10      	pop	{r4, pc}

08004bcc <memmove>:
 8004bcc:	4288      	cmp	r0, r1
 8004bce:	b510      	push	{r4, lr}
 8004bd0:	eb01 0402 	add.w	r4, r1, r2
 8004bd4:	d902      	bls.n	8004bdc <memmove+0x10>
 8004bd6:	4284      	cmp	r4, r0
 8004bd8:	4623      	mov	r3, r4
 8004bda:	d807      	bhi.n	8004bec <memmove+0x20>
 8004bdc:	1e43      	subs	r3, r0, #1
 8004bde:	42a1      	cmp	r1, r4
 8004be0:	d008      	beq.n	8004bf4 <memmove+0x28>
 8004be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004be6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bea:	e7f8      	b.n	8004bde <memmove+0x12>
 8004bec:	4601      	mov	r1, r0
 8004bee:	4402      	add	r2, r0
 8004bf0:	428a      	cmp	r2, r1
 8004bf2:	d100      	bne.n	8004bf6 <memmove+0x2a>
 8004bf4:	bd10      	pop	{r4, pc}
 8004bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bfe:	e7f7      	b.n	8004bf0 <memmove+0x24>

08004c00 <_realloc_r>:
 8004c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c04:	4680      	mov	r8, r0
 8004c06:	4614      	mov	r4, r2
 8004c08:	460e      	mov	r6, r1
 8004c0a:	b921      	cbnz	r1, 8004c16 <_realloc_r+0x16>
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c12:	f7ff bc21 	b.w	8004458 <_malloc_r>
 8004c16:	b92a      	cbnz	r2, 8004c24 <_realloc_r+0x24>
 8004c18:	f7ff fbb6 	bl	8004388 <_free_r>
 8004c1c:	4625      	mov	r5, r4
 8004c1e:	4628      	mov	r0, r5
 8004c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c24:	f000 f81b 	bl	8004c5e <_malloc_usable_size_r>
 8004c28:	4284      	cmp	r4, r0
 8004c2a:	4607      	mov	r7, r0
 8004c2c:	d802      	bhi.n	8004c34 <_realloc_r+0x34>
 8004c2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c32:	d812      	bhi.n	8004c5a <_realloc_r+0x5a>
 8004c34:	4621      	mov	r1, r4
 8004c36:	4640      	mov	r0, r8
 8004c38:	f7ff fc0e 	bl	8004458 <_malloc_r>
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	d0ed      	beq.n	8004c1e <_realloc_r+0x1e>
 8004c42:	42bc      	cmp	r4, r7
 8004c44:	4622      	mov	r2, r4
 8004c46:	4631      	mov	r1, r6
 8004c48:	bf28      	it	cs
 8004c4a:	463a      	movcs	r2, r7
 8004c4c:	f7ff fb86 	bl	800435c <memcpy>
 8004c50:	4631      	mov	r1, r6
 8004c52:	4640      	mov	r0, r8
 8004c54:	f7ff fb98 	bl	8004388 <_free_r>
 8004c58:	e7e1      	b.n	8004c1e <_realloc_r+0x1e>
 8004c5a:	4635      	mov	r5, r6
 8004c5c:	e7df      	b.n	8004c1e <_realloc_r+0x1e>

08004c5e <_malloc_usable_size_r>:
 8004c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c62:	1f18      	subs	r0, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bfbc      	itt	lt
 8004c68:	580b      	ldrlt	r3, [r1, r0]
 8004c6a:	18c0      	addlt	r0, r0, r3
 8004c6c:	4770      	bx	lr
	...

08004c70 <_init>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr

08004c7c <_fini>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr
