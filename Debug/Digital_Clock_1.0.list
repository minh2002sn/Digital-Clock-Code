
Digital_Clock_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006508  08006508  00016508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006620  08006620  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08006620  08006620  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006620  08006620  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006620  08006620  00016620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006624  08006624  00016624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08006628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200000f0  08006718  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08006718  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139af  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000315b  00000000  00000000  00033ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00036c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00037dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f9c  00000000  00000000  00038e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168df  00000000  00000000  00052de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ddb3  00000000  00000000  000696c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7476  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d48  00000000  00000000  000f74c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f0 	.word	0x200000f0
 8000128:	00000000 	.word	0x00000000
 800012c:	080064f0 	.word	0x080064f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f4 	.word	0x200000f4
 8000148:	080064f0 	.word	0x080064f0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_d2f>:
 80004d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004dc:	bf24      	itt	cs
 80004de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004e6:	d90d      	bls.n	8000504 <__aeabi_d2f+0x30>
 80004e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004fc:	bf08      	it	eq
 80004fe:	f020 0001 	biceq.w	r0, r0, #1
 8000502:	4770      	bx	lr
 8000504:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000508:	d121      	bne.n	800054e <__aeabi_d2f+0x7a>
 800050a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800050e:	bfbc      	itt	lt
 8000510:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000514:	4770      	bxlt	lr
 8000516:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800051a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800051e:	f1c2 0218 	rsb	r2, r2, #24
 8000522:	f1c2 0c20 	rsb	ip, r2, #32
 8000526:	fa10 f30c 	lsls.w	r3, r0, ip
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	bf18      	it	ne
 8000530:	f040 0001 	orrne.w	r0, r0, #1
 8000534:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000538:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800053c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000540:	ea40 000c 	orr.w	r0, r0, ip
 8000544:	fa23 f302 	lsr.w	r3, r3, r2
 8000548:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800054c:	e7cc      	b.n	80004e8 <__aeabi_d2f+0x14>
 800054e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000552:	d107      	bne.n	8000564 <__aeabi_d2f+0x90>
 8000554:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000558:	bf1e      	ittt	ne
 800055a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800055e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000562:	4770      	bxne	lr
 8000564:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000568:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800056c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__aeabi_f2uiz>:
 8000574:	0042      	lsls	r2, r0, #1
 8000576:	d20e      	bcs.n	8000596 <__aeabi_f2uiz+0x22>
 8000578:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800057c:	d30b      	bcc.n	8000596 <__aeabi_f2uiz+0x22>
 800057e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000582:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000586:	d409      	bmi.n	800059c <__aeabi_f2uiz+0x28>
 8000588:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800058c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000590:	fa23 f002 	lsr.w	r0, r3, r2
 8000594:	4770      	bx	lr
 8000596:	f04f 0000 	mov.w	r0, #0
 800059a:	4770      	bx	lr
 800059c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005a0:	d101      	bne.n	80005a6 <__aeabi_f2uiz+0x32>
 80005a2:	0242      	lsls	r2, r0, #9
 80005a4:	d102      	bne.n	80005ac <__aeabi_f2uiz+0x38>
 80005a6:	f04f 30ff 	mov.w	r0, #4294967295
 80005aa:	4770      	bx	lr
 80005ac:	f04f 0000 	mov.w	r0, #0
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MAIN_MENU_Init>:
		{0xFF, 0x02, 0xFF, 0xFF, 0x01, 0xFF},	// 8
		{0xFF, 0x02, 0xFF, 0x01, 0x01, 0xFF},	// 9
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00},	// Nothing
};

void MAIN_MENU_Init(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
	uint8_t num_char_0[] = {
 80005ba:	4a26      	ldr	r2, [pc, #152]	; (8000654 <MAIN_MENU_Init+0xa0>)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c4:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000,
			0b00000,
			0b00000,
			0b00000,
	};
	LCD_Create_Char(MENU_Data.hlcd, 0, num_char_0);
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MAIN_MENU_Init+0xa4>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	f107 0220 	add.w	r2, r7, #32
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 f95c 	bl	8005890 <LCD_Create_Char>

	uint8_t num_char_1[] = {
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <MAIN_MENU_Init+0xa8>)
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e2:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000,
			0b00000,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 1, num_char_1);
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MAIN_MENU_Init+0xa4>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	f107 0218 	add.w	r2, r7, #24
 80005ee:	2101      	movs	r1, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f005 f94d 	bl	8005890 <LCD_Create_Char>

	uint8_t num_char_2[] = {
 80005f6:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <MAIN_MENU_Init+0xac>)
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000600:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000,
			0b00000,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 2, num_char_2);
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MAIN_MENU_Init+0xa4>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	f107 0210 	add.w	r2, r7, #16
 800060c:	2102      	movs	r1, #2
 800060e:	4618      	mov	r0, r3
 8000610:	f005 f93e 	bl	8005890 <LCD_Create_Char>

	uint8_t thermometro[8] = {
 8000614:	4a13      	ldr	r2, [pc, #76]	; (8000664 <MAIN_MENU_Init+0xb0>)
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01110,
			0b11111,
			0b11111,
			0b01110
	};
	LCD_Create_Char(MENU_Data.hlcd, 3, thermometro);
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MAIN_MENU_Init+0xa4>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	2103      	movs	r1, #3
 800062c:	4618      	mov	r0, r3
 800062e:	f005 f92f 	bl	8005890 <LCD_Create_Char>

	uint8_t igrasia[8] = {
 8000632:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <MAIN_MENU_Init+0xb4>)
 8000634:	463b      	mov	r3, r7
 8000636:	e892 0003 	ldmia.w	r2, {r0, r1}
 800063a:	e883 0003 	stmia.w	r3, {r0, r1}
			0b10001,
			0b10001,
			0b10001,
			0b01110,
	};
	LCD_Create_Char(MENU_Data.hlcd, 4, igrasia);
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MAIN_MENU_Init+0xa4>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	463a      	mov	r2, r7
 8000644:	2104      	movs	r1, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f005 f922 	bl	8005890 <LCD_Create_Char>

}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	; 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08006508 	.word	0x08006508
 8000658:	2000010c 	.word	0x2000010c
 800065c:	08006510 	.word	0x08006510
 8000660:	08006518 	.word	0x08006518
 8000664:	08006520 	.word	0x08006520
 8000668:	08006528 	.word	0x08006528

0800066c <MAIN_MENU_Display_Num>:

void MAIN_MENU_Display_Num(uint8_t p_number, uint8_t p_col, uint8_t p_row){
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
 8000676:	460b      	mov	r3, r1
 8000678:	71bb      	strb	r3, [r7, #6]
 800067a:	4613      	mov	r3, r2
 800067c:	717b      	strb	r3, [r7, #5]
	if(p_row > 2) return;
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	2b02      	cmp	r3, #2
 8000682:	d841      	bhi.n	8000708 <MAIN_MENU_Display_Num+0x9c>

	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row);
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <MAIN_MENU_Display_Num+0xa4>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	797a      	ldrb	r2, [r7, #5]
 800068a:	79b9      	ldrb	r1, [r7, #6]
 800068c:	4618      	mov	r0, r3
 800068e:	f005 f8d5 	bl	800583c <LCD_Set_Cursor>
	for(int i = 0; i < 3; i++){
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	e011      	b.n	80006bc <MAIN_MENU_Display_Num+0x50>
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i]);
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MAIN_MENU_Display_Num+0xa4>)
 800069a:	6858      	ldr	r0, [r3, #4]
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	491d      	ldr	r1, [pc, #116]	; (8000714 <MAIN_MENU_Display_Num+0xa8>)
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	18ca      	adds	r2, r1, r3
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	f005 f954 	bl	800595e <LCD_Send_Data>
	for(int i = 0; i < 3; i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	ddea      	ble.n	8000698 <MAIN_MENU_Display_Num+0x2c>
	}

	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row + 1);
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MAIN_MENU_Display_Num+0xa4>)
 80006c4:	6858      	ldr	r0, [r3, #4]
 80006c6:	797b      	ldrb	r3, [r7, #5]
 80006c8:	3301      	adds	r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	4619      	mov	r1, r3
 80006d0:	f005 f8b4 	bl	800583c <LCD_Set_Cursor>
	for(int i = 0; i < 3; i++){
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	e012      	b.n	8000700 <MAIN_MENU_Display_Num+0x94>
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i+3]);
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <MAIN_MENU_Display_Num+0xa4>)
 80006dc:	6858      	ldr	r0, [r3, #4]
 80006de:	79fa      	ldrb	r2, [r7, #7]
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	1cd9      	adds	r1, r3, #3
 80006e4:	4c0b      	ldr	r4, [pc, #44]	; (8000714 <MAIN_MENU_Display_Num+0xa8>)
 80006e6:	4613      	mov	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4413      	add	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4423      	add	r3, r4
 80006f0:	440b      	add	r3, r1
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	f005 f932 	bl	800595e <LCD_Send_Data>
	for(int i = 0; i < 3; i++){
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b02      	cmp	r3, #2
 8000704:	dde9      	ble.n	80006da <MAIN_MENU_Display_Num+0x6e>
 8000706:	e000      	b.n	800070a <MAIN_MENU_Display_Num+0x9e>
	if(p_row > 2) return;
 8000708:	bf00      	nop
	}

}
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	bd90      	pop	{r4, r7, pc}
 8000710:	2000010c 	.word	0x2000010c
 8000714:	2000001c 	.word	0x2000001c

08000718 <MAIN_MENU_Display>:

void MAIN_MENU_Display(){
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b085      	sub	sp, #20
 800071c:	af02      	add	r7, sp, #8
	if(MENU_Data.is_changing_menu){
 800071e:	4b5e      	ldr	r3, [pc, #376]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000720:	7a5b      	ldrb	r3, [r3, #9]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d007      	beq.n	8000736 <MAIN_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 8000726:	4b5c      	ldr	r3, [pc, #368]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	4618      	mov	r0, r3
 800072c:	f005 f872 	bl	8005814 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8000730:	4b59      	ldr	r3, [pc, #356]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000732:	2200      	movs	r2, #0
 8000734:	725a      	strb	r2, [r3, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 0);
 8000736:	4b58      	ldr	r3, [pc, #352]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	2200      	movs	r2, #0
 800073c:	2103      	movs	r1, #3
 800073e:	4618      	mov	r0, r3
 8000740:	f005 f87c 	bl	800583c <LCD_Set_Cursor>
	char t_day_string[] = "SUN";
 8000744:	4b55      	ldr	r3, [pc, #340]	; (800089c <MAIN_MENU_Display+0x184>)
 8000746:	607b      	str	r3, [r7, #4]
	if(REALTIME_Data.system_day > 0){
 8000748:	4b55      	ldr	r3, [pc, #340]	; (80008a0 <MAIN_MENU_Display+0x188>)
 800074a:	789b      	ldrb	r3, [r3, #2]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00a      	beq.n	8000766 <MAIN_MENU_Display+0x4e>
		strcpy(t_day_string, DAY_Str[REALTIME_Data.system_day - 1]);
 8000750:	4b53      	ldr	r3, [pc, #332]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000752:	789b      	ldrb	r3, [r3, #2]
 8000754:	3b01      	subs	r3, #1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4a52      	ldr	r2, [pc, #328]	; (80008a4 <MAIN_MENU_Display+0x18c>)
 800075a:	441a      	add	r2, r3
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f005 fb2f 	bl	8005dc4 <strcpy>
	}
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000766:	4b4c      	ldr	r3, [pc, #304]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000768:	6858      	ldr	r0, [r3, #4]
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
 800076a:	4b4d      	ldr	r3, [pc, #308]	; (80008a0 <MAIN_MENU_Display+0x188>)
 800076c:	78db      	ldrb	r3, [r3, #3]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 800076e:	461c      	mov	r4, r3
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
 8000770:	4b4b      	ldr	r3, [pc, #300]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000772:	791b      	ldrb	r3, [r3, #4]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000774:	4619      	mov	r1, r3
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
 8000776:	4b4a      	ldr	r3, [pc, #296]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000778:	795b      	ldrb	r3, [r3, #5]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 800077a:	1d3a      	adds	r2, r7, #4
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	9100      	str	r1, [sp, #0]
 8000780:	4623      	mov	r3, r4
 8000782:	4949      	ldr	r1, [pc, #292]	; (80008a8 <MAIN_MENU_Display+0x190>)
 8000784:	f005 f808 	bl	8005798 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 1);
 8000788:	4b43      	ldr	r3, [pc, #268]	; (8000898 <MAIN_MENU_Display+0x180>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	2103      	movs	r1, #3
 8000790:	4618      	mov	r0, r3
 8000792:	f005 f853 	bl	800583c <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, 3);
 8000796:	4b40      	ldr	r3, [pc, #256]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	2103      	movs	r1, #3
 800079c:	4618      	mov	r0, r3
 800079e:	f005 f8de 	bl	800595e <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02dC      ", (uint8_t)hdht.temperature);
 80007a2:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <MAIN_MENU_Display+0x180>)
 80007a4:	685c      	ldr	r4, [r3, #4]
 80007a6:	4b41      	ldr	r3, [pc, #260]	; (80008ac <MAIN_MENU_Display+0x194>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fee2 	bl	8000574 <__aeabi_f2uiz>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	493e      	ldr	r1, [pc, #248]	; (80008b0 <MAIN_MENU_Display+0x198>)
 80007b8:	4620      	mov	r0, r4
 80007ba:	f004 ffed 	bl	8005798 <LCD_Write>
	LCD_Send_Data(MENU_Data.hlcd, 4);
 80007be:	4b36      	ldr	r3, [pc, #216]	; (8000898 <MAIN_MENU_Display+0x180>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	2104      	movs	r1, #4
 80007c4:	4618      	mov	r0, r3
 80007c6:	f005 f8ca 	bl	800595e <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02d%%", (uint8_t)hdht.huminity);
 80007ca:	4b33      	ldr	r3, [pc, #204]	; (8000898 <MAIN_MENU_Display+0x180>)
 80007cc:	685c      	ldr	r4, [r3, #4]
 80007ce:	4b37      	ldr	r3, [pc, #220]	; (80008ac <MAIN_MENU_Display+0x194>)
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fece 	bl	8000574 <__aeabi_f2uiz>
 80007d8:	4603      	mov	r3, r0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	461a      	mov	r2, r3
 80007de:	4935      	ldr	r1, [pc, #212]	; (80008b4 <MAIN_MENU_Display+0x19c>)
 80007e0:	4620      	mov	r0, r4
 80007e2:	f004 ffd9 	bl	8005798 <LCD_Write>

	MAIN_MENU_Display_Num(REALTIME_Data.system_hour / 10, 2, 2);
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MAIN_MENU_Display+0x188>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4a33      	ldr	r2, [pc, #204]	; (80008b8 <MAIN_MENU_Display+0x1a0>)
 80007ec:	fba2 2303 	umull	r2, r3, r2, r3
 80007f0:	08db      	lsrs	r3, r3, #3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2202      	movs	r2, #2
 80007f6:	2102      	movs	r1, #2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff37 	bl	800066c <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(REALTIME_Data.system_hour % 10, 6, 2);
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <MAIN_MENU_Display+0x1a0>)
 8000804:	fba3 1302 	umull	r1, r3, r3, r2
 8000808:	08d9      	lsrs	r1, r3, #3
 800080a:	460b      	mov	r3, r1
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	440b      	add	r3, r1
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2202      	movs	r2, #2
 8000818:	2106      	movs	r1, #6
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff26 	bl	800066c <MAIN_MENU_Display_Num>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	2202      	movs	r2, #2
 8000826:	2109      	movs	r1, #9
 8000828:	4618      	mov	r0, r3
 800082a:	f005 f807 	bl	800583c <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	212e      	movs	r1, #46	; 0x2e
 8000834:	4618      	mov	r0, r3
 8000836:	f005 f892 	bl	800595e <LCD_Send_Data>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MAIN_MENU_Display+0x180>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2203      	movs	r2, #3
 8000840:	2109      	movs	r1, #9
 8000842:	4618      	mov	r0, r3
 8000844:	f004 fffa 	bl	800583c <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MAIN_MENU_Display+0x180>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	212e      	movs	r1, #46	; 0x2e
 800084e:	4618      	mov	r0, r3
 8000850:	f005 f885 	bl	800595e <LCD_Send_Data>
	MAIN_MENU_Display_Num(REALTIME_Data.system_minute / 10, 10, 2);
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <MAIN_MENU_Display+0x1a0>)
 800085a:	fba2 2303 	umull	r2, r3, r2, r3
 800085e:	08db      	lsrs	r3, r3, #3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2202      	movs	r2, #2
 8000864:	210a      	movs	r1, #10
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff00 	bl	800066c <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(REALTIME_Data.system_minute % 10, 14, 2);
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MAIN_MENU_Display+0x188>)
 800086e:	785a      	ldrb	r2, [r3, #1]
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MAIN_MENU_Display+0x1a0>)
 8000872:	fba3 1302 	umull	r1, r3, r3, r2
 8000876:	08d9      	lsrs	r1, r3, #3
 8000878:	460b      	mov	r3, r1
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	440b      	add	r3, r1
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2202      	movs	r2, #2
 8000886:	210e      	movs	r1, #14
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff feef 	bl	800066c <MAIN_MENU_Display_Num>
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bd90      	pop	{r4, r7, pc}
 8000896:	bf00      	nop
 8000898:	2000010c 	.word	0x2000010c
 800089c:	004e5553 	.word	0x004e5553
 80008a0:	2000014c 	.word	0x2000014c
 80008a4:	20000000 	.word	0x20000000
 80008a8:	08006530 	.word	0x08006530
 80008ac:	200002e0 	.word	0x200002e0
 80008b0:	08006544 	.word	0x08006544
 80008b4:	08006550 	.word	0x08006550
 80008b8:	cccccccd 	.word	0xcccccccd

080008bc <MAIN_MENU_Set_State>:

void MAIN_MENU_Set_State(){
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = MAIN_MENU;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MAIN_MENU_Set_State+0x20>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <MAIN_MENU_Set_State+0x20>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <MAIN_MENU_Set_State+0x20>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	725a      	strb	r2, [r3, #9]
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	2000010c 	.word	0x2000010c

080008e0 <MAIN_MENU_Update_Value>:

void MAIN_MENU_Update_Value(){
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = MAIN_MENU;
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <MAIN_MENU_Update_Value+0x18>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80008ea:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <MAIN_MENU_Update_Value+0x18>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	721a      	strb	r2, [r3, #8]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	2000010c 	.word	0x2000010c

080008fc <MENU_Init>:

#include "Main_Menu.h"

MENU_DATA_t MENU_Data;

void MENU_Init(LCD_I2C_HandleTypeDef *p_hlcd){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	MENU_Data.hlcd = p_hlcd;
 8000904:	4a08      	ldr	r2, [pc, #32]	; (8000928 <MENU_Init+0x2c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6053      	str	r3, [r2, #4]
	MENU_Data.changed = 0;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MENU_Init+0x2c>)
 800090c:	2200      	movs	r2, #0
 800090e:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <MENU_Init+0x2c>)
 8000912:	2201      	movs	r2, #1
 8000914:	725a      	strb	r2, [r3, #9]
	MENU_Data.menu_type = MAIN_MENU;
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <MENU_Init+0x2c>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
	MAIN_MENU_Init();
 800091c:	f7ff fe4a 	bl	80005b4 <MAIN_MENU_Init>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000010c 	.word	0x2000010c

0800092c <MENU_Handle>:
//		timer = HAL_GetTick();
//		count ++;
//	}
//}

void MENU_Handle(){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	if(!MENU_Data.changed){
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MENU_Handle+0x50>)
 8000932:	7a1b      	ldrb	r3, [r3, #8]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d11b      	bne.n	8000970 <MENU_Handle+0x44>
		switch(MENU_Data.menu_type){
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <MENU_Handle+0x50>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b03      	cmp	r3, #3
 800093e:	d819      	bhi.n	8000974 <MENU_Handle+0x48>
 8000940:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <MENU_Handle+0x1c>)
 8000942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000946:	bf00      	nop
 8000948:	08000959 	.word	0x08000959
 800094c:	08000965 	.word	0x08000965
 8000950:	08000975 	.word	0x08000975
 8000954:	08000975 	.word	0x08000975
			case MAIN_MENU:
				MAIN_MENU_Display();
 8000958:	f7ff fede 	bl	8000718 <MAIN_MENU_Display>
				MENU_Data.changed = 1;
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <MENU_Handle+0x50>)
 800095e:	2201      	movs	r2, #1
 8000960:	721a      	strb	r2, [r3, #8]
				break;
 8000962:	e008      	b.n	8000976 <MENU_Handle+0x4a>
			case SETTING_REALTIME_MENU:
				SR_MENU_Display();
 8000964:	f000 f908 	bl	8000b78 <SR_MENU_Display>
				MENU_Data.changed = 1;
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <MENU_Handle+0x50>)
 800096a:	2201      	movs	r2, #1
 800096c:	721a      	strb	r2, [r3, #8]
				break;
 800096e:	e002      	b.n	8000976 <MENU_Handle+0x4a>

				break;
			default:
				break;
		}
	}
 8000970:	bf00      	nop
 8000972:	e000      	b.n	8000976 <MENU_Handle+0x4a>
				break;
 8000974:	bf00      	nop
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000010c 	.word	0x2000010c

08000980 <SR_MENU_Set_State>:
	SR_MENU_Data.state = SETTING_HOUR;
	REALTIME_DATA_HandleTypeDef t_realtime = {0, 0, 0, 0, 0, 0};
	SR_MENU_Data.new_realtime = t_realtime;
}

void SR_MENU_Set_State(){
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
	SR_MENU_Data.state = SETTING_HOUR;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <SR_MENU_Set_State+0x40>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
	REALTIME_DATA_HandleTypeDef t_realtime = {0, 0, 0, 0, 0, 0};
 800098c:	463b      	mov	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	809a      	strh	r2, [r3, #4]
	SR_MENU_Data.new_realtime = t_realtime;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <SR_MENU_Set_State+0x40>)
 8000996:	3301      	adds	r3, #1
 8000998:	463a      	mov	r2, r7
 800099a:	6810      	ldr	r0, [r2, #0]
 800099c:	6018      	str	r0, [r3, #0]
 800099e:	8892      	ldrh	r2, [r2, #4]
 80009a0:	809a      	strh	r2, [r3, #4]
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <SR_MENU_Set_State+0x44>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <SR_MENU_Set_State+0x44>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <SR_MENU_Set_State+0x44>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	725a      	strb	r2, [r3, #9]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000118 	.word	0x20000118
 80009c4:	2000010c 	.word	0x2000010c

080009c8 <SR_MENU_Change_Setting_State>:

void SR_MENU_Change_Setting_State(uint8_t p_is_increase){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	if(SR_MENU_Data.state == CHECKING_AGAIN){
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <SR_MENU_Change_Setting_State+0x60>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	d105      	bne.n	80009e6 <SR_MENU_Change_Setting_State+0x1e>
		REALTIME_Set_New_Realtime(&SR_MENU_Data.new_realtime);
 80009da:	4814      	ldr	r0, [pc, #80]	; (8000a2c <SR_MENU_Change_Setting_State+0x64>)
 80009dc:	f000 faf2 	bl	8000fc4 <REALTIME_Set_New_Realtime>
		MAIN_MENU_Set_State();
 80009e0:	f7ff ff6c 	bl	80008bc <MAIN_MENU_Set_State>
			MAIN_MENU_Set_State();
		}
		MENU_Data.menu_type = SETTING_REALTIME_MENU;
		MENU_Data.changed = 0;
	}
}
 80009e4:	e01b      	b.n	8000a1e <SR_MENU_Change_Setting_State+0x56>
		SR_MENU_Data.state += ((p_is_increase == INCREASE) ? 1 : -1);
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <SR_MENU_Change_Setting_State+0x60>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	2a01      	cmp	r2, #1
 80009ee:	d101      	bne.n	80009f4 <SR_MENU_Change_Setting_State+0x2c>
 80009f0:	2201      	movs	r2, #1
 80009f2:	e000      	b.n	80009f6 <SR_MENU_Change_Setting_State+0x2e>
 80009f4:	22ff      	movs	r2, #255	; 0xff
 80009f6:	4413      	add	r3, r2
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <SR_MENU_Change_Setting_State+0x60>)
 80009fc:	701a      	strb	r2, [r3, #0]
		if((int8_t)SR_MENU_Data.state < 0){
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <SR_MENU_Change_Setting_State+0x60>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	da04      	bge.n	8000a12 <SR_MENU_Change_Setting_State+0x4a>
			SR_MENU_Data.state = 0;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <SR_MENU_Change_Setting_State+0x60>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
			MAIN_MENU_Set_State();
 8000a0e:	f7ff ff55 	bl	80008bc <MAIN_MENU_Set_State>
		MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <SR_MENU_Change_Setting_State+0x68>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
		MENU_Data.changed = 0;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <SR_MENU_Change_Setting_State+0x68>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	721a      	strb	r2, [r3, #8]
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000118 	.word	0x20000118
 8000a2c:	20000119 	.word	0x20000119
 8000a30:	2000010c 	.word	0x2000010c

08000a34 <SR_MENU_Set_Value>:

void SR_MENU_Set_Value(uint8_t p_is_increase){
 8000a34:	b480      	push	{r7}
 8000a36:	b087      	sub	sp, #28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 8000a3e:	4b47      	ldr	r3, [pc, #284]	; (8000b5c <SR_MENU_Set_Value+0x128>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b05      	cmp	r3, #5
 8000a44:	d87e      	bhi.n	8000b44 <SR_MENU_Set_Value+0x110>
		int8_t *t_data_ptr = (int8_t *)(&SR_MENU_Data.new_realtime) + SR_MENU_Data.state;
 8000a46:	4b45      	ldr	r3, [pc, #276]	; (8000b5c <SR_MENU_Set_Value+0x128>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b44      	ldr	r3, [pc, #272]	; (8000b60 <SR_MENU_Set_Value+0x12c>)
 8000a4e:	4413      	add	r3, r2
 8000a50:	617b      	str	r3, [r7, #20]
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f993 3000 	ldrsb.w	r3, [r3]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	2a01      	cmp	r2, #1
 8000a5e:	d101      	bne.n	8000a64 <SR_MENU_Set_Value+0x30>
 8000a60:	2201      	movs	r2, #1
 8000a62:	e000      	b.n	8000a66 <SR_MENU_Set_Value+0x32>
 8000a64:	22ff      	movs	r2, #255	; 0xff
 8000a66:	4413      	add	r3, r2
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	b25a      	sxtb	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	701a      	strb	r2, [r3, #0]
		if(*t_data_ptr > __max_value[SR_MENU_Data.state]){
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f993 3000 	ldrsb.w	r3, [r3]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b38      	ldr	r3, [pc, #224]	; (8000b5c <SR_MENU_Set_Value+0x128>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4b39      	ldr	r3, [pc, #228]	; (8000b64 <SR_MENU_Set_Value+0x130>)
 8000a80:	5c5b      	ldrb	r3, [r3, r1]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	dd0a      	ble.n	8000a9c <SR_MENU_Set_Value+0x68>
			*t_data_ptr = (SR_MENU_Data.state == SETTING_DATE) ? 1 : 0;
 8000a86:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <SR_MENU_Set_Value+0x128>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	bf0c      	ite	eq
 8000a8e:	2301      	moveq	r3, #1
 8000a90:	2300      	movne	r3, #0
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	b25a      	sxtb	r2, r3
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e00c      	b.n	8000ab6 <SR_MENU_Set_Value+0x82>
		} else if(*t_data_ptr < 0){
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	f993 3000 	ldrsb.w	r3, [r3]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	da07      	bge.n	8000ab6 <SR_MENU_Set_Value+0x82>
			*t_data_ptr = __max_value[SR_MENU_Data.state];
 8000aa6:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <SR_MENU_Set_Value+0x128>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <SR_MENU_Set_Value+0x130>)
 8000aae:	5c9b      	ldrb	r3, [r3, r2]
 8000ab0:	b25a      	sxtb	r2, r3
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	701a      	strb	r2, [r3, #0]
		}
		if(SR_MENU_Data.state == SETTING_YEAR){
 8000ab6:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <SR_MENU_Set_Value+0x128>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b05      	cmp	r3, #5
 8000abc:	d142      	bne.n	8000b44 <SR_MENU_Set_Value+0x110>
			uint8_t *t_date_ptr = &SR_MENU_Data.new_realtime.system_date;
 8000abe:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <SR_MENU_Set_Value+0x134>)
 8000ac0:	613b      	str	r3, [r7, #16]
			uint8_t *t_month_ptr = &SR_MENU_Data.new_realtime.system_month;
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <SR_MENU_Set_Value+0x138>)
 8000ac4:	60fb      	str	r3, [r7, #12]
			uint8_t *t_year_ptr = &SR_MENU_Data.new_realtime.system_year;
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <SR_MENU_Set_Value+0x13c>)
 8000ac8:	60bb      	str	r3, [r7, #8]
			if(*t_month_ptr == 2){
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d11b      	bne.n	8000b0a <SR_MENU_Set_Value+0xd6>
				if(*t_date_ptr > ((*t_year_ptr % 4 == 0) ? 29 : 28)){
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	f003 0303 	and.w	r3, r3, #3
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d101      	bne.n	8000aea <SR_MENU_Set_Value+0xb6>
 8000ae6:	231d      	movs	r3, #29
 8000ae8:	e000      	b.n	8000aec <SR_MENU_Set_Value+0xb8>
 8000aea:	231c      	movs	r3, #28
 8000aec:	4293      	cmp	r3, r2
 8000aee:	da29      	bge.n	8000b44 <SR_MENU_Set_Value+0x110>
					*t_date_ptr = (*t_year_ptr % 4 == 0) ? 29 : 28;
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	f003 0303 	and.w	r3, r3, #3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d101      	bne.n	8000b02 <SR_MENU_Set_Value+0xce>
 8000afe:	221d      	movs	r2, #29
 8000b00:	e000      	b.n	8000b04 <SR_MENU_Set_Value+0xd0>
 8000b02:	221c      	movs	r2, #28
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e01c      	b.n	8000b44 <SR_MENU_Set_Value+0x110>
				}
			} else if((*t_month_ptr <= 7 && *t_month_ptr % 2 == 0) || (*t_month_ptr >= 8 && *t_month_ptr % 2 == 1)){
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b07      	cmp	r3, #7
 8000b10:	d806      	bhi.n	8000b20 <SR_MENU_Set_Value+0xec>
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d00a      	beq.n	8000b36 <SR_MENU_Set_Value+0x102>
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b07      	cmp	r3, #7
 8000b26:	d90d      	bls.n	8000b44 <SR_MENU_Set_Value+0x110>
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <SR_MENU_Set_Value+0x110>
				if(*t_date_ptr > 30){
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b1e      	cmp	r3, #30
 8000b3c:	d902      	bls.n	8000b44 <SR_MENU_Set_Value+0x110>
					*t_date_ptr = 30;
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	221e      	movs	r2, #30
 8000b42:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <SR_MENU_Set_Value+0x140>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <SR_MENU_Set_Value+0x140>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	721a      	strb	r2, [r3, #8]
}
 8000b50:	bf00      	nop
 8000b52:	371c      	adds	r7, #28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000118 	.word	0x20000118
 8000b60:	20000119 	.word	0x20000119
 8000b64:	20000060 	.word	0x20000060
 8000b68:	2000011c 	.word	0x2000011c
 8000b6c:	2000011d 	.word	0x2000011d
 8000b70:	2000011e 	.word	0x2000011e
 8000b74:	2000010c 	.word	0x2000010c

08000b78 <SR_MENU_Display>:

void SR_MENU_Display(){
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af02      	add	r7, sp, #8
	if(MENU_Data.is_changing_menu){
 8000b7e:	4b55      	ldr	r3, [pc, #340]	; (8000cd4 <SR_MENU_Display+0x15c>)
 8000b80:	7a5b      	ldrb	r3, [r3, #9]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d007      	beq.n	8000b96 <SR_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 8000b86:	4b53      	ldr	r3, [pc, #332]	; (8000cd4 <SR_MENU_Display+0x15c>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f004 fe42 	bl	8005814 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8000b90:	4b50      	ldr	r3, [pc, #320]	; (8000cd4 <SR_MENU_Display+0x15c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	725a      	strb	r2, [r3, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 8000b96:	4b4f      	ldr	r3, [pc, #316]	; (8000cd4 <SR_MENU_Display+0x15c>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f004 fe4c 	bl	800583c <LCD_Set_Cursor>
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 8000ba4:	4b4c      	ldr	r3, [pc, #304]	; (8000cd8 <SR_MENU_Display+0x160>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b05      	cmp	r3, #5
 8000baa:	d80c      	bhi.n	8000bc6 <SR_MENU_Display+0x4e>
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[SR_MENU_Data.state]);
 8000bac:	4b49      	ldr	r3, [pc, #292]	; (8000cd4 <SR_MENU_Display+0x15c>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	4a49      	ldr	r2, [pc, #292]	; (8000cd8 <SR_MENU_Display+0x160>)
 8000bb2:	7812      	ldrb	r2, [r2, #0]
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4a49      	ldr	r2, [pc, #292]	; (8000cdc <SR_MENU_Display+0x164>)
 8000bb8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000bbc:	4948      	ldr	r1, [pc, #288]	; (8000ce0 <SR_MENU_Display+0x168>)
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f004 fdea 	bl	8005798 <LCD_Write>
 8000bc4:	e005      	b.n	8000bd2 <SR_MENU_Display+0x5a>
	} else{
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
 8000bc6:	4b43      	ldr	r3, [pc, #268]	; (8000cd4 <SR_MENU_Display+0x15c>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	4946      	ldr	r1, [pc, #280]	; (8000ce4 <SR_MENU_Display+0x16c>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f004 fde3 	bl	8005798 <LCD_Write>
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 1);
 8000bd2:	4b40      	ldr	r3, [pc, #256]	; (8000cd4 <SR_MENU_Display+0x15c>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2103      	movs	r1, #3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 fe2e 	bl	800583c <LCD_Set_Cursor>
	char t_day_string[] = "SUN";
 8000be0:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <SR_MENU_Display+0x170>)
 8000be2:	607b      	str	r3, [r7, #4]
	if(SR_MENU_Data.new_realtime.system_day > 0){
 8000be4:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <SR_MENU_Display+0x160>)
 8000be6:	78db      	ldrb	r3, [r3, #3]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d00a      	beq.n	8000c02 <SR_MENU_Display+0x8a>
		strcpy(t_day_string, DAY_Str[SR_MENU_Data.new_realtime.system_day - 1]);
 8000bec:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <SR_MENU_Display+0x160>)
 8000bee:	78db      	ldrb	r3, [r3, #3]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4a3d      	ldr	r2, [pc, #244]	; (8000cec <SR_MENU_Display+0x174>)
 8000bf6:	441a      	add	r2, r3
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f005 f8e1 	bl	8005dc4 <strcpy>
	}
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000c02:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <SR_MENU_Display+0x15c>)
 8000c04:	6858      	ldr	r0, [r3, #4]
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <SR_MENU_Display+0x160>)
 8000c08:	791b      	ldrb	r3, [r3, #4]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000c0a:	461c      	mov	r4, r3
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);
 8000c0c:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <SR_MENU_Display+0x160>)
 8000c0e:	795b      	ldrb	r3, [r3, #5]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000c10:	4619      	mov	r1, r3
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <SR_MENU_Display+0x160>)
 8000c14:	799b      	ldrb	r3, [r3, #6]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000c16:	1d3a      	adds	r2, r7, #4
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	9100      	str	r1, [sp, #0]
 8000c1c:	4623      	mov	r3, r4
 8000c1e:	4934      	ldr	r1, [pc, #208]	; (8000cf0 <SR_MENU_Display+0x178>)
 8000c20:	f004 fdba 	bl	8005798 <LCD_Write>

	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour / 10, 2, 2);
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <SR_MENU_Display+0x160>)
 8000c26:	785b      	ldrb	r3, [r3, #1]
 8000c28:	4a32      	ldr	r2, [pc, #200]	; (8000cf4 <SR_MENU_Display+0x17c>)
 8000c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2202      	movs	r2, #2
 8000c34:	2102      	movs	r1, #2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fd18 	bl	800066c <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour % 10, 6, 2);
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <SR_MENU_Display+0x160>)
 8000c3e:	785a      	ldrb	r2, [r3, #1]
 8000c40:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <SR_MENU_Display+0x17c>)
 8000c42:	fba3 1302 	umull	r1, r3, r3, r2
 8000c46:	08d9      	lsrs	r1, r3, #3
 8000c48:	460b      	mov	r3, r1
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2202      	movs	r2, #2
 8000c56:	2106      	movs	r1, #6
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fd07 	bl	800066c <MAIN_MENU_Display_Num>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <SR_MENU_Display+0x15c>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2202      	movs	r2, #2
 8000c64:	2109      	movs	r1, #9
 8000c66:	4618      	mov	r0, r3
 8000c68:	f004 fde8 	bl	800583c <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <SR_MENU_Display+0x15c>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	212e      	movs	r1, #46	; 0x2e
 8000c72:	4618      	mov	r0, r3
 8000c74:	f004 fe73 	bl	800595e <LCD_Send_Data>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <SR_MENU_Display+0x15c>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	2109      	movs	r1, #9
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fddb 	bl	800583c <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <SR_MENU_Display+0x15c>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	212e      	movs	r1, #46	; 0x2e
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 fe66 	bl	800595e <LCD_Send_Data>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_minute / 10, 10, 2);
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <SR_MENU_Display+0x160>)
 8000c94:	789b      	ldrb	r3, [r3, #2]
 8000c96:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <SR_MENU_Display+0x17c>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	08db      	lsrs	r3, r3, #3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	210a      	movs	r1, #10
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fce1 	bl	800066c <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_minute % 10, 14, 2);
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <SR_MENU_Display+0x160>)
 8000cac:	789a      	ldrb	r2, [r3, #2]
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <SR_MENU_Display+0x17c>)
 8000cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8000cb4:	08d9      	lsrs	r1, r3, #3
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	440b      	add	r3, r1
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	210e      	movs	r1, #14
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fcd0 	bl	800066c <MAIN_MENU_Display_Num>
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	2000010c 	.word	0x2000010c
 8000cd8:	20000118 	.word	0x20000118
 8000cdc:	20000068 	.word	0x20000068
 8000ce0:	08006584 	.word	0x08006584
 8000ce4:	08006598 	.word	0x08006598
 8000ce8:	004e5553 	.word	0x004e5553
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	080065b0 	.word	0x080065b0
 8000cf4:	cccccccd 	.word	0xcccccccd

08000cf8 <BTN_Short_Pressing_Callback>:

BUTTON_HandleTypedef h_encoder_button;
ENCODER_HandleTypeDef h_encoder;
extern TIM_HandleTypeDef htim2;

void BTN_Short_Pressing_Callback(BUTTON_HandleTypedef *p_ButtonX){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	if(p_ButtonX == &h_encoder_button){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <BTN_Short_Pressing_Callback+0x48>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d113      	bne.n	8000d30 <BTN_Short_Pressing_Callback+0x38>
		switch(MENU_Data.menu_type){
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <BTN_Short_Pressing_Callback+0x4c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d811      	bhi.n	8000d34 <BTN_Short_Pressing_Callback+0x3c>
 8000d10:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <BTN_Short_Pressing_Callback+0x20>)
 8000d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d16:	bf00      	nop
 8000d18:	08000d35 	.word	0x08000d35
 8000d1c:	08000d29 	.word	0x08000d29
 8000d20:	08000d35 	.word	0x08000d35
 8000d24:	08000d35 	.word	0x08000d35
			case MAIN_MENU:

				break;
			case SETTING_REALTIME_MENU:
				SR_MENU_Change_Setting_State(INCREASE);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff fe4d 	bl	80009c8 <SR_MENU_Change_Setting_State>
				break;
 8000d2e:	e002      	b.n	8000d36 <BTN_Short_Pressing_Callback+0x3e>

				break;
			default:
				break;
		}
	}
 8000d30:	bf00      	nop
 8000d32:	e000      	b.n	8000d36 <BTN_Short_Pressing_Callback+0x3e>
				break;
 8000d34:	bf00      	nop
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000120 	.word	0x20000120
 8000d44:	2000010c 	.word	0x2000010c

08000d48 <BTN_Long_Pressing_Callback>:

void BTN_Long_Pressing_Callback(BUTTON_HandleTypedef *p_ButtonX){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	if(p_ButtonX == &h_encoder_button){
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <BTN_Long_Pressing_Callback+0x4c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d116      	bne.n	8000d86 <BTN_Long_Pressing_Callback+0x3e>
		switch(MENU_Data.menu_type){
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <BTN_Long_Pressing_Callback+0x50>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d814      	bhi.n	8000d8a <BTN_Long_Pressing_Callback+0x42>
 8000d60:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <BTN_Long_Pressing_Callback+0x20>)
 8000d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d66:	bf00      	nop
 8000d68:	08000d79 	.word	0x08000d79
 8000d6c:	08000d7f 	.word	0x08000d7f
 8000d70:	08000d8b 	.word	0x08000d8b
 8000d74:	08000d8b 	.word	0x08000d8b
			case MAIN_MENU:
				SR_MENU_Set_State();
 8000d78:	f7ff fe02 	bl	8000980 <SR_MENU_Set_State>
				break;
 8000d7c:	e006      	b.n	8000d8c <BTN_Long_Pressing_Callback+0x44>
			case SETTING_REALTIME_MENU:
				SR_MENU_Change_Setting_State(DECREASE);
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff fe22 	bl	80009c8 <SR_MENU_Change_Setting_State>
				break;
 8000d84:	e002      	b.n	8000d8c <BTN_Long_Pressing_Callback+0x44>

				break;
			default:
				break;
		}
	}
 8000d86:	bf00      	nop
 8000d88:	e000      	b.n	8000d8c <BTN_Long_Pressing_Callback+0x44>
				break;
 8000d8a:	bf00      	nop
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000120 	.word	0x20000120
 8000d98:	2000010c 	.word	0x2000010c

08000d9c <ENCODER_Forward_Callback>:

void ENCODER_Forward_Callback(ENCODER_HandleTypeDef *p_encoder){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	if(p_encoder == &h_encoder){
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <ENCODER_Forward_Callback+0x48>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d113      	bne.n	8000dd4 <ENCODER_Forward_Callback+0x38>
		switch(MENU_Data.menu_type){
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <ENCODER_Forward_Callback+0x4c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d811      	bhi.n	8000dd8 <ENCODER_Forward_Callback+0x3c>
 8000db4:	a201      	add	r2, pc, #4	; (adr r2, 8000dbc <ENCODER_Forward_Callback+0x20>)
 8000db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dba:	bf00      	nop
 8000dbc:	08000dd9 	.word	0x08000dd9
 8000dc0:	08000dcd 	.word	0x08000dcd
 8000dc4:	08000dd9 	.word	0x08000dd9
 8000dc8:	08000dd9 	.word	0x08000dd9
			case MAIN_MENU:

				break;
			case SETTING_REALTIME_MENU:
				SR_MENU_Set_Value(INCREASE);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f7ff fe31 	bl	8000a34 <SR_MENU_Set_Value>
				break;
 8000dd2:	e002      	b.n	8000dda <ENCODER_Forward_Callback+0x3e>

				break;
			default:
				break;
		}
	}
 8000dd4:	bf00      	nop
 8000dd6:	e000      	b.n	8000dda <ENCODER_Forward_Callback+0x3e>
				break;
 8000dd8:	bf00      	nop
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000138 	.word	0x20000138
 8000de8:	2000010c 	.word	0x2000010c

08000dec <ENCODER_Backward_Callback>:

void ENCODER_Backward_Callback(ENCODER_HandleTypeDef *p_encoder){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	if(p_encoder == &h_encoder){
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <ENCODER_Backward_Callback+0x48>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d113      	bne.n	8000e24 <ENCODER_Backward_Callback+0x38>
		switch(MENU_Data.menu_type){
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <ENCODER_Backward_Callback+0x4c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d811      	bhi.n	8000e28 <ENCODER_Backward_Callback+0x3c>
 8000e04:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <ENCODER_Backward_Callback+0x20>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e29 	.word	0x08000e29
 8000e10:	08000e1d 	.word	0x08000e1d
 8000e14:	08000e29 	.word	0x08000e29
 8000e18:	08000e29 	.word	0x08000e29
			case MAIN_MENU:

				break;
			case SETTING_REALTIME_MENU:
				SR_MENU_Set_Value(DECREASE);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff fe09 	bl	8000a34 <SR_MENU_Set_Value>
				break;
 8000e22:	e002      	b.n	8000e2a <ENCODER_Backward_Callback+0x3e>

				break;
			default:
				break;
		}
	}
 8000e24:	bf00      	nop
 8000e26:	e000      	b.n	8000e2a <ENCODER_Backward_Callback+0x3e>
				break;
 8000e28:	bf00      	nop
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000138 	.word	0x20000138
 8000e38:	2000010c 	.word	0x2000010c

08000e3c <ROTARY_ENCODER_Init>:

void ROTARY_ENCODER_Init(){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	BUTTON_Init(&h_encoder_button, GPIOA, GPIO_PIN_1);
 8000e40:	2202      	movs	r2, #2
 8000e42:	490a      	ldr	r1, [pc, #40]	; (8000e6c <ROTARY_ENCODER_Init+0x30>)
 8000e44:	480a      	ldr	r0, [pc, #40]	; (8000e70 <ROTARY_ENCODER_Init+0x34>)
 8000e46:	f004 fe5d 	bl	8005b04 <BUTTON_Init>
	BUTTON_Set_Callback_Function(NULL, NULL, BTN_Short_Pressing_Callback, BTN_Long_Pressing_Callback);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <ROTARY_ENCODER_Init+0x38>)
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <ROTARY_ENCODER_Init+0x3c>)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2000      	movs	r0, #0
 8000e52:	f004 fe79 	bl	8005b48 <BUTTON_Set_Callback_Function>
	ENCODER_Init(&h_encoder, &htim2);
 8000e56:	4909      	ldr	r1, [pc, #36]	; (8000e7c <ROTARY_ENCODER_Init+0x40>)
 8000e58:	4809      	ldr	r0, [pc, #36]	; (8000e80 <ROTARY_ENCODER_Init+0x44>)
 8000e5a:	f004 fbbb 	bl	80055d4 <ENCODER_Init>
	ENCODER_Set_Callback_Function(ENCODER_Forward_Callback, ENCODER_Backward_Callback);
 8000e5e:	4909      	ldr	r1, [pc, #36]	; (8000e84 <ROTARY_ENCODER_Init+0x48>)
 8000e60:	4809      	ldr	r0, [pc, #36]	; (8000e88 <ROTARY_ENCODER_Init+0x4c>)
 8000e62:	f004 fbcb 	bl	80055fc <ENCODER_Set_Callback_Function>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	20000120 	.word	0x20000120
 8000e74:	08000d49 	.word	0x08000d49
 8000e78:	08000cf9 	.word	0x08000cf9
 8000e7c:	20000200 	.word	0x20000200
 8000e80:	20000138 	.word	0x20000138
 8000e84:	08000ded 	.word	0x08000ded
 8000e88:	08000d9d 	.word	0x08000d9d

08000e8c <ROTARY_ENCODER_Handle>:

void ROTARY_ENCODER_Handle(){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	BUTTON_Handle(&h_encoder_button);
 8000e90:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <ROTARY_ENCODER_Handle+0x14>)
 8000e92:	f004 fda5 	bl	80059e0 <BUTTON_Handle>
	ENCODER_Handle(&h_encoder);
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <ROTARY_ENCODER_Handle+0x18>)
 8000e98:	f004 fbdc 	bl	8005654 <ENCODER_Handle>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000120 	.word	0x20000120
 8000ea4:	20000138 	.word	0x20000138

08000ea8 <REALTIME_Init>:
DS3231_HandleTypeDef hds3231;
REALTIME_DATA_HandleTypeDef REALTIME_Data;

static uint32_t timer = 0;

void REALTIME_Init(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	DS3231_Init(&hds3231, &hi2c2);
 8000eac:	491e      	ldr	r1, [pc, #120]	; (8000f28 <REALTIME_Init+0x80>)
 8000eae:	481f      	ldr	r0, [pc, #124]	; (8000f2c <REALTIME_Init+0x84>)
 8000eb0:	f004 fa60 	bl	8005374 <DS3231_Init>
	REALTIME_Data.system_day = 1;
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <REALTIME_Init+0x88>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = 0;
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <REALTIME_Init+0x88>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = 0;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <REALTIME_Init+0x88>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = 1;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <REALTIME_Init+0x88>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = 1;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <REALTIME_Init+0x88>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = 0;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <REALTIME_Init+0x88>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	715a      	strb	r2, [r3, #5]

//	DS3231_Set_Time(&hds3231, 19, 54, 0, 6);
//	DS3231_Set_Date(&hds3231, 2, 9, 22);

	if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8000ed8:	4814      	ldr	r0, [pc, #80]	; (8000f2c <REALTIME_Init+0x84>)
 8000eda:	f004 fa93 	bl	8005404 <DS3231_Get_Time>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d01f      	beq.n	8000f24 <REALTIME_Init+0x7c>
 8000ee4:	4811      	ldr	r0, [pc, #68]	; (8000f2c <REALTIME_Init+0x84>)
 8000ee6:	f004 fafc 	bl	80054e2 <DS3231_Get_Date>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d019      	beq.n	8000f24 <REALTIME_Init+0x7c>
		return;
	}

	REALTIME_Data.system_day = hds3231.current_day;
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <REALTIME_Init+0x84>)
 8000ef2:	78da      	ldrb	r2, [r3, #3]
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <REALTIME_Init+0x88>)
 8000ef6:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = hds3231.current_hour;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <REALTIME_Init+0x84>)
 8000efa:	781a      	ldrb	r2, [r3, #0]
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <REALTIME_Init+0x88>)
 8000efe:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = hds3231.current_minute;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <REALTIME_Init+0x84>)
 8000f02:	785a      	ldrb	r2, [r3, #1]
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <REALTIME_Init+0x88>)
 8000f06:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = hds3231.current_date;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <REALTIME_Init+0x84>)
 8000f0a:	791a      	ldrb	r2, [r3, #4]
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <REALTIME_Init+0x88>)
 8000f0e:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = hds3231.current_month;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <REALTIME_Init+0x84>)
 8000f12:	795a      	ldrb	r2, [r3, #5]
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <REALTIME_Init+0x88>)
 8000f16:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = hds3231.current_year;
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <REALTIME_Init+0x84>)
 8000f1a:	88db      	ldrh	r3, [r3, #6]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <REALTIME_Init+0x88>)
 8000f20:	715a      	strb	r2, [r3, #5]
 8000f22:	e000      	b.n	8000f26 <REALTIME_Init+0x7e>
		return;
 8000f24:	bf00      	nop
}
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200001ac 	.word	0x200001ac
 8000f2c:	20000140 	.word	0x20000140
 8000f30:	2000014c 	.word	0x2000014c

08000f34 <REALTIME_Handle>:

void REALTIME_Handle(){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - timer > CHECKING_REAL_TIME_CYCLE){
 8000f38:	f000 fd74 	bl	8001a24 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <REALTIME_Handle+0x80>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d932      	bls.n	8000fb2 <REALTIME_Handle+0x7e>
		if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8000f4c:	481a      	ldr	r0, [pc, #104]	; (8000fb8 <REALTIME_Handle+0x84>)
 8000f4e:	f004 fa59 	bl	8005404 <DS3231_Get_Time>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d02b      	beq.n	8000fb0 <REALTIME_Handle+0x7c>
 8000f58:	4817      	ldr	r0, [pc, #92]	; (8000fb8 <REALTIME_Handle+0x84>)
 8000f5a:	f004 fac2 	bl	80054e2 <DS3231_Get_Date>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d025      	beq.n	8000fb0 <REALTIME_Handle+0x7c>
			return;
		}

		if(REALTIME_Data.system_minute != hds3231.current_minute){
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <REALTIME_Handle+0x88>)
 8000f66:	785a      	ldrb	r2, [r3, #1]
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <REALTIME_Handle+0x84>)
 8000f6a:	785b      	ldrb	r3, [r3, #1]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d005      	beq.n	8000f7c <REALTIME_Handle+0x48>
			if(MENU_Data.menu_type == MAIN_MENU){
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <REALTIME_Handle+0x8c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <REALTIME_Handle+0x48>
				MAIN_MENU_Update_Value();
 8000f78:	f7ff fcb2 	bl	80008e0 <MAIN_MENU_Update_Value>
			}
		}

		REALTIME_Data.system_day = hds3231.current_day;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <REALTIME_Handle+0x84>)
 8000f7e:	78da      	ldrb	r2, [r3, #3]
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <REALTIME_Handle+0x88>)
 8000f82:	709a      	strb	r2, [r3, #2]
		REALTIME_Data.system_hour = hds3231.current_hour;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <REALTIME_Handle+0x84>)
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <REALTIME_Handle+0x88>)
 8000f8a:	701a      	strb	r2, [r3, #0]
		REALTIME_Data.system_minute = hds3231.current_minute;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <REALTIME_Handle+0x84>)
 8000f8e:	785a      	ldrb	r2, [r3, #1]
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <REALTIME_Handle+0x88>)
 8000f92:	705a      	strb	r2, [r3, #1]
		REALTIME_Data.system_date = hds3231.current_date;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <REALTIME_Handle+0x84>)
 8000f96:	791a      	ldrb	r2, [r3, #4]
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <REALTIME_Handle+0x88>)
 8000f9a:	70da      	strb	r2, [r3, #3]
		REALTIME_Data.system_month = hds3231.current_month;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <REALTIME_Handle+0x84>)
 8000f9e:	795a      	ldrb	r2, [r3, #5]
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <REALTIME_Handle+0x88>)
 8000fa2:	711a      	strb	r2, [r3, #4]
		REALTIME_Data.system_year = hds3231.current_year;
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <REALTIME_Handle+0x84>)
 8000fa6:	88db      	ldrh	r3, [r3, #6]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <REALTIME_Handle+0x88>)
 8000fac:	715a      	strb	r2, [r3, #5]
 8000fae:	e000      	b.n	8000fb2 <REALTIME_Handle+0x7e>
			return;
 8000fb0:	bf00      	nop
	}
}
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000154 	.word	0x20000154
 8000fb8:	20000140 	.word	0x20000140
 8000fbc:	2000014c 	.word	0x2000014c
 8000fc0:	2000010c 	.word	0x2000010c

08000fc4 <REALTIME_Set_New_Realtime>:

void REALTIME_Set_New_Realtime(REALTIME_DATA_HandleTypeDef *p_new_realtime){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
	DS3231_Set_Time(&hds3231, p_new_realtime->system_hour, p_new_realtime->system_minute, 0, p_new_realtime->system_day);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7819      	ldrb	r1, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	785a      	ldrb	r2, [r3, #1]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	789b      	ldrb	r3, [r3, #2]
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	4813      	ldr	r0, [pc, #76]	; (800102c <REALTIME_Set_New_Realtime+0x68>)
 8000fde:	f004 f9d6 	bl	800538e <DS3231_Set_Time>
	DS3231_Set_Date(&hds3231, p_new_realtime->system_date, p_new_realtime->system_month, p_new_realtime->system_year);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	78d9      	ldrb	r1, [r3, #3]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	791a      	ldrb	r2, [r3, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	795b      	ldrb	r3, [r3, #5]
 8000fee:	480f      	ldr	r0, [pc, #60]	; (800102c <REALTIME_Set_New_Realtime+0x68>)
 8000ff0:	f004 fa45 	bl	800547e <DS3231_Set_Date>

	REALTIME_Data.system_day = p_new_realtime->system_day;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	789a      	ldrb	r2, [r3, #2]
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <REALTIME_Set_New_Realtime+0x6c>)
 8000ffa:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = p_new_realtime->system_hour;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <REALTIME_Set_New_Realtime+0x6c>)
 8001002:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = p_new_realtime->system_minute;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	785a      	ldrb	r2, [r3, #1]
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <REALTIME_Set_New_Realtime+0x6c>)
 800100a:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = p_new_realtime->system_date;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	78da      	ldrb	r2, [r3, #3]
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <REALTIME_Set_New_Realtime+0x6c>)
 8001012:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = p_new_realtime->system_month;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	791a      	ldrb	r2, [r3, #4]
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <REALTIME_Set_New_Realtime+0x6c>)
 800101a:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = p_new_realtime->system_year;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	795a      	ldrb	r2, [r3, #5]
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <REALTIME_Set_New_Realtime+0x6c>)
 8001022:	715a      	strb	r2, [r3, #5]
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000140 	.word	0x20000140
 8001030:	2000014c 	.word	0x2000014c

08001034 <TEMP_AND_HUM_Handle>:

LCD_I2C_HandleTypeDef hlcd;
DHT_HandleTypeDef hdht;

#define CHECKING_SENSOR_TIME	2000
void TEMP_AND_HUM_Handle(){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	static uint32_t timer = 0;
	static uint8_t system_temperature = 0;
	static uint8_t system_huminity = 0;
	if(HAL_GetTick() - timer >= CHECKING_SENSOR_TIME){
 8001038:	f000 fcf4 	bl	8001a24 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <TEMP_AND_HUM_Handle+0x88>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001048:	d335      	bcc.n	80010b6 <TEMP_AND_HUM_Handle+0x82>
		DHT_Read_Value(&hdht);
 800104a:	481d      	ldr	r0, [pc, #116]	; (80010c0 <TEMP_AND_HUM_Handle+0x8c>)
 800104c:	f004 f8f9 	bl	8005242 <DHT_Read_Value>
		if(system_huminity != (uint8_t)hdht.huminity || system_temperature != (uint8_t)hdht.temperature){
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <TEMP_AND_HUM_Handle+0x8c>)
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa8d 	bl	8000574 <__aeabi_f2uiz>
 800105a:	4603      	mov	r3, r0
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <TEMP_AND_HUM_Handle+0x90>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d10a      	bne.n	800107c <TEMP_AND_HUM_Handle+0x48>
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <TEMP_AND_HUM_Handle+0x8c>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa82 	bl	8000574 <__aeabi_f2uiz>
 8001070:	4603      	mov	r3, r0
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <TEMP_AND_HUM_Handle+0x94>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d017      	beq.n	80010ac <TEMP_AND_HUM_Handle+0x78>
			system_huminity = hdht.huminity;
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <TEMP_AND_HUM_Handle+0x8c>)
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa77 	bl	8000574 <__aeabi_f2uiz>
 8001086:	4603      	mov	r3, r0
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <TEMP_AND_HUM_Handle+0x90>)
 800108c:	701a      	strb	r2, [r3, #0]
			system_temperature = hdht.temperature;
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <TEMP_AND_HUM_Handle+0x8c>)
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa6e 	bl	8000574 <__aeabi_f2uiz>
 8001098:	4603      	mov	r3, r0
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <TEMP_AND_HUM_Handle+0x94>)
 800109e:	701a      	strb	r2, [r3, #0]
			if(MENU_Data.menu_type == MAIN_MENU){
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <TEMP_AND_HUM_Handle+0x98>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <TEMP_AND_HUM_Handle+0x78>
				MAIN_MENU_Update_Value();
 80010a8:	f7ff fc1a 	bl	80008e0 <MAIN_MENU_Update_Value>
			}
		}

		timer = HAL_GetTick();
 80010ac:	f000 fcba 	bl	8001a24 <HAL_GetTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a02      	ldr	r2, [pc, #8]	; (80010bc <TEMP_AND_HUM_Handle+0x88>)
 80010b4:	6013      	str	r3, [r2, #0]
	}
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200002f4 	.word	0x200002f4
 80010c0:	200002e0 	.word	0x200002e0
 80010c4:	200002f8 	.word	0x200002f8
 80010c8:	200002f9 	.word	0x200002f9
 80010cc:	2000010c 	.word	0x2000010c

080010d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d6:	f000 fc4d 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010da:	f000 f84d 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010de:	f000 f9b5 	bl	800144c <MX_GPIO_Init>
  MX_I2C1_Init();
 80010e2:	f000 f88b 	bl	80011fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010e6:	f000 f987 	bl	80013f8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80010ea:	f000 f8b5 	bl	8001258 <MX_I2C2_Init>
  MX_TIM4_Init();
 80010ee:	f000 f935 	bl	800135c <MX_TIM4_Init>
  MX_TIM2_Init();
 80010f2:	f000 f8df 	bl	80012b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 80010f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010fa:	f000 fc9d 	bl	8001a38 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001104:	4815      	ldr	r0, [pc, #84]	; (800115c <main+0x8c>)
 8001106:	f001 f814 	bl	8002132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800110a:	2201      	movs	r2, #1
 800110c:	2104      	movs	r1, #4
 800110e:	4814      	ldr	r0, [pc, #80]	; (8001160 <main+0x90>)
 8001110:	f001 f80f 	bl	8002132 <HAL_GPIO_WritePin>

  REALTIME_Init();
 8001114:	f7ff fec8 	bl	8000ea8 <REALTIME_Init>
  DHT_Init(&hdht, &htim4, DHT11, GPIOA, GPIO_PIN_0);
 8001118:	2301      	movs	r3, #1
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <main+0x90>)
 800111e:	2200      	movs	r2, #0
 8001120:	4910      	ldr	r1, [pc, #64]	; (8001164 <main+0x94>)
 8001122:	4811      	ldr	r0, [pc, #68]	; (8001168 <main+0x98>)
 8001124:	f004 f86d 	bl	8005202 <DHT_Init>
  LCD_Init(&hlcd, &hi2c1, 20, 4, 0x4E);
 8001128:	234e      	movs	r3, #78	; 0x4e
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2304      	movs	r3, #4
 800112e:	2214      	movs	r2, #20
 8001130:	490e      	ldr	r1, [pc, #56]	; (800116c <main+0x9c>)
 8001132:	480f      	ldr	r0, [pc, #60]	; (8001170 <main+0xa0>)
 8001134:	f004 fac4 	bl	80056c0 <LCD_Init>
  MENU_Init(&hlcd);
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <main+0xa0>)
 800113a:	f7ff fbdf 	bl	80008fc <MENU_Init>
  ROTARY_ENCODER_Init();
 800113e:	f7ff fe7d 	bl	8000e3c <ROTARY_ENCODER_Init>

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001142:	213c      	movs	r1, #60	; 0x3c
 8001144:	480b      	ldr	r0, [pc, #44]	; (8001174 <main+0xa4>)
 8001146:	f002 ff09 	bl	8003f5c <HAL_TIM_Encoder_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  REALTIME_Handle();
 800114a:	f7ff fef3 	bl	8000f34 <REALTIME_Handle>

	  TEMP_AND_HUM_Handle();
 800114e:	f7ff ff71 	bl	8001034 <TEMP_AND_HUM_Handle>

	  MENU_Handle();
 8001152:	f7ff fbeb 	bl	800092c <MENU_Handle>

	  ROTARY_ENCODER_Handle();
 8001156:	f7ff fe99 	bl	8000e8c <ROTARY_ENCODER_Handle>
	  REALTIME_Handle();
 800115a:	e7f6      	b.n	800114a <main+0x7a>
 800115c:	40011000 	.word	0x40011000
 8001160:	40010800 	.word	0x40010800
 8001164:	20000248 	.word	0x20000248
 8001168:	200002e0 	.word	0x200002e0
 800116c:	20000158 	.word	0x20000158
 8001170:	200002d4 	.word	0x200002d4
 8001174:	20000200 	.word	0x20000200

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b090      	sub	sp, #64	; 0x40
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	2228      	movs	r2, #40	; 0x28
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f004 fd28 	bl	8005bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119e:	2301      	movs	r3, #1
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a2:	2310      	movs	r3, #16
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a6:	2302      	movs	r3, #2
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011aa:	2300      	movs	r3, #0
 80011ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011ae:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 f953 	bl	8003464 <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80011c4:	f000 f9ae 	bl	8001524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2302      	movs	r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2102      	movs	r1, #2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 fbc0 	bl	8003968 <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80011ee:	f000 f999 	bl	8001524 <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3740      	adds	r7, #64	; 0x40
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_I2C1_Init+0x50>)
 8001202:	4a13      	ldr	r2, [pc, #76]	; (8001250 <MX_I2C1_Init+0x54>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_I2C1_Init+0x50>)
 8001208:	4a12      	ldr	r2, [pc, #72]	; (8001254 <MX_I2C1_Init+0x58>)
 800120a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_I2C1_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_I2C1_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_I2C1_Init+0x50>)
 800121a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MX_I2C1_Init+0x50>)
 800123a:	f000 ff93 	bl	8002164 <HAL_I2C_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001244:	f000 f96e 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000158 	.word	0x20000158
 8001250:	40005400 	.word	0x40005400
 8001254:	000186a0 	.word	0x000186a0

08001258 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_I2C2_Init+0x50>)
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_I2C2_Init+0x54>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_I2C2_Init+0x50>)
 8001264:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_I2C2_Init+0x58>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_I2C2_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_I2C2_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_I2C2_Init+0x50>)
 8001276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_I2C2_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_I2C2_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_I2C2_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_I2C2_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_I2C2_Init+0x50>)
 8001296:	f000 ff65 	bl	8002164 <HAL_I2C_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012a0:	f000 f940 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200001ac 	.word	0x200001ac
 80012ac:	40005800 	.word	0x40005800
 80012b0:	000186a0 	.word	0x000186a0

080012b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2224      	movs	r2, #36	; 0x24
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fc8a 	bl	8005bdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_TIM2_Init+0xa4>)
 80012d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <MX_TIM2_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <MX_TIM2_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_TIM2_Init+0xa4>)
 80012e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_TIM2_Init+0xa4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_TIM2_Init+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012f8:	2303      	movs	r3, #3
 80012fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001300:	2301      	movs	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001308:	230a      	movs	r3, #10
 800130a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001310:	2301      	movs	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001318:	230a      	movs	r3, #10
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_TIM2_Init+0xa4>)
 8001324:	f002 fd78 	bl	8003e18 <HAL_TIM_Encoder_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800132e:	f000 f8f9 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_TIM2_Init+0xa4>)
 8001340:	f003 f9c6 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800134a:	f000 f8eb 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3730      	adds	r7, #48	; 0x30
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000200 	.word	0x20000200

0800135c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_TIM4_Init+0x94>)
 800137a:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <MX_TIM4_Init+0x98>)
 800137c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_TIM4_Init+0x94>)
 8001380:	223f      	movs	r2, #63	; 0x3f
 8001382:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_TIM4_Init+0x94>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_TIM4_Init+0x94>)
 800138c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001390:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_TIM4_Init+0x94>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_TIM4_Init+0x94>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800139e:	4814      	ldr	r0, [pc, #80]	; (80013f0 <MX_TIM4_Init+0x94>)
 80013a0:	f002 fc7a 	bl	8003c98 <HAL_TIM_Base_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80013aa:	f000 f8bb 	bl	8001524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	4619      	mov	r1, r3
 80013ba:	480d      	ldr	r0, [pc, #52]	; (80013f0 <MX_TIM4_Init+0x94>)
 80013bc:	f002 ff84 	bl	80042c8 <HAL_TIM_ConfigClockSource>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80013c6:	f000 f8ad 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013d2:	463b      	mov	r3, r7
 80013d4:	4619      	mov	r1, r3
 80013d6:	4806      	ldr	r0, [pc, #24]	; (80013f0 <MX_TIM4_Init+0x94>)
 80013d8:	f003 f97a 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80013e2:	f000 f89f 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000248 	.word	0x20000248
 80013f4:	40000800 	.word	0x40000800

080013f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_USART1_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001430:	f003 f9be 	bl	80047b0 <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f000 f873 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000290 	.word	0x20000290
 8001448:	40013800 	.word	0x40013800

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001460:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <MX_GPIO_Init+0xcc>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a2c      	ldr	r2, [pc, #176]	; (8001518 <MX_GPIO_Init+0xcc>)
 8001466:	f043 0310 	orr.w	r3, r3, #16
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <MX_GPIO_Init+0xcc>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <MX_GPIO_Init+0xcc>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a26      	ldr	r2, [pc, #152]	; (8001518 <MX_GPIO_Init+0xcc>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <MX_GPIO_Init+0xcc>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <MX_GPIO_Init+0xcc>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a20      	ldr	r2, [pc, #128]	; (8001518 <MX_GPIO_Init+0xcc>)
 8001496:	f043 0308 	orr.w	r3, r3, #8
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <MX_GPIO_Init+0xcc>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ae:	481b      	ldr	r0, [pc, #108]	; (800151c <MX_GPIO_Init+0xd0>)
 80014b0:	f000 fe3f 	bl	8002132 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2105      	movs	r1, #5
 80014b8:	4819      	ldr	r0, [pc, #100]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014ba:	f000 fe3a 	bl	8002132 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	4619      	mov	r1, r3
 80014d6:	4811      	ldr	r0, [pc, #68]	; (800151c <MX_GPIO_Init+0xd0>)
 80014d8:	f000 fc90 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80014dc:	2305      	movs	r3, #5
 80014de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	4619      	mov	r1, r3
 80014f2:	480b      	ldr	r0, [pc, #44]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014f4:	f000 fc82 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014f8:	2302      	movs	r3, #2
 80014fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4619      	mov	r1, r3
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_GPIO_Init+0xd4>)
 800150c:	f000 fc76 	bl	8001dfc <HAL_GPIO_Init>

}
 8001510:	bf00      	nop
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	40011000 	.word	0x40011000
 8001520:	40010800 	.word	0x40010800

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	e7fe      	b.n	800152c <Error_Handler+0x8>
	...

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_MspInit+0x5c>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	4a14      	ldr	r2, [pc, #80]	; (800158c <HAL_MspInit+0x5c>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6193      	str	r3, [r2, #24]
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_MspInit+0x5c>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_MspInit+0x5c>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_MspInit+0x5c>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	61d3      	str	r3, [r2, #28]
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_MspInit+0x5c>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_MspInit+0x60>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_MspInit+0x60>)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40021000 	.word	0x40021000
 8001590:	40010000 	.word	0x40010000

08001594 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0318 	add.w	r3, r7, #24
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a2b      	ldr	r2, [pc, #172]	; (800165c <HAL_I2C_MspInit+0xc8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d124      	bne.n	80015fe <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b4:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 80015ba:	f043 0308 	orr.w	r3, r3, #8
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015cc:	23c0      	movs	r3, #192	; 0xc0
 80015ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d0:	2312      	movs	r3, #18
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 0318 	add.w	r3, r7, #24
 80015dc:	4619      	mov	r1, r3
 80015de:	4821      	ldr	r0, [pc, #132]	; (8001664 <HAL_I2C_MspInit+0xd0>)
 80015e0:	f000 fc0c 	bl	8001dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e4:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 80015ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ee:	61d3      	str	r3, [r2, #28]
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015fc:	e029      	b.n	8001652 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a19      	ldr	r2, [pc, #100]	; (8001668 <HAL_I2C_MspInit+0xd4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d124      	bne.n	8001652 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 800160e:	f043 0308 	orr.w	r3, r3, #8
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001620:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001626:	2312      	movs	r3, #18
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 0318 	add.w	r3, r7, #24
 8001632:	4619      	mov	r1, r3
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <HAL_I2C_MspInit+0xd0>)
 8001636:	f000 fbe1 	bl	8001dfc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 8001640:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40005400 	.word	0x40005400
 8001660:	40021000 	.word	0x40021000
 8001664:	40010c00 	.word	0x40010c00
 8001668:	40005800 	.word	0x40005800

0800166c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800168a:	d156      	bne.n	800173a <HAL_TIM_Encoder_MspInit+0xce>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800168c:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_TIM_Encoder_MspInit+0xd8>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	4a2c      	ldr	r2, [pc, #176]	; (8001744 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	61d3      	str	r3, [r2, #28]
 8001698:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <HAL_TIM_Encoder_MspInit+0xd8>)
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_TIM_Encoder_MspInit+0xd8>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a26      	ldr	r2, [pc, #152]	; (8001744 <HAL_TIM_Encoder_MspInit+0xd8>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_TIM_Encoder_MspInit+0xd8>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016bc:	4b21      	ldr	r3, [pc, #132]	; (8001744 <HAL_TIM_Encoder_MspInit+0xd8>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a20      	ldr	r2, [pc, #128]	; (8001744 <HAL_TIM_Encoder_MspInit+0xd8>)
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_TIM_Encoder_MspInit+0xd8>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4817      	ldr	r0, [pc, #92]	; (8001748 <HAL_TIM_Encoder_MspInit+0xdc>)
 80016ea:	f000 fb87 	bl	8001dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016ee:	2308      	movs	r3, #8
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	4812      	ldr	r0, [pc, #72]	; (800174c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001702:	f000 fb7b 	bl	8001dfc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
 8001724:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	201c      	movs	r0, #28
 8001730:	f000 fa7d 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001734:	201c      	movs	r0, #28
 8001736:	f000 fa96 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	; 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	40010800 	.word	0x40010800
 800174c:	40010c00 	.word	0x40010c00
 8001750:	40010000 	.word	0x40010000

08001754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a09      	ldr	r2, [pc, #36]	; (8001788 <HAL_TIM_Base_MspInit+0x34>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d10b      	bne.n	800177e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_TIM_Base_MspInit+0x38>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_TIM_Base_MspInit+0x38>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	61d3      	str	r3, [r2, #28]
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_TIM_Base_MspInit+0x38>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	40000800 	.word	0x40000800
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a20      	ldr	r2, [pc, #128]	; (800182c <HAL_UART_MspInit+0x9c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d139      	bne.n	8001824 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <HAL_UART_MspInit+0xa0>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a1e      	ldr	r2, [pc, #120]	; (8001830 <HAL_UART_MspInit+0xa0>)
 80017b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <HAL_UART_MspInit+0xa0>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_UART_MspInit+0xa0>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a18      	ldr	r2, [pc, #96]	; (8001830 <HAL_UART_MspInit+0xa0>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_UART_MspInit+0xa0>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0310 	add.w	r3, r7, #16
 80017f2:	4619      	mov	r1, r3
 80017f4:	480f      	ldr	r0, [pc, #60]	; (8001834 <HAL_UART_MspInit+0xa4>)
 80017f6:	f000 fb01 	bl	8001dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	4809      	ldr	r0, [pc, #36]	; (8001834 <HAL_UART_MspInit+0xa4>)
 8001810:	f000 faf4 	bl	8001dfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	2025      	movs	r0, #37	; 0x25
 800181a:	f000 fa08 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800181e:	2025      	movs	r0, #37	; 0x25
 8001820:	f000 fa21 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40013800 	.word	0x40013800
 8001830:	40021000 	.word	0x40021000
 8001834:	40010800 	.word	0x40010800

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler+0x4>

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler+0x4>

0800184a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <UsageFault_Handler+0x4>

08001856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187e:	f000 f8bf 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <TIM2_IRQHandler+0x10>)
 800188e:	f002 fc13 	bl	80040b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000200 	.word	0x20000200

0800189c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <USART1_IRQHandler+0x10>)
 80018a2:	f002 ffd3 	bl	800484c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000290 	.word	0x20000290

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f004 f952 	bl	8005b88 <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20005000 	.word	0x20005000
 8001910:	00000400 	.word	0x00000400
 8001914:	200002fc 	.word	0x200002fc
 8001918:	20000330 	.word	0x20000330

0800191c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	; (8001960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	; (800196c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800194e:	f7ff ffe5 	bl	800191c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001952:	f004 f91f 	bl	8005b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001956:	f7ff fbbb 	bl	80010d0 <main>
  bx lr
 800195a:	4770      	bx	lr
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8001964:	08006628 	.word	0x08006628
  ldr r2, =_sbss
 8001968:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 800196c:	20000330 	.word	0x20000330

08001970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC1_2_IRQHandler>
	...

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_Init+0x28>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_Init+0x28>)
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 f947 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	200f      	movs	r0, #15
 800198c:	f000 f808 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff fdce 	bl	8001530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40022000 	.word	0x40022000

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x54>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f95f 	bl	8001c82 <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f000 f927 	bl	8001c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_InitTick+0x5c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000080 	.word	0x20000080
 80019f8:	20000088 	.word	0x20000088
 80019fc:	20000084 	.word	0x20000084

08001a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_IncTick+0x1c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_IncTick+0x20>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <HAL_IncTick+0x20>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	20000088 	.word	0x20000088
 8001a20:	20000300 	.word	0x20000300

08001a24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <HAL_GetTick+0x10>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20000300 	.word	0x20000300

08001a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff fff0 	bl	8001a24 <HAL_GetTick>
 8001a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d005      	beq.n	8001a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_Delay+0x44>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a5e:	bf00      	nop
 8001a60:	f7ff ffe0 	bl	8001a24 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d8f7      	bhi.n	8001a60 <HAL_Delay+0x28>
  {
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000088 	.word	0x20000088

08001a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0307 	and.w	r3, r3, #7
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db0b      	blt.n	8001b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	4906      	ldr	r1, [pc, #24]	; (8001b18 <__NVIC_EnableIRQ+0x34>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	2001      	movs	r0, #1
 8001b06:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	; (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	; (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
         );
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be4:	d301      	bcc.n	8001bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00f      	b.n	8001c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <SysTick_Config+0x40>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f7ff ff90 	bl	8001b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <SysTick_Config+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <SysTick_Config+0x40>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff2d 	bl	8001a80 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c40:	f7ff ff42 	bl	8001ac8 <__NVIC_GetPriorityGrouping>
 8001c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f7ff ff90 	bl	8001b70 <NVIC_EncodePriority>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff5f 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff35 	bl	8001ae4 <__NVIC_EnableIRQ>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ffa2 	bl	8001bd4 <SysTick_Config>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b085      	sub	sp, #20
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d008      	beq.n	8001cc2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e020      	b.n	8001d04 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 020e 	bic.w	r2, r2, #14
 8001cd0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cea:	2101      	movs	r1, #1
 8001cec:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d005      	beq.n	8001d32 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2204      	movs	r2, #4
 8001d2a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e051      	b.n	8001dd6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 020e 	bic.w	r2, r2, #14
 8001d40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0201 	bic.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a22      	ldr	r2, [pc, #136]	; (8001de0 <HAL_DMA_Abort_IT+0xd0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d029      	beq.n	8001db0 <HAL_DMA_Abort_IT+0xa0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a20      	ldr	r2, [pc, #128]	; (8001de4 <HAL_DMA_Abort_IT+0xd4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d022      	beq.n	8001dac <HAL_DMA_Abort_IT+0x9c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1f      	ldr	r2, [pc, #124]	; (8001de8 <HAL_DMA_Abort_IT+0xd8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d01a      	beq.n	8001da6 <HAL_DMA_Abort_IT+0x96>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <HAL_DMA_Abort_IT+0xdc>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d012      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x90>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <HAL_DMA_Abort_IT+0xe0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d00a      	beq.n	8001d9a <HAL_DMA_Abort_IT+0x8a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1a      	ldr	r2, [pc, #104]	; (8001df4 <HAL_DMA_Abort_IT+0xe4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d102      	bne.n	8001d94 <HAL_DMA_Abort_IT+0x84>
 8001d8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d92:	e00e      	b.n	8001db2 <HAL_DMA_Abort_IT+0xa2>
 8001d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d98:	e00b      	b.n	8001db2 <HAL_DMA_Abort_IT+0xa2>
 8001d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d9e:	e008      	b.n	8001db2 <HAL_DMA_Abort_IT+0xa2>
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	e005      	b.n	8001db2 <HAL_DMA_Abort_IT+0xa2>
 8001da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001daa:	e002      	b.n	8001db2 <HAL_DMA_Abort_IT+0xa2>
 8001dac:	2310      	movs	r3, #16
 8001dae:	e000      	b.n	8001db2 <HAL_DMA_Abort_IT+0xa2>
 8001db0:	2301      	movs	r3, #1
 8001db2:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <HAL_DMA_Abort_IT+0xe8>)
 8001db4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	4798      	blx	r3
    } 
  }
  return status;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40020008 	.word	0x40020008
 8001de4:	4002001c 	.word	0x4002001c
 8001de8:	40020030 	.word	0x40020030
 8001dec:	40020044 	.word	0x40020044
 8001df0:	40020058 	.word	0x40020058
 8001df4:	4002006c 	.word	0x4002006c
 8001df8:	40020000 	.word	0x40020000

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b08b      	sub	sp, #44	; 0x2c
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0e:	e169      	b.n	80020e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e10:	2201      	movs	r2, #1
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	f040 8158 	bne.w	80020de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4a9a      	ldr	r2, [pc, #616]	; (800209c <HAL_GPIO_Init+0x2a0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d05e      	beq.n	8001ef6 <HAL_GPIO_Init+0xfa>
 8001e38:	4a98      	ldr	r2, [pc, #608]	; (800209c <HAL_GPIO_Init+0x2a0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d875      	bhi.n	8001f2a <HAL_GPIO_Init+0x12e>
 8001e3e:	4a98      	ldr	r2, [pc, #608]	; (80020a0 <HAL_GPIO_Init+0x2a4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d058      	beq.n	8001ef6 <HAL_GPIO_Init+0xfa>
 8001e44:	4a96      	ldr	r2, [pc, #600]	; (80020a0 <HAL_GPIO_Init+0x2a4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d86f      	bhi.n	8001f2a <HAL_GPIO_Init+0x12e>
 8001e4a:	4a96      	ldr	r2, [pc, #600]	; (80020a4 <HAL_GPIO_Init+0x2a8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d052      	beq.n	8001ef6 <HAL_GPIO_Init+0xfa>
 8001e50:	4a94      	ldr	r2, [pc, #592]	; (80020a4 <HAL_GPIO_Init+0x2a8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d869      	bhi.n	8001f2a <HAL_GPIO_Init+0x12e>
 8001e56:	4a94      	ldr	r2, [pc, #592]	; (80020a8 <HAL_GPIO_Init+0x2ac>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d04c      	beq.n	8001ef6 <HAL_GPIO_Init+0xfa>
 8001e5c:	4a92      	ldr	r2, [pc, #584]	; (80020a8 <HAL_GPIO_Init+0x2ac>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d863      	bhi.n	8001f2a <HAL_GPIO_Init+0x12e>
 8001e62:	4a92      	ldr	r2, [pc, #584]	; (80020ac <HAL_GPIO_Init+0x2b0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d046      	beq.n	8001ef6 <HAL_GPIO_Init+0xfa>
 8001e68:	4a90      	ldr	r2, [pc, #576]	; (80020ac <HAL_GPIO_Init+0x2b0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d85d      	bhi.n	8001f2a <HAL_GPIO_Init+0x12e>
 8001e6e:	2b12      	cmp	r3, #18
 8001e70:	d82a      	bhi.n	8001ec8 <HAL_GPIO_Init+0xcc>
 8001e72:	2b12      	cmp	r3, #18
 8001e74:	d859      	bhi.n	8001f2a <HAL_GPIO_Init+0x12e>
 8001e76:	a201      	add	r2, pc, #4	; (adr r2, 8001e7c <HAL_GPIO_Init+0x80>)
 8001e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7c:	08001ef7 	.word	0x08001ef7
 8001e80:	08001ed1 	.word	0x08001ed1
 8001e84:	08001ee3 	.word	0x08001ee3
 8001e88:	08001f25 	.word	0x08001f25
 8001e8c:	08001f2b 	.word	0x08001f2b
 8001e90:	08001f2b 	.word	0x08001f2b
 8001e94:	08001f2b 	.word	0x08001f2b
 8001e98:	08001f2b 	.word	0x08001f2b
 8001e9c:	08001f2b 	.word	0x08001f2b
 8001ea0:	08001f2b 	.word	0x08001f2b
 8001ea4:	08001f2b 	.word	0x08001f2b
 8001ea8:	08001f2b 	.word	0x08001f2b
 8001eac:	08001f2b 	.word	0x08001f2b
 8001eb0:	08001f2b 	.word	0x08001f2b
 8001eb4:	08001f2b 	.word	0x08001f2b
 8001eb8:	08001f2b 	.word	0x08001f2b
 8001ebc:	08001f2b 	.word	0x08001f2b
 8001ec0:	08001ed9 	.word	0x08001ed9
 8001ec4:	08001eed 	.word	0x08001eed
 8001ec8:	4a79      	ldr	r2, [pc, #484]	; (80020b0 <HAL_GPIO_Init+0x2b4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d013      	beq.n	8001ef6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ece:	e02c      	b.n	8001f2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	623b      	str	r3, [r7, #32]
          break;
 8001ed6:	e029      	b.n	8001f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	3304      	adds	r3, #4
 8001ede:	623b      	str	r3, [r7, #32]
          break;
 8001ee0:	e024      	b.n	8001f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	3308      	adds	r3, #8
 8001ee8:	623b      	str	r3, [r7, #32]
          break;
 8001eea:	e01f      	b.n	8001f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	330c      	adds	r3, #12
 8001ef2:	623b      	str	r3, [r7, #32]
          break;
 8001ef4:	e01a      	b.n	8001f2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001efe:	2304      	movs	r3, #4
 8001f00:	623b      	str	r3, [r7, #32]
          break;
 8001f02:	e013      	b.n	8001f2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d105      	bne.n	8001f18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	611a      	str	r2, [r3, #16]
          break;
 8001f16:	e009      	b.n	8001f2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	615a      	str	r2, [r3, #20]
          break;
 8001f22:	e003      	b.n	8001f2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
          break;
 8001f28:	e000      	b.n	8001f2c <HAL_GPIO_Init+0x130>
          break;
 8001f2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2bff      	cmp	r3, #255	; 0xff
 8001f30:	d801      	bhi.n	8001f36 <HAL_GPIO_Init+0x13a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	e001      	b.n	8001f3a <HAL_GPIO_Init+0x13e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2bff      	cmp	r3, #255	; 0xff
 8001f40:	d802      	bhi.n	8001f48 <HAL_GPIO_Init+0x14c>
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	e002      	b.n	8001f4e <HAL_GPIO_Init+0x152>
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	3b08      	subs	r3, #8
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	210f      	movs	r1, #15
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	401a      	ands	r2, r3
 8001f60:	6a39      	ldr	r1, [r7, #32]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80b1 	beq.w	80020de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f7c:	4b4d      	ldr	r3, [pc, #308]	; (80020b4 <HAL_GPIO_Init+0x2b8>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a4c      	ldr	r2, [pc, #304]	; (80020b4 <HAL_GPIO_Init+0x2b8>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b4a      	ldr	r3, [pc, #296]	; (80020b4 <HAL_GPIO_Init+0x2b8>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f94:	4a48      	ldr	r2, [pc, #288]	; (80020b8 <HAL_GPIO_Init+0x2bc>)
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	220f      	movs	r2, #15
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a40      	ldr	r2, [pc, #256]	; (80020bc <HAL_GPIO_Init+0x2c0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d013      	beq.n	8001fe8 <HAL_GPIO_Init+0x1ec>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a3f      	ldr	r2, [pc, #252]	; (80020c0 <HAL_GPIO_Init+0x2c4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_GPIO_Init+0x1e8>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3e      	ldr	r2, [pc, #248]	; (80020c4 <HAL_GPIO_Init+0x2c8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d007      	beq.n	8001fe0 <HAL_GPIO_Init+0x1e4>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3d      	ldr	r2, [pc, #244]	; (80020c8 <HAL_GPIO_Init+0x2cc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d101      	bne.n	8001fdc <HAL_GPIO_Init+0x1e0>
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e006      	b.n	8001fea <HAL_GPIO_Init+0x1ee>
 8001fdc:	2304      	movs	r3, #4
 8001fde:	e004      	b.n	8001fea <HAL_GPIO_Init+0x1ee>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e002      	b.n	8001fea <HAL_GPIO_Init+0x1ee>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <HAL_GPIO_Init+0x1ee>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fec:	f002 0203 	and.w	r2, r2, #3
 8001ff0:	0092      	lsls	r2, r2, #2
 8001ff2:	4093      	lsls	r3, r2
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ffa:	492f      	ldr	r1, [pc, #188]	; (80020b8 <HAL_GPIO_Init+0x2bc>)
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002014:	4b2d      	ldr	r3, [pc, #180]	; (80020cc <HAL_GPIO_Init+0x2d0>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	492c      	ldr	r1, [pc, #176]	; (80020cc <HAL_GPIO_Init+0x2d0>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002022:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <HAL_GPIO_Init+0x2d0>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	43db      	mvns	r3, r3
 800202a:	4928      	ldr	r1, [pc, #160]	; (80020cc <HAL_GPIO_Init+0x2d0>)
 800202c:	4013      	ands	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800203c:	4b23      	ldr	r3, [pc, #140]	; (80020cc <HAL_GPIO_Init+0x2d0>)
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4922      	ldr	r1, [pc, #136]	; (80020cc <HAL_GPIO_Init+0x2d0>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_GPIO_Init+0x2d0>)
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	43db      	mvns	r3, r3
 8002052:	491e      	ldr	r1, [pc, #120]	; (80020cc <HAL_GPIO_Init+0x2d0>)
 8002054:	4013      	ands	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002064:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_GPIO_Init+0x2d0>)
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	4918      	ldr	r1, [pc, #96]	; (80020cc <HAL_GPIO_Init+0x2d0>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	608b      	str	r3, [r1, #8]
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_GPIO_Init+0x2d0>)
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	43db      	mvns	r3, r3
 800207a:	4914      	ldr	r1, [pc, #80]	; (80020cc <HAL_GPIO_Init+0x2d0>)
 800207c:	4013      	ands	r3, r2
 800207e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d021      	beq.n	80020d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800208c:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_GPIO_Init+0x2d0>)
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	490e      	ldr	r1, [pc, #56]	; (80020cc <HAL_GPIO_Init+0x2d0>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
 8002098:	e021      	b.n	80020de <HAL_GPIO_Init+0x2e2>
 800209a:	bf00      	nop
 800209c:	10320000 	.word	0x10320000
 80020a0:	10310000 	.word	0x10310000
 80020a4:	10220000 	.word	0x10220000
 80020a8:	10210000 	.word	0x10210000
 80020ac:	10120000 	.word	0x10120000
 80020b0:	10110000 	.word	0x10110000
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40010000 	.word	0x40010000
 80020bc:	40010800 	.word	0x40010800
 80020c0:	40010c00 	.word	0x40010c00
 80020c4:	40011000 	.word	0x40011000
 80020c8:	40011400 	.word	0x40011400
 80020cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_GPIO_Init+0x304>)
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	4909      	ldr	r1, [pc, #36]	; (8002100 <HAL_GPIO_Init+0x304>)
 80020da:	4013      	ands	r3, r2
 80020dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	3301      	adds	r3, #1
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	fa22 f303 	lsr.w	r3, r2, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f47f ae8e 	bne.w	8001e10 <HAL_GPIO_Init+0x14>
  }
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	372c      	adds	r7, #44	; 0x2c
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	40010400 	.word	0x40010400

08002104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	887b      	ldrh	r3, [r7, #2]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
 8002120:	e001      	b.n	8002126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	807b      	strh	r3, [r7, #2]
 800213e:	4613      	mov	r3, r2
 8002140:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002142:	787b      	ldrb	r3, [r7, #1]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002148:	887a      	ldrh	r2, [r7, #2]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800214e:	e003      	b.n	8002158 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002150:	887b      	ldrh	r3, [r7, #2]
 8002152:	041a      	lsls	r2, r3, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	611a      	str	r2, [r3, #16]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
	...

08002164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e12b      	b.n	80023ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff fa02 	bl	8001594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2224      	movs	r2, #36	; 0x24
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021c8:	f001 fd20 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 80021cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4a81      	ldr	r2, [pc, #516]	; (80023d8 <HAL_I2C_Init+0x274>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d807      	bhi.n	80021e8 <HAL_I2C_Init+0x84>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a80      	ldr	r2, [pc, #512]	; (80023dc <HAL_I2C_Init+0x278>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	bf94      	ite	ls
 80021e0:	2301      	movls	r3, #1
 80021e2:	2300      	movhi	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	e006      	b.n	80021f6 <HAL_I2C_Init+0x92>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a7d      	ldr	r2, [pc, #500]	; (80023e0 <HAL_I2C_Init+0x27c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	bf94      	ite	ls
 80021f0:	2301      	movls	r3, #1
 80021f2:	2300      	movhi	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0e7      	b.n	80023ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4a78      	ldr	r2, [pc, #480]	; (80023e4 <HAL_I2C_Init+0x280>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9b      	lsrs	r3, r3, #18
 8002208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a6a      	ldr	r2, [pc, #424]	; (80023d8 <HAL_I2C_Init+0x274>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d802      	bhi.n	8002238 <HAL_I2C_Init+0xd4>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	3301      	adds	r3, #1
 8002236:	e009      	b.n	800224c <HAL_I2C_Init+0xe8>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	4a69      	ldr	r2, [pc, #420]	; (80023e8 <HAL_I2C_Init+0x284>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	3301      	adds	r3, #1
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	430b      	orrs	r3, r1
 8002252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800225e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	495c      	ldr	r1, [pc, #368]	; (80023d8 <HAL_I2C_Init+0x274>)
 8002268:	428b      	cmp	r3, r1
 800226a:	d819      	bhi.n	80022a0 <HAL_I2C_Init+0x13c>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e59      	subs	r1, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fbb1 f3f3 	udiv	r3, r1, r3
 800227a:	1c59      	adds	r1, r3, #1
 800227c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002280:	400b      	ands	r3, r1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_I2C_Init+0x138>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1e59      	subs	r1, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fbb1 f3f3 	udiv	r3, r1, r3
 8002294:	3301      	adds	r3, #1
 8002296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229a:	e051      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 800229c:	2304      	movs	r3, #4
 800229e:	e04f      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <HAL_I2C_Init+0x168>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1e58      	subs	r0, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	440b      	add	r3, r1
 80022b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ba:	3301      	adds	r3, #1
 80022bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	e012      	b.n	80022f2 <HAL_I2C_Init+0x18e>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e58      	subs	r0, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	0099      	lsls	r1, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf0c      	ite	eq
 80022ec:	2301      	moveq	r3, #1
 80022ee:	2300      	movne	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Init+0x196>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e022      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10e      	bne.n	8002320 <HAL_I2C_Init+0x1bc>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e58      	subs	r0, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	440b      	add	r3, r1
 8002310:	fbb0 f3f3 	udiv	r3, r0, r3
 8002314:	3301      	adds	r3, #1
 8002316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231e:	e00f      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e58      	subs	r0, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	0099      	lsls	r1, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	fbb0 f3f3 	udiv	r3, r0, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	6809      	ldr	r1, [r1, #0]
 8002344:	4313      	orrs	r3, r2
 8002346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800236e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6911      	ldr	r1, [r2, #16]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68d2      	ldr	r2, [r2, #12]
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	430b      	orrs	r3, r1
 8002382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	000186a0 	.word	0x000186a0
 80023dc:	001e847f 	.word	0x001e847f
 80023e0:	003d08ff 	.word	0x003d08ff
 80023e4:	431bde83 	.word	0x431bde83
 80023e8:	10624dd3 	.word	0x10624dd3

080023ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	461a      	mov	r2, r3
 80023f8:	460b      	mov	r3, r1
 80023fa:	817b      	strh	r3, [r7, #10]
 80023fc:	4613      	mov	r3, r2
 80023fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff fb10 	bl	8001a24 <HAL_GetTick>
 8002404:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b20      	cmp	r3, #32
 8002410:	f040 80e0 	bne.w	80025d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2319      	movs	r3, #25
 800241a:	2201      	movs	r2, #1
 800241c:	4970      	ldr	r1, [pc, #448]	; (80025e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fe44 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
 800242c:	e0d3      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_I2C_Master_Transmit+0x50>
 8002438:	2302      	movs	r3, #2
 800243a:	e0cc      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d007      	beq.n	8002462 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002470:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2221      	movs	r2, #33	; 0x21
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2210      	movs	r2, #16
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	893a      	ldrh	r2, [r7, #8]
 8002492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a50      	ldr	r2, [pc, #320]	; (80025e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024a4:	8979      	ldrh	r1, [r7, #10]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	6a3a      	ldr	r2, [r7, #32]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 fbfe 	bl	8002cac <I2C_MasterRequestWrite>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e08d      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024d0:	e066      	b.n	80025a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	6a39      	ldr	r1, [r7, #32]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 febe 	bl	8003258 <I2C_WaitOnTXEFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00d      	beq.n	80024fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d107      	bne.n	80024fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e06b      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b04      	cmp	r3, #4
 800253a:	d11b      	bne.n	8002574 <HAL_I2C_Master_Transmit+0x188>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	d017      	beq.n	8002574 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	6a39      	ldr	r1, [r7, #32]
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 feae 	bl	80032da <I2C_WaitOnBTFFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00d      	beq.n	80025a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	2b04      	cmp	r3, #4
 800258a:	d107      	bne.n	800259c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e01a      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d194      	bne.n	80024d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	00100002 	.word	0x00100002
 80025e4:	ffff0000 	.word	0xffff0000

080025e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	817b      	strh	r3, [r7, #10]
 80025fa:	460b      	mov	r3, r1
 80025fc:	813b      	strh	r3, [r7, #8]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002602:	f7ff fa0f 	bl	8001a24 <HAL_GetTick>
 8002606:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b20      	cmp	r3, #32
 8002612:	f040 80d9 	bne.w	80027c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2319      	movs	r3, #25
 800261c:	2201      	movs	r2, #1
 800261e:	496d      	ldr	r1, [pc, #436]	; (80027d4 <HAL_I2C_Mem_Write+0x1ec>)
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fd43 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800262c:	2302      	movs	r3, #2
 800262e:	e0cc      	b.n	80027ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_I2C_Mem_Write+0x56>
 800263a:	2302      	movs	r3, #2
 800263c:	e0c5      	b.n	80027ca <HAL_I2C_Mem_Write+0x1e2>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d007      	beq.n	8002664 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002672:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2221      	movs	r2, #33	; 0x21
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2240      	movs	r2, #64	; 0x40
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a4d      	ldr	r2, [pc, #308]	; (80027d8 <HAL_I2C_Mem_Write+0x1f0>)
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026a6:	88f8      	ldrh	r0, [r7, #6]
 80026a8:	893a      	ldrh	r2, [r7, #8]
 80026aa:	8979      	ldrh	r1, [r7, #10]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4603      	mov	r3, r0
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fb7a 	bl	8002db0 <I2C_RequestMemoryWrite>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d052      	beq.n	8002768 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e081      	b.n	80027ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fdc4 	bl	8003258 <I2C_WaitOnTXEFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00d      	beq.n	80026f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d107      	bne.n	80026ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e06b      	b.n	80027ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	781a      	ldrb	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b04      	cmp	r3, #4
 800272e:	d11b      	bne.n	8002768 <HAL_I2C_Mem_Write+0x180>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d017      	beq.n	8002768 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	781a      	ldrb	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1aa      	bne.n	80026c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fdb0 	bl	80032da <I2C_WaitOnBTFFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00d      	beq.n	800279c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	2b04      	cmp	r3, #4
 8002786:	d107      	bne.n	8002798 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002796:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e016      	b.n	80027ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	00100002 	.word	0x00100002
 80027d8:	ffff0000 	.word	0xffff0000

080027dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08c      	sub	sp, #48	; 0x30
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	4608      	mov	r0, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	817b      	strh	r3, [r7, #10]
 80027ee:	460b      	mov	r3, r1
 80027f0:	813b      	strh	r3, [r7, #8]
 80027f2:	4613      	mov	r3, r2
 80027f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027fa:	f7ff f913 	bl	8001a24 <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b20      	cmp	r3, #32
 800280a:	f040 8244 	bne.w	8002c96 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2319      	movs	r3, #25
 8002814:	2201      	movs	r2, #1
 8002816:	4982      	ldr	r1, [pc, #520]	; (8002a20 <HAL_I2C_Mem_Read+0x244>)
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fc47 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002824:	2302      	movs	r3, #2
 8002826:	e237      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_I2C_Mem_Read+0x5a>
 8002832:	2302      	movs	r3, #2
 8002834:	e230      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4bc>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d007      	beq.n	800285c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800286a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2222      	movs	r2, #34	; 0x22
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2240      	movs	r2, #64	; 0x40
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800288c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a62      	ldr	r2, [pc, #392]	; (8002a24 <HAL_I2C_Mem_Read+0x248>)
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800289e:	88f8      	ldrh	r0, [r7, #6]
 80028a0:	893a      	ldrh	r2, [r7, #8]
 80028a2:	8979      	ldrh	r1, [r7, #10]
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	4603      	mov	r3, r0
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fb14 	bl	8002edc <I2C_RequestMemoryRead>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1ec      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d113      	bne.n	80028ee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e1c0      	b.n	8002c70 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d11e      	bne.n	8002934 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002904:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002906:	b672      	cpsid	i
}
 8002908:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002930:	b662      	cpsie	i
}
 8002932:	e035      	b.n	80029a0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	2b02      	cmp	r3, #2
 800293a:	d11e      	bne.n	800297a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800294a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800294c:	b672      	cpsid	i
}
 800294e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002974:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002976:	b662      	cpsie	i
}
 8002978:	e012      	b.n	80029a0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002988:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80029a0:	e166      	b.n	8002c70 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	f200 811f 	bhi.w	8002bea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d123      	bne.n	80029fc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fccf 	bl	800335c <I2C_WaitOnRXNEFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e167      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029fa:	e139      	b.n	8002c70 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d152      	bne.n	8002aaa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	4906      	ldr	r1, [pc, #24]	; (8002a28 <HAL_I2C_Mem_Read+0x24c>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fb4c 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e13c      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4bc>
 8002a1e:	bf00      	nop
 8002a20:	00100002 	.word	0x00100002
 8002a24:	ffff0000 	.word	0xffff0000
 8002a28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a2c:	b672      	cpsid	i
}
 8002a2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a72:	b662      	cpsie	i
}
 8002a74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aa8:	e0e2      	b.n	8002c70 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	497b      	ldr	r1, [pc, #492]	; (8002ca0 <HAL_I2C_Mem_Read+0x4c4>)
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 faf9 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0e9      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad4:	b672      	cpsid	i
}
 8002ad6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b0a:	4b66      	ldr	r3, [pc, #408]	; (8002ca4 <HAL_I2C_Mem_Read+0x4c8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	08db      	lsrs	r3, r3, #3
 8002b10:	4a65      	ldr	r2, [pc, #404]	; (8002ca8 <HAL_I2C_Mem_Read+0x4cc>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	0a1a      	lsrs	r2, r3, #8
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00da      	lsls	r2, r3, #3
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d118      	bne.n	8002b62 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f043 0220 	orr.w	r2, r3, #32
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b52:	b662      	cpsie	i
}
 8002b54:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e09a      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d1d9      	bne.n	8002b24 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bb2:	b662      	cpsie	i
}
 8002bb4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002be8:	e042      	b.n	8002c70 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fbb4 	bl	800335c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e04c      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d118      	bne.n	8002c70 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f47f ae94 	bne.w	80029a2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002c96:	2302      	movs	r3, #2
  }
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3728      	adds	r7, #40	; 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	00010004 	.word	0x00010004
 8002ca4:	20000080 	.word	0x20000080
 8002ca8:	14f8b589 	.word	0x14f8b589

08002cac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d006      	beq.n	8002cd6 <I2C_MasterRequestWrite+0x2a>
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d003      	beq.n	8002cd6 <I2C_MasterRequestWrite+0x2a>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cd4:	d108      	bne.n	8002ce8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e00b      	b.n	8002d00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	2b12      	cmp	r3, #18
 8002cee:	d107      	bne.n	8002d00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f9cd 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00d      	beq.n	8002d34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d26:	d103      	bne.n	8002d30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e035      	b.n	8002da0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d3c:	d108      	bne.n	8002d50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d4c:	611a      	str	r2, [r3, #16]
 8002d4e:	e01b      	b.n	8002d88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d50:	897b      	ldrh	r3, [r7, #10]
 8002d52:	11db      	asrs	r3, r3, #7
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f003 0306 	and.w	r3, r3, #6
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f063 030f 	orn	r3, r3, #15
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	490e      	ldr	r1, [pc, #56]	; (8002da8 <I2C_MasterRequestWrite+0xfc>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f9f3 	bl	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e010      	b.n	8002da0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d7e:	897b      	ldrh	r3, [r7, #10]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4907      	ldr	r1, [pc, #28]	; (8002dac <I2C_MasterRequestWrite+0x100>)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f9e3 	bl	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	00010008 	.word	0x00010008
 8002dac:	00010002 	.word	0x00010002

08002db0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	4608      	mov	r0, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	817b      	strh	r3, [r7, #10]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	813b      	strh	r3, [r7, #8]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f960 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00d      	beq.n	8002e0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e00:	d103      	bne.n	8002e0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e05f      	b.n	8002ece <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e0e:	897b      	ldrh	r3, [r7, #10]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	6a3a      	ldr	r2, [r7, #32]
 8002e22:	492d      	ldr	r1, [pc, #180]	; (8002ed8 <I2C_RequestMemoryWrite+0x128>)
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f998 	bl	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e04c      	b.n	8002ece <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4c:	6a39      	ldr	r1, [r7, #32]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fa02 	bl	8003258 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d107      	bne.n	8002e72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e02b      	b.n	8002ece <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e7c:	893b      	ldrh	r3, [r7, #8]
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	611a      	str	r2, [r3, #16]
 8002e86:	e021      	b.n	8002ecc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e88:	893b      	ldrh	r3, [r7, #8]
 8002e8a:	0a1b      	lsrs	r3, r3, #8
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e98:	6a39      	ldr	r1, [r7, #32]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f9dc 	bl	8003258 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00d      	beq.n	8002ec2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d107      	bne.n	8002ebe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ebc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e005      	b.n	8002ece <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec2:	893b      	ldrh	r3, [r7, #8]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	00010002 	.word	0x00010002

08002edc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	817b      	strh	r3, [r7, #10]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	813b      	strh	r3, [r7, #8]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f8c2 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3c:	d103      	bne.n	8002f46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0aa      	b.n	80030a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f4a:	897b      	ldrh	r3, [r7, #10]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	6a3a      	ldr	r2, [r7, #32]
 8002f5e:	4952      	ldr	r1, [pc, #328]	; (80030a8 <I2C_RequestMemoryRead+0x1cc>)
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f8fa 	bl	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e097      	b.n	80030a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	6a39      	ldr	r1, [r7, #32]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f964 	bl	8003258 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00d      	beq.n	8002fb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d107      	bne.n	8002fae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e076      	b.n	80030a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d105      	bne.n	8002fc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fb8:	893b      	ldrh	r3, [r7, #8]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	611a      	str	r2, [r3, #16]
 8002fc2:	e021      	b.n	8003008 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fc4:	893b      	ldrh	r3, [r7, #8]
 8002fc6:	0a1b      	lsrs	r3, r3, #8
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd4:	6a39      	ldr	r1, [r7, #32]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f93e 	bl	8003258 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00d      	beq.n	8002ffe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d107      	bne.n	8002ffa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e050      	b.n	80030a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ffe:	893b      	ldrh	r3, [r7, #8]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300a:	6a39      	ldr	r1, [r7, #32]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f923 	bl	8003258 <I2C_WaitOnTXEFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	2b04      	cmp	r3, #4
 800301e:	d107      	bne.n	8003030 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e035      	b.n	80030a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003042:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	2200      	movs	r2, #0
 800304c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f82b 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00d      	beq.n	8003078 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800306a:	d103      	bne.n	8003074 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003072:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e013      	b.n	80030a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003078:	897b      	ldrh	r3, [r7, #10]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	b2da      	uxtb	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	6a3a      	ldr	r2, [r7, #32]
 800308c:	4906      	ldr	r1, [pc, #24]	; (80030a8 <I2C_RequestMemoryRead+0x1cc>)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f863 	bl	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	00010002 	.word	0x00010002

080030ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030bc:	e025      	b.n	800310a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d021      	beq.n	800310a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c6:	f7fe fcad 	bl	8001a24 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d302      	bcc.n	80030dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d116      	bne.n	800310a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f043 0220 	orr.w	r2, r3, #32
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e023      	b.n	8003152 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	0c1b      	lsrs	r3, r3, #16
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b01      	cmp	r3, #1
 8003112:	d10d      	bne.n	8003130 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4013      	ands	r3, r2
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	bf0c      	ite	eq
 8003126:	2301      	moveq	r3, #1
 8003128:	2300      	movne	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	e00c      	b.n	800314a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	429a      	cmp	r2, r3
 800314e:	d0b6      	beq.n	80030be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003168:	e051      	b.n	800320e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003178:	d123      	bne.n	80031c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003188:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003192:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f043 0204 	orr.w	r2, r3, #4
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e046      	b.n	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d021      	beq.n	800320e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ca:	f7fe fc2b 	bl	8001a24 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d116      	bne.n	800320e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f043 0220 	orr.w	r2, r3, #32
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e020      	b.n	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d10c      	bne.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	43da      	mvns	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4013      	ands	r3, r2
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	bf14      	ite	ne
 800322a:	2301      	movne	r3, #1
 800322c:	2300      	moveq	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	e00b      	b.n	800324a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	43da      	mvns	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4013      	ands	r3, r2
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d18d      	bne.n	800316a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003264:	e02d      	b.n	80032c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f8ce 	bl	8003408 <I2C_IsAcknowledgeFailed>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e02d      	b.n	80032d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d021      	beq.n	80032c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327e:	f7fe fbd1 	bl	8001a24 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	d302      	bcc.n	8003294 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d116      	bne.n	80032c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f043 0220 	orr.w	r2, r3, #32
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e007      	b.n	80032d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032cc:	2b80      	cmp	r3, #128	; 0x80
 80032ce:	d1ca      	bne.n	8003266 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032e6:	e02d      	b.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f88d 	bl	8003408 <I2C_IsAcknowledgeFailed>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e02d      	b.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fe:	d021      	beq.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003300:	f7fe fb90 	bl	8001a24 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	429a      	cmp	r2, r3
 800330e:	d302      	bcc.n	8003316 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d116      	bne.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e007      	b.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	d1ca      	bne.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003368:	e042      	b.n	80033f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b10      	cmp	r3, #16
 8003376:	d119      	bne.n	80033ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0210 	mvn.w	r2, #16
 8003380:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e029      	b.n	8003400 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ac:	f7fe fb3a 	bl	8001a24 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d302      	bcc.n	80033c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d116      	bne.n	80033f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	f043 0220 	orr.w	r2, r3, #32
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e007      	b.n	8003400 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b40      	cmp	r3, #64	; 0x40
 80033fc:	d1b5      	bne.n	800336a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341e:	d11b      	bne.n	8003458 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003428:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f043 0204 	orr.w	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e272      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8087 	beq.w	8003592 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003484:	4b92      	ldr	r3, [pc, #584]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b04      	cmp	r3, #4
 800348e:	d00c      	beq.n	80034aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003490:	4b8f      	ldr	r3, [pc, #572]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b08      	cmp	r3, #8
 800349a:	d112      	bne.n	80034c2 <HAL_RCC_OscConfig+0x5e>
 800349c:	4b8c      	ldr	r3, [pc, #560]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a8:	d10b      	bne.n	80034c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034aa:	4b89      	ldr	r3, [pc, #548]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d06c      	beq.n	8003590 <HAL_RCC_OscConfig+0x12c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d168      	bne.n	8003590 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e24c      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ca:	d106      	bne.n	80034da <HAL_RCC_OscConfig+0x76>
 80034cc:	4b80      	ldr	r3, [pc, #512]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a7f      	ldr	r2, [pc, #508]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80034d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	e02e      	b.n	8003538 <HAL_RCC_OscConfig+0xd4>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10c      	bne.n	80034fc <HAL_RCC_OscConfig+0x98>
 80034e2:	4b7b      	ldr	r3, [pc, #492]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a7a      	ldr	r2, [pc, #488]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	4b78      	ldr	r3, [pc, #480]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a77      	ldr	r2, [pc, #476]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e01d      	b.n	8003538 <HAL_RCC_OscConfig+0xd4>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0xbc>
 8003506:	4b72      	ldr	r3, [pc, #456]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a71      	ldr	r2, [pc, #452]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 800350c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	4b6f      	ldr	r3, [pc, #444]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a6e      	ldr	r2, [pc, #440]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0xd4>
 8003520:	4b6b      	ldr	r3, [pc, #428]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a6a      	ldr	r2, [pc, #424]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b68      	ldr	r3, [pc, #416]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a67      	ldr	r2, [pc, #412]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003536:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d013      	beq.n	8003568 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fe fa70 	bl	8001a24 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003548:	f7fe fa6c 	bl	8001a24 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	; 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e200      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	4b5d      	ldr	r3, [pc, #372]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0xe4>
 8003566:	e014      	b.n	8003592 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe fa5c 	bl	8001a24 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003570:	f7fe fa58 	bl	8001a24 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	; 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1ec      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003582:	4b53      	ldr	r3, [pc, #332]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x10c>
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d063      	beq.n	8003666 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800359e:	4b4c      	ldr	r3, [pc, #304]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035aa:	4b49      	ldr	r3, [pc, #292]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d11c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x18c>
 80035b6:	4b46      	ldr	r3, [pc, #280]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d116      	bne.n	80035f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c2:	4b43      	ldr	r3, [pc, #268]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_RCC_OscConfig+0x176>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d001      	beq.n	80035da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e1c0      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035da:	4b3d      	ldr	r3, [pc, #244]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4939      	ldr	r1, [pc, #228]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ee:	e03a      	b.n	8003666 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d020      	beq.n	800363a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f8:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fe fa11 	bl	8001a24 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003606:	f7fe fa0d 	bl	8001a24 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e1a1      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	4b2d      	ldr	r3, [pc, #180]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003624:	4b2a      	ldr	r3, [pc, #168]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4927      	ldr	r1, [pc, #156]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 8003634:	4313      	orrs	r3, r2
 8003636:	600b      	str	r3, [r1, #0]
 8003638:	e015      	b.n	8003666 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800363a:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <HAL_RCC_OscConfig+0x270>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fe f9f0 	bl	8001a24 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003648:	f7fe f9ec 	bl	8001a24 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e180      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d03a      	beq.n	80036e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d019      	beq.n	80036ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <HAL_RCC_OscConfig+0x274>)
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003680:	f7fe f9d0 	bl	8001a24 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003688:	f7fe f9cc 	bl	8001a24 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e160      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <HAL_RCC_OscConfig+0x26c>)
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036a6:	2001      	movs	r0, #1
 80036a8:	f000 fad8 	bl	8003c5c <RCC_Delay>
 80036ac:	e01c      	b.n	80036e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <HAL_RCC_OscConfig+0x274>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b4:	f7fe f9b6 	bl	8001a24 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ba:	e00f      	b.n	80036dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036bc:	f7fe f9b2 	bl	8001a24 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d908      	bls.n	80036dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e146      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000
 80036d4:	42420000 	.word	0x42420000
 80036d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036dc:	4b92      	ldr	r3, [pc, #584]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e9      	bne.n	80036bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80a6 	beq.w	8003842 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f6:	2300      	movs	r3, #0
 80036f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036fa:	4b8b      	ldr	r3, [pc, #556]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10d      	bne.n	8003722 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	4b88      	ldr	r3, [pc, #544]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4a87      	ldr	r2, [pc, #540]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 800370c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003710:	61d3      	str	r3, [r2, #28]
 8003712:	4b85      	ldr	r3, [pc, #532]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800371e:	2301      	movs	r3, #1
 8003720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003722:	4b82      	ldr	r3, [pc, #520]	; (800392c <HAL_RCC_OscConfig+0x4c8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d118      	bne.n	8003760 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800372e:	4b7f      	ldr	r3, [pc, #508]	; (800392c <HAL_RCC_OscConfig+0x4c8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a7e      	ldr	r2, [pc, #504]	; (800392c <HAL_RCC_OscConfig+0x4c8>)
 8003734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373a:	f7fe f973 	bl	8001a24 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003742:	f7fe f96f 	bl	8001a24 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b64      	cmp	r3, #100	; 0x64
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e103      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	4b75      	ldr	r3, [pc, #468]	; (800392c <HAL_RCC_OscConfig+0x4c8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x312>
 8003768:	4b6f      	ldr	r3, [pc, #444]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4a6e      	ldr	r2, [pc, #440]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	6213      	str	r3, [r2, #32]
 8003774:	e02d      	b.n	80037d2 <HAL_RCC_OscConfig+0x36e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0x334>
 800377e:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4a69      	ldr	r2, [pc, #420]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	6213      	str	r3, [r2, #32]
 800378a:	4b67      	ldr	r3, [pc, #412]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	4a66      	ldr	r2, [pc, #408]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	f023 0304 	bic.w	r3, r3, #4
 8003794:	6213      	str	r3, [r2, #32]
 8003796:	e01c      	b.n	80037d2 <HAL_RCC_OscConfig+0x36e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2b05      	cmp	r3, #5
 800379e:	d10c      	bne.n	80037ba <HAL_RCC_OscConfig+0x356>
 80037a0:	4b61      	ldr	r3, [pc, #388]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4a60      	ldr	r2, [pc, #384]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	6213      	str	r3, [r2, #32]
 80037ac:	4b5e      	ldr	r3, [pc, #376]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4a5d      	ldr	r2, [pc, #372]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6213      	str	r3, [r2, #32]
 80037b8:	e00b      	b.n	80037d2 <HAL_RCC_OscConfig+0x36e>
 80037ba:	4b5b      	ldr	r3, [pc, #364]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	4a5a      	ldr	r2, [pc, #360]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	6213      	str	r3, [r2, #32]
 80037c6:	4b58      	ldr	r3, [pc, #352]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	4a57      	ldr	r2, [pc, #348]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	f023 0304 	bic.w	r3, r3, #4
 80037d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d015      	beq.n	8003806 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037da:	f7fe f923 	bl	8001a24 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e2:	f7fe f91f 	bl	8001a24 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e0b1      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f8:	4b4b      	ldr	r3, [pc, #300]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0ee      	beq.n	80037e2 <HAL_RCC_OscConfig+0x37e>
 8003804:	e014      	b.n	8003830 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003806:	f7fe f90d 	bl	8001a24 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380c:	e00a      	b.n	8003824 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	f7fe f909 	bl	8001a24 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f241 3288 	movw	r2, #5000	; 0x1388
 800381c:	4293      	cmp	r3, r2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e09b      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003824:	4b40      	ldr	r3, [pc, #256]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1ee      	bne.n	800380e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d105      	bne.n	8003842 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003836:	4b3c      	ldr	r3, [pc, #240]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	4a3b      	ldr	r2, [pc, #236]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003840:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 8087 	beq.w	800395a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800384c:	4b36      	ldr	r3, [pc, #216]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b08      	cmp	r3, #8
 8003856:	d061      	beq.n	800391c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d146      	bne.n	80038ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003860:	4b33      	ldr	r3, [pc, #204]	; (8003930 <HAL_RCC_OscConfig+0x4cc>)
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003866:	f7fe f8dd 	bl	8001a24 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386e:	f7fe f8d9 	bl	8001a24 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e06d      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003880:	4b29      	ldr	r3, [pc, #164]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f0      	bne.n	800386e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003894:	d108      	bne.n	80038a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003896:	4b24      	ldr	r3, [pc, #144]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	4921      	ldr	r1, [pc, #132]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a8:	4b1f      	ldr	r3, [pc, #124]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a19      	ldr	r1, [r3, #32]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	430b      	orrs	r3, r1
 80038ba:	491b      	ldr	r1, [pc, #108]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <HAL_RCC_OscConfig+0x4cc>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c6:	f7fe f8ad 	bl	8001a24 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fe f8a9 	bl	8001a24 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e03d      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x46a>
 80038ec:	e035      	b.n	800395a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <HAL_RCC_OscConfig+0x4cc>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fe f896 	bl	8001a24 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fc:	f7fe f892 	bl	8001a24 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e026      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_RCC_OscConfig+0x4c4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x498>
 800391a:	e01e      	b.n	800395a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d107      	bne.n	8003934 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e019      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
 8003928:	40021000 	.word	0x40021000
 800392c:	40007000 	.word	0x40007000
 8003930:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCC_OscConfig+0x500>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	429a      	cmp	r2, r3
 8003946:	d106      	bne.n	8003956 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000

08003968 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0d0      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800397c:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d910      	bls.n	80039ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398a:	4b67      	ldr	r3, [pc, #412]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 0207 	bic.w	r2, r3, #7
 8003992:	4965      	ldr	r1, [pc, #404]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0b8      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c4:	4b59      	ldr	r3, [pc, #356]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a58      	ldr	r2, [pc, #352]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039dc:	4b53      	ldr	r3, [pc, #332]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4a52      	ldr	r2, [pc, #328]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e8:	4b50      	ldr	r3, [pc, #320]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	494d      	ldr	r1, [pc, #308]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d040      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d115      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e07f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a26:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e073      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a36:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e06b      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a46:	4b39      	ldr	r3, [pc, #228]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f023 0203 	bic.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4936      	ldr	r1, [pc, #216]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a58:	f7fd ffe4 	bl	8001a24 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a60:	f7fd ffe0 	bl	8001a24 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e053      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	4b2d      	ldr	r3, [pc, #180]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 020c 	and.w	r2, r3, #12
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d1eb      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a88:	4b27      	ldr	r3, [pc, #156]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d210      	bcs.n	8003ab8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 0207 	bic.w	r2, r3, #7
 8003a9e:	4922      	ldr	r1, [pc, #136]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b20      	ldr	r3, [pc, #128]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e032      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4916      	ldr	r1, [pc, #88]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ae2:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	490e      	ldr	r1, [pc, #56]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003af6:	f000 f821 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8003afa:	4602      	mov	r2, r0
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	490a      	ldr	r1, [pc, #40]	; (8003b30 <HAL_RCC_ClockConfig+0x1c8>)
 8003b08:	5ccb      	ldrb	r3, [r1, r3]
 8003b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0e:	4a09      	ldr	r2, [pc, #36]	; (8003b34 <HAL_RCC_ClockConfig+0x1cc>)
 8003b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b12:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_RCC_ClockConfig+0x1d0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd ff42 	bl	80019a0 <HAL_InitTick>

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40022000 	.word	0x40022000
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	080065d4 	.word	0x080065d4
 8003b34:	20000080 	.word	0x20000080
 8003b38:	20000084 	.word	0x20000084

08003b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b3c:	b490      	push	{r4, r7}
 8003b3e:	b08a      	sub	sp, #40	; 0x28
 8003b40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b42:	4b29      	ldr	r3, [pc, #164]	; (8003be8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b44:	1d3c      	adds	r4, r7, #4
 8003b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b4c:	f240 2301 	movw	r3, #513	; 0x201
 8003b50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b66:	4b21      	ldr	r3, [pc, #132]	; (8003bec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d002      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0x40>
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d003      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x46>
 8003b7a:	e02b      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b7e:	623b      	str	r3, [r7, #32]
      break;
 8003b80:	e02b      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	0c9b      	lsrs	r3, r3, #18
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	3328      	adds	r3, #40	; 0x28
 8003b8c:	443b      	add	r3, r7
 8003b8e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b92:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d012      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b9e:	4b13      	ldr	r3, [pc, #76]	; (8003bec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	0c5b      	lsrs	r3, r3, #17
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	3328      	adds	r3, #40	; 0x28
 8003baa:	443b      	add	r3, r7
 8003bac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	4a0e      	ldr	r2, [pc, #56]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bb6:	fb03 f202 	mul.w	r2, r3, r2
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc2:	e004      	b.n	8003bce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	4a0b      	ldr	r2, [pc, #44]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc8:	fb02 f303 	mul.w	r3, r2, r3
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	623b      	str	r3, [r7, #32]
      break;
 8003bd2:	e002      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bd6:	623b      	str	r3, [r7, #32]
      break;
 8003bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bda:	6a3b      	ldr	r3, [r7, #32]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3728      	adds	r7, #40	; 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc90      	pop	{r4, r7}
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	080065c4 	.word	0x080065c4
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	007a1200 	.word	0x007a1200
 8003bf4:	003d0900 	.word	0x003d0900

08003bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bfc:	4b02      	ldr	r3, [pc, #8]	; (8003c08 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	20000080 	.word	0x20000080

08003c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c10:	f7ff fff2 	bl	8003bf8 <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4903      	ldr	r1, [pc, #12]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	080065e4 	.word	0x080065e4

08003c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c38:	f7ff ffde 	bl	8003bf8 <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	0adb      	lsrs	r3, r3, #11
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4903      	ldr	r1, [pc, #12]	; (8003c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021000 	.word	0x40021000
 8003c58:	080065e4 	.word	0x080065e4

08003c5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <RCC_Delay+0x34>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0a      	ldr	r2, [pc, #40]	; (8003c94 <RCC_Delay+0x38>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	0a5b      	lsrs	r3, r3, #9
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
 8003c76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c78:	bf00      	nop
  }
  while (Delay --);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1e5a      	subs	r2, r3, #1
 8003c7e:	60fa      	str	r2, [r7, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f9      	bne.n	8003c78 <RCC_Delay+0x1c>
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr
 8003c90:	20000080 	.word	0x20000080
 8003c94:	10624dd3 	.word	0x10624dd3

08003c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e041      	b.n	8003d2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fd fd48 	bl	8001754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f000 fbde 	bl	8004498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d001      	beq.n	8003d50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e032      	b.n	8003db6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a18      	ldr	r2, [pc, #96]	; (8003dc0 <HAL_TIM_Base_Start+0x88>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00e      	beq.n	8003d80 <HAL_TIM_Base_Start+0x48>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6a:	d009      	beq.n	8003d80 <HAL_TIM_Base_Start+0x48>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <HAL_TIM_Base_Start+0x8c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <HAL_TIM_Base_Start+0x48>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a13      	ldr	r2, [pc, #76]	; (8003dc8 <HAL_TIM_Base_Start+0x90>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d111      	bne.n	8003da4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b06      	cmp	r3, #6
 8003d90:	d010      	beq.n	8003db4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da2:	e007      	b.n	8003db4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr
 8003dc0:	40012c00 	.word	0x40012c00
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40000800 	.word	0x40000800

08003dcc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6a1a      	ldr	r2, [r3, #32]
 8003dda:	f241 1311 	movw	r3, #4369	; 0x1111
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10f      	bne.n	8003e04 <HAL_TIM_Base_Stop+0x38>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6a1a      	ldr	r2, [r3, #32]
 8003dea:	f240 4344 	movw	r3, #1092	; 0x444
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d107      	bne.n	8003e04 <HAL_TIM_Base_Stop+0x38>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0201 	bic.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e093      	b.n	8003f54 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d106      	bne.n	8003e46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7fd fc13 	bl	800166c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e5c:	f023 0307 	bic.w	r3, r3, #7
 8003e60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f000 fb13 	bl	8004498 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9a:	f023 0303 	bic.w	r3, r3, #3
 8003e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003eb8:	f023 030c 	bic.w	r3, r3, #12
 8003ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ec4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	011a      	lsls	r2, r3, #4
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	031b      	lsls	r3, r3, #12
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	4313      	orrs	r3, r2
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d110      	bne.n	8003fae <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d102      	bne.n	8003f98 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f92:	7b7b      	ldrb	r3, [r7, #13]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d001      	beq.n	8003f9c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e089      	b.n	80040b0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fac:	e031      	b.n	8004012 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d110      	bne.n	8003fd6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fb4:	7bbb      	ldrb	r3, [r7, #14]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d102      	bne.n	8003fc0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fba:	7b3b      	ldrb	r3, [r7, #12]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d001      	beq.n	8003fc4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e075      	b.n	80040b0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd4:	e01d      	b.n	8004012 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d108      	bne.n	8003fee <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fdc:	7bbb      	ldrb	r3, [r7, #14]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d105      	bne.n	8003fee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fe2:	7b7b      	ldrb	r3, [r7, #13]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d102      	bne.n	8003fee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fe8:	7b3b      	ldrb	r3, [r7, #12]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d001      	beq.n	8003ff2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e05e      	b.n	80040b0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2202      	movs	r2, #2
 8004006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b04      	cmp	r3, #4
 800401c:	d010      	beq.n	8004040 <HAL_TIM_Encoder_Start_IT+0xe4>
 800401e:	e01f      	b.n	8004060 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2201      	movs	r2, #1
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fb2d 	bl	8004688 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0202 	orr.w	r2, r2, #2
 800403c:	60da      	str	r2, [r3, #12]
      break;
 800403e:	e02e      	b.n	800409e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2201      	movs	r2, #1
 8004046:	2104      	movs	r1, #4
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fb1d 	bl	8004688 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0204 	orr.w	r2, r2, #4
 800405c:	60da      	str	r2, [r3, #12]
      break;
 800405e:	e01e      	b.n	800409e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2201      	movs	r2, #1
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fb0d 	bl	8004688 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2201      	movs	r2, #1
 8004074:	2104      	movs	r1, #4
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fb06 	bl	8004688 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0202 	orr.w	r2, r2, #2
 800408a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0204 	orr.w	r2, r2, #4
 800409a:	60da      	str	r2, [r3, #12]
      break;
 800409c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d122      	bne.n	8004114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d11b      	bne.n	8004114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0202 	mvn.w	r2, #2
 80040e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f001 fa56 	bl	80055ac <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f9ad 	bl	8004462 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f9b3 	bl	8004474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b04      	cmp	r3, #4
 8004120:	d122      	bne.n	8004168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b04      	cmp	r3, #4
 800412e:	d11b      	bne.n	8004168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0204 	mvn.w	r2, #4
 8004138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2202      	movs	r2, #2
 800413e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f001 fa2c 	bl	80055ac <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f983 	bl	8004462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f989 	bl	8004474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b08      	cmp	r3, #8
 8004174:	d122      	bne.n	80041bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b08      	cmp	r3, #8
 8004182:	d11b      	bne.n	80041bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0208 	mvn.w	r2, #8
 800418c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2204      	movs	r2, #4
 8004192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f001 fa02 	bl	80055ac <HAL_TIM_IC_CaptureCallback>
 80041a8:	e005      	b.n	80041b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f959 	bl	8004462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f95f 	bl	8004474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b10      	cmp	r3, #16
 80041c8:	d122      	bne.n	8004210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b10      	cmp	r3, #16
 80041d6:	d11b      	bne.n	8004210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0210 	mvn.w	r2, #16
 80041e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2208      	movs	r2, #8
 80041e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f001 f9d8 	bl	80055ac <HAL_TIM_IC_CaptureCallback>
 80041fc:	e005      	b.n	800420a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f92f 	bl	8004462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f935 	bl	8004474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b01      	cmp	r3, #1
 800421c:	d10e      	bne.n	800423c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b01      	cmp	r3, #1
 800422a:	d107      	bne.n	800423c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0201 	mvn.w	r2, #1
 8004234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f90a 	bl	8004450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004246:	2b80      	cmp	r3, #128	; 0x80
 8004248:	d10e      	bne.n	8004268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004254:	2b80      	cmp	r3, #128	; 0x80
 8004256:	d107      	bne.n	8004268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fa9b 	bl	800479e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004272:	2b40      	cmp	r3, #64	; 0x40
 8004274:	d10e      	bne.n	8004294 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d107      	bne.n	8004294 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f8f9 	bl	8004486 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b20      	cmp	r3, #32
 80042a0:	d10e      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d107      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0220 	mvn.w	r2, #32
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fa66 	bl	800478c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIM_ConfigClockSource+0x18>
 80042dc:	2302      	movs	r3, #2
 80042de:	e0b3      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x180>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004306:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004318:	d03e      	beq.n	8004398 <HAL_TIM_ConfigClockSource+0xd0>
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431e:	f200 8087 	bhi.w	8004430 <HAL_TIM_ConfigClockSource+0x168>
 8004322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004326:	f000 8085 	beq.w	8004434 <HAL_TIM_ConfigClockSource+0x16c>
 800432a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432e:	d87f      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x168>
 8004330:	2b70      	cmp	r3, #112	; 0x70
 8004332:	d01a      	beq.n	800436a <HAL_TIM_ConfigClockSource+0xa2>
 8004334:	2b70      	cmp	r3, #112	; 0x70
 8004336:	d87b      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x168>
 8004338:	2b60      	cmp	r3, #96	; 0x60
 800433a:	d050      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x116>
 800433c:	2b60      	cmp	r3, #96	; 0x60
 800433e:	d877      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x168>
 8004340:	2b50      	cmp	r3, #80	; 0x50
 8004342:	d03c      	beq.n	80043be <HAL_TIM_ConfigClockSource+0xf6>
 8004344:	2b50      	cmp	r3, #80	; 0x50
 8004346:	d873      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x168>
 8004348:	2b40      	cmp	r3, #64	; 0x40
 800434a:	d058      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x136>
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d86f      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x168>
 8004350:	2b30      	cmp	r3, #48	; 0x30
 8004352:	d064      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x156>
 8004354:	2b30      	cmp	r3, #48	; 0x30
 8004356:	d86b      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x168>
 8004358:	2b20      	cmp	r3, #32
 800435a:	d060      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x156>
 800435c:	2b20      	cmp	r3, #32
 800435e:	d867      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x168>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d05c      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x156>
 8004364:	2b10      	cmp	r3, #16
 8004366:	d05a      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004368:	e062      	b.n	8004430 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6899      	ldr	r1, [r3, #8]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f000 f966 	bl	800464a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800438c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	609a      	str	r2, [r3, #8]
      break;
 8004396:	e04e      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6899      	ldr	r1, [r3, #8]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f000 f94f 	bl	800464a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ba:	609a      	str	r2, [r3, #8]
      break;
 80043bc:	e03b      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6859      	ldr	r1, [r3, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f000 f8c6 	bl	800455c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2150      	movs	r1, #80	; 0x50
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f91d 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 80043dc:	e02b      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f000 f8e4 	bl	80045b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2160      	movs	r1, #96	; 0x60
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 f90d 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 80043fc:	e01b      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	461a      	mov	r2, r3
 800440c:	f000 f8a6 	bl	800455c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2140      	movs	r1, #64	; 0x40
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f8fd 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 800441c:	e00b      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f000 f8f4 	bl	8004616 <TIM_ITRx_SetConfig>
        break;
 800442e:	e002      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004430:	bf00      	nop
 8004432:	e000      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004434:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr

08004462 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr

08004486 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a29      	ldr	r2, [pc, #164]	; (8004550 <TIM_Base_SetConfig+0xb8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00b      	beq.n	80044c8 <TIM_Base_SetConfig+0x30>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b6:	d007      	beq.n	80044c8 <TIM_Base_SetConfig+0x30>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a26      	ldr	r2, [pc, #152]	; (8004554 <TIM_Base_SetConfig+0xbc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_Base_SetConfig+0x30>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a25      	ldr	r2, [pc, #148]	; (8004558 <TIM_Base_SetConfig+0xc0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d108      	bne.n	80044da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <TIM_Base_SetConfig+0xb8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00b      	beq.n	80044fa <TIM_Base_SetConfig+0x62>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e8:	d007      	beq.n	80044fa <TIM_Base_SetConfig+0x62>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a19      	ldr	r2, [pc, #100]	; (8004554 <TIM_Base_SetConfig+0xbc>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d003      	beq.n	80044fa <TIM_Base_SetConfig+0x62>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a18      	ldr	r2, [pc, #96]	; (8004558 <TIM_Base_SetConfig+0xc0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d108      	bne.n	800450c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a07      	ldr	r2, [pc, #28]	; (8004550 <TIM_Base_SetConfig+0xb8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d103      	bne.n	8004540 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	615a      	str	r2, [r3, #20]
}
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr
 8004550:	40012c00 	.word	0x40012c00
 8004554:	40000400 	.word	0x40000400
 8004558:	40000800 	.word	0x40000800

0800455c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f023 0201 	bic.w	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f023 030a 	bic.w	r3, r3, #10
 8004598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	621a      	str	r2, [r3, #32]
}
 80045ae:	bf00      	nop
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr

080045b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f023 0210 	bic.w	r2, r3, #16
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	031b      	lsls	r3, r3, #12
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	621a      	str	r2, [r3, #32]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr

08004616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	f043 0307 	orr.w	r3, r3, #7
 8004638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	609a      	str	r2, [r3, #8]
}
 8004640:	bf00      	nop
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800464a:	b480      	push	{r7}
 800464c:	b087      	sub	sp, #28
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
 8004656:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004664:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	021a      	lsls	r2, r3, #8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	431a      	orrs	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4313      	orrs	r3, r2
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	609a      	str	r2, [r3, #8]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	2201      	movs	r2, #1
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1a      	ldr	r2, [r3, #32]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	43db      	mvns	r3, r3
 80046aa:	401a      	ands	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1a      	ldr	r2, [r3, #32]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 031f 	and.w	r3, r3, #31
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	fa01 f303 	lsl.w	r3, r1, r3
 80046c0:	431a      	orrs	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e046      	b.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a16      	ldr	r2, [pc, #88]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00e      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004734:	d009      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a12      	ldr	r2, [pc, #72]	; (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d004      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a10      	ldr	r2, [pc, #64]	; (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d10c      	bne.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	4313      	orrs	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800

0800478c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr

0800479e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e03f      	b.n	8004842 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fc ffda 	bl	8001790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2224      	movs	r2, #36	; 0x24
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fb49 	bl	8004e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691a      	ldr	r2, [r3, #16]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800486c:	2300      	movs	r3, #0
 800486e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10d      	bne.n	800489e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_UART_IRQHandler+0x52>
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fa4f 	bl	8004d3a <UART_Receive_IT>
      return;
 800489c:	e17b      	b.n	8004b96 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80b1 	beq.w	8004a08 <HAL_UART_IRQHandler+0x1bc>
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <HAL_UART_IRQHandler+0x70>
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80a6 	beq.w	8004a08 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_UART_IRQHandler+0x90>
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	f043 0201 	orr.w	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <HAL_UART_IRQHandler+0xb0>
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	f043 0202 	orr.w	r2, r3, #2
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_UART_IRQHandler+0xd0>
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	f043 0204 	orr.w	r2, r3, #4
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00f      	beq.n	8004946 <HAL_UART_IRQHandler+0xfa>
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <HAL_UART_IRQHandler+0xee>
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f043 0208 	orr.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 811e 	beq.w	8004b8c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <HAL_UART_IRQHandler+0x11e>
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f9e8 	bl	8004d3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf14      	ite	ne
 8004978:	2301      	movne	r3, #1
 800497a:	2300      	moveq	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <HAL_UART_IRQHandler+0x146>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d031      	beq.n	80049f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f92a 	bl	8004bec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d023      	beq.n	80049ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695a      	ldr	r2, [r3, #20]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d013      	beq.n	80049e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	4a76      	ldr	r2, [pc, #472]	; (8004b9c <HAL_UART_IRQHandler+0x350>)
 80049c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fd f9a0 	bl	8001d10 <HAL_DMA_Abort_IT>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d016      	beq.n	8004a04 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049e0:	4610      	mov	r0, r2
 80049e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e4:	e00e      	b.n	8004a04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8ec 	bl	8004bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ec:	e00a      	b.n	8004a04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f8e8 	bl	8004bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f4:	e006      	b.n	8004a04 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f8e4 	bl	8004bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a02:	e0c3      	b.n	8004b8c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	bf00      	nop
    return;
 8004a06:	e0c1      	b.n	8004b8c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	f040 80a1 	bne.w	8004b54 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 809b 	beq.w	8004b54 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8095 	beq.w	8004b54 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d04e      	beq.n	8004aec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004a58:	8a3b      	ldrh	r3, [r7, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8098 	beq.w	8004b90 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a64:	8a3a      	ldrh	r2, [r7, #16]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	f080 8092 	bcs.w	8004b90 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8a3a      	ldrh	r2, [r7, #16]
 8004a70:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d02b      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a8a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695a      	ldr	r2, [r3, #20]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0201 	bic.w	r2, r2, #1
 8004a9a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aaa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0210 	bic.w	r2, r2, #16
 8004ac8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fd f8e3 	bl	8001c9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f876 	bl	8004bd6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004aea:	e051      	b.n	8004b90 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d047      	beq.n	8004b94 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004b04:	8a7b      	ldrh	r3, [r7, #18]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d044      	beq.n	8004b94 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b18:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0210 	bic.w	r2, r2, #16
 8004b46:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b48:	8a7b      	ldrh	r3, [r7, #18]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f842 	bl	8004bd6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b52:	e01f      	b.n	8004b94 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <HAL_UART_IRQHandler+0x324>
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f87f 	bl	8004c6c <UART_Transmit_IT>
    return;
 8004b6e:	e012      	b.n	8004b96 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00d      	beq.n	8004b96 <HAL_UART_IRQHandler+0x34a>
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f8c0 	bl	8004d0a <UART_EndTransmit_IT>
    return;
 8004b8a:	e004      	b.n	8004b96 <HAL_UART_IRQHandler+0x34a>
    return;
 8004b8c:	bf00      	nop
 8004b8e:	e002      	b.n	8004b96 <HAL_UART_IRQHandler+0x34a>
      return;
 8004b90:	bf00      	nop
 8004b92:	e000      	b.n	8004b96 <HAL_UART_IRQHandler+0x34a>
      return;
 8004b94:	bf00      	nop
  }
}
 8004b96:	3728      	adds	r7, #40	; 0x28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	08004c45 	.word	0x08004c45

08004ba0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	460b      	mov	r3, r1
 8004be0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr

08004bec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0201 	bic.w	r2, r2, #1
 8004c12:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d107      	bne.n	8004c2c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0210 	bic.w	r2, r2, #16
 8004c2a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f7ff ffb0 	bl	8004bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b21      	cmp	r3, #33	; 0x21
 8004c7e:	d13e      	bne.n	8004cfe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c88:	d114      	bne.n	8004cb4 <UART_Transmit_IT+0x48>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d110      	bne.n	8004cb4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	1c9a      	adds	r2, r3, #2
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	621a      	str	r2, [r3, #32]
 8004cb2:	e008      	b.n	8004cc6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	1c59      	adds	r1, r3, #1
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6211      	str	r1, [r2, #32]
 8004cbe:	781a      	ldrb	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10f      	bne.n	8004cfa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ce8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e000      	b.n	8004d00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cfe:	2302      	movs	r3, #2
  }
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr

08004d0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ff38 	bl	8004ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b086      	sub	sp, #24
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b22      	cmp	r3, #34	; 0x22
 8004d4c:	f040 8099 	bne.w	8004e82 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d58:	d117      	bne.n	8004d8a <UART_Receive_IT+0x50>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d113      	bne.n	8004d8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	1c9a      	adds	r2, r3, #2
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	629a      	str	r2, [r3, #40]	; 0x28
 8004d88:	e026      	b.n	8004dd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9c:	d007      	beq.n	8004dae <UART_Receive_IT+0x74>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10a      	bne.n	8004dbc <UART_Receive_IT+0x82>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	e008      	b.n	8004dce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4619      	mov	r1, r3
 8004de6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d148      	bne.n	8004e7e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0220 	bic.w	r2, r2, #32
 8004dfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695a      	ldr	r2, [r3, #20]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0201 	bic.w	r2, r2, #1
 8004e1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d123      	bne.n	8004e74 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0210 	bic.w	r2, r2, #16
 8004e40:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d10a      	bne.n	8004e66 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff feb2 	bl	8004bd6 <HAL_UARTEx_RxEventCallback>
 8004e72:	e002      	b.n	8004e7a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff fe9c 	bl	8004bb2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e002      	b.n	8004e84 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e000      	b.n	8004e84 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004e82:	2302      	movs	r3, #2
  }
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ec6:	f023 030c 	bic.w	r3, r3, #12
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a2c      	ldr	r2, [pc, #176]	; (8004fa0 <UART_SetConfig+0x114>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d103      	bne.n	8004efc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ef4:	f7fe fe9e 	bl	8003c34 <HAL_RCC_GetPCLK2Freq>
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	e002      	b.n	8004f02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004efc:	f7fe fe86 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8004f00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009a      	lsls	r2, r3, #2
 8004f0c:	441a      	add	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f18:	4a22      	ldr	r2, [pc, #136]	; (8004fa4 <UART_SetConfig+0x118>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	0119      	lsls	r1, r3, #4
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	009a      	lsls	r2, r3, #2
 8004f2c:	441a      	add	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f38:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <UART_SetConfig+0x118>)
 8004f3a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	2064      	movs	r0, #100	; 0x64
 8004f42:	fb00 f303 	mul.w	r3, r0, r3
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	3332      	adds	r3, #50	; 0x32
 8004f4c:	4a15      	ldr	r2, [pc, #84]	; (8004fa4 <UART_SetConfig+0x118>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f58:	4419      	add	r1, r3
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009a      	lsls	r2, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f70:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <UART_SetConfig+0x118>)
 8004f72:	fba3 0302 	umull	r0, r3, r3, r2
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	2064      	movs	r0, #100	; 0x64
 8004f7a:	fb00 f303 	mul.w	r3, r0, r3
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	3332      	adds	r3, #50	; 0x32
 8004f84:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <UART_SetConfig+0x118>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	f003 020f 	and.w	r2, r3, #15
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	440a      	add	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f98:	bf00      	nop
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40013800 	.word	0x40013800
 8004fa4:	51eb851f 	.word	0x51eb851f

08004fa8 <DHT_Set_Pin_Output>:
#define DHT11_STARTTIME 18000
#define DHT22_STARTTIME 12000

#define TIME_OUT		10

static void DHT_Set_Pin_Output(DHT_HandleTypeDef* p_DHT){
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb0:	f107 0308 	add.w	r3, r7, #8
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	891b      	ldrh	r3, [r3, #8]
 8004fc2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f107 0208 	add.w	r2, r7, #8
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fc ff10 	bl	8001dfc <HAL_GPIO_Init>
}
 8004fdc:	bf00      	nop
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <DHT_Set_Pin_Input>:

static void DHT_Set_Pin_Input(DHT_HandleTypeDef* p_DHT){
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fec:	f107 0308 	add.w	r3, r7, #8
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	605a      	str	r2, [r3, #4]
 8004ff6:	609a      	str	r2, [r3, #8]
 8004ff8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	891b      	ldrh	r3, [r3, #8]
 8004ffe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f107 0208 	add.w	r2, r7, #8
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f7fc fef2 	bl	8001dfc <HAL_GPIO_Init>
}
 8005018:	bf00      	nop
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <DHT_Start>:

static void DHT_Start(DHT_HandleTypeDef* p_DHT){
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
	DHT_Set_Pin_Output(p_DHT);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff ffbd 	bl	8004fa8 <DHT_Set_Pin_Output>
	HAL_GPIO_WritePin(p_DHT->DHT_Port, p_DHT->DHT_Pin, 0);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6858      	ldr	r0, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	891b      	ldrh	r3, [r3, #8]
 8005036:	2200      	movs	r2, #0
 8005038:	4619      	mov	r1, r3
 800503a:	f7fd f87a 	bl	8002132 <HAL_GPIO_WritePin>
	DELAY_US_Run((p_DHT->sensor_type == DHT11) ? DHT11_STARTTIME : DHT22_STARTTIME);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <DHT_Start+0x2c>
 8005046:	f244 6350 	movw	r3, #18000	; 0x4650
 800504a:	e001      	b.n	8005050 <DHT_Start+0x30>
 800504c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fa89 	bl	8005568 <DELAY_US_Run>
	HAL_GPIO_WritePin(p_DHT->DHT_Port, p_DHT->DHT_Pin, 1);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6858      	ldr	r0, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	891b      	ldrh	r3, [r3, #8]
 800505e:	2201      	movs	r2, #1
 8005060:	4619      	mov	r1, r3
 8005062:	f7fd f866 	bl	8002132 <HAL_GPIO_WritePin>
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <DHT_Check_Response>:

static uint8_t DHT_Check_Response(DHT_HandleTypeDef* p_DHT){
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
	DHT_Set_Pin_Input(p_DHT);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7ff ffb4 	bl	8004fe4 <DHT_Set_Pin_Input>
	DELAY_US_Run(40);
 800507c:	2028      	movs	r0, #40	; 0x28
 800507e:	f000 fa73 	bl	8005568 <DELAY_US_Run>
	if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	891b      	ldrh	r3, [r3, #8]
 800508a:	4619      	mov	r1, r3
 800508c:	4610      	mov	r0, r2
 800508e:	f7fd f839 	bl	8002104 <HAL_GPIO_ReadPin>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10f      	bne.n	80050b8 <DHT_Check_Response+0x4a>
		DELAY_US_Run(80);
 8005098:	2050      	movs	r0, #80	; 0x50
 800509a:	f000 fa65 	bl	8005568 <DELAY_US_Run>
		if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	891b      	ldrh	r3, [r3, #8]
 80050a6:	4619      	mov	r1, r3
 80050a8:	4610      	mov	r0, r2
 80050aa:	f7fd f82b 	bl	8002104 <HAL_GPIO_ReadPin>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d103      	bne.n	80050bc <DHT_Check_Response+0x4e>
			return DHT_FAIL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	e01a      	b.n	80050ee <DHT_Check_Response+0x80>
		}
	} else{
		return DHT_FAIL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e018      	b.n	80050ee <DHT_Check_Response+0x80>
	}

	uint32_t timer_out = HAL_GetTick();
 80050bc:	f7fc fcb2 	bl	8001a24 <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]
	while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 80050c2:	e008      	b.n	80050d6 <DHT_Check_Response+0x68>
		if(HAL_GetTick() - timer_out > TIME_OUT){
 80050c4:	f7fc fcae 	bl	8001a24 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b0a      	cmp	r3, #10
 80050d0:	d901      	bls.n	80050d6 <DHT_Check_Response+0x68>
			return DHT_FAIL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	e00b      	b.n	80050ee <DHT_Check_Response+0x80>
	while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	891b      	ldrh	r3, [r3, #8]
 80050de:	4619      	mov	r1, r3
 80050e0:	4610      	mov	r0, r2
 80050e2:	f7fd f80f 	bl	8002104 <HAL_GPIO_ReadPin>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1eb      	bne.n	80050c4 <DHT_Check_Response+0x56>
		}
	}

	return DHT_OK;
 80050ec:	2301      	movs	r3, #1
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <DHT_Read>:

static uint8_t DHT_Read(DHT_HandleTypeDef* p_DHT, uint8_t p_data[5]){
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b086      	sub	sp, #24
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	6039      	str	r1, [r7, #0]
	DHT_Set_Pin_Input(p_DHT);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff ff6f 	bl	8004fe4 <DHT_Set_Pin_Input>
	for(int i = 0; i < 5; i++){
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	e072      	b.n	80051f2 <DHT_Read+0xfc>
		for(int j = 0; j < 8; j++)
 800510c:	2300      	movs	r3, #0
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	e069      	b.n	80051e6 <DHT_Read+0xf0>
		{
			uint32_t timer_out = HAL_GetTick();
 8005112:	f7fc fc87 	bl	8001a24 <HAL_GetTick>
 8005116:	60f8      	str	r0, [r7, #12]
			while(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8005118:	e008      	b.n	800512c <DHT_Read+0x36>
				if(HAL_GetTick() - timer_out > TIME_OUT){
 800511a:	f7fc fc83 	bl	8001a24 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b0a      	cmp	r3, #10
 8005126:	d901      	bls.n	800512c <DHT_Read+0x36>
					return DHT_FAIL;
 8005128:	2300      	movs	r3, #0
 800512a:	e066      	b.n	80051fa <DHT_Read+0x104>
			while(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	891b      	ldrh	r3, [r3, #8]
 8005134:	4619      	mov	r1, r3
 8005136:	4610      	mov	r0, r2
 8005138:	f7fc ffe4 	bl	8002104 <HAL_GPIO_ReadPin>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0eb      	beq.n	800511a <DHT_Read+0x24>
				}
			}
			DELAY_US_Run(40);
 8005142:	2028      	movs	r0, #40	; 0x28
 8005144:	f000 fa10 	bl	8005568 <DELAY_US_Run>
			if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	891b      	ldrh	r3, [r3, #8]
 8005150:	4619      	mov	r1, r3
 8005152:	4610      	mov	r0, r2
 8005154:	f7fc ffd6 	bl	8002104 <HAL_GPIO_ReadPin>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d115      	bne.n	800518a <DHT_Read+0x94>
			{
				*(p_data + i) &= ~(1 << (7-j));
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	4413      	add	r3, r2
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	b25a      	sxtb	r2, r3
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f1c3 0307 	rsb	r3, r3, #7
 800516e:	2101      	movs	r1, #1
 8005170:	fa01 f303 	lsl.w	r3, r1, r3
 8005174:	b25b      	sxtb	r3, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	b25b      	sxtb	r3, r3
 800517a:	4013      	ands	r3, r2
 800517c:	b259      	sxtb	r1, r3
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	4413      	add	r3, r2
 8005184:	b2ca      	uxtb	r2, r1
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	e012      	b.n	80051b0 <DHT_Read+0xba>
			} else {
				*(p_data + i) |= (1 << (7-j));
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	4413      	add	r3, r2
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	b25a      	sxtb	r2, r3
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f1c3 0307 	rsb	r3, r3, #7
 800519a:	2101      	movs	r1, #1
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	b25b      	sxtb	r3, r3
 80051a2:	4313      	orrs	r3, r2
 80051a4:	b259      	sxtb	r1, r3
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	4413      	add	r3, r2
 80051ac:	b2ca      	uxtb	r2, r1
 80051ae:	701a      	strb	r2, [r3, #0]
			}
			timer_out = HAL_GetTick();
 80051b0:	f7fc fc38 	bl	8001a24 <HAL_GetTick>
 80051b4:	60f8      	str	r0, [r7, #12]
			while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 80051b6:	e008      	b.n	80051ca <DHT_Read+0xd4>
				if(HAL_GetTick() - timer_out > TIME_OUT){
 80051b8:	f7fc fc34 	bl	8001a24 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b0a      	cmp	r3, #10
 80051c4:	d901      	bls.n	80051ca <DHT_Read+0xd4>
					return DHT_FAIL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	e017      	b.n	80051fa <DHT_Read+0x104>
			while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	891b      	ldrh	r3, [r3, #8]
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7fc ff95 	bl	8002104 <HAL_GPIO_ReadPin>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1eb      	bne.n	80051b8 <DHT_Read+0xc2>
		for(int j = 0; j < 8; j++)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	3301      	adds	r3, #1
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b07      	cmp	r3, #7
 80051ea:	dd92      	ble.n	8005112 <DHT_Read+0x1c>
	for(int i = 0; i < 5; i++){
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	3301      	adds	r3, #1
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	dd89      	ble.n	800510c <DHT_Read+0x16>
				}
			}
		}
	}
	return DHT_OK;
 80051f8:	2301      	movs	r3, #1
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <DHT_Init>:

void DHT_Init(DHT_HandleTypeDef* p_DHT, TIM_HandleTypeDef* p_htim, uint8_t p_sensor_type, GPIO_TypeDef* p_Port, uint16_t p_Pin){
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	4613      	mov	r3, r2
 8005210:	71fb      	strb	r3, [r7, #7]
	DELAY_US_Init(p_htim);
 8005212:	68b8      	ldr	r0, [r7, #8]
 8005214:	f000 f99a 	bl	800554c <DELAY_US_Init>
	p_DHT->sensor_type = p_sensor_type;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	79fa      	ldrb	r2, [r7, #7]
 800521c:	701a      	strb	r2, [r3, #0]
	p_DHT->DHT_Port = p_Port;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	605a      	str	r2, [r3, #4]
	p_DHT->DHT_Pin = p_Pin;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8b3a      	ldrh	r2, [r7, #24]
 8005228:	811a      	strh	r2, [r3, #8]
	p_DHT->temperature = 0.0;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	60da      	str	r2, [r3, #12]
	p_DHT->huminity = 0.0;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	611a      	str	r2, [r3, #16]
}
 800523a:	bf00      	nop
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <DHT_Read_Value>:

uint8_t DHT_Read_Value(DHT_HandleTypeDef* p_DHT){
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
	uint8_t t_data[5] = {};
 800524a:	2300      	movs	r3, #0
 800524c:	60bb      	str	r3, [r7, #8]
 800524e:	2300      	movs	r3, #0
 8005250:	733b      	strb	r3, [r7, #12]
	DHT_Start(p_DHT);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff fee4 	bl	8005020 <DHT_Start>
	if(DHT_Check_Response(p_DHT) == DHT_FAIL)
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff ff08 	bl	800506e <DHT_Check_Response>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <DHT_Read_Value+0x26>
		return DHT_FAIL;
 8005264:	2300      	movs	r3, #0
 8005266:	e044      	b.n	80052f2 <DHT_Read_Value+0xb0>
	if(DHT_Read(p_DHT, t_data) == DHT_FAIL)
 8005268:	f107 0308 	add.w	r3, r7, #8
 800526c:	4619      	mov	r1, r3
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff ff41 	bl	80050f6 <DHT_Read>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <DHT_Read_Value+0x3c>
		return DHT_FAIL;
 800527a:	2300      	movs	r3, #0
 800527c:	e039      	b.n	80052f2 <DHT_Read_Value+0xb0>
	if(((t_data[0] + t_data[1] + t_data[2] + t_data[3]) & 0xFF) != t_data[4])
 800527e:	7a3b      	ldrb	r3, [r7, #8]
 8005280:	461a      	mov	r2, r3
 8005282:	7a7b      	ldrb	r3, [r7, #9]
 8005284:	4413      	add	r3, r2
 8005286:	7aba      	ldrb	r2, [r7, #10]
 8005288:	4413      	add	r3, r2
 800528a:	7afa      	ldrb	r2, [r7, #11]
 800528c:	4413      	add	r3, r2
 800528e:	b2db      	uxtb	r3, r3
 8005290:	7b3a      	ldrb	r2, [r7, #12]
 8005292:	4293      	cmp	r3, r2
 8005294:	d001      	beq.n	800529a <DHT_Read_Value+0x58>
		return DHT_FAIL;
 8005296:	2300      	movs	r3, #0
 8005298:	e02b      	b.n	80052f2 <DHT_Read_Value+0xb0>

	if(t_data[0] < 100 && t_data[0] > 0)
 800529a:	7a3b      	ldrb	r3, [r7, #8]
 800529c:	2b63      	cmp	r3, #99	; 0x63
 800529e:	d813      	bhi.n	80052c8 <DHT_Read_Value+0x86>
 80052a0:	7a3b      	ldrb	r3, [r7, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d010      	beq.n	80052c8 <DHT_Read_Value+0x86>
		p_DHT->huminity = t_data[0] / 1.0;
 80052a6:	7a3b      	ldrb	r3, [r7, #8]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fb f8a9 	bl	8000400 <__aeabi_i2d>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4610      	mov	r0, r2
 80052b4:	4619      	mov	r1, r3
 80052b6:	f7fb f90d 	bl	80004d4 <__aeabi_d2f>
 80052ba:	4602      	mov	r2, r0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	611a      	str	r2, [r3, #16]
	else
		return DHT_FAIL;

	if(t_data[2] < 100 && t_data[2] > 0)
 80052c0:	7abb      	ldrb	r3, [r7, #10]
 80052c2:	2b63      	cmp	r3, #99	; 0x63
 80052c4:	d902      	bls.n	80052cc <DHT_Read_Value+0x8a>
 80052c6:	e013      	b.n	80052f0 <DHT_Read_Value+0xae>
		return DHT_FAIL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	e012      	b.n	80052f2 <DHT_Read_Value+0xb0>
	if(t_data[2] < 100 && t_data[2] > 0)
 80052cc:	7abb      	ldrb	r3, [r7, #10]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00e      	beq.n	80052f0 <DHT_Read_Value+0xae>
		p_DHT->temperature = t_data[2] / 1.0;
 80052d2:	7abb      	ldrb	r3, [r7, #10]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fb f893 	bl	8000400 <__aeabi_i2d>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4610      	mov	r0, r2
 80052e0:	4619      	mov	r1, r3
 80052e2:	f7fb f8f7 	bl	80004d4 <__aeabi_d2f>
 80052e6:	4602      	mov	r2, r0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60da      	str	r2, [r3, #12]
	else
		return DHT_FAIL;

	return DHT_OK;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <DHT_Read_Value+0xb0>
		return DHT_FAIL;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <BCD_To_DEC>:

#define DS3231_ADDRESS			(0x68 << 1)
#define SECOND_VALUE_ADDRESS	(0x00)
#define DATE_VALUE_ADDRESS		(0x04)

static uint8_t BCD_To_DEC(uint8_t p_BCD_value){
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	4603      	mov	r3, r0
 8005302:	71fb      	strb	r3, [r7, #7]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 8005304:	79fb      	ldrb	r3, [r7, #7]
 8005306:	091b      	lsrs	r3, r3, #4
 8005308:	b2db      	uxtb	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	0092      	lsls	r2, r2, #2
 800530e:	4413      	add	r3, r2
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	b2da      	uxtb	r2, r3
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	b2db      	uxtb	r3, r3
 800531c:	4413      	add	r3, r2
 800531e:	b2db      	uxtb	r3, r3
}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr
	...

0800532c <DEC_To_BCD>:

static uint8_t DEC_To_BCD(uint8_t p_DEC_value){
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	71fb      	strb	r3, [r7, #7]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8005336:	79fb      	ldrb	r3, [r7, #7]
 8005338:	4a0d      	ldr	r2, [pc, #52]	; (8005370 <DEC_To_BCD+0x44>)
 800533a:	fba2 2303 	umull	r2, r3, r2, r3
 800533e:	08db      	lsrs	r3, r3, #3
 8005340:	b2db      	uxtb	r3, r3
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	b258      	sxtb	r0, r3
 8005346:	79fa      	ldrb	r2, [r7, #7]
 8005348:	4b09      	ldr	r3, [pc, #36]	; (8005370 <DEC_To_BCD+0x44>)
 800534a:	fba3 1302 	umull	r1, r3, r3, r2
 800534e:	08d9      	lsrs	r1, r3, #3
 8005350:	460b      	mov	r3, r1
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	b2db      	uxtb	r3, r3
 800535c:	b25b      	sxtb	r3, r3
 800535e:	4303      	orrs	r3, r0
 8005360:	b25b      	sxtb	r3, r3
 8005362:	b2db      	uxtb	r3, r3
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	cccccccd 	.word	0xcccccccd

08005374 <DS3231_Init>:

void DS3231_Init(DS3231_HandleTypeDef *p_ds3231, I2C_HandleTypeDef *p_hi2c){
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
	p_ds3231->hi2c = p_hi2c;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	609a      	str	r2, [r3, #8]
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr

0800538e <DS3231_Set_Time>:

void DS3231_Set_Time(DS3231_HandleTypeDef *p_ds3231, uint8_t p_hour, uint8_t p_minute, uint8_t p_second, uint8_t p_day){
 800538e:	b580      	push	{r7, lr}
 8005390:	b088      	sub	sp, #32
 8005392:	af04      	add	r7, sp, #16
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	4608      	mov	r0, r1
 8005398:	4611      	mov	r1, r2
 800539a:	461a      	mov	r2, r3
 800539c:	4603      	mov	r3, r0
 800539e:	70fb      	strb	r3, [r7, #3]
 80053a0:	460b      	mov	r3, r1
 80053a2:	70bb      	strb	r3, [r7, #2]
 80053a4:	4613      	mov	r3, r2
 80053a6:	707b      	strb	r3, [r7, #1]
	uint8_t t_i2c_buffer[4];
	t_i2c_buffer[0] = DEC_To_BCD(p_second);
 80053a8:	787b      	ldrb	r3, [r7, #1]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff ffbe 	bl	800532c <DEC_To_BCD>
 80053b0:	4603      	mov	r3, r0
 80053b2:	733b      	strb	r3, [r7, #12]
	t_i2c_buffer[1] = DEC_To_BCD(p_minute);
 80053b4:	78bb      	ldrb	r3, [r7, #2]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff ffb8 	bl	800532c <DEC_To_BCD>
 80053bc:	4603      	mov	r3, r0
 80053be:	737b      	strb	r3, [r7, #13]
	t_i2c_buffer[2] = DEC_To_BCD(p_hour) & (~USING_12_HOURS_TIME);
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff ffb2 	bl	800532c <DEC_To_BCD>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	73bb      	strb	r3, [r7, #14]
	t_i2c_buffer[3] = DEC_To_BCD(p_day);
 80053d2:	7e3b      	ldrb	r3, [r7, #24]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ffa9 	bl	800532c <DEC_To_BCD>
 80053da:	4603      	mov	r3, r0
 80053dc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6898      	ldr	r0, [r3, #8]
 80053e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053e6:	9302      	str	r3, [sp, #8]
 80053e8:	2304      	movs	r3, #4
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	f107 030c 	add.w	r3, r7, #12
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	2301      	movs	r3, #1
 80053f4:	2200      	movs	r2, #0
 80053f6:	21d0      	movs	r1, #208	; 0xd0
 80053f8:	f7fd f8f6 	bl	80025e8 <HAL_I2C_Mem_Write>
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <DS3231_Get_Time>:

uint8_t DS3231_Get_Time(DS3231_HandleTypeDef *p_ds3231){
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af04      	add	r7, sp, #16
 800540a:	6078      	str	r0, [r7, #4]
	uint8_t t_i2c_buffer[4];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000) != HAL_OK){
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6898      	ldr	r0, [r3, #8]
 8005410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005414:	9302      	str	r3, [sp, #8]
 8005416:	2304      	movs	r3, #4
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	f107 030c 	add.w	r3, r7, #12
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	2301      	movs	r3, #1
 8005422:	2200      	movs	r2, #0
 8005424:	21d0      	movs	r1, #208	; 0xd0
 8005426:	f7fd f9d9 	bl	80027dc <HAL_I2C_Mem_Read>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <DS3231_Get_Time+0x30>
		return DS3231_FAIL;
 8005430:	2300      	movs	r3, #0
 8005432:	e020      	b.n	8005476 <DS3231_Get_Time+0x72>
	}
	p_ds3231->current_second = BCD_To_DEC(t_i2c_buffer[0]);
 8005434:	7b3b      	ldrb	r3, [r7, #12]
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff ff5f 	bl	80052fa <BCD_To_DEC>
 800543c:	4603      	mov	r3, r0
 800543e:	461a      	mov	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	709a      	strb	r2, [r3, #2]
	p_ds3231->current_minute = BCD_To_DEC(t_i2c_buffer[1]);
 8005444:	7b7b      	ldrb	r3, [r7, #13]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff ff57 	bl	80052fa <BCD_To_DEC>
 800544c:	4603      	mov	r3, r0
 800544e:	461a      	mov	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	705a      	strb	r2, [r3, #1]
	p_ds3231->current_hour = BCD_To_DEC(t_i2c_buffer[2]);
 8005454:	7bbb      	ldrb	r3, [r7, #14]
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff ff4f 	bl	80052fa <BCD_To_DEC>
 800545c:	4603      	mov	r3, r0
 800545e:	461a      	mov	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	701a      	strb	r2, [r3, #0]
	p_ds3231->current_day = BCD_To_DEC(t_i2c_buffer[3]);
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff ff47 	bl	80052fa <BCD_To_DEC>
 800546c:	4603      	mov	r3, r0
 800546e:	461a      	mov	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	70da      	strb	r2, [r3, #3]
	return DS3231_OK;
 8005474:	2301      	movs	r3, #1
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <DS3231_Set_Date>:

void DS3231_Set_Date(DS3231_HandleTypeDef *p_ds3231, uint8_t p_date, uint8_t p_month, uint8_t p_year){
 800547e:	b580      	push	{r7, lr}
 8005480:	b088      	sub	sp, #32
 8005482:	af04      	add	r7, sp, #16
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	4608      	mov	r0, r1
 8005488:	4611      	mov	r1, r2
 800548a:	461a      	mov	r2, r3
 800548c:	4603      	mov	r3, r0
 800548e:	70fb      	strb	r3, [r7, #3]
 8005490:	460b      	mov	r3, r1
 8005492:	70bb      	strb	r3, [r7, #2]
 8005494:	4613      	mov	r3, r2
 8005496:	707b      	strb	r3, [r7, #1]
	uint8_t t_i2c_buffer[3];
	t_i2c_buffer[0] = DEC_To_BCD(p_date);
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff ff46 	bl	800532c <DEC_To_BCD>
 80054a0:	4603      	mov	r3, r0
 80054a2:	733b      	strb	r3, [r7, #12]
	t_i2c_buffer[1] = DEC_To_BCD(p_month);
 80054a4:	78bb      	ldrb	r3, [r7, #2]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff ff40 	bl	800532c <DEC_To_BCD>
 80054ac:	4603      	mov	r3, r0
 80054ae:	737b      	strb	r3, [r7, #13]
	t_i2c_buffer[2] = DEC_To_BCD(p_year);
 80054b0:	787b      	ldrb	r3, [r7, #1]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff ff3a 	bl	800532c <DEC_To_BCD>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6898      	ldr	r0, [r3, #8]
 80054c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054c4:	9302      	str	r3, [sp, #8]
 80054c6:	2303      	movs	r3, #3
 80054c8:	9301      	str	r3, [sp, #4]
 80054ca:	f107 030c 	add.w	r3, r7, #12
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	2301      	movs	r3, #1
 80054d2:	2204      	movs	r2, #4
 80054d4:	21d0      	movs	r1, #208	; 0xd0
 80054d6:	f7fd f887 	bl	80025e8 <HAL_I2C_Mem_Write>
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <DS3231_Get_Date>:

uint8_t DS3231_Get_Date(DS3231_HandleTypeDef *p_ds3231){
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b088      	sub	sp, #32
 80054e6:	af04      	add	r7, sp, #16
 80054e8:	6078      	str	r0, [r7, #4]
	uint8_t t_i2c_buffer[3];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000) != HAL_OK){
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6898      	ldr	r0, [r3, #8]
 80054ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054f2:	9302      	str	r3, [sp, #8]
 80054f4:	2303      	movs	r3, #3
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	f107 030c 	add.w	r3, r7, #12
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	2301      	movs	r3, #1
 8005500:	2204      	movs	r2, #4
 8005502:	21d0      	movs	r1, #208	; 0xd0
 8005504:	f7fd f96a 	bl	80027dc <HAL_I2C_Mem_Read>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <DS3231_Get_Date+0x30>
		return DS3231_FAIL;
 800550e:	2300      	movs	r3, #0
 8005510:	e018      	b.n	8005544 <DS3231_Get_Date+0x62>
	}
	p_ds3231->current_date = BCD_To_DEC(t_i2c_buffer[0]);
 8005512:	7b3b      	ldrb	r3, [r7, #12]
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fef0 	bl	80052fa <BCD_To_DEC>
 800551a:	4603      	mov	r3, r0
 800551c:	461a      	mov	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	711a      	strb	r2, [r3, #4]
	p_ds3231->current_month = BCD_To_DEC(t_i2c_buffer[1]);
 8005522:	7b7b      	ldrb	r3, [r7, #13]
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff fee8 	bl	80052fa <BCD_To_DEC>
 800552a:	4603      	mov	r3, r0
 800552c:	461a      	mov	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	715a      	strb	r2, [r3, #5]
	p_ds3231->current_year = BCD_To_DEC(t_i2c_buffer[2]);
 8005532:	7bbb      	ldrb	r3, [r7, #14]
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff fee0 	bl	80052fa <BCD_To_DEC>
 800553a:	4603      	mov	r3, r0
 800553c:	b29a      	uxth	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	80da      	strh	r2, [r3, #6]
	return DS3231_OK;
 8005542:	2301      	movs	r3, #1
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <DELAY_US_Init>:
#include "Delay_us.h"

TIM_HandleTypeDef *delay_timer;

void DELAY_US_Init(TIM_HandleTypeDef *p_htim){
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
	delay_timer = p_htim;
 8005554:	4a03      	ldr	r2, [pc, #12]	; (8005564 <DELAY_US_Init+0x18>)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6013      	str	r3, [r2, #0]
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	20000304 	.word	0x20000304

08005568 <DELAY_US_Run>:

void DELAY_US_Run(uint32_t p_delay_time){
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
	delay_timer->Instance->CNT = 0;
 8005570:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <DELAY_US_Run+0x40>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2200      	movs	r2, #0
 8005578:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(delay_timer);
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <DELAY_US_Run+0x40>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f7fe fbda 	bl	8003d38 <HAL_TIM_Base_Start>
	while(delay_timer->Instance->CNT < p_delay_time);
 8005584:	bf00      	nop
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <DELAY_US_Run+0x40>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	d8f8      	bhi.n	8005586 <DELAY_US_Run+0x1e>
	HAL_TIM_Base_Stop(delay_timer);
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <DELAY_US_Run+0x40>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f7fe fc17 	bl	8003dcc <HAL_TIM_Base_Stop>
}
 800559e:	bf00      	nop
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000304 	.word	0x20000304

080055ac <HAL_TIM_IC_CaptureCallback>:
encoder_callback_function_t __ENCODER_Forward_Callback = NULL;
encoder_callback_function_t __ENCODER_Backward_Callback = NULL;

#ifdef _USING_LIBRARY_ENCODER_IT_FUNCTION_
extern ENCODER_HandleTypeDef h_encoder;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	if(h_encoder.encoder_timer->Instance == htim->Instance){
 80055b4:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <HAL_TIM_IC_CaptureCallback+0x24>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d102      	bne.n	80055c8 <HAL_TIM_IC_CaptureCallback+0x1c>
		ENCODER_IT_Handle(&h_encoder);
 80055c2:	4803      	ldr	r0, [pc, #12]	; (80055d0 <HAL_TIM_IC_CaptureCallback+0x24>)
 80055c4:	f000 f82e 	bl	8005624 <ENCODER_IT_Handle>
	}
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20000138 	.word	0x20000138

080055d4 <ENCODER_Init>:
#endif

void ENCODER_Init(ENCODER_HandleTypeDef *p_encoder, TIM_HandleTypeDef *p_encoder_timer){
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
	p_encoder->encoder_timer = p_encoder_timer;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	601a      	str	r2, [r3, #0]
	p_encoder->current_possition = 0;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	809a      	strh	r2, [r3, #4]
	p_encoder->last_position = 0;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	80da      	strh	r2, [r3, #6]
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc80      	pop	{r7}
 80055f8:	4770      	bx	lr
	...

080055fc <ENCODER_Set_Callback_Function>:

void ENCODER_Set_Callback_Function(encoder_callback_function_t p_forward_callback_function, encoder_callback_function_t p_backward_callback_function){
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
	__ENCODER_Forward_Callback = p_forward_callback_function;
 8005606:	4a05      	ldr	r2, [pc, #20]	; (800561c <ENCODER_Set_Callback_Function+0x20>)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6013      	str	r3, [r2, #0]
	__ENCODER_Backward_Callback = p_backward_callback_function;
 800560c:	4a04      	ldr	r2, [pc, #16]	; (8005620 <ENCODER_Set_Callback_Function+0x24>)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6013      	str	r3, [r2, #0]
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr
 800561c:	20000308 	.word	0x20000308
 8005620:	2000030c 	.word	0x2000030c

08005624 <ENCODER_IT_Handle>:

void ENCODER_IT_Handle(ENCODER_HandleTypeDef *p_encoder){
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	uint32_t t_counter = __HAL_TIM_GET_COUNTER(p_encoder->encoder_timer);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	60fb      	str	r3, [r7, #12]
	p_encoder->current_possition =  (int16_t)t_counter / 4;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	b21b      	sxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	da00      	bge.n	8005640 <ENCODER_IT_Handle+0x1c>
 800563e:	3303      	adds	r3, #3
 8005640:	109b      	asrs	r3, r3, #2
 8005642:	b21a      	sxth	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	809a      	strh	r2, [r3, #4]
}
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr
	...

08005654 <ENCODER_Handle>:

void ENCODER_Handle(ENCODER_HandleTypeDef *p_encoder){
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	if(p_encoder->current_possition > p_encoder->last_position){
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005668:	429a      	cmp	r2, r3
 800566a:	dd0c      	ble.n	8005686 <ENCODER_Handle+0x32>
		if(__ENCODER_Forward_Callback != NULL){
 800566c:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <ENCODER_Handle+0x64>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <ENCODER_Handle+0x28>
			__ENCODER_Forward_Callback(p_encoder);
 8005674:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <ENCODER_Handle+0x64>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
		}
		p_encoder->last_position = p_encoder->current_possition;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	80da      	strh	r2, [r3, #6]
	}
	if(p_encoder->current_possition < p_encoder->last_position){
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005692:	429a      	cmp	r2, r3
 8005694:	da0c      	bge.n	80056b0 <ENCODER_Handle+0x5c>
		if(__ENCODER_Backward_Callback != NULL){
 8005696:	4b09      	ldr	r3, [pc, #36]	; (80056bc <ENCODER_Handle+0x68>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <ENCODER_Handle+0x52>
			__ENCODER_Backward_Callback(p_encoder);
 800569e:	4b07      	ldr	r3, [pc, #28]	; (80056bc <ENCODER_Handle+0x68>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	4798      	blx	r3
		}
		p_encoder->last_position = p_encoder->current_possition;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	80da      	strh	r2, [r3, #6]
	}
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	20000308 	.word	0x20000308
 80056bc:	2000030c 	.word	0x2000030c

080056c0 <LCD_Init>:
#include "LCD_I2C.h"

void LCD_Init(LCD_I2C_HandleTypeDef *p_lcd, I2C_HandleTypeDef *p_hi2c, uint8_t p_cols, uint8_t p_rows, uint8_t p_SLAVE_ADDRESS){
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	4611      	mov	r1, r2
 80056cc:	461a      	mov	r2, r3
 80056ce:	460b      	mov	r3, r1
 80056d0:	71fb      	strb	r3, [r7, #7]
 80056d2:	4613      	mov	r3, r2
 80056d4:	71bb      	strb	r3, [r7, #6]
	p_lcd->SLAVE_ADDRESS = p_SLAVE_ADDRESS;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	7e3a      	ldrb	r2, [r7, #24]
 80056da:	709a      	strb	r2, [r3, #2]
	p_lcd->LCD_Backlight_Value = LCD_BACKLIGHT;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2208      	movs	r2, #8
 80056e0:	70da      	strb	r2, [r3, #3]
	p_lcd->LCD_Columns = p_cols;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	79fa      	ldrb	r2, [r7, #7]
 80056e6:	701a      	strb	r2, [r3, #0]
	p_lcd->LCD_Rows = p_rows;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	79ba      	ldrb	r2, [r7, #6]
 80056ec:	705a      	strb	r2, [r3, #1]
	p_lcd->hi2c = p_hi2c;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	609a      	str	r2, [r3, #8]
	p_lcd->LCD_Display_Option = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2204      	movs	r2, #4
 80056f8:	711a      	strb	r2, [r3, #4]

	// 4 bit initialization
	HAL_Delay(50);  // wait for >40ms
 80056fa:	2032      	movs	r0, #50	; 0x32
 80056fc:	f7fc f99c 	bl	8001a38 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x30);
 8005700:	2130      	movs	r1, #48	; 0x30
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 f8f0 	bl	80058e8 <LCD_Send_Command>
	HAL_Delay(5);  // wait for >4.1ms
 8005708:	2005      	movs	r0, #5
 800570a:	f7fc f995 	bl	8001a38 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x30);
 800570e:	2130      	movs	r1, #48	; 0x30
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 f8e9 	bl	80058e8 <LCD_Send_Command>
	HAL_Delay(1);  // wait for >100us
 8005716:	2001      	movs	r0, #1
 8005718:	f7fc f98e 	bl	8001a38 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x30);
 800571c:	2130      	movs	r1, #48	; 0x30
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 f8e2 	bl	80058e8 <LCD_Send_Command>
	HAL_Delay(10);
 8005724:	200a      	movs	r0, #10
 8005726:	f7fc f987 	bl	8001a38 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x20);  // 4bit mode
 800572a:	2120      	movs	r1, #32
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f8db 	bl	80058e8 <LCD_Send_Command>
	HAL_Delay(10);
 8005732:	200a      	movs	r0, #10
 8005734:	f7fc f980 	bl	8001a38 <HAL_Delay>

	// Display initialization
	LCD_Send_Command(p_lcd, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8005738:	2128      	movs	r1, #40	; 0x28
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f8d4 	bl	80058e8 <LCD_Send_Command>
	HAL_Delay(1);
 8005740:	2001      	movs	r0, #1
 8005742:	f7fc f979 	bl	8001a38 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8005746:	2108      	movs	r1, #8
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f8cd 	bl	80058e8 <LCD_Send_Command>
	HAL_Delay(1);
 800574e:	2001      	movs	r0, #1
 8005750:	f7fc f972 	bl	8001a38 <HAL_Delay>

	LCD_Send_Command(p_lcd, 0x01);  // clear display
 8005754:	2101      	movs	r1, #1
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f8c6 	bl	80058e8 <LCD_Send_Command>
	HAL_Delay(1);
 800575c:	2001      	movs	r0, #1
 800575e:	f7fc f96b 	bl	8001a38 <HAL_Delay>
	HAL_Delay(1);
 8005762:	2001      	movs	r0, #1
 8005764:	f7fc f968 	bl	8001a38 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8005768:	2106      	movs	r1, #6
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f8bc 	bl	80058e8 <LCD_Send_Command>
	HAL_Delay(1);
 8005770:	2001      	movs	r0, #1
 8005772:	f7fc f961 	bl	8001a38 <HAL_Delay>
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	791b      	ldrb	r3, [r3, #4]
 800577a:	f043 0308 	orr.w	r3, r3, #8
 800577e:	b2db      	uxtb	r3, r3
 8005780:	4619      	mov	r1, r3
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f8b0 	bl	80058e8 <LCD_Send_Command>

	HAL_Delay(500);
 8005788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800578c:	f7fc f954 	bl	8001a38 <HAL_Delay>
}
 8005790:	bf00      	nop
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <LCD_Write>:

void LCD_Write(LCD_I2C_HandleTypeDef *p_lcd, const char *p_str, ...){
 8005798:	b40e      	push	{r1, r2, r3}
 800579a:	b580      	push	{r7, lr}
 800579c:	b08b      	sub	sp, #44	; 0x2c
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
	char t_stringArray[21] = {};
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	f107 0310 	add.w	r3, r7, #16
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	605a      	str	r2, [r3, #4]
 80057b0:	609a      	str	r2, [r3, #8]
 80057b2:	60da      	str	r2, [r3, #12]
 80057b4:	741a      	strb	r2, [r3, #16]

	va_list t_args;
	va_start(t_args, p_str);
 80057b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80057ba:	60bb      	str	r3, [r7, #8]
	vsprintf(t_stringArray, p_str, t_args);
 80057bc:	f107 030c 	add.w	r3, r7, #12
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fb1b 	bl	8005e00 <vsiprintf>
	va_end(t_args);

	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 80057ca:	2300      	movs	r3, #0
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
 80057ce:	e00b      	b.n	80057e8 <LCD_Write+0x50>
		LCD_Send_Data(p_lcd, t_stringArray[i]);
 80057d0:	f107 020c 	add.w	r2, r7, #12
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	4413      	add	r3, r2
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f8be 	bl	800595e <LCD_Send_Data>
	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	3301      	adds	r3, #1
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
 80057e8:	f107 030c 	add.w	r3, r7, #12
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fa fcad 	bl	800014c <strlen>
 80057f2:	4602      	mov	r2, r0
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d905      	bls.n	8005806 <LCD_Write+0x6e>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	4293      	cmp	r3, r2
 8005804:	dbe4      	blt.n	80057d0 <LCD_Write+0x38>
	}
}
 8005806:	bf00      	nop
 8005808:	372c      	adds	r7, #44	; 0x2c
 800580a:	46bd      	mov	sp, r7
 800580c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005810:	b003      	add	sp, #12
 8005812:	4770      	bx	lr

08005814 <LCD_Clear>:

void LCD_Write_Custom_Char(LCD_I2C_HandleTypeDef *p_lcd, char p_location){
	LCD_Send_Data(p_lcd, p_location);
}

void LCD_Clear(LCD_I2C_HandleTypeDef *p_lcd){
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 800581c:	2101      	movs	r1, #1
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f862 	bl	80058e8 <LCD_Send_Command>
	HAL_Delay(2);
 8005824:	2002      	movs	r0, #2
 8005826:	f7fc f907 	bl	8001a38 <HAL_Delay>
	LCD_Set_Cursor(p_lcd, 0, 0);
 800582a:	2200      	movs	r2, #0
 800582c:	2100      	movs	r1, #0
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f804 	bl	800583c <LCD_Set_Cursor>
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <LCD_Set_Cursor>:

void LCD_Set_Cursor(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_col, uint8_t p_row){
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	70fb      	strb	r3, [r7, #3]
 8005848:	4613      	mov	r3, r2
 800584a:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 800584c:	4b0f      	ldr	r3, [pc, #60]	; (800588c <LCD_Set_Cursor+0x50>)
 800584e:	60fb      	str	r3, [r7, #12]
	if(p_row > p_lcd->LCD_Rows) p_row = p_lcd->LCD_Rows - 1;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	78ba      	ldrb	r2, [r7, #2]
 8005856:	429a      	cmp	r2, r3
 8005858:	d903      	bls.n	8005862 <LCD_Set_Cursor+0x26>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	3b01      	subs	r3, #1
 8005860:	70bb      	strb	r3, [r7, #2]
	LCD_Send_Command(p_lcd, LCD_SETDDRAMADDR | (p_col + t_row_Offets[p_row]));
 8005862:	78bb      	ldrb	r3, [r7, #2]
 8005864:	3310      	adds	r3, #16
 8005866:	443b      	add	r3, r7
 8005868:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	4413      	add	r3, r2
 8005870:	b2db      	uxtb	r3, r3
 8005872:	b25b      	sxtb	r3, r3
 8005874:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005878:	b25b      	sxtb	r3, r3
 800587a:	b2db      	uxtb	r3, r3
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f832 	bl	80058e8 <LCD_Send_Command>
}
 8005884:	bf00      	nop
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	54144000 	.word	0x54144000

08005890 <LCD_Create_Char>:

void LCD_Create_Char(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_location, uint8_t p_charMap[]){
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	460b      	mov	r3, r1
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	72fb      	strb	r3, [r7, #11]
	p_location &= 7; // only have 8 locations 0-7.
 800589e:	7afb      	ldrb	r3, [r7, #11]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	72fb      	strb	r3, [r7, #11]
	p_location <<= 3;
 80058a6:	7afb      	ldrb	r3, [r7, #11]
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	72fb      	strb	r3, [r7, #11]
	LCD_Send_Command(p_lcd, LCD_SETCGRAMADDR | p_location);
 80058ac:	7afb      	ldrb	r3, [r7, #11]
 80058ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	4619      	mov	r1, r3
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f816 	bl	80058e8 <LCD_Send_Command>
	for(int i = 0; i < 8; i++) LCD_Send_Data(p_lcd, p_charMap[i]);
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	e00a      	b.n	80058d8 <LCD_Create_Char+0x48>
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	4413      	add	r3, r2
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	4619      	mov	r1, r3
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 f846 	bl	800595e <LCD_Send_Data>
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	3301      	adds	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2b07      	cmp	r3, #7
 80058dc:	ddf1      	ble.n	80058c2 <LCD_Create_Char+0x32>
}
 80058de:	bf00      	nop
 80058e0:	bf00      	nop
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <LCD_Send_Command>:
void LCD_Display_Off(LCD_I2C_HandleTypeDef *p_lcd){
	p_lcd->LCD_Display_Option &= ~LCD_DISPLAYON;
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
}

void LCD_Send_Command(LCD_I2C_HandleTypeDef *p_lcd, char cmd){
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	70fb      	strb	r3, [r7, #3]
	char p_data_H, p_data_L;
	uint8_t p_I2C_Bufer[4];
	p_data_H = cmd & 0xF0;
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	f023 030f 	bic.w	r3, r3, #15
 80058fa:	73fb      	strb	r3, [r7, #15]
	p_data_L = (cmd << 4) & 0xF0;
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	73bb      	strb	r3, [r7, #14]

	p_I2C_Bufer[0] = p_data_H | p_lcd->LCD_Backlight_Value | En;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	78da      	ldrb	r2, [r3, #3]
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	4313      	orrs	r3, r2
 800590a:	b2db      	uxtb	r3, r3
 800590c:	f043 0304 	orr.w	r3, r3, #4
 8005910:	b2db      	uxtb	r3, r3
 8005912:	723b      	strb	r3, [r7, #8]
	p_I2C_Bufer[1] = p_data_H | p_lcd->LCD_Backlight_Value;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	78da      	ldrb	r2, [r3, #3]
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	4313      	orrs	r3, r2
 800591c:	b2db      	uxtb	r3, r3
 800591e:	727b      	strb	r3, [r7, #9]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	78da      	ldrb	r2, [r3, #3]
 8005924:	7bbb      	ldrb	r3, [r7, #14]
 8005926:	4313      	orrs	r3, r2
 8005928:	b2db      	uxtb	r3, r3
 800592a:	f043 0304 	orr.w	r3, r3, #4
 800592e:	b2db      	uxtb	r3, r3
 8005930:	72bb      	strb	r3, [r7, #10]
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	78da      	ldrb	r2, [r3, #3]
 8005936:	7bbb      	ldrb	r3, [r7, #14]
 8005938:	4313      	orrs	r3, r2
 800593a:	b2db      	uxtb	r3, r3
 800593c:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6898      	ldr	r0, [r3, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	789b      	ldrb	r3, [r3, #2]
 8005946:	b299      	uxth	r1, r3
 8005948:	f107 0208 	add.w	r2, r7, #8
 800594c:	2364      	movs	r3, #100	; 0x64
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	2304      	movs	r3, #4
 8005952:	f7fc fd4b 	bl	80023ec <HAL_I2C_Master_Transmit>
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <LCD_Send_Data>:

void LCD_Send_Data(LCD_I2C_HandleTypeDef *p_lcd, char data){
 800595e:	b580      	push	{r7, lr}
 8005960:	b086      	sub	sp, #24
 8005962:	af02      	add	r7, sp, #8
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	460b      	mov	r3, r1
 8005968:	70fb      	strb	r3, [r7, #3]
	char p_data_H, p_data_L;
	uint8_t p_I2C_Bufer[4];
	p_data_H = data & 0xF0;
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	f023 030f 	bic.w	r3, r3, #15
 8005970:	73fb      	strb	r3, [r7, #15]
	p_data_L = (data << 4) & 0xF0;
 8005972:	78fb      	ldrb	r3, [r7, #3]
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	73bb      	strb	r3, [r7, #14]

	p_I2C_Bufer[0] = p_data_H | p_lcd->LCD_Backlight_Value | En | Rs;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	78da      	ldrb	r2, [r3, #3]
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	4313      	orrs	r3, r2
 8005980:	b2db      	uxtb	r3, r3
 8005982:	f043 0305 	orr.w	r3, r3, #5
 8005986:	b2db      	uxtb	r3, r3
 8005988:	723b      	strb	r3, [r7, #8]
	p_I2C_Bufer[1] = p_data_H | p_lcd->LCD_Backlight_Value | Rs;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	78da      	ldrb	r2, [r3, #3]
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	4313      	orrs	r3, r2
 8005992:	b2db      	uxtb	r3, r3
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	b2db      	uxtb	r3, r3
 800599a:	727b      	strb	r3, [r7, #9]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En | Rs;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	78da      	ldrb	r2, [r3, #3]
 80059a0:	7bbb      	ldrb	r3, [r7, #14]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	f043 0305 	orr.w	r3, r3, #5
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	72bb      	strb	r3, [r7, #10]
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value | Rs;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	78da      	ldrb	r2, [r3, #3]
 80059b2:	7bbb      	ldrb	r3, [r7, #14]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f043 0301 	orr.w	r3, r3, #1
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6898      	ldr	r0, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	789b      	ldrb	r3, [r3, #2]
 80059c8:	b299      	uxth	r1, r3
 80059ca:	f107 0208 	add.w	r2, r7, #8
 80059ce:	2364      	movs	r3, #100	; 0x64
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	2304      	movs	r3, #4
 80059d4:	f7fc fd0a 	bl	80023ec <HAL_I2C_Master_Transmit>
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <BUTTON_Handle>:
//
//__weak void BTN_Long_Press_Callback(BUTTON_HandleTypedef *ButtonX){
//	;
//}

void BUTTON_Handle(BUTTON_HandleTypedef *ButtonX){
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	uint8_t state = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	8a9b      	ldrh	r3, [r3, #20]
 80059f0:	4619      	mov	r1, r3
 80059f2:	4610      	mov	r0, r2
 80059f4:	f7fc fb86 	bl	8002104 <HAL_GPIO_ReadPin>
 80059f8:	4603      	mov	r3, r0
 80059fa:	73fb      	strb	r3, [r7, #15]
	if(state != ButtonX->BTN_Filter){
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	789b      	ldrb	r3, [r3, #2]
 8005a00:	7bfa      	ldrb	r2, [r7, #15]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d00a      	beq.n	8005a1c <BUTTON_Handle+0x3c>
		ButtonX->BTN_Filter = state;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	7bfa      	ldrb	r2, [r7, #15]
 8005a0a:	709a      	strb	r2, [r3, #2]
		ButtonX->is_debouncing = 1;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	70da      	strb	r2, [r3, #3]
		ButtonX->time_debounce = HAL_GetTick();
 8005a12:	f7fc f807 	bl	8001a24 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	609a      	str	r2, [r3, #8]
	}

	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->time_debounce >= 15)){
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	78db      	ldrb	r3, [r3, #3]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00e      	beq.n	8005a42 <BUTTON_Handle+0x62>
 8005a24:	f7fb fffe 	bl	8001a24 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b0e      	cmp	r3, #14
 8005a32:	d906      	bls.n	8005a42 <BUTTON_Handle+0x62>
		ButtonX->BTN_Current = ButtonX->BTN_Filter;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	789a      	ldrb	r2, [r3, #2]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	701a      	strb	r2, [r3, #0]
		ButtonX->is_debouncing = 0;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	70da      	strb	r2, [r3, #3]
	}

	if(ButtonX->BTN_Current != ButtonX->BTN_Last){
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	781a      	ldrb	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	785b      	ldrb	r3, [r3, #1]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d034      	beq.n	8005ab8 <BUTTON_Handle+0xd8>
		if(ButtonX->BTN_Current == 0){
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d110      	bne.n	8005a78 <BUTTON_Handle+0x98>
			if(__BUTTON_Pressing_Callback != NULL){
 8005a56:	4b27      	ldr	r3, [pc, #156]	; (8005af4 <BUTTON_Handle+0x114>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <BUTTON_Handle+0x86>
				__BUTTON_Pressing_Callback(ButtonX);
 8005a5e:	4b25      	ldr	r3, [pc, #148]	; (8005af4 <BUTTON_Handle+0x114>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	4798      	blx	r3
			}
			ButtonX->is_press = 1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	711a      	strb	r2, [r3, #4]
			ButtonX->time_start_press = HAL_GetTick();
 8005a6c:	f7fb ffda 	bl	8001a24 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	e01b      	b.n	8005ab0 <BUTTON_Handle+0xd0>
		}
		else{
			ButtonX->is_press = 0;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	711a      	strb	r2, [r3, #4]
			if(HAL_GetTick() - ButtonX->time_start_press <= 1000){
 8005a7e:	f7fb ffd1 	bl	8001a24 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a8e:	d807      	bhi.n	8005aa0 <BUTTON_Handle+0xc0>
				if(__BUTTON_Short_Pressing_Callback != NULL){
 8005a90:	4b19      	ldr	r3, [pc, #100]	; (8005af8 <BUTTON_Handle+0x118>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <BUTTON_Handle+0xc0>
					__BUTTON_Short_Pressing_Callback(ButtonX);
 8005a98:	4b17      	ldr	r3, [pc, #92]	; (8005af8 <BUTTON_Handle+0x118>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	4798      	blx	r3
				}
			}
			if(__BUTTON_Releasing_Callback != NULL){
 8005aa0:	4b16      	ldr	r3, [pc, #88]	; (8005afc <BUTTON_Handle+0x11c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <BUTTON_Handle+0xd0>
				__BUTTON_Releasing_Callback(ButtonX);
 8005aa8:	4b14      	ldr	r3, [pc, #80]	; (8005afc <BUTTON_Handle+0x11c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	4798      	blx	r3
			}
		}
		ButtonX->BTN_Last = ButtonX->BTN_Current;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	781a      	ldrb	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	705a      	strb	r2, [r3, #1]
	}

	if(ButtonX->is_press && (HAL_GetTick() - ButtonX->time_start_press >= 3000)){
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	791b      	ldrb	r3, [r3, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d014      	beq.n	8005aea <BUTTON_Handle+0x10a>
 8005ac0:	f7fb ffb0 	bl	8001a24 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d90a      	bls.n	8005aea <BUTTON_Handle+0x10a>
		if(__BUTTON_Long_Pressing_Callback != NULL){
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <BUTTON_Handle+0x120>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <BUTTON_Handle+0x104>
			__BUTTON_Long_Pressing_Callback(ButtonX);
 8005adc:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <BUTTON_Handle+0x120>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3
		}
		ButtonX->is_press = 0;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	711a      	strb	r2, [r3, #4]
	}
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000310 	.word	0x20000310
 8005af8:	20000318 	.word	0x20000318
 8005afc:	20000314 	.word	0x20000314
 8005b00:	2000031c 	.word	0x2000031c

08005b04 <BUTTON_Init>:

void BUTTON_Init(BUTTON_HandleTypedef *ButtonX, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	80fb      	strh	r3, [r7, #6]
	ButtonX->GPIOx = GPIOx;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	611a      	str	r2, [r3, #16]
	ButtonX->GPIO_Pin = GPIO_Pin;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	88fa      	ldrh	r2, [r7, #6]
 8005b1c:	829a      	strh	r2, [r3, #20]
	ButtonX->BTN_Current = 1;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	701a      	strb	r2, [r3, #0]
	ButtonX->BTN_Last = 1;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2201      	movs	r2, #1
 8005b28:	705a      	strb	r2, [r3, #1]
	ButtonX->BTN_Filter = 1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	709a      	strb	r2, [r3, #2]
	ButtonX->is_debouncing = 0;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	70da      	strb	r2, [r3, #3]
	ButtonX->is_press = 0;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	711a      	strb	r2, [r3, #4]
}
 8005b3c:	bf00      	nop
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr
	...

08005b48 <BUTTON_Set_Callback_Function>:

void BUTTON_Set_Callback_Function(button_callback_function_t p_pressing_callback_function,
								button_callback_function_t p_releasing_callback_function,
								button_callback_function_t p_short_pressing_callback_function,
								button_callback_function_t p_long_pressing_callback_function){
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
	__BUTTON_Pressing_Callback = p_pressing_callback_function;
 8005b56:	4a08      	ldr	r2, [pc, #32]	; (8005b78 <BUTTON_Set_Callback_Function+0x30>)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6013      	str	r3, [r2, #0]
	__BUTTON_Releasing_Callback = p_releasing_callback_function;
 8005b5c:	4a07      	ldr	r2, [pc, #28]	; (8005b7c <BUTTON_Set_Callback_Function+0x34>)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	6013      	str	r3, [r2, #0]
	__BUTTON_Short_Pressing_Callback = p_short_pressing_callback_function;
 8005b62:	4a07      	ldr	r2, [pc, #28]	; (8005b80 <BUTTON_Set_Callback_Function+0x38>)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6013      	str	r3, [r2, #0]
	__BUTTON_Long_Pressing_Callback = p_long_pressing_callback_function;
 8005b68:	4a06      	ldr	r2, [pc, #24]	; (8005b84 <BUTTON_Set_Callback_Function+0x3c>)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	6013      	str	r3, [r2, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr
 8005b78:	20000310 	.word	0x20000310
 8005b7c:	20000314 	.word	0x20000314
 8005b80:	20000318 	.word	0x20000318
 8005b84:	2000031c 	.word	0x2000031c

08005b88 <__errno>:
 8005b88:	4b01      	ldr	r3, [pc, #4]	; (8005b90 <__errno+0x8>)
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	2000008c 	.word	0x2000008c

08005b94 <__libc_init_array>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	2600      	movs	r6, #0
 8005b98:	4d0c      	ldr	r5, [pc, #48]	; (8005bcc <__libc_init_array+0x38>)
 8005b9a:	4c0d      	ldr	r4, [pc, #52]	; (8005bd0 <__libc_init_array+0x3c>)
 8005b9c:	1b64      	subs	r4, r4, r5
 8005b9e:	10a4      	asrs	r4, r4, #2
 8005ba0:	42a6      	cmp	r6, r4
 8005ba2:	d109      	bne.n	8005bb8 <__libc_init_array+0x24>
 8005ba4:	f000 fca4 	bl	80064f0 <_init>
 8005ba8:	2600      	movs	r6, #0
 8005baa:	4d0a      	ldr	r5, [pc, #40]	; (8005bd4 <__libc_init_array+0x40>)
 8005bac:	4c0a      	ldr	r4, [pc, #40]	; (8005bd8 <__libc_init_array+0x44>)
 8005bae:	1b64      	subs	r4, r4, r5
 8005bb0:	10a4      	asrs	r4, r4, #2
 8005bb2:	42a6      	cmp	r6, r4
 8005bb4:	d105      	bne.n	8005bc2 <__libc_init_array+0x2e>
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bbc:	4798      	blx	r3
 8005bbe:	3601      	adds	r6, #1
 8005bc0:	e7ee      	b.n	8005ba0 <__libc_init_array+0xc>
 8005bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc6:	4798      	blx	r3
 8005bc8:	3601      	adds	r6, #1
 8005bca:	e7f2      	b.n	8005bb2 <__libc_init_array+0x1e>
 8005bcc:	08006620 	.word	0x08006620
 8005bd0:	08006620 	.word	0x08006620
 8005bd4:	08006620 	.word	0x08006620
 8005bd8:	08006624 	.word	0x08006624

08005bdc <memset>:
 8005bdc:	4603      	mov	r3, r0
 8005bde:	4402      	add	r2, r0
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d100      	bne.n	8005be6 <memset+0xa>
 8005be4:	4770      	bx	lr
 8005be6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bea:	e7f9      	b.n	8005be0 <memset+0x4>

08005bec <_free_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4605      	mov	r5, r0
 8005bf0:	2900      	cmp	r1, #0
 8005bf2:	d040      	beq.n	8005c76 <_free_r+0x8a>
 8005bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bf8:	1f0c      	subs	r4, r1, #4
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	bfb8      	it	lt
 8005bfe:	18e4      	addlt	r4, r4, r3
 8005c00:	f000 f908 	bl	8005e14 <__malloc_lock>
 8005c04:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <_free_r+0x8c>)
 8005c06:	6813      	ldr	r3, [r2, #0]
 8005c08:	b933      	cbnz	r3, 8005c18 <_free_r+0x2c>
 8005c0a:	6063      	str	r3, [r4, #4]
 8005c0c:	6014      	str	r4, [r2, #0]
 8005c0e:	4628      	mov	r0, r5
 8005c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c14:	f000 b904 	b.w	8005e20 <__malloc_unlock>
 8005c18:	42a3      	cmp	r3, r4
 8005c1a:	d908      	bls.n	8005c2e <_free_r+0x42>
 8005c1c:	6820      	ldr	r0, [r4, #0]
 8005c1e:	1821      	adds	r1, r4, r0
 8005c20:	428b      	cmp	r3, r1
 8005c22:	bf01      	itttt	eq
 8005c24:	6819      	ldreq	r1, [r3, #0]
 8005c26:	685b      	ldreq	r3, [r3, #4]
 8005c28:	1809      	addeq	r1, r1, r0
 8005c2a:	6021      	streq	r1, [r4, #0]
 8005c2c:	e7ed      	b.n	8005c0a <_free_r+0x1e>
 8005c2e:	461a      	mov	r2, r3
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	b10b      	cbz	r3, 8005c38 <_free_r+0x4c>
 8005c34:	42a3      	cmp	r3, r4
 8005c36:	d9fa      	bls.n	8005c2e <_free_r+0x42>
 8005c38:	6811      	ldr	r1, [r2, #0]
 8005c3a:	1850      	adds	r0, r2, r1
 8005c3c:	42a0      	cmp	r0, r4
 8005c3e:	d10b      	bne.n	8005c58 <_free_r+0x6c>
 8005c40:	6820      	ldr	r0, [r4, #0]
 8005c42:	4401      	add	r1, r0
 8005c44:	1850      	adds	r0, r2, r1
 8005c46:	4283      	cmp	r3, r0
 8005c48:	6011      	str	r1, [r2, #0]
 8005c4a:	d1e0      	bne.n	8005c0e <_free_r+0x22>
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4401      	add	r1, r0
 8005c52:	6011      	str	r1, [r2, #0]
 8005c54:	6053      	str	r3, [r2, #4]
 8005c56:	e7da      	b.n	8005c0e <_free_r+0x22>
 8005c58:	d902      	bls.n	8005c60 <_free_r+0x74>
 8005c5a:	230c      	movs	r3, #12
 8005c5c:	602b      	str	r3, [r5, #0]
 8005c5e:	e7d6      	b.n	8005c0e <_free_r+0x22>
 8005c60:	6820      	ldr	r0, [r4, #0]
 8005c62:	1821      	adds	r1, r4, r0
 8005c64:	428b      	cmp	r3, r1
 8005c66:	bf01      	itttt	eq
 8005c68:	6819      	ldreq	r1, [r3, #0]
 8005c6a:	685b      	ldreq	r3, [r3, #4]
 8005c6c:	1809      	addeq	r1, r1, r0
 8005c6e:	6021      	streq	r1, [r4, #0]
 8005c70:	6063      	str	r3, [r4, #4]
 8005c72:	6054      	str	r4, [r2, #4]
 8005c74:	e7cb      	b.n	8005c0e <_free_r+0x22>
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	20000320 	.word	0x20000320

08005c7c <sbrk_aligned>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	4e0e      	ldr	r6, [pc, #56]	; (8005cb8 <sbrk_aligned+0x3c>)
 8005c80:	460c      	mov	r4, r1
 8005c82:	6831      	ldr	r1, [r6, #0]
 8005c84:	4605      	mov	r5, r0
 8005c86:	b911      	cbnz	r1, 8005c8e <sbrk_aligned+0x12>
 8005c88:	f000 f88c 	bl	8005da4 <_sbrk_r>
 8005c8c:	6030      	str	r0, [r6, #0]
 8005c8e:	4621      	mov	r1, r4
 8005c90:	4628      	mov	r0, r5
 8005c92:	f000 f887 	bl	8005da4 <_sbrk_r>
 8005c96:	1c43      	adds	r3, r0, #1
 8005c98:	d00a      	beq.n	8005cb0 <sbrk_aligned+0x34>
 8005c9a:	1cc4      	adds	r4, r0, #3
 8005c9c:	f024 0403 	bic.w	r4, r4, #3
 8005ca0:	42a0      	cmp	r0, r4
 8005ca2:	d007      	beq.n	8005cb4 <sbrk_aligned+0x38>
 8005ca4:	1a21      	subs	r1, r4, r0
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 f87c 	bl	8005da4 <_sbrk_r>
 8005cac:	3001      	adds	r0, #1
 8005cae:	d101      	bne.n	8005cb4 <sbrk_aligned+0x38>
 8005cb0:	f04f 34ff 	mov.w	r4, #4294967295
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	20000324 	.word	0x20000324

08005cbc <_malloc_r>:
 8005cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc0:	1ccd      	adds	r5, r1, #3
 8005cc2:	f025 0503 	bic.w	r5, r5, #3
 8005cc6:	3508      	adds	r5, #8
 8005cc8:	2d0c      	cmp	r5, #12
 8005cca:	bf38      	it	cc
 8005ccc:	250c      	movcc	r5, #12
 8005cce:	2d00      	cmp	r5, #0
 8005cd0:	4607      	mov	r7, r0
 8005cd2:	db01      	blt.n	8005cd8 <_malloc_r+0x1c>
 8005cd4:	42a9      	cmp	r1, r5
 8005cd6:	d905      	bls.n	8005ce4 <_malloc_r+0x28>
 8005cd8:	230c      	movs	r3, #12
 8005cda:	2600      	movs	r6, #0
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	4630      	mov	r0, r6
 8005ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ce4:	4e2e      	ldr	r6, [pc, #184]	; (8005da0 <_malloc_r+0xe4>)
 8005ce6:	f000 f895 	bl	8005e14 <__malloc_lock>
 8005cea:	6833      	ldr	r3, [r6, #0]
 8005cec:	461c      	mov	r4, r3
 8005cee:	bb34      	cbnz	r4, 8005d3e <_malloc_r+0x82>
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	f7ff ffc2 	bl	8005c7c <sbrk_aligned>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	d14d      	bne.n	8005d9a <_malloc_r+0xde>
 8005cfe:	6834      	ldr	r4, [r6, #0]
 8005d00:	4626      	mov	r6, r4
 8005d02:	2e00      	cmp	r6, #0
 8005d04:	d140      	bne.n	8005d88 <_malloc_r+0xcc>
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	4631      	mov	r1, r6
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	eb04 0803 	add.w	r8, r4, r3
 8005d10:	f000 f848 	bl	8005da4 <_sbrk_r>
 8005d14:	4580      	cmp	r8, r0
 8005d16:	d13a      	bne.n	8005d8e <_malloc_r+0xd2>
 8005d18:	6821      	ldr	r1, [r4, #0]
 8005d1a:	3503      	adds	r5, #3
 8005d1c:	1a6d      	subs	r5, r5, r1
 8005d1e:	f025 0503 	bic.w	r5, r5, #3
 8005d22:	3508      	adds	r5, #8
 8005d24:	2d0c      	cmp	r5, #12
 8005d26:	bf38      	it	cc
 8005d28:	250c      	movcc	r5, #12
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	f7ff ffa5 	bl	8005c7c <sbrk_aligned>
 8005d32:	3001      	adds	r0, #1
 8005d34:	d02b      	beq.n	8005d8e <_malloc_r+0xd2>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	442b      	add	r3, r5
 8005d3a:	6023      	str	r3, [r4, #0]
 8005d3c:	e00e      	b.n	8005d5c <_malloc_r+0xa0>
 8005d3e:	6822      	ldr	r2, [r4, #0]
 8005d40:	1b52      	subs	r2, r2, r5
 8005d42:	d41e      	bmi.n	8005d82 <_malloc_r+0xc6>
 8005d44:	2a0b      	cmp	r2, #11
 8005d46:	d916      	bls.n	8005d76 <_malloc_r+0xba>
 8005d48:	1961      	adds	r1, r4, r5
 8005d4a:	42a3      	cmp	r3, r4
 8005d4c:	6025      	str	r5, [r4, #0]
 8005d4e:	bf18      	it	ne
 8005d50:	6059      	strne	r1, [r3, #4]
 8005d52:	6863      	ldr	r3, [r4, #4]
 8005d54:	bf08      	it	eq
 8005d56:	6031      	streq	r1, [r6, #0]
 8005d58:	5162      	str	r2, [r4, r5]
 8005d5a:	604b      	str	r3, [r1, #4]
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	f104 060b 	add.w	r6, r4, #11
 8005d62:	f000 f85d 	bl	8005e20 <__malloc_unlock>
 8005d66:	f026 0607 	bic.w	r6, r6, #7
 8005d6a:	1d23      	adds	r3, r4, #4
 8005d6c:	1af2      	subs	r2, r6, r3
 8005d6e:	d0b6      	beq.n	8005cde <_malloc_r+0x22>
 8005d70:	1b9b      	subs	r3, r3, r6
 8005d72:	50a3      	str	r3, [r4, r2]
 8005d74:	e7b3      	b.n	8005cde <_malloc_r+0x22>
 8005d76:	6862      	ldr	r2, [r4, #4]
 8005d78:	42a3      	cmp	r3, r4
 8005d7a:	bf0c      	ite	eq
 8005d7c:	6032      	streq	r2, [r6, #0]
 8005d7e:	605a      	strne	r2, [r3, #4]
 8005d80:	e7ec      	b.n	8005d5c <_malloc_r+0xa0>
 8005d82:	4623      	mov	r3, r4
 8005d84:	6864      	ldr	r4, [r4, #4]
 8005d86:	e7b2      	b.n	8005cee <_malloc_r+0x32>
 8005d88:	4634      	mov	r4, r6
 8005d8a:	6876      	ldr	r6, [r6, #4]
 8005d8c:	e7b9      	b.n	8005d02 <_malloc_r+0x46>
 8005d8e:	230c      	movs	r3, #12
 8005d90:	4638      	mov	r0, r7
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	f000 f844 	bl	8005e20 <__malloc_unlock>
 8005d98:	e7a1      	b.n	8005cde <_malloc_r+0x22>
 8005d9a:	6025      	str	r5, [r4, #0]
 8005d9c:	e7de      	b.n	8005d5c <_malloc_r+0xa0>
 8005d9e:	bf00      	nop
 8005da0:	20000320 	.word	0x20000320

08005da4 <_sbrk_r>:
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	2300      	movs	r3, #0
 8005da8:	4d05      	ldr	r5, [pc, #20]	; (8005dc0 <_sbrk_r+0x1c>)
 8005daa:	4604      	mov	r4, r0
 8005dac:	4608      	mov	r0, r1
 8005dae:	602b      	str	r3, [r5, #0]
 8005db0:	f7fb fd7e 	bl	80018b0 <_sbrk>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	d102      	bne.n	8005dbe <_sbrk_r+0x1a>
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	b103      	cbz	r3, 8005dbe <_sbrk_r+0x1a>
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}
 8005dc0:	20000328 	.word	0x20000328

08005dc4 <strcpy>:
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dca:	f803 2b01 	strb.w	r2, [r3], #1
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	d1f9      	bne.n	8005dc6 <strcpy+0x2>
 8005dd2:	4770      	bx	lr

08005dd4 <_vsiprintf_r>:
 8005dd4:	b500      	push	{lr}
 8005dd6:	b09b      	sub	sp, #108	; 0x6c
 8005dd8:	9100      	str	r1, [sp, #0]
 8005dda:	9104      	str	r1, [sp, #16]
 8005ddc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005de0:	9105      	str	r1, [sp, #20]
 8005de2:	9102      	str	r1, [sp, #8]
 8005de4:	4905      	ldr	r1, [pc, #20]	; (8005dfc <_vsiprintf_r+0x28>)
 8005de6:	9103      	str	r1, [sp, #12]
 8005de8:	4669      	mov	r1, sp
 8005dea:	f000 f87b 	bl	8005ee4 <_svfiprintf_r>
 8005dee:	2200      	movs	r2, #0
 8005df0:	9b00      	ldr	r3, [sp, #0]
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	b01b      	add	sp, #108	; 0x6c
 8005df6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dfa:	bf00      	nop
 8005dfc:	ffff0208 	.word	0xffff0208

08005e00 <vsiprintf>:
 8005e00:	4613      	mov	r3, r2
 8005e02:	460a      	mov	r2, r1
 8005e04:	4601      	mov	r1, r0
 8005e06:	4802      	ldr	r0, [pc, #8]	; (8005e10 <vsiprintf+0x10>)
 8005e08:	6800      	ldr	r0, [r0, #0]
 8005e0a:	f7ff bfe3 	b.w	8005dd4 <_vsiprintf_r>
 8005e0e:	bf00      	nop
 8005e10:	2000008c 	.word	0x2000008c

08005e14 <__malloc_lock>:
 8005e14:	4801      	ldr	r0, [pc, #4]	; (8005e1c <__malloc_lock+0x8>)
 8005e16:	f000 bafb 	b.w	8006410 <__retarget_lock_acquire_recursive>
 8005e1a:	bf00      	nop
 8005e1c:	2000032c 	.word	0x2000032c

08005e20 <__malloc_unlock>:
 8005e20:	4801      	ldr	r0, [pc, #4]	; (8005e28 <__malloc_unlock+0x8>)
 8005e22:	f000 baf6 	b.w	8006412 <__retarget_lock_release_recursive>
 8005e26:	bf00      	nop
 8005e28:	2000032c 	.word	0x2000032c

08005e2c <__ssputs_r>:
 8005e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e30:	688e      	ldr	r6, [r1, #8]
 8005e32:	4682      	mov	sl, r0
 8005e34:	429e      	cmp	r6, r3
 8005e36:	460c      	mov	r4, r1
 8005e38:	4690      	mov	r8, r2
 8005e3a:	461f      	mov	r7, r3
 8005e3c:	d838      	bhi.n	8005eb0 <__ssputs_r+0x84>
 8005e3e:	898a      	ldrh	r2, [r1, #12]
 8005e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e44:	d032      	beq.n	8005eac <__ssputs_r+0x80>
 8005e46:	6825      	ldr	r5, [r4, #0]
 8005e48:	6909      	ldr	r1, [r1, #16]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	eba5 0901 	sub.w	r9, r5, r1
 8005e50:	6965      	ldr	r5, [r4, #20]
 8005e52:	444b      	add	r3, r9
 8005e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e5c:	106d      	asrs	r5, r5, #1
 8005e5e:	429d      	cmp	r5, r3
 8005e60:	bf38      	it	cc
 8005e62:	461d      	movcc	r5, r3
 8005e64:	0553      	lsls	r3, r2, #21
 8005e66:	d531      	bpl.n	8005ecc <__ssputs_r+0xa0>
 8005e68:	4629      	mov	r1, r5
 8005e6a:	f7ff ff27 	bl	8005cbc <_malloc_r>
 8005e6e:	4606      	mov	r6, r0
 8005e70:	b950      	cbnz	r0, 8005e88 <__ssputs_r+0x5c>
 8005e72:	230c      	movs	r3, #12
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	f8ca 3000 	str.w	r3, [sl]
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e82:	81a3      	strh	r3, [r4, #12]
 8005e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e88:	464a      	mov	r2, r9
 8005e8a:	6921      	ldr	r1, [r4, #16]
 8005e8c:	f000 fad0 	bl	8006430 <memcpy>
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9a:	81a3      	strh	r3, [r4, #12]
 8005e9c:	6126      	str	r6, [r4, #16]
 8005e9e:	444e      	add	r6, r9
 8005ea0:	6026      	str	r6, [r4, #0]
 8005ea2:	463e      	mov	r6, r7
 8005ea4:	6165      	str	r5, [r4, #20]
 8005ea6:	eba5 0509 	sub.w	r5, r5, r9
 8005eaa:	60a5      	str	r5, [r4, #8]
 8005eac:	42be      	cmp	r6, r7
 8005eae:	d900      	bls.n	8005eb2 <__ssputs_r+0x86>
 8005eb0:	463e      	mov	r6, r7
 8005eb2:	4632      	mov	r2, r6
 8005eb4:	4641      	mov	r1, r8
 8005eb6:	6820      	ldr	r0, [r4, #0]
 8005eb8:	f000 fac8 	bl	800644c <memmove>
 8005ebc:	68a3      	ldr	r3, [r4, #8]
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	1b9b      	subs	r3, r3, r6
 8005ec2:	60a3      	str	r3, [r4, #8]
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	4433      	add	r3, r6
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	e7db      	b.n	8005e84 <__ssputs_r+0x58>
 8005ecc:	462a      	mov	r2, r5
 8005ece:	f000 fad7 	bl	8006480 <_realloc_r>
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d1e1      	bne.n	8005e9c <__ssputs_r+0x70>
 8005ed8:	4650      	mov	r0, sl
 8005eda:	6921      	ldr	r1, [r4, #16]
 8005edc:	f7ff fe86 	bl	8005bec <_free_r>
 8005ee0:	e7c7      	b.n	8005e72 <__ssputs_r+0x46>
	...

08005ee4 <_svfiprintf_r>:
 8005ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee8:	4698      	mov	r8, r3
 8005eea:	898b      	ldrh	r3, [r1, #12]
 8005eec:	4607      	mov	r7, r0
 8005eee:	061b      	lsls	r3, r3, #24
 8005ef0:	460d      	mov	r5, r1
 8005ef2:	4614      	mov	r4, r2
 8005ef4:	b09d      	sub	sp, #116	; 0x74
 8005ef6:	d50e      	bpl.n	8005f16 <_svfiprintf_r+0x32>
 8005ef8:	690b      	ldr	r3, [r1, #16]
 8005efa:	b963      	cbnz	r3, 8005f16 <_svfiprintf_r+0x32>
 8005efc:	2140      	movs	r1, #64	; 0x40
 8005efe:	f7ff fedd 	bl	8005cbc <_malloc_r>
 8005f02:	6028      	str	r0, [r5, #0]
 8005f04:	6128      	str	r0, [r5, #16]
 8005f06:	b920      	cbnz	r0, 8005f12 <_svfiprintf_r+0x2e>
 8005f08:	230c      	movs	r3, #12
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	e0d1      	b.n	80060b6 <_svfiprintf_r+0x1d2>
 8005f12:	2340      	movs	r3, #64	; 0x40
 8005f14:	616b      	str	r3, [r5, #20]
 8005f16:	2300      	movs	r3, #0
 8005f18:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1a:	2320      	movs	r3, #32
 8005f1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f20:	2330      	movs	r3, #48	; 0x30
 8005f22:	f04f 0901 	mov.w	r9, #1
 8005f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80060d0 <_svfiprintf_r+0x1ec>
 8005f2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f32:	4623      	mov	r3, r4
 8005f34:	469a      	mov	sl, r3
 8005f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f3a:	b10a      	cbz	r2, 8005f40 <_svfiprintf_r+0x5c>
 8005f3c:	2a25      	cmp	r2, #37	; 0x25
 8005f3e:	d1f9      	bne.n	8005f34 <_svfiprintf_r+0x50>
 8005f40:	ebba 0b04 	subs.w	fp, sl, r4
 8005f44:	d00b      	beq.n	8005f5e <_svfiprintf_r+0x7a>
 8005f46:	465b      	mov	r3, fp
 8005f48:	4622      	mov	r2, r4
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	f7ff ff6d 	bl	8005e2c <__ssputs_r>
 8005f52:	3001      	adds	r0, #1
 8005f54:	f000 80aa 	beq.w	80060ac <_svfiprintf_r+0x1c8>
 8005f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f5a:	445a      	add	r2, fp
 8005f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80a2 	beq.w	80060ac <_svfiprintf_r+0x1c8>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f72:	f10a 0a01 	add.w	sl, sl, #1
 8005f76:	9304      	str	r3, [sp, #16]
 8005f78:	9307      	str	r3, [sp, #28]
 8005f7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f7e:	931a      	str	r3, [sp, #104]	; 0x68
 8005f80:	4654      	mov	r4, sl
 8005f82:	2205      	movs	r2, #5
 8005f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f88:	4851      	ldr	r0, [pc, #324]	; (80060d0 <_svfiprintf_r+0x1ec>)
 8005f8a:	f000 fa43 	bl	8006414 <memchr>
 8005f8e:	9a04      	ldr	r2, [sp, #16]
 8005f90:	b9d8      	cbnz	r0, 8005fca <_svfiprintf_r+0xe6>
 8005f92:	06d0      	lsls	r0, r2, #27
 8005f94:	bf44      	itt	mi
 8005f96:	2320      	movmi	r3, #32
 8005f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f9c:	0711      	lsls	r1, r2, #28
 8005f9e:	bf44      	itt	mi
 8005fa0:	232b      	movmi	r3, #43	; 0x2b
 8005fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8005faa:	2b2a      	cmp	r3, #42	; 0x2a
 8005fac:	d015      	beq.n	8005fda <_svfiprintf_r+0xf6>
 8005fae:	4654      	mov	r4, sl
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	f04f 0c0a 	mov.w	ip, #10
 8005fb6:	9a07      	ldr	r2, [sp, #28]
 8005fb8:	4621      	mov	r1, r4
 8005fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fbe:	3b30      	subs	r3, #48	; 0x30
 8005fc0:	2b09      	cmp	r3, #9
 8005fc2:	d94e      	bls.n	8006062 <_svfiprintf_r+0x17e>
 8005fc4:	b1b0      	cbz	r0, 8005ff4 <_svfiprintf_r+0x110>
 8005fc6:	9207      	str	r2, [sp, #28]
 8005fc8:	e014      	b.n	8005ff4 <_svfiprintf_r+0x110>
 8005fca:	eba0 0308 	sub.w	r3, r0, r8
 8005fce:	fa09 f303 	lsl.w	r3, r9, r3
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	46a2      	mov	sl, r4
 8005fd6:	9304      	str	r3, [sp, #16]
 8005fd8:	e7d2      	b.n	8005f80 <_svfiprintf_r+0x9c>
 8005fda:	9b03      	ldr	r3, [sp, #12]
 8005fdc:	1d19      	adds	r1, r3, #4
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	9103      	str	r1, [sp, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	bfbb      	ittet	lt
 8005fe6:	425b      	neglt	r3, r3
 8005fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8005fec:	9307      	strge	r3, [sp, #28]
 8005fee:	9307      	strlt	r3, [sp, #28]
 8005ff0:	bfb8      	it	lt
 8005ff2:	9204      	strlt	r2, [sp, #16]
 8005ff4:	7823      	ldrb	r3, [r4, #0]
 8005ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ff8:	d10c      	bne.n	8006014 <_svfiprintf_r+0x130>
 8005ffa:	7863      	ldrb	r3, [r4, #1]
 8005ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8005ffe:	d135      	bne.n	800606c <_svfiprintf_r+0x188>
 8006000:	9b03      	ldr	r3, [sp, #12]
 8006002:	3402      	adds	r4, #2
 8006004:	1d1a      	adds	r2, r3, #4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	9203      	str	r2, [sp, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	bfb8      	it	lt
 800600e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006012:	9305      	str	r3, [sp, #20]
 8006014:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80060d4 <_svfiprintf_r+0x1f0>
 8006018:	2203      	movs	r2, #3
 800601a:	4650      	mov	r0, sl
 800601c:	7821      	ldrb	r1, [r4, #0]
 800601e:	f000 f9f9 	bl	8006414 <memchr>
 8006022:	b140      	cbz	r0, 8006036 <_svfiprintf_r+0x152>
 8006024:	2340      	movs	r3, #64	; 0x40
 8006026:	eba0 000a 	sub.w	r0, r0, sl
 800602a:	fa03 f000 	lsl.w	r0, r3, r0
 800602e:	9b04      	ldr	r3, [sp, #16]
 8006030:	3401      	adds	r4, #1
 8006032:	4303      	orrs	r3, r0
 8006034:	9304      	str	r3, [sp, #16]
 8006036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800603a:	2206      	movs	r2, #6
 800603c:	4826      	ldr	r0, [pc, #152]	; (80060d8 <_svfiprintf_r+0x1f4>)
 800603e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006042:	f000 f9e7 	bl	8006414 <memchr>
 8006046:	2800      	cmp	r0, #0
 8006048:	d038      	beq.n	80060bc <_svfiprintf_r+0x1d8>
 800604a:	4b24      	ldr	r3, [pc, #144]	; (80060dc <_svfiprintf_r+0x1f8>)
 800604c:	bb1b      	cbnz	r3, 8006096 <_svfiprintf_r+0x1b2>
 800604e:	9b03      	ldr	r3, [sp, #12]
 8006050:	3307      	adds	r3, #7
 8006052:	f023 0307 	bic.w	r3, r3, #7
 8006056:	3308      	adds	r3, #8
 8006058:	9303      	str	r3, [sp, #12]
 800605a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605c:	4433      	add	r3, r6
 800605e:	9309      	str	r3, [sp, #36]	; 0x24
 8006060:	e767      	b.n	8005f32 <_svfiprintf_r+0x4e>
 8006062:	460c      	mov	r4, r1
 8006064:	2001      	movs	r0, #1
 8006066:	fb0c 3202 	mla	r2, ip, r2, r3
 800606a:	e7a5      	b.n	8005fb8 <_svfiprintf_r+0xd4>
 800606c:	2300      	movs	r3, #0
 800606e:	f04f 0c0a 	mov.w	ip, #10
 8006072:	4619      	mov	r1, r3
 8006074:	3401      	adds	r4, #1
 8006076:	9305      	str	r3, [sp, #20]
 8006078:	4620      	mov	r0, r4
 800607a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800607e:	3a30      	subs	r2, #48	; 0x30
 8006080:	2a09      	cmp	r2, #9
 8006082:	d903      	bls.n	800608c <_svfiprintf_r+0x1a8>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0c5      	beq.n	8006014 <_svfiprintf_r+0x130>
 8006088:	9105      	str	r1, [sp, #20]
 800608a:	e7c3      	b.n	8006014 <_svfiprintf_r+0x130>
 800608c:	4604      	mov	r4, r0
 800608e:	2301      	movs	r3, #1
 8006090:	fb0c 2101 	mla	r1, ip, r1, r2
 8006094:	e7f0      	b.n	8006078 <_svfiprintf_r+0x194>
 8006096:	ab03      	add	r3, sp, #12
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	462a      	mov	r2, r5
 800609c:	4638      	mov	r0, r7
 800609e:	4b10      	ldr	r3, [pc, #64]	; (80060e0 <_svfiprintf_r+0x1fc>)
 80060a0:	a904      	add	r1, sp, #16
 80060a2:	f3af 8000 	nop.w
 80060a6:	1c42      	adds	r2, r0, #1
 80060a8:	4606      	mov	r6, r0
 80060aa:	d1d6      	bne.n	800605a <_svfiprintf_r+0x176>
 80060ac:	89ab      	ldrh	r3, [r5, #12]
 80060ae:	065b      	lsls	r3, r3, #25
 80060b0:	f53f af2c 	bmi.w	8005f0c <_svfiprintf_r+0x28>
 80060b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060b6:	b01d      	add	sp, #116	; 0x74
 80060b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060bc:	ab03      	add	r3, sp, #12
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	462a      	mov	r2, r5
 80060c2:	4638      	mov	r0, r7
 80060c4:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <_svfiprintf_r+0x1fc>)
 80060c6:	a904      	add	r1, sp, #16
 80060c8:	f000 f87c 	bl	80061c4 <_printf_i>
 80060cc:	e7eb      	b.n	80060a6 <_svfiprintf_r+0x1c2>
 80060ce:	bf00      	nop
 80060d0:	080065ec 	.word	0x080065ec
 80060d4:	080065f2 	.word	0x080065f2
 80060d8:	080065f6 	.word	0x080065f6
 80060dc:	00000000 	.word	0x00000000
 80060e0:	08005e2d 	.word	0x08005e2d

080060e4 <_printf_common>:
 80060e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e8:	4616      	mov	r6, r2
 80060ea:	4699      	mov	r9, r3
 80060ec:	688a      	ldr	r2, [r1, #8]
 80060ee:	690b      	ldr	r3, [r1, #16]
 80060f0:	4607      	mov	r7, r0
 80060f2:	4293      	cmp	r3, r2
 80060f4:	bfb8      	it	lt
 80060f6:	4613      	movlt	r3, r2
 80060f8:	6033      	str	r3, [r6, #0]
 80060fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060fe:	460c      	mov	r4, r1
 8006100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006104:	b10a      	cbz	r2, 800610a <_printf_common+0x26>
 8006106:	3301      	adds	r3, #1
 8006108:	6033      	str	r3, [r6, #0]
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	0699      	lsls	r1, r3, #26
 800610e:	bf42      	ittt	mi
 8006110:	6833      	ldrmi	r3, [r6, #0]
 8006112:	3302      	addmi	r3, #2
 8006114:	6033      	strmi	r3, [r6, #0]
 8006116:	6825      	ldr	r5, [r4, #0]
 8006118:	f015 0506 	ands.w	r5, r5, #6
 800611c:	d106      	bne.n	800612c <_printf_common+0x48>
 800611e:	f104 0a19 	add.w	sl, r4, #25
 8006122:	68e3      	ldr	r3, [r4, #12]
 8006124:	6832      	ldr	r2, [r6, #0]
 8006126:	1a9b      	subs	r3, r3, r2
 8006128:	42ab      	cmp	r3, r5
 800612a:	dc28      	bgt.n	800617e <_printf_common+0x9a>
 800612c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006130:	1e13      	subs	r3, r2, #0
 8006132:	6822      	ldr	r2, [r4, #0]
 8006134:	bf18      	it	ne
 8006136:	2301      	movne	r3, #1
 8006138:	0692      	lsls	r2, r2, #26
 800613a:	d42d      	bmi.n	8006198 <_printf_common+0xb4>
 800613c:	4649      	mov	r1, r9
 800613e:	4638      	mov	r0, r7
 8006140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006144:	47c0      	blx	r8
 8006146:	3001      	adds	r0, #1
 8006148:	d020      	beq.n	800618c <_printf_common+0xa8>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	68e5      	ldr	r5, [r4, #12]
 800614e:	f003 0306 	and.w	r3, r3, #6
 8006152:	2b04      	cmp	r3, #4
 8006154:	bf18      	it	ne
 8006156:	2500      	movne	r5, #0
 8006158:	6832      	ldr	r2, [r6, #0]
 800615a:	f04f 0600 	mov.w	r6, #0
 800615e:	68a3      	ldr	r3, [r4, #8]
 8006160:	bf08      	it	eq
 8006162:	1aad      	subeq	r5, r5, r2
 8006164:	6922      	ldr	r2, [r4, #16]
 8006166:	bf08      	it	eq
 8006168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800616c:	4293      	cmp	r3, r2
 800616e:	bfc4      	itt	gt
 8006170:	1a9b      	subgt	r3, r3, r2
 8006172:	18ed      	addgt	r5, r5, r3
 8006174:	341a      	adds	r4, #26
 8006176:	42b5      	cmp	r5, r6
 8006178:	d11a      	bne.n	80061b0 <_printf_common+0xcc>
 800617a:	2000      	movs	r0, #0
 800617c:	e008      	b.n	8006190 <_printf_common+0xac>
 800617e:	2301      	movs	r3, #1
 8006180:	4652      	mov	r2, sl
 8006182:	4649      	mov	r1, r9
 8006184:	4638      	mov	r0, r7
 8006186:	47c0      	blx	r8
 8006188:	3001      	adds	r0, #1
 800618a:	d103      	bne.n	8006194 <_printf_common+0xb0>
 800618c:	f04f 30ff 	mov.w	r0, #4294967295
 8006190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006194:	3501      	adds	r5, #1
 8006196:	e7c4      	b.n	8006122 <_printf_common+0x3e>
 8006198:	2030      	movs	r0, #48	; 0x30
 800619a:	18e1      	adds	r1, r4, r3
 800619c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061a6:	4422      	add	r2, r4
 80061a8:	3302      	adds	r3, #2
 80061aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061ae:	e7c5      	b.n	800613c <_printf_common+0x58>
 80061b0:	2301      	movs	r3, #1
 80061b2:	4622      	mov	r2, r4
 80061b4:	4649      	mov	r1, r9
 80061b6:	4638      	mov	r0, r7
 80061b8:	47c0      	blx	r8
 80061ba:	3001      	adds	r0, #1
 80061bc:	d0e6      	beq.n	800618c <_printf_common+0xa8>
 80061be:	3601      	adds	r6, #1
 80061c0:	e7d9      	b.n	8006176 <_printf_common+0x92>
	...

080061c4 <_printf_i>:
 80061c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061c8:	7e0f      	ldrb	r7, [r1, #24]
 80061ca:	4691      	mov	r9, r2
 80061cc:	2f78      	cmp	r7, #120	; 0x78
 80061ce:	4680      	mov	r8, r0
 80061d0:	460c      	mov	r4, r1
 80061d2:	469a      	mov	sl, r3
 80061d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061da:	d807      	bhi.n	80061ec <_printf_i+0x28>
 80061dc:	2f62      	cmp	r7, #98	; 0x62
 80061de:	d80a      	bhi.n	80061f6 <_printf_i+0x32>
 80061e0:	2f00      	cmp	r7, #0
 80061e2:	f000 80d9 	beq.w	8006398 <_printf_i+0x1d4>
 80061e6:	2f58      	cmp	r7, #88	; 0x58
 80061e8:	f000 80a4 	beq.w	8006334 <_printf_i+0x170>
 80061ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061f4:	e03a      	b.n	800626c <_printf_i+0xa8>
 80061f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061fa:	2b15      	cmp	r3, #21
 80061fc:	d8f6      	bhi.n	80061ec <_printf_i+0x28>
 80061fe:	a101      	add	r1, pc, #4	; (adr r1, 8006204 <_printf_i+0x40>)
 8006200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006204:	0800625d 	.word	0x0800625d
 8006208:	08006271 	.word	0x08006271
 800620c:	080061ed 	.word	0x080061ed
 8006210:	080061ed 	.word	0x080061ed
 8006214:	080061ed 	.word	0x080061ed
 8006218:	080061ed 	.word	0x080061ed
 800621c:	08006271 	.word	0x08006271
 8006220:	080061ed 	.word	0x080061ed
 8006224:	080061ed 	.word	0x080061ed
 8006228:	080061ed 	.word	0x080061ed
 800622c:	080061ed 	.word	0x080061ed
 8006230:	0800637f 	.word	0x0800637f
 8006234:	080062a1 	.word	0x080062a1
 8006238:	08006361 	.word	0x08006361
 800623c:	080061ed 	.word	0x080061ed
 8006240:	080061ed 	.word	0x080061ed
 8006244:	080063a1 	.word	0x080063a1
 8006248:	080061ed 	.word	0x080061ed
 800624c:	080062a1 	.word	0x080062a1
 8006250:	080061ed 	.word	0x080061ed
 8006254:	080061ed 	.word	0x080061ed
 8006258:	08006369 	.word	0x08006369
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	1d1a      	adds	r2, r3, #4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	602a      	str	r2, [r5, #0]
 8006264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800626c:	2301      	movs	r3, #1
 800626e:	e0a4      	b.n	80063ba <_printf_i+0x1f6>
 8006270:	6820      	ldr	r0, [r4, #0]
 8006272:	6829      	ldr	r1, [r5, #0]
 8006274:	0606      	lsls	r6, r0, #24
 8006276:	f101 0304 	add.w	r3, r1, #4
 800627a:	d50a      	bpl.n	8006292 <_printf_i+0xce>
 800627c:	680e      	ldr	r6, [r1, #0]
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	2e00      	cmp	r6, #0
 8006282:	da03      	bge.n	800628c <_printf_i+0xc8>
 8006284:	232d      	movs	r3, #45	; 0x2d
 8006286:	4276      	negs	r6, r6
 8006288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800628c:	230a      	movs	r3, #10
 800628e:	485e      	ldr	r0, [pc, #376]	; (8006408 <_printf_i+0x244>)
 8006290:	e019      	b.n	80062c6 <_printf_i+0x102>
 8006292:	680e      	ldr	r6, [r1, #0]
 8006294:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006298:	602b      	str	r3, [r5, #0]
 800629a:	bf18      	it	ne
 800629c:	b236      	sxthne	r6, r6
 800629e:	e7ef      	b.n	8006280 <_printf_i+0xbc>
 80062a0:	682b      	ldr	r3, [r5, #0]
 80062a2:	6820      	ldr	r0, [r4, #0]
 80062a4:	1d19      	adds	r1, r3, #4
 80062a6:	6029      	str	r1, [r5, #0]
 80062a8:	0601      	lsls	r1, r0, #24
 80062aa:	d501      	bpl.n	80062b0 <_printf_i+0xec>
 80062ac:	681e      	ldr	r6, [r3, #0]
 80062ae:	e002      	b.n	80062b6 <_printf_i+0xf2>
 80062b0:	0646      	lsls	r6, r0, #25
 80062b2:	d5fb      	bpl.n	80062ac <_printf_i+0xe8>
 80062b4:	881e      	ldrh	r6, [r3, #0]
 80062b6:	2f6f      	cmp	r7, #111	; 0x6f
 80062b8:	bf0c      	ite	eq
 80062ba:	2308      	moveq	r3, #8
 80062bc:	230a      	movne	r3, #10
 80062be:	4852      	ldr	r0, [pc, #328]	; (8006408 <_printf_i+0x244>)
 80062c0:	2100      	movs	r1, #0
 80062c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062c6:	6865      	ldr	r5, [r4, #4]
 80062c8:	2d00      	cmp	r5, #0
 80062ca:	bfa8      	it	ge
 80062cc:	6821      	ldrge	r1, [r4, #0]
 80062ce:	60a5      	str	r5, [r4, #8]
 80062d0:	bfa4      	itt	ge
 80062d2:	f021 0104 	bicge.w	r1, r1, #4
 80062d6:	6021      	strge	r1, [r4, #0]
 80062d8:	b90e      	cbnz	r6, 80062de <_printf_i+0x11a>
 80062da:	2d00      	cmp	r5, #0
 80062dc:	d04d      	beq.n	800637a <_printf_i+0x1b6>
 80062de:	4615      	mov	r5, r2
 80062e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80062e4:	fb03 6711 	mls	r7, r3, r1, r6
 80062e8:	5dc7      	ldrb	r7, [r0, r7]
 80062ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062ee:	4637      	mov	r7, r6
 80062f0:	42bb      	cmp	r3, r7
 80062f2:	460e      	mov	r6, r1
 80062f4:	d9f4      	bls.n	80062e0 <_printf_i+0x11c>
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d10b      	bne.n	8006312 <_printf_i+0x14e>
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	07de      	lsls	r6, r3, #31
 80062fe:	d508      	bpl.n	8006312 <_printf_i+0x14e>
 8006300:	6923      	ldr	r3, [r4, #16]
 8006302:	6861      	ldr	r1, [r4, #4]
 8006304:	4299      	cmp	r1, r3
 8006306:	bfde      	ittt	le
 8006308:	2330      	movle	r3, #48	; 0x30
 800630a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800630e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006312:	1b52      	subs	r2, r2, r5
 8006314:	6122      	str	r2, [r4, #16]
 8006316:	464b      	mov	r3, r9
 8006318:	4621      	mov	r1, r4
 800631a:	4640      	mov	r0, r8
 800631c:	f8cd a000 	str.w	sl, [sp]
 8006320:	aa03      	add	r2, sp, #12
 8006322:	f7ff fedf 	bl	80060e4 <_printf_common>
 8006326:	3001      	adds	r0, #1
 8006328:	d14c      	bne.n	80063c4 <_printf_i+0x200>
 800632a:	f04f 30ff 	mov.w	r0, #4294967295
 800632e:	b004      	add	sp, #16
 8006330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006334:	4834      	ldr	r0, [pc, #208]	; (8006408 <_printf_i+0x244>)
 8006336:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800633a:	6829      	ldr	r1, [r5, #0]
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006342:	6029      	str	r1, [r5, #0]
 8006344:	061d      	lsls	r5, r3, #24
 8006346:	d514      	bpl.n	8006372 <_printf_i+0x1ae>
 8006348:	07df      	lsls	r7, r3, #31
 800634a:	bf44      	itt	mi
 800634c:	f043 0320 	orrmi.w	r3, r3, #32
 8006350:	6023      	strmi	r3, [r4, #0]
 8006352:	b91e      	cbnz	r6, 800635c <_printf_i+0x198>
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	f023 0320 	bic.w	r3, r3, #32
 800635a:	6023      	str	r3, [r4, #0]
 800635c:	2310      	movs	r3, #16
 800635e:	e7af      	b.n	80062c0 <_printf_i+0xfc>
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	f043 0320 	orr.w	r3, r3, #32
 8006366:	6023      	str	r3, [r4, #0]
 8006368:	2378      	movs	r3, #120	; 0x78
 800636a:	4828      	ldr	r0, [pc, #160]	; (800640c <_printf_i+0x248>)
 800636c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006370:	e7e3      	b.n	800633a <_printf_i+0x176>
 8006372:	0659      	lsls	r1, r3, #25
 8006374:	bf48      	it	mi
 8006376:	b2b6      	uxthmi	r6, r6
 8006378:	e7e6      	b.n	8006348 <_printf_i+0x184>
 800637a:	4615      	mov	r5, r2
 800637c:	e7bb      	b.n	80062f6 <_printf_i+0x132>
 800637e:	682b      	ldr	r3, [r5, #0]
 8006380:	6826      	ldr	r6, [r4, #0]
 8006382:	1d18      	adds	r0, r3, #4
 8006384:	6961      	ldr	r1, [r4, #20]
 8006386:	6028      	str	r0, [r5, #0]
 8006388:	0635      	lsls	r5, r6, #24
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	d501      	bpl.n	8006392 <_printf_i+0x1ce>
 800638e:	6019      	str	r1, [r3, #0]
 8006390:	e002      	b.n	8006398 <_printf_i+0x1d4>
 8006392:	0670      	lsls	r0, r6, #25
 8006394:	d5fb      	bpl.n	800638e <_printf_i+0x1ca>
 8006396:	8019      	strh	r1, [r3, #0]
 8006398:	2300      	movs	r3, #0
 800639a:	4615      	mov	r5, r2
 800639c:	6123      	str	r3, [r4, #16]
 800639e:	e7ba      	b.n	8006316 <_printf_i+0x152>
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	2100      	movs	r1, #0
 80063a4:	1d1a      	adds	r2, r3, #4
 80063a6:	602a      	str	r2, [r5, #0]
 80063a8:	681d      	ldr	r5, [r3, #0]
 80063aa:	6862      	ldr	r2, [r4, #4]
 80063ac:	4628      	mov	r0, r5
 80063ae:	f000 f831 	bl	8006414 <memchr>
 80063b2:	b108      	cbz	r0, 80063b8 <_printf_i+0x1f4>
 80063b4:	1b40      	subs	r0, r0, r5
 80063b6:	6060      	str	r0, [r4, #4]
 80063b8:	6863      	ldr	r3, [r4, #4]
 80063ba:	6123      	str	r3, [r4, #16]
 80063bc:	2300      	movs	r3, #0
 80063be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c2:	e7a8      	b.n	8006316 <_printf_i+0x152>
 80063c4:	462a      	mov	r2, r5
 80063c6:	4649      	mov	r1, r9
 80063c8:	4640      	mov	r0, r8
 80063ca:	6923      	ldr	r3, [r4, #16]
 80063cc:	47d0      	blx	sl
 80063ce:	3001      	adds	r0, #1
 80063d0:	d0ab      	beq.n	800632a <_printf_i+0x166>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	079b      	lsls	r3, r3, #30
 80063d6:	d413      	bmi.n	8006400 <_printf_i+0x23c>
 80063d8:	68e0      	ldr	r0, [r4, #12]
 80063da:	9b03      	ldr	r3, [sp, #12]
 80063dc:	4298      	cmp	r0, r3
 80063de:	bfb8      	it	lt
 80063e0:	4618      	movlt	r0, r3
 80063e2:	e7a4      	b.n	800632e <_printf_i+0x16a>
 80063e4:	2301      	movs	r3, #1
 80063e6:	4632      	mov	r2, r6
 80063e8:	4649      	mov	r1, r9
 80063ea:	4640      	mov	r0, r8
 80063ec:	47d0      	blx	sl
 80063ee:	3001      	adds	r0, #1
 80063f0:	d09b      	beq.n	800632a <_printf_i+0x166>
 80063f2:	3501      	adds	r5, #1
 80063f4:	68e3      	ldr	r3, [r4, #12]
 80063f6:	9903      	ldr	r1, [sp, #12]
 80063f8:	1a5b      	subs	r3, r3, r1
 80063fa:	42ab      	cmp	r3, r5
 80063fc:	dcf2      	bgt.n	80063e4 <_printf_i+0x220>
 80063fe:	e7eb      	b.n	80063d8 <_printf_i+0x214>
 8006400:	2500      	movs	r5, #0
 8006402:	f104 0619 	add.w	r6, r4, #25
 8006406:	e7f5      	b.n	80063f4 <_printf_i+0x230>
 8006408:	080065fd 	.word	0x080065fd
 800640c:	0800660e 	.word	0x0800660e

08006410 <__retarget_lock_acquire_recursive>:
 8006410:	4770      	bx	lr

08006412 <__retarget_lock_release_recursive>:
 8006412:	4770      	bx	lr

08006414 <memchr>:
 8006414:	4603      	mov	r3, r0
 8006416:	b510      	push	{r4, lr}
 8006418:	b2c9      	uxtb	r1, r1
 800641a:	4402      	add	r2, r0
 800641c:	4293      	cmp	r3, r2
 800641e:	4618      	mov	r0, r3
 8006420:	d101      	bne.n	8006426 <memchr+0x12>
 8006422:	2000      	movs	r0, #0
 8006424:	e003      	b.n	800642e <memchr+0x1a>
 8006426:	7804      	ldrb	r4, [r0, #0]
 8006428:	3301      	adds	r3, #1
 800642a:	428c      	cmp	r4, r1
 800642c:	d1f6      	bne.n	800641c <memchr+0x8>
 800642e:	bd10      	pop	{r4, pc}

08006430 <memcpy>:
 8006430:	440a      	add	r2, r1
 8006432:	4291      	cmp	r1, r2
 8006434:	f100 33ff 	add.w	r3, r0, #4294967295
 8006438:	d100      	bne.n	800643c <memcpy+0xc>
 800643a:	4770      	bx	lr
 800643c:	b510      	push	{r4, lr}
 800643e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006442:	4291      	cmp	r1, r2
 8006444:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006448:	d1f9      	bne.n	800643e <memcpy+0xe>
 800644a:	bd10      	pop	{r4, pc}

0800644c <memmove>:
 800644c:	4288      	cmp	r0, r1
 800644e:	b510      	push	{r4, lr}
 8006450:	eb01 0402 	add.w	r4, r1, r2
 8006454:	d902      	bls.n	800645c <memmove+0x10>
 8006456:	4284      	cmp	r4, r0
 8006458:	4623      	mov	r3, r4
 800645a:	d807      	bhi.n	800646c <memmove+0x20>
 800645c:	1e43      	subs	r3, r0, #1
 800645e:	42a1      	cmp	r1, r4
 8006460:	d008      	beq.n	8006474 <memmove+0x28>
 8006462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800646a:	e7f8      	b.n	800645e <memmove+0x12>
 800646c:	4601      	mov	r1, r0
 800646e:	4402      	add	r2, r0
 8006470:	428a      	cmp	r2, r1
 8006472:	d100      	bne.n	8006476 <memmove+0x2a>
 8006474:	bd10      	pop	{r4, pc}
 8006476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800647a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800647e:	e7f7      	b.n	8006470 <memmove+0x24>

08006480 <_realloc_r>:
 8006480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006484:	4680      	mov	r8, r0
 8006486:	4614      	mov	r4, r2
 8006488:	460e      	mov	r6, r1
 800648a:	b921      	cbnz	r1, 8006496 <_realloc_r+0x16>
 800648c:	4611      	mov	r1, r2
 800648e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006492:	f7ff bc13 	b.w	8005cbc <_malloc_r>
 8006496:	b92a      	cbnz	r2, 80064a4 <_realloc_r+0x24>
 8006498:	f7ff fba8 	bl	8005bec <_free_r>
 800649c:	4625      	mov	r5, r4
 800649e:	4628      	mov	r0, r5
 80064a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a4:	f000 f81b 	bl	80064de <_malloc_usable_size_r>
 80064a8:	4284      	cmp	r4, r0
 80064aa:	4607      	mov	r7, r0
 80064ac:	d802      	bhi.n	80064b4 <_realloc_r+0x34>
 80064ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064b2:	d812      	bhi.n	80064da <_realloc_r+0x5a>
 80064b4:	4621      	mov	r1, r4
 80064b6:	4640      	mov	r0, r8
 80064b8:	f7ff fc00 	bl	8005cbc <_malloc_r>
 80064bc:	4605      	mov	r5, r0
 80064be:	2800      	cmp	r0, #0
 80064c0:	d0ed      	beq.n	800649e <_realloc_r+0x1e>
 80064c2:	42bc      	cmp	r4, r7
 80064c4:	4622      	mov	r2, r4
 80064c6:	4631      	mov	r1, r6
 80064c8:	bf28      	it	cs
 80064ca:	463a      	movcs	r2, r7
 80064cc:	f7ff ffb0 	bl	8006430 <memcpy>
 80064d0:	4631      	mov	r1, r6
 80064d2:	4640      	mov	r0, r8
 80064d4:	f7ff fb8a 	bl	8005bec <_free_r>
 80064d8:	e7e1      	b.n	800649e <_realloc_r+0x1e>
 80064da:	4635      	mov	r5, r6
 80064dc:	e7df      	b.n	800649e <_realloc_r+0x1e>

080064de <_malloc_usable_size_r>:
 80064de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064e2:	1f18      	subs	r0, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bfbc      	itt	lt
 80064e8:	580b      	ldrlt	r3, [r1, r0]
 80064ea:	18c0      	addlt	r0, r0, r3
 80064ec:	4770      	bx	lr
	...

080064f0 <_init>:
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f2:	bf00      	nop
 80064f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f6:	bc08      	pop	{r3}
 80064f8:	469e      	mov	lr, r3
 80064fa:	4770      	bx	lr

080064fc <_fini>:
 80064fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fe:	bf00      	nop
 8006500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006502:	bc08      	pop	{r3}
 8006504:	469e      	mov	lr, r3
 8006506:	4770      	bx	lr
