
Digital_Clock_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007578  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08007684  08007684  00017684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800783c  0800783c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800783c  0800783c  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800783c  0800783c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007840  08007840  00017840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000100  08007940  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08007940  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016390  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d82  00000000  00000000  000364b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  0003a238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003b620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b38e  00000000  00000000  0003c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac3a  00000000  00000000  00057c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea87  00000000  00000000  00072848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001012cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d4  00000000  00000000  00101320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000100 	.word	0x20000100
 8000128:	00000000 	.word	0x00000000
 800012c:	0800766c 	.word	0x0800766c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000104 	.word	0x20000104
 8000148:	0800766c 	.word	0x0800766c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_d2f>:
 80004d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004dc:	bf24      	itt	cs
 80004de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004e6:	d90d      	bls.n	8000504 <__aeabi_d2f+0x30>
 80004e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004fc:	bf08      	it	eq
 80004fe:	f020 0001 	biceq.w	r0, r0, #1
 8000502:	4770      	bx	lr
 8000504:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000508:	d121      	bne.n	800054e <__aeabi_d2f+0x7a>
 800050a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800050e:	bfbc      	itt	lt
 8000510:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000514:	4770      	bxlt	lr
 8000516:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800051a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800051e:	f1c2 0218 	rsb	r2, r2, #24
 8000522:	f1c2 0c20 	rsb	ip, r2, #32
 8000526:	fa10 f30c 	lsls.w	r3, r0, ip
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	bf18      	it	ne
 8000530:	f040 0001 	orrne.w	r0, r0, #1
 8000534:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000538:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800053c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000540:	ea40 000c 	orr.w	r0, r0, ip
 8000544:	fa23 f302 	lsr.w	r3, r3, r2
 8000548:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800054c:	e7cc      	b.n	80004e8 <__aeabi_d2f+0x14>
 800054e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000552:	d107      	bne.n	8000564 <__aeabi_d2f+0x90>
 8000554:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000558:	bf1e      	ittt	ne
 800055a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800055e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000562:	4770      	bxne	lr
 8000564:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000568:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800056c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__aeabi_f2uiz>:
 8000574:	0042      	lsls	r2, r0, #1
 8000576:	d20e      	bcs.n	8000596 <__aeabi_f2uiz+0x22>
 8000578:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800057c:	d30b      	bcc.n	8000596 <__aeabi_f2uiz+0x22>
 800057e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000582:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000586:	d409      	bmi.n	800059c <__aeabi_f2uiz+0x28>
 8000588:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800058c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000590:	fa23 f002 	lsr.w	r0, r3, r2
 8000594:	4770      	bx	lr
 8000596:	f04f 0000 	mov.w	r0, #0
 800059a:	4770      	bx	lr
 800059c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005a0:	d101      	bne.n	80005a6 <__aeabi_f2uiz+0x32>
 80005a2:	0242      	lsls	r2, r0, #9
 80005a4:	d102      	bne.n	80005ac <__aeabi_f2uiz+0x38>
 80005a6:	f04f 30ff 	mov.w	r0, #4294967295
 80005aa:	4770      	bx	lr
 80005ac:	f04f 0000 	mov.w	r0, #0
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MAIN_MENU_Init>:
		{0xFF, 0x02, 0xFF, 0xFF, 0x01, 0xFF},	// 8
		{0xFF, 0x02, 0xFF, 0x01, 0x01, 0xFF},	// 9
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00},	// Nothing
};

void MAIN_MENU_Init(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
	uint8_t num_char_0[] = {
 80005ba:	4a26      	ldr	r2, [pc, #152]	; (8000654 <MAIN_MENU_Init+0xa0>)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c4:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000,
			0b00000,
			0b00000,
			0b00000,
	};
	LCD_Create_Char(MENU_Data.hlcd, 0, num_char_0);
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MAIN_MENU_Init+0xa4>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	f107 0220 	add.w	r2, r7, #32
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f006 f932 	bl	800683c <LCD_Create_Char>

	uint8_t num_char_1[] = {
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <MAIN_MENU_Init+0xa8>)
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e2:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000,
			0b00000,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 1, num_char_1);
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MAIN_MENU_Init+0xa4>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	f107 0218 	add.w	r2, r7, #24
 80005ee:	2101      	movs	r1, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f006 f923 	bl	800683c <LCD_Create_Char>

	uint8_t num_char_2[] = {
 80005f6:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <MAIN_MENU_Init+0xac>)
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000600:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000,
			0b00000,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 2, num_char_2);
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MAIN_MENU_Init+0xa4>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	f107 0210 	add.w	r2, r7, #16
 800060c:	2102      	movs	r1, #2
 800060e:	4618      	mov	r0, r3
 8000610:	f006 f914 	bl	800683c <LCD_Create_Char>

	uint8_t thermometro[8] = {
 8000614:	4a13      	ldr	r2, [pc, #76]	; (8000664 <MAIN_MENU_Init+0xb0>)
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01110,
			0b11111,
			0b11111,
			0b01110
	};
	LCD_Create_Char(MENU_Data.hlcd, 3, thermometro);
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MAIN_MENU_Init+0xa4>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	2103      	movs	r1, #3
 800062c:	4618      	mov	r0, r3
 800062e:	f006 f905 	bl	800683c <LCD_Create_Char>

	uint8_t igrasia[8] = {
 8000632:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <MAIN_MENU_Init+0xb4>)
 8000634:	463b      	mov	r3, r7
 8000636:	e892 0003 	ldmia.w	r2, {r0, r1}
 800063a:	e883 0003 	stmia.w	r3, {r0, r1}
			0b10001,
			0b10001,
			0b10001,
			0b01110,
	};
	LCD_Create_Char(MENU_Data.hlcd, 4, igrasia);
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MAIN_MENU_Init+0xa4>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	463a      	mov	r2, r7
 8000644:	2104      	movs	r1, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f006 f8f8 	bl	800683c <LCD_Create_Char>

}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	; 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08007684 	.word	0x08007684
 8000658:	2000011c 	.word	0x2000011c
 800065c:	0800768c 	.word	0x0800768c
 8000660:	08007694 	.word	0x08007694
 8000664:	0800769c 	.word	0x0800769c
 8000668:	080076a4 	.word	0x080076a4

0800066c <MAIN_MENU_Display_Num>:

void MAIN_MENU_Display_Num(uint8_t p_number, uint8_t p_col, uint8_t p_row){
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
 8000676:	460b      	mov	r3, r1
 8000678:	71bb      	strb	r3, [r7, #6]
 800067a:	4613      	mov	r3, r2
 800067c:	717b      	strb	r3, [r7, #5]
	if(p_row > 2) return;
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	2b02      	cmp	r3, #2
 8000682:	d841      	bhi.n	8000708 <MAIN_MENU_Display_Num+0x9c>

	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row);
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <MAIN_MENU_Display_Num+0xa4>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	797a      	ldrb	r2, [r7, #5]
 800068a:	79b9      	ldrb	r1, [r7, #6]
 800068c:	4618      	mov	r0, r3
 800068e:	f006 f8ab 	bl	80067e8 <LCD_Set_Cursor>
	for(int i = 0; i < 3; i++){
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	e011      	b.n	80006bc <MAIN_MENU_Display_Num+0x50>
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i]);
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MAIN_MENU_Display_Num+0xa4>)
 800069a:	6858      	ldr	r0, [r3, #4]
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	491d      	ldr	r1, [pc, #116]	; (8000714 <MAIN_MENU_Display_Num+0xa8>)
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	18ca      	adds	r2, r1, r3
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	f006 f95a 	bl	800696a <LCD_Send_Data>
	for(int i = 0; i < 3; i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	ddea      	ble.n	8000698 <MAIN_MENU_Display_Num+0x2c>
	}

	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row + 1);
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MAIN_MENU_Display_Num+0xa4>)
 80006c4:	6858      	ldr	r0, [r3, #4]
 80006c6:	797b      	ldrb	r3, [r7, #5]
 80006c8:	3301      	adds	r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	4619      	mov	r1, r3
 80006d0:	f006 f88a 	bl	80067e8 <LCD_Set_Cursor>
	for(int i = 0; i < 3; i++){
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	e012      	b.n	8000700 <MAIN_MENU_Display_Num+0x94>
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i+3]);
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <MAIN_MENU_Display_Num+0xa4>)
 80006dc:	6858      	ldr	r0, [r3, #4]
 80006de:	79fa      	ldrb	r2, [r7, #7]
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	1cd9      	adds	r1, r3, #3
 80006e4:	4c0b      	ldr	r4, [pc, #44]	; (8000714 <MAIN_MENU_Display_Num+0xa8>)
 80006e6:	4613      	mov	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4413      	add	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4423      	add	r3, r4
 80006f0:	440b      	add	r3, r1
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	f006 f938 	bl	800696a <LCD_Send_Data>
	for(int i = 0; i < 3; i++){
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b02      	cmp	r3, #2
 8000704:	dde9      	ble.n	80006da <MAIN_MENU_Display_Num+0x6e>
 8000706:	e000      	b.n	800070a <MAIN_MENU_Display_Num+0x9e>
	if(p_row > 2) return;
 8000708:	bf00      	nop
	}

}
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	bd90      	pop	{r4, r7, pc}
 8000710:	2000011c 	.word	0x2000011c
 8000714:	2000001c 	.word	0x2000001c

08000718 <MAIN_MENU_Display>:

void MAIN_MENU_Display(){
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b085      	sub	sp, #20
 800071c:	af02      	add	r7, sp, #8
	if(MENU_Data.is_changing_menu){
 800071e:	4b5e      	ldr	r3, [pc, #376]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000720:	7a5b      	ldrb	r3, [r3, #9]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d007      	beq.n	8000736 <MAIN_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 8000726:	4b5c      	ldr	r3, [pc, #368]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	4618      	mov	r0, r3
 800072c:	f006 f848 	bl	80067c0 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8000730:	4b59      	ldr	r3, [pc, #356]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000732:	2200      	movs	r2, #0
 8000734:	725a      	strb	r2, [r3, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 0);
 8000736:	4b58      	ldr	r3, [pc, #352]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	2200      	movs	r2, #0
 800073c:	2103      	movs	r1, #3
 800073e:	4618      	mov	r0, r3
 8000740:	f006 f852 	bl	80067e8 <LCD_Set_Cursor>
	char t_day_string[] = "SUN";
 8000744:	4b55      	ldr	r3, [pc, #340]	; (800089c <MAIN_MENU_Display+0x184>)
 8000746:	607b      	str	r3, [r7, #4]
	if(REALTIME_Data.system_day > 0){
 8000748:	4b55      	ldr	r3, [pc, #340]	; (80008a0 <MAIN_MENU_Display+0x188>)
 800074a:	789b      	ldrb	r3, [r3, #2]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00a      	beq.n	8000766 <MAIN_MENU_Display+0x4e>
		strcpy(t_day_string, DAY_Str[REALTIME_Data.system_day - 1]);
 8000750:	4b53      	ldr	r3, [pc, #332]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000752:	789b      	ldrb	r3, [r3, #2]
 8000754:	3b01      	subs	r3, #1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4a52      	ldr	r2, [pc, #328]	; (80008a4 <MAIN_MENU_Display+0x18c>)
 800075a:	441a      	add	r2, r3
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f006 fbed 	bl	8006f40 <strcpy>
	}
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000766:	4b4c      	ldr	r3, [pc, #304]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000768:	6858      	ldr	r0, [r3, #4]
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
 800076a:	4b4d      	ldr	r3, [pc, #308]	; (80008a0 <MAIN_MENU_Display+0x188>)
 800076c:	78db      	ldrb	r3, [r3, #3]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 800076e:	461c      	mov	r4, r3
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
 8000770:	4b4b      	ldr	r3, [pc, #300]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000772:	791b      	ldrb	r3, [r3, #4]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000774:	4619      	mov	r1, r3
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
 8000776:	4b4a      	ldr	r3, [pc, #296]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000778:	795b      	ldrb	r3, [r3, #5]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 800077a:	1d3a      	adds	r2, r7, #4
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	9100      	str	r1, [sp, #0]
 8000780:	4623      	mov	r3, r4
 8000782:	4949      	ldr	r1, [pc, #292]	; (80008a8 <MAIN_MENU_Display+0x190>)
 8000784:	f005 ffde 	bl	8006744 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 1);
 8000788:	4b43      	ldr	r3, [pc, #268]	; (8000898 <MAIN_MENU_Display+0x180>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	2103      	movs	r1, #3
 8000790:	4618      	mov	r0, r3
 8000792:	f006 f829 	bl	80067e8 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, 3);
 8000796:	4b40      	ldr	r3, [pc, #256]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	2103      	movs	r1, #3
 800079c:	4618      	mov	r0, r3
 800079e:	f006 f8e4 	bl	800696a <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02dC      ", (uint8_t)hdht.temperature);
 80007a2:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <MAIN_MENU_Display+0x180>)
 80007a4:	685c      	ldr	r4, [r3, #4]
 80007a6:	4b41      	ldr	r3, [pc, #260]	; (80008ac <MAIN_MENU_Display+0x194>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fee2 	bl	8000574 <__aeabi_f2uiz>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	493e      	ldr	r1, [pc, #248]	; (80008b0 <MAIN_MENU_Display+0x198>)
 80007b8:	4620      	mov	r0, r4
 80007ba:	f005 ffc3 	bl	8006744 <LCD_Write>
	LCD_Send_Data(MENU_Data.hlcd, 4);
 80007be:	4b36      	ldr	r3, [pc, #216]	; (8000898 <MAIN_MENU_Display+0x180>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	2104      	movs	r1, #4
 80007c4:	4618      	mov	r0, r3
 80007c6:	f006 f8d0 	bl	800696a <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02d%%", (uint8_t)hdht.huminity);
 80007ca:	4b33      	ldr	r3, [pc, #204]	; (8000898 <MAIN_MENU_Display+0x180>)
 80007cc:	685c      	ldr	r4, [r3, #4]
 80007ce:	4b37      	ldr	r3, [pc, #220]	; (80008ac <MAIN_MENU_Display+0x194>)
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fece 	bl	8000574 <__aeabi_f2uiz>
 80007d8:	4603      	mov	r3, r0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	461a      	mov	r2, r3
 80007de:	4935      	ldr	r1, [pc, #212]	; (80008b4 <MAIN_MENU_Display+0x19c>)
 80007e0:	4620      	mov	r0, r4
 80007e2:	f005 ffaf 	bl	8006744 <LCD_Write>

	MAIN_MENU_Display_Num(REALTIME_Data.system_hour / 10, 2, 2);
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MAIN_MENU_Display+0x188>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4a33      	ldr	r2, [pc, #204]	; (80008b8 <MAIN_MENU_Display+0x1a0>)
 80007ec:	fba2 2303 	umull	r2, r3, r2, r3
 80007f0:	08db      	lsrs	r3, r3, #3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2202      	movs	r2, #2
 80007f6:	2102      	movs	r1, #2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff37 	bl	800066c <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(REALTIME_Data.system_hour % 10, 6, 2);
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <MAIN_MENU_Display+0x1a0>)
 8000804:	fba3 1302 	umull	r1, r3, r3, r2
 8000808:	08d9      	lsrs	r1, r3, #3
 800080a:	460b      	mov	r3, r1
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	440b      	add	r3, r1
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2202      	movs	r2, #2
 8000818:	2106      	movs	r1, #6
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff26 	bl	800066c <MAIN_MENU_Display_Num>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	2202      	movs	r2, #2
 8000826:	2109      	movs	r1, #9
 8000828:	4618      	mov	r0, r3
 800082a:	f005 ffdd 	bl	80067e8 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	212e      	movs	r1, #46	; 0x2e
 8000834:	4618      	mov	r0, r3
 8000836:	f006 f898 	bl	800696a <LCD_Send_Data>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MAIN_MENU_Display+0x180>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2203      	movs	r2, #3
 8000840:	2109      	movs	r1, #9
 8000842:	4618      	mov	r0, r3
 8000844:	f005 ffd0 	bl	80067e8 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MAIN_MENU_Display+0x180>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	212e      	movs	r1, #46	; 0x2e
 800084e:	4618      	mov	r0, r3
 8000850:	f006 f88b 	bl	800696a <LCD_Send_Data>
	MAIN_MENU_Display_Num(REALTIME_Data.system_minute / 10, 10, 2);
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <MAIN_MENU_Display+0x1a0>)
 800085a:	fba2 2303 	umull	r2, r3, r2, r3
 800085e:	08db      	lsrs	r3, r3, #3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2202      	movs	r2, #2
 8000864:	210a      	movs	r1, #10
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff00 	bl	800066c <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(REALTIME_Data.system_minute % 10, 14, 2);
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MAIN_MENU_Display+0x188>)
 800086e:	785a      	ldrb	r2, [r3, #1]
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MAIN_MENU_Display+0x1a0>)
 8000872:	fba3 1302 	umull	r1, r3, r3, r2
 8000876:	08d9      	lsrs	r1, r3, #3
 8000878:	460b      	mov	r3, r1
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	440b      	add	r3, r1
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2202      	movs	r2, #2
 8000886:	210e      	movs	r1, #14
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff feef 	bl	800066c <MAIN_MENU_Display_Num>
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bd90      	pop	{r4, r7, pc}
 8000896:	bf00      	nop
 8000898:	2000011c 	.word	0x2000011c
 800089c:	004e5553 	.word	0x004e5553
 80008a0:	200002e4 	.word	0x200002e4
 80008a4:	20000000 	.word	0x20000000
 80008a8:	080076ac 	.word	0x080076ac
 80008ac:	20000478 	.word	0x20000478
 80008b0:	080076c0 	.word	0x080076c0
 80008b4:	080076cc 	.word	0x080076cc
 80008b8:	cccccccd 	.word	0xcccccccd

080008bc <MAIN_MENU_Set_State>:

void MAIN_MENU_Set_State(){
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = MAIN_MENU;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MAIN_MENU_Set_State+0x20>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <MAIN_MENU_Set_State+0x20>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <MAIN_MENU_Set_State+0x20>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	725a      	strb	r2, [r3, #9]
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	2000011c 	.word	0x2000011c

080008e0 <MAIN_MENU_Update_Value>:

void MAIN_MENU_Update_Value(){
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = MAIN_MENU;
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <MAIN_MENU_Update_Value+0x18>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80008ea:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <MAIN_MENU_Update_Value+0x18>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	721a      	strb	r2, [r3, #8]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	2000011c 	.word	0x2000011c

080008fc <MENU_Init>:

#include "Main_Menu.h"

MENU_DATA_t MENU_Data;

void MENU_Init(LCD_I2C_HandleTypeDef *p_hlcd){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	MENU_Data.hlcd = p_hlcd;
 8000904:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <MENU_Init+0x38>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6053      	str	r3, [r2, #4]
	MENU_Data.changed = 0;
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MENU_Init+0x38>)
 800090c:	2200      	movs	r2, #0
 800090e:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MENU_Init+0x38>)
 8000912:	2201      	movs	r2, #1
 8000914:	725a      	strb	r2, [r3, #9]
	MENU_Data.menu_type = MAIN_MENU;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MENU_Init+0x38>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
	MAIN_MENU_Init();
 800091c:	f7ff fe4a 	bl	80005b4 <MAIN_MENU_Init>
	SR_MENU_Init();
 8000920:	f000 f834 	bl	800098c <SR_MENU_Init>
	TL_MENU_Init();
 8000924:	f000 fc42 	bl	80011ac <TL_MENU_Init>
	ST_MENU_Init();
 8000928:	f000 fa04 	bl	8000d34 <ST_MENU_Init>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2000011c 	.word	0x2000011c

08000938 <MENU_Handle>:
//		timer = HAL_GetTick();
//		count ++;
//	}
//}

void MENU_Handle(){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	if(!MENU_Data.changed){
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MENU_Handle+0x50>)
 800093e:	7a1b      	ldrb	r3, [r3, #8]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d11f      	bne.n	8000984 <MENU_Handle+0x4c>
		switch(MENU_Data.menu_type){
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MENU_Handle+0x50>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b03      	cmp	r3, #3
 800094a:	d817      	bhi.n	800097c <MENU_Handle+0x44>
 800094c:	a201      	add	r2, pc, #4	; (adr r2, 8000954 <MENU_Handle+0x1c>)
 800094e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000952:	bf00      	nop
 8000954:	08000965 	.word	0x08000965
 8000958:	0800096b 	.word	0x0800096b
 800095c:	08000971 	.word	0x08000971
 8000960:	08000977 	.word	0x08000977
			case MAIN_MENU:
				MAIN_MENU_Display();
 8000964:	f7ff fed8 	bl	8000718 <MAIN_MENU_Display>
				break;
 8000968:	e009      	b.n	800097e <MENU_Handle+0x46>
			case SETTING_REALTIME_MENU:
				SR_MENU_Display();
 800096a:	f000 f923 	bl	8000bb4 <SR_MENU_Display>
				break;
 800096e:	e006      	b.n	800097e <MENU_Handle+0x46>
			case TIMELINE_LIST_MENU:
				TL_MENU_Display();
 8000970:	f000 fd60 	bl	8001434 <TL_MENU_Display>
				break;
 8000974:	e003      	b.n	800097e <MENU_Handle+0x46>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Display();
 8000976:	f000 facb 	bl	8000f10 <ST_MENU_Display>
				break;
 800097a:	e000      	b.n	800097e <MENU_Handle+0x46>
			default:
				break;
 800097c:	bf00      	nop
		}
		MENU_Data.changed = 1;
 800097e:	4b02      	ldr	r3, [pc, #8]	; (8000988 <MENU_Handle+0x50>)
 8000980:	2201      	movs	r2, #1
 8000982:	721a      	strb	r2, [r3, #8]
	}
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000011c 	.word	0x2000011c

0800098c <SR_MENU_Init>:
		"Year",
};

extern char DAY_Str[7][4];

void SR_MENU_Init(){
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
	SR_MENU_Data.state = SETTING_HOUR;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <SR_MENU_Init+0x2c>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
	REALTIME_DATA_HandleTypeDef t_realtime = {0, 0, 0, 0, 0, 0};
 8000998:	463b      	mov	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	809a      	strh	r2, [r3, #4]
	SR_MENU_Data.new_realtime = t_realtime;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <SR_MENU_Init+0x2c>)
 80009a2:	3301      	adds	r3, #1
 80009a4:	463a      	mov	r2, r7
 80009a6:	6810      	ldr	r0, [r2, #0]
 80009a8:	6018      	str	r0, [r3, #0]
 80009aa:	8892      	ldrh	r2, [r2, #4]
 80009ac:	809a      	strh	r2, [r3, #4]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000128 	.word	0x20000128

080009bc <SR_MENU_Set_State>:

void SR_MENU_Set_State(){
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
	SR_MENU_Data.state = SETTING_HOUR;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <SR_MENU_Set_State+0x40>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
	REALTIME_DATA_HandleTypeDef t_realtime = {0, 0, 0, 0, 0, 0};
 80009c8:	463b      	mov	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	809a      	strh	r2, [r3, #4]
	SR_MENU_Data.new_realtime = t_realtime;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <SR_MENU_Set_State+0x40>)
 80009d2:	3301      	adds	r3, #1
 80009d4:	463a      	mov	r2, r7
 80009d6:	6810      	ldr	r0, [r2, #0]
 80009d8:	6018      	str	r0, [r3, #0]
 80009da:	8892      	ldrh	r2, [r2, #4]
 80009dc:	809a      	strh	r2, [r3, #4]
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <SR_MENU_Set_State+0x44>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <SR_MENU_Set_State+0x44>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <SR_MENU_Set_State+0x44>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	725a      	strb	r2, [r3, #9]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000128 	.word	0x20000128
 8000a00:	2000011c 	.word	0x2000011c

08000a04 <SR_MENU_Change_Setting_State>:

void SR_MENU_Change_Setting_State(uint8_t p_is_increase){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	if(SR_MENU_Data.state == CHECKING_AGAIN){
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <SR_MENU_Change_Setting_State+0x60>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b06      	cmp	r3, #6
 8000a14:	d105      	bne.n	8000a22 <SR_MENU_Change_Setting_State+0x1e>
		REALTIME_Set_New_Realtime(&SR_MENU_Data.new_realtime);
 8000a16:	4814      	ldr	r0, [pc, #80]	; (8000a68 <SR_MENU_Change_Setting_State+0x64>)
 8000a18:	f001 f8aa 	bl	8001b70 <REALTIME_Set_New_Realtime>
		MAIN_MENU_Set_State();
 8000a1c:	f7ff ff4e 	bl	80008bc <MAIN_MENU_Set_State>
 8000a20:	e01c      	b.n	8000a5c <SR_MENU_Change_Setting_State+0x58>
	} else{
		SR_MENU_Data.state += ((p_is_increase == INCREASE) ? 1 : -1);
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <SR_MENU_Change_Setting_State+0x60>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	2a01      	cmp	r2, #1
 8000a2a:	d101      	bne.n	8000a30 <SR_MENU_Change_Setting_State+0x2c>
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	e000      	b.n	8000a32 <SR_MENU_Change_Setting_State+0x2e>
 8000a30:	22ff      	movs	r2, #255	; 0xff
 8000a32:	4413      	add	r3, r2
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <SR_MENU_Change_Setting_State+0x60>)
 8000a38:	701a      	strb	r2, [r3, #0]
		if((int8_t)SR_MENU_Data.state < 0){
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <SR_MENU_Change_Setting_State+0x60>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	da05      	bge.n	8000a50 <SR_MENU_Change_Setting_State+0x4c>
			SR_MENU_Data.state = 0;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <SR_MENU_Change_Setting_State+0x60>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
			MAIN_MENU_Set_State();
 8000a4a:	f7ff ff37 	bl	80008bc <MAIN_MENU_Set_State>
			return;
 8000a4e:	e005      	b.n	8000a5c <SR_MENU_Change_Setting_State+0x58>
		}
		MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SR_MENU_Change_Setting_State+0x68>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
		MENU_Data.changed = 0;
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SR_MENU_Change_Setting_State+0x68>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	721a      	strb	r2, [r3, #8]
	}
}
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000128 	.word	0x20000128
 8000a68:	20000129 	.word	0x20000129
 8000a6c:	2000011c 	.word	0x2000011c

08000a70 <SR_MENU_Set_Value>:

void SR_MENU_Set_Value(uint8_t p_is_increase){
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 8000a7a:	4b47      	ldr	r3, [pc, #284]	; (8000b98 <SR_MENU_Set_Value+0x128>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b05      	cmp	r3, #5
 8000a80:	d87e      	bhi.n	8000b80 <SR_MENU_Set_Value+0x110>
		int8_t *t_data_ptr = (int8_t *)(&SR_MENU_Data.new_realtime) + SR_MENU_Data.state;
 8000a82:	4b45      	ldr	r3, [pc, #276]	; (8000b98 <SR_MENU_Set_Value+0x128>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b44      	ldr	r3, [pc, #272]	; (8000b9c <SR_MENU_Set_Value+0x12c>)
 8000a8a:	4413      	add	r3, r2
 8000a8c:	617b      	str	r3, [r7, #20]
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f993 3000 	ldrsb.w	r3, [r3]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	79fa      	ldrb	r2, [r7, #7]
 8000a98:	2a01      	cmp	r2, #1
 8000a9a:	d101      	bne.n	8000aa0 <SR_MENU_Set_Value+0x30>
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	e000      	b.n	8000aa2 <SR_MENU_Set_Value+0x32>
 8000aa0:	22ff      	movs	r2, #255	; 0xff
 8000aa2:	4413      	add	r3, r2
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	b25a      	sxtb	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	701a      	strb	r2, [r3, #0]
		if(*t_data_ptr > __max_value[SR_MENU_Data.state]){
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f993 3000 	ldrsb.w	r3, [r3]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <SR_MENU_Set_Value+0x128>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4b39      	ldr	r3, [pc, #228]	; (8000ba0 <SR_MENU_Set_Value+0x130>)
 8000abc:	5c5b      	ldrb	r3, [r3, r1]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	dd0a      	ble.n	8000ad8 <SR_MENU_Set_Value+0x68>
			*t_data_ptr = (SR_MENU_Data.state == SETTING_DATE) ? 1 : 0;
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <SR_MENU_Set_Value+0x128>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	bf0c      	ite	eq
 8000aca:	2301      	moveq	r3, #1
 8000acc:	2300      	movne	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	b25a      	sxtb	r2, r3
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	e00c      	b.n	8000af2 <SR_MENU_Set_Value+0x82>
		} else if(*t_data_ptr < 0){
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f993 3000 	ldrsb.w	r3, [r3]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	da07      	bge.n	8000af2 <SR_MENU_Set_Value+0x82>
			*t_data_ptr = __max_value[SR_MENU_Data.state];
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <SR_MENU_Set_Value+0x128>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <SR_MENU_Set_Value+0x130>)
 8000aea:	5c9b      	ldrb	r3, [r3, r2]
 8000aec:	b25a      	sxtb	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	701a      	strb	r2, [r3, #0]
		}
		if(SR_MENU_Data.state == SETTING_YEAR){
 8000af2:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <SR_MENU_Set_Value+0x128>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b05      	cmp	r3, #5
 8000af8:	d142      	bne.n	8000b80 <SR_MENU_Set_Value+0x110>
			uint8_t *t_date_ptr = &SR_MENU_Data.new_realtime.system_date;
 8000afa:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <SR_MENU_Set_Value+0x134>)
 8000afc:	613b      	str	r3, [r7, #16]
			uint8_t *t_month_ptr = &SR_MENU_Data.new_realtime.system_month;
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <SR_MENU_Set_Value+0x138>)
 8000b00:	60fb      	str	r3, [r7, #12]
			uint8_t *t_year_ptr = &SR_MENU_Data.new_realtime.system_year;
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <SR_MENU_Set_Value+0x13c>)
 8000b04:	60bb      	str	r3, [r7, #8]
			if(*t_month_ptr == 2){
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d11b      	bne.n	8000b46 <SR_MENU_Set_Value+0xd6>
				if(*t_date_ptr > ((*t_year_ptr % 4 == 0) ? 29 : 28)){
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <SR_MENU_Set_Value+0xb6>
 8000b22:	231d      	movs	r3, #29
 8000b24:	e000      	b.n	8000b28 <SR_MENU_Set_Value+0xb8>
 8000b26:	231c      	movs	r3, #28
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	da29      	bge.n	8000b80 <SR_MENU_Set_Value+0x110>
					*t_date_ptr = (*t_year_ptr % 4 == 0) ? 29 : 28;
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <SR_MENU_Set_Value+0xce>
 8000b3a:	221d      	movs	r2, #29
 8000b3c:	e000      	b.n	8000b40 <SR_MENU_Set_Value+0xd0>
 8000b3e:	221c      	movs	r2, #28
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	701a      	strb	r2, [r3, #0]
 8000b44:	e01c      	b.n	8000b80 <SR_MENU_Set_Value+0x110>
				}
			} else if((*t_month_ptr <= 7 && *t_month_ptr % 2 == 0) || (*t_month_ptr >= 8 && *t_month_ptr % 2 == 1)){
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b07      	cmp	r3, #7
 8000b4c:	d806      	bhi.n	8000b5c <SR_MENU_Set_Value+0xec>
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d00a      	beq.n	8000b72 <SR_MENU_Set_Value+0x102>
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b07      	cmp	r3, #7
 8000b62:	d90d      	bls.n	8000b80 <SR_MENU_Set_Value+0x110>
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d006      	beq.n	8000b80 <SR_MENU_Set_Value+0x110>
				if(*t_date_ptr > 30){
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b1e      	cmp	r3, #30
 8000b78:	d902      	bls.n	8000b80 <SR_MENU_Set_Value+0x110>
					*t_date_ptr = 30;
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	221e      	movs	r2, #30
 8000b7e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <SR_MENU_Set_Value+0x140>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <SR_MENU_Set_Value+0x140>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	721a      	strb	r2, [r3, #8]
}
 8000b8c:	bf00      	nop
 8000b8e:	371c      	adds	r7, #28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000128 	.word	0x20000128
 8000b9c:	20000129 	.word	0x20000129
 8000ba0:	20000060 	.word	0x20000060
 8000ba4:	2000012c 	.word	0x2000012c
 8000ba8:	2000012d 	.word	0x2000012d
 8000bac:	2000012e 	.word	0x2000012e
 8000bb0:	2000011c 	.word	0x2000011c

08000bb4 <SR_MENU_Display>:

void SR_MENU_Display(){
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af02      	add	r7, sp, #8
	if(MENU_Data.is_changing_menu){
 8000bba:	4b55      	ldr	r3, [pc, #340]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000bbc:	7a5b      	ldrb	r3, [r3, #9]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <SR_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 8000bc2:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f005 fdfa 	bl	80067c0 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8000bcc:	4b50      	ldr	r3, [pc, #320]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	725a      	strb	r2, [r3, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 8000bd2:	4b4f      	ldr	r3, [pc, #316]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f005 fe04 	bl	80067e8 <LCD_Set_Cursor>
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 8000be0:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <SR_MENU_Display+0x160>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b05      	cmp	r3, #5
 8000be6:	d80c      	bhi.n	8000c02 <SR_MENU_Display+0x4e>
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[SR_MENU_Data.state]);
 8000be8:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	4a49      	ldr	r2, [pc, #292]	; (8000d14 <SR_MENU_Display+0x160>)
 8000bee:	7812      	ldrb	r2, [r2, #0]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4a49      	ldr	r2, [pc, #292]	; (8000d18 <SR_MENU_Display+0x164>)
 8000bf4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000bf8:	4948      	ldr	r1, [pc, #288]	; (8000d1c <SR_MENU_Display+0x168>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f005 fda2 	bl	8006744 <LCD_Write>
 8000c00:	e005      	b.n	8000c0e <SR_MENU_Display+0x5a>
	} else{
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
 8000c02:	4b43      	ldr	r3, [pc, #268]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	4946      	ldr	r1, [pc, #280]	; (8000d20 <SR_MENU_Display+0x16c>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f005 fd9b 	bl	8006744 <LCD_Write>
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 1);
 8000c0e:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2201      	movs	r2, #1
 8000c14:	2103      	movs	r1, #3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f005 fde6 	bl	80067e8 <LCD_Set_Cursor>
	char t_day_string[] = "SUN";
 8000c1c:	4b41      	ldr	r3, [pc, #260]	; (8000d24 <SR_MENU_Display+0x170>)
 8000c1e:	607b      	str	r3, [r7, #4]
	if(SR_MENU_Data.new_realtime.system_day > 0){
 8000c20:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <SR_MENU_Display+0x160>)
 8000c22:	78db      	ldrb	r3, [r3, #3]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d00a      	beq.n	8000c3e <SR_MENU_Display+0x8a>
		strcpy(t_day_string, DAY_Str[SR_MENU_Data.new_realtime.system_day - 1]);
 8000c28:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <SR_MENU_Display+0x160>)
 8000c2a:	78db      	ldrb	r3, [r3, #3]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4a3d      	ldr	r2, [pc, #244]	; (8000d28 <SR_MENU_Display+0x174>)
 8000c32:	441a      	add	r2, r3
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f006 f981 	bl	8006f40 <strcpy>
	}
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000c3e:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000c40:	6858      	ldr	r0, [r3, #4]
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);
 8000c42:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <SR_MENU_Display+0x160>)
 8000c44:	791b      	ldrb	r3, [r3, #4]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000c46:	461c      	mov	r4, r3
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);
 8000c48:	4b32      	ldr	r3, [pc, #200]	; (8000d14 <SR_MENU_Display+0x160>)
 8000c4a:	795b      	ldrb	r3, [r3, #5]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000c4c:	4619      	mov	r1, r3
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <SR_MENU_Display+0x160>)
 8000c50:	799b      	ldrb	r3, [r3, #6]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000c52:	1d3a      	adds	r2, r7, #4
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	9100      	str	r1, [sp, #0]
 8000c58:	4623      	mov	r3, r4
 8000c5a:	4934      	ldr	r1, [pc, #208]	; (8000d2c <SR_MENU_Display+0x178>)
 8000c5c:	f005 fd72 	bl	8006744 <LCD_Write>

	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour / 10, 2, 2);
 8000c60:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <SR_MENU_Display+0x160>)
 8000c62:	785b      	ldrb	r3, [r3, #1]
 8000c64:	4a32      	ldr	r2, [pc, #200]	; (8000d30 <SR_MENU_Display+0x17c>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	08db      	lsrs	r3, r3, #3
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2202      	movs	r2, #2
 8000c70:	2102      	movs	r1, #2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fcfa 	bl	800066c <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour % 10, 6, 2);
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <SR_MENU_Display+0x160>)
 8000c7a:	785a      	ldrb	r2, [r3, #1]
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	; (8000d30 <SR_MENU_Display+0x17c>)
 8000c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c82:	08d9      	lsrs	r1, r3, #3
 8000c84:	460b      	mov	r3, r1
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	440b      	add	r3, r1
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2202      	movs	r2, #2
 8000c92:	2106      	movs	r1, #6
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fce9 	bl	800066c <MAIN_MENU_Display_Num>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	2109      	movs	r1, #9
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f005 fda0 	bl	80067e8 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	212e      	movs	r1, #46	; 0x2e
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f005 fe5b 	bl	800696a <LCD_Send_Data>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2203      	movs	r2, #3
 8000cba:	2109      	movs	r1, #9
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f005 fd93 	bl	80067e8 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	212e      	movs	r1, #46	; 0x2e
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f005 fe4e 	bl	800696a <LCD_Send_Data>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_minute / 10, 10, 2);
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <SR_MENU_Display+0x160>)
 8000cd0:	789b      	ldrb	r3, [r3, #2]
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <SR_MENU_Display+0x17c>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	08db      	lsrs	r3, r3, #3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2202      	movs	r2, #2
 8000cde:	210a      	movs	r1, #10
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fcc3 	bl	800066c <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_minute % 10, 14, 2);
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <SR_MENU_Display+0x160>)
 8000ce8:	789a      	ldrb	r2, [r3, #2]
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <SR_MENU_Display+0x17c>)
 8000cec:	fba3 1302 	umull	r1, r3, r3, r2
 8000cf0:	08d9      	lsrs	r1, r3, #3
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2202      	movs	r2, #2
 8000d00:	210e      	movs	r1, #14
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fcb2 	bl	800066c <MAIN_MENU_Display_Num>
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	2000011c 	.word	0x2000011c
 8000d14:	20000128 	.word	0x20000128
 8000d18:	20000068 	.word	0x20000068
 8000d1c:	08007700 	.word	0x08007700
 8000d20:	08007714 	.word	0x08007714
 8000d24:	004e5553 	.word	0x004e5553
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	0800772c 	.word	0x0800772c
 8000d30:	cccccccd 	.word	0xcccccccd

08000d34 <ST_MENU_Init>:
ST_MENU_Data_HandleTypeDef ST_MENU_Data;

static uint8_t __max_value[] = {23, 59, 1, 1, 1, 1, 1, 1, 1};
extern char *__setting_type_str[6];

void ST_MENU_Init(){
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <ST_MENU_Set_State>:

void ST_MENU_Set_State(){
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <ST_MENU_Set_State+0x48>)
 8000d48:	2203      	movs	r2, #3
 8000d4a:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <ST_MENU_Set_State+0x48>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <ST_MENU_Set_State+0x48>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	725a      	strb	r2, [r3, #9]
	ST_MENU_Data.state = SETTING_ALARM_HOUR;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <ST_MENU_Set_State+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
	FLASH_DATA_t t_timeline = {0, 0, 0, 1};
 8000d5e:	2300      	movs	r3, #0
 8000d60:	713b      	strb	r3, [r7, #4]
 8000d62:	2300      	movs	r3, #0
 8000d64:	717b      	strb	r3, [r7, #5]
 8000d66:	2300      	movs	r3, #0
 8000d68:	71bb      	strb	r3, [r7, #6]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	71fb      	strb	r3, [r7, #7]
	ST_MENU_Data.timeline_data = t_timeline;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <ST_MENU_Set_State+0x4c>)
 8000d70:	3301      	adds	r3, #1
 8000d72:	1d3a      	adds	r2, r7, #4
 8000d74:	6810      	ldr	r0, [r2, #0]
 8000d76:	6018      	str	r0, [r3, #0]
	ST_MENU_Data.current_day_state = 0;
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <ST_MENU_Set_State+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	715a      	strb	r2, [r3, #5]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	2000011c 	.word	0x2000011c
 8000d8c:	20000130 	.word	0x20000130

08000d90 <ST_MENU_Change_Setting_State>:

void ST_MENU_Change_Setting_State(uint8_t p_is_increase){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	int8_t *t_value = (int8_t *)(&ST_MENU_Data.state);
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <ST_MENU_Change_Setting_State+0x74>)
 8000d9c:	60fb      	str	r3, [r7, #12]
	*t_value += ((p_is_increase == INCREASE) ? 1 : -1);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f993 3000 	ldrsb.w	r3, [r3]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	2a01      	cmp	r2, #1
 8000daa:	d101      	bne.n	8000db0 <ST_MENU_Change_Setting_State+0x20>
 8000dac:	2201      	movs	r2, #1
 8000dae:	e000      	b.n	8000db2 <ST_MENU_Change_Setting_State+0x22>
 8000db0:	22ff      	movs	r2, #255	; 0xff
 8000db2:	4413      	add	r3, r2
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	b25a      	sxtb	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	701a      	strb	r2, [r3, #0]
	if(ST_MENU_Data.state > CHECKING_ALARM_AGAIN){
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <ST_MENU_Change_Setting_State+0x74>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b09      	cmp	r3, #9
 8000dc2:	d908      	bls.n	8000dd6 <ST_MENU_Change_Setting_State+0x46>
		*t_value = CHECKING_ALARM_AGAIN;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2209      	movs	r2, #9
 8000dc8:	701a      	strb	r2, [r3, #0]
		TIMELINE_Add(&ST_MENU_Data.timeline_data);
 8000dca:	480f      	ldr	r0, [pc, #60]	; (8000e08 <ST_MENU_Change_Setting_State+0x78>)
 8000dcc:	f000 fd32 	bl	8001834 <TIMELINE_Add>
		TL_MENU_Set_State();
 8000dd0:	f000 fa26 	bl	8001220 <TL_MENU_Set_State>
 8000dd4:	e013      	b.n	8000dfe <ST_MENU_Change_Setting_State+0x6e>
	} else{
		if(*t_value < 0){
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f993 3000 	ldrsb.w	r3, [r3]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	da05      	bge.n	8000dec <ST_MENU_Change_Setting_State+0x5c>
			*t_value = 0;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
			TL_MENU_Set_State();
 8000de6:	f000 fa1b 	bl	8001220 <TL_MENU_Set_State>
			return;
 8000dea:	e008      	b.n	8000dfe <ST_MENU_Change_Setting_State+0x6e>
		}
		ST_MENU_Data.current_day_state = 0;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <ST_MENU_Change_Setting_State+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	715a      	strb	r2, [r3, #5]
		MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <ST_MENU_Change_Setting_State+0x7c>)
 8000df4:	2203      	movs	r2, #3
 8000df6:	701a      	strb	r2, [r3, #0]
		MENU_Data.changed = 0;
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <ST_MENU_Change_Setting_State+0x7c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	721a      	strb	r2, [r3, #8]
	}
}
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000130 	.word	0x20000130
 8000e08:	20000131 	.word	0x20000131
 8000e0c:	2000011c 	.word	0x2000011c

08000e10 <ST_MENU_Set_Value>:

void ST_MENU_Set_Value(uint8_t p_is_increase){
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 8000e1a:	4b38      	ldr	r3, [pc, #224]	; (8000efc <ST_MENU_Set_Value+0xec>)
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000e20:	4b36      	ldr	r3, [pc, #216]	; (8000efc <ST_MENU_Set_Value+0xec>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	721a      	strb	r2, [r3, #8]
	if(ST_MENU_Data.state < CHECKING_ALARM_AGAIN){
 8000e26:	4b36      	ldr	r3, [pc, #216]	; (8000f00 <ST_MENU_Set_Value+0xf0>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d861      	bhi.n	8000ef2 <ST_MENU_Set_Value+0xe2>
		int8_t *t_data_ptr;
		if(ST_MENU_Data.state >= SETTING_ALARM_SUNDAY){
 8000e2e:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <ST_MENU_Set_Value+0xf0>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d902      	bls.n	8000e3c <ST_MENU_Set_Value+0x2c>
			t_data_ptr = (int8_t *)(&ST_MENU_Data.current_day_state);
 8000e36:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <ST_MENU_Set_Value+0xf4>)
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e005      	b.n	8000e48 <ST_MENU_Set_Value+0x38>
		} else{
			t_data_ptr = (int8_t *)(&ST_MENU_Data.timeline_data) + ST_MENU_Data.state;
 8000e3c:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <ST_MENU_Set_Value+0xf0>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <ST_MENU_Set_Value+0xf8>)
 8000e44:	4413      	add	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
		}
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	79fa      	ldrb	r2, [r7, #7]
 8000e52:	2a01      	cmp	r2, #1
 8000e54:	d101      	bne.n	8000e5a <ST_MENU_Set_Value+0x4a>
 8000e56:	2201      	movs	r2, #1
 8000e58:	e000      	b.n	8000e5c <ST_MENU_Set_Value+0x4c>
 8000e5a:	22ff      	movs	r2, #255	; 0xff
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	b25a      	sxtb	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	701a      	strb	r2, [r3, #0]
		if(*t_data_ptr > __max_value[ST_MENU_Data.state]){
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f993 3000 	ldrsb.w	r3, [r3]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <ST_MENU_Set_Value+0xf0>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4619      	mov	r1, r3
 8000e74:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <ST_MENU_Set_Value+0xfc>)
 8000e76:	5c5b      	ldrb	r3, [r3, r1]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dd03      	ble.n	8000e84 <ST_MENU_Set_Value+0x74>
			*t_data_ptr = 0;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	e00c      	b.n	8000e9e <ST_MENU_Set_Value+0x8e>
		} else if(*t_data_ptr < 0){
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f993 3000 	ldrsb.w	r3, [r3]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	da07      	bge.n	8000e9e <ST_MENU_Set_Value+0x8e>
			*t_data_ptr = __max_value[ST_MENU_Data.state];
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <ST_MENU_Set_Value+0xf0>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <ST_MENU_Set_Value+0xfc>)
 8000e96:	5c9b      	ldrb	r3, [r3, r2]
 8000e98:	b25a      	sxtb	r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	701a      	strb	r2, [r3, #0]
		}
		if(ST_MENU_Data.state >= SETTING_ALARM_SUNDAY){
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <ST_MENU_Set_Value+0xf0>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d925      	bls.n	8000ef2 <ST_MENU_Set_Value+0xe2>
			if(*t_data_ptr){
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f993 3000 	ldrsb.w	r3, [r3]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00f      	beq.n	8000ed0 <ST_MENU_Set_Value+0xc0>
				ST_MENU_Data.timeline_data.day |= (0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <ST_MENU_Set_Value+0xf0>)
 8000eb2:	78db      	ldrb	r3, [r3, #3]
 8000eb4:	b25a      	sxtb	r2, r3
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <ST_MENU_Set_Value+0xf0>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <ST_MENU_Set_Value+0xf0>)
 8000ecc:	70da      	strb	r2, [r3, #3]
			} else{
				ST_MENU_Data.timeline_data.day &= ~(0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
			}
		}
	}
}
 8000ece:	e010      	b.n	8000ef2 <ST_MENU_Set_Value+0xe2>
				ST_MENU_Data.timeline_data.day &= ~(0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <ST_MENU_Set_Value+0xf0>)
 8000ed2:	78db      	ldrb	r3, [r3, #3]
 8000ed4:	b25a      	sxtb	r2, r3
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <ST_MENU_Set_Value+0xf0>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	3b02      	subs	r3, #2
 8000edc:	2101      	movs	r1, #1
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <ST_MENU_Set_Value+0xf0>)
 8000ef0:	70da      	strb	r2, [r3, #3]
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	2000011c 	.word	0x2000011c
 8000f00:	20000130 	.word	0x20000130
 8000f04:	20000135 	.word	0x20000135
 8000f08:	20000131 	.word	0x20000131
 8000f0c:	20000080 	.word	0x20000080

08000f10 <ST_MENU_Display>:

void ST_MENU_Display(){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
	if(MENU_Data.is_changing_menu){
 8000f16:	4b4d      	ldr	r3, [pc, #308]	; (800104c <ST_MENU_Display+0x13c>)
 8000f18:	7a5b      	ldrb	r3, [r3, #9]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d007      	beq.n	8000f2e <ST_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 8000f1e:	4b4b      	ldr	r3, [pc, #300]	; (800104c <ST_MENU_Display+0x13c>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f005 fc4c 	bl	80067c0 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8000f28:	4b48      	ldr	r3, [pc, #288]	; (800104c <ST_MENU_Display+0x13c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	725a      	strb	r2, [r3, #9]
	}

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 1);
 8000f2e:	4b47      	ldr	r3, [pc, #284]	; (800104c <ST_MENU_Display+0x13c>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f005 fc56 	bl	80067e8 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Time: %02d:%02d", ST_MENU_Data.timeline_data.hour, ST_MENU_Data.timeline_data.minute);
 8000f3c:	4b43      	ldr	r3, [pc, #268]	; (800104c <ST_MENU_Display+0x13c>)
 8000f3e:	6858      	ldr	r0, [r3, #4]
 8000f40:	4b43      	ldr	r3, [pc, #268]	; (8001050 <ST_MENU_Display+0x140>)
 8000f42:	785b      	ldrb	r3, [r3, #1]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b42      	ldr	r3, [pc, #264]	; (8001050 <ST_MENU_Display+0x140>)
 8000f48:	789b      	ldrb	r3, [r3, #2]
 8000f4a:	4942      	ldr	r1, [pc, #264]	; (8001054 <ST_MENU_Display+0x144>)
 8000f4c:	f005 fbfa 	bl	8006744 <LCD_Write>

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 2);
 8000f50:	4b3e      	ldr	r3, [pc, #248]	; (800104c <ST_MENU_Display+0x13c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2202      	movs	r2, #2
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f005 fc45 	bl	80067e8 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Day: C234567");
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	; (800104c <ST_MENU_Display+0x13c>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	493d      	ldr	r1, [pc, #244]	; (8001058 <ST_MENU_Display+0x148>)
 8000f64:	4618      	mov	r0, r3
 8000f66:	f005 fbed 	bl	8006744 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 5, 3);
 8000f6a:	4b38      	ldr	r3, [pc, #224]	; (800104c <ST_MENU_Display+0x13c>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2203      	movs	r2, #3
 8000f70:	2105      	movs	r1, #5
 8000f72:	4618      	mov	r0, r3
 8000f74:	f005 fc38 	bl	80067e8 <LCD_Set_Cursor>
	for(int i = 0; i < 7; i++){
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	e01d      	b.n	8000fba <ST_MENU_Display+0xaa>
		uint8_t t_day_value = ST_MENU_Data.timeline_data.day & (1 << i);
 8000f7e:	4b34      	ldr	r3, [pc, #208]	; (8001050 <ST_MENU_Display+0x140>)
 8000f80:	78db      	ldrb	r3, [r3, #3]
 8000f82:	b25a      	sxtb	r2, r3
 8000f84:	2101      	movs	r1, #1
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	4013      	ands	r3, r2
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	70fb      	strb	r3, [r7, #3]
		if(t_day_value){
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d006      	beq.n	8000fa8 <ST_MENU_Display+0x98>
			LCD_Send_Data(MENU_Data.hlcd, 0x00);
 8000f9a:	4b2c      	ldr	r3, [pc, #176]	; (800104c <ST_MENU_Display+0x13c>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f005 fce2 	bl	800696a <LCD_Send_Data>
 8000fa6:	e005      	b.n	8000fb4 <ST_MENU_Display+0xa4>
		} else{
			LCD_Send_Data(MENU_Data.hlcd, 0xFE);
 8000fa8:	4b28      	ldr	r3, [pc, #160]	; (800104c <ST_MENU_Display+0x13c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	21fe      	movs	r1, #254	; 0xfe
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f005 fcdb 	bl	800696a <LCD_Send_Data>
	for(int i = 0; i < 7; i++){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b06      	cmp	r3, #6
 8000fbe:	ddde      	ble.n	8000f7e <ST_MENU_Display+0x6e>
		}
	}

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 8000fc0:	4b22      	ldr	r3, [pc, #136]	; (800104c <ST_MENU_Display+0x13c>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f005 fc0d 	bl	80067e8 <LCD_Set_Cursor>
	if(ST_MENU_Data.state < SETTING_ALARM_SUNDAY){
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <ST_MENU_Display+0x140>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d811      	bhi.n	8000ffa <ST_MENU_Display+0xea>
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[ST_MENU_Data.state]);
 8000fd6:	4b1d      	ldr	r3, [pc, #116]	; (800104c <ST_MENU_Display+0x13c>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <ST_MENU_Display+0x140>)
 8000fdc:	7812      	ldrb	r2, [r2, #0]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4a1e      	ldr	r2, [pc, #120]	; (800105c <ST_MENU_Display+0x14c>)
 8000fe2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000fe6:	491e      	ldr	r1, [pc, #120]	; (8001060 <ST_MENU_Display+0x150>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f005 fbab 	bl	8006744 <LCD_Write>
		LCD_Cursor_No_Blink(MENU_Data.hlcd);
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <ST_MENU_Display+0x13c>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f005 fc66 	bl	80068c4 <LCD_Cursor_No_Blink>
		LCD_Set_Cursor(MENU_Data.hlcd, 5 + ST_MENU_Data.state - SETTING_ALARM_SUNDAY, 2);
	} else{
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
		LCD_Cursor_No_Blink(MENU_Data.hlcd);
	}
}
 8000ff8:	e024      	b.n	8001044 <ST_MENU_Display+0x134>
	} else if(ST_MENU_Data.state < CHECKING_ALARM_AGAIN){
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <ST_MENU_Display+0x140>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b08      	cmp	r3, #8
 8001000:	d815      	bhi.n	800102e <ST_MENU_Display+0x11e>
		LCD_Write(MENU_Data.hlcd, "  Setting : DAY   ");
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <ST_MENU_Display+0x13c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4917      	ldr	r1, [pc, #92]	; (8001064 <ST_MENU_Display+0x154>)
 8001008:	4618      	mov	r0, r3
 800100a:	f005 fb9b 	bl	8006744 <LCD_Write>
		LCD_Cursor_Blink(MENU_Data.hlcd);
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <ST_MENU_Display+0x13c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4618      	mov	r0, r3
 8001014:	f005 fc3e 	bl	8006894 <LCD_Cursor_Blink>
		LCD_Set_Cursor(MENU_Data.hlcd, 5 + ST_MENU_Data.state - SETTING_ALARM_SUNDAY, 2);
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <ST_MENU_Display+0x13c>)
 800101a:	6858      	ldr	r0, [r3, #4]
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <ST_MENU_Display+0x140>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	3303      	adds	r3, #3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2202      	movs	r2, #2
 8001026:	4619      	mov	r1, r3
 8001028:	f005 fbde 	bl	80067e8 <LCD_Set_Cursor>
}
 800102c:	e00a      	b.n	8001044 <ST_MENU_Display+0x134>
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <ST_MENU_Display+0x13c>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <ST_MENU_Display+0x158>)
 8001034:	4618      	mov	r0, r3
 8001036:	f005 fb85 	bl	8006744 <LCD_Write>
		LCD_Cursor_No_Blink(MENU_Data.hlcd);
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <ST_MENU_Display+0x13c>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4618      	mov	r0, r3
 8001040:	f005 fc40 	bl	80068c4 <LCD_Cursor_No_Blink>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000011c 	.word	0x2000011c
 8001050:	20000130 	.word	0x20000130
 8001054:	08007740 	.word	0x08007740
 8001058:	08007750 	.word	0x08007750
 800105c:	20000068 	.word	0x20000068
 8001060:	08007760 	.word	0x08007760
 8001064:	08007774 	.word	0x08007774
 8001068:	08007788 	.word	0x08007788

0800106c <__create_day_string>:
#include "Timeline_List_Menu.h"
#include "Menu.h"

TIME_LIST_MENU_DATA_HandleTypeDef TL_MENU_Data;

static void __create_day_string(char str[], uint8_t day){
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
	uint8_t t_num_of_day = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 7; i++){
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	e026      	b.n	80010d0 <__create_day_string+0x64>
		uint8_t t_day_value = day & (1 << i);
 8001082:	2201      	movs	r2, #1
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	b25a      	sxtb	r2, r3
 800108c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001090:	4013      	ands	r3, r2
 8001092:	b25b      	sxtb	r3, r3
 8001094:	73fb      	strb	r3, [r7, #15]
		if(t_day_value){
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d016      	beq.n	80010ca <__create_day_string+0x5e>
			if(t_day_value == 1){
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d108      	bne.n	80010b4 <__create_day_string+0x48>
				str[t_num_of_day++] = 'C';
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	75fa      	strb	r2, [r7, #23]
 80010a8:	461a      	mov	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	2243      	movs	r2, #67	; 0x43
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	e00a      	b.n	80010ca <__create_day_string+0x5e>
			} else{
				str[t_num_of_day++] = '1' + i;
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	1c59      	adds	r1, r3, #1
 80010bc:	75f9      	strb	r1, [r7, #23]
 80010be:	4619      	mov	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	440b      	add	r3, r1
 80010c4:	3231      	adds	r2, #49	; 0x31
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 7; i++){
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	3301      	adds	r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	ddd5      	ble.n	8001082 <__create_day_string+0x16>
			}
		}
	}
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
	...

080010e4 <__update_time_list>:

static void __update_time_list(){
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af02      	add	r7, sp, #8
	strcpy(TL_MENU_Data.list_str[0], " Add...             ");
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <__update_time_list+0xb0>)
 80010ec:	4a2a      	ldr	r2, [pc, #168]	; (8001198 <__update_time_list+0xb4>)
 80010ee:	1c5d      	adds	r5, r3, #1
 80010f0:	4614      	mov	r4, r2
 80010f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f4:	6028      	str	r0, [r5, #0]
 80010f6:	6069      	str	r1, [r5, #4]
 80010f8:	60aa      	str	r2, [r5, #8]
 80010fa:	60eb      	str	r3, [r5, #12]
 80010fc:	6820      	ldr	r0, [r4, #0]
 80010fe:	6128      	str	r0, [r5, #16]
 8001100:	7923      	ldrb	r3, [r4, #4]
 8001102:	752b      	strb	r3, [r5, #20]
	for(int i = 0; i < TL_MENU_Data.numer_of_choices - 1; i++){
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e038      	b.n	800117c <__update_time_list+0x98>
		char day_str[8] = {};
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
		__create_day_string(day_str, TIMELINE_Data.flash_data[i].day);
 8001112:	4a22      	ldr	r2, [pc, #136]	; (800119c <__update_time_list+0xb8>)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	799a      	ldrb	r2, [r3, #6]
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ffa3 	bl	800106c <__create_day_string>
		sprintf(TL_MENU_Data.list_str[i + 1], " %02d:%02d %7s  %3s ", TIMELINE_Data.flash_data[i].hour, TIMELINE_Data.flash_data[i].minute,
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	00da      	lsls	r2, r3, #3
 8001132:	1ad2      	subs	r2, r2, r3
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <__update_time_list+0xb0>)
 8001136:	4413      	add	r3, r2
 8001138:	1c58      	adds	r0, r3, #1
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <__update_time_list+0xb8>)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	791b      	ldrb	r3, [r3, #4]
 8001144:	4619      	mov	r1, r3
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <__update_time_list+0xb8>)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	795b      	ldrb	r3, [r3, #5]
 8001150:	461c      	mov	r4, r3
				day_str, (TIMELINE_Data.flash_data[i].timeline_state == TIMELINE_ON) ? "ON" : "OFF");
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <__update_time_list+0xb8>)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	79db      	ldrb	r3, [r3, #7]
		sprintf(TL_MENU_Data.list_str[i + 1], " %02d:%02d %7s  %3s ", TIMELINE_Data.flash_data[i].hour, TIMELINE_Data.flash_data[i].minute,
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <__update_time_list+0x80>
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <__update_time_list+0xbc>)
 8001162:	e000      	b.n	8001166 <__update_time_list+0x82>
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <__update_time_list+0xc0>)
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	4623      	mov	r3, r4
 800116e:	460a      	mov	r2, r1
 8001170:	490d      	ldr	r1, [pc, #52]	; (80011a8 <__update_time_list+0xc4>)
 8001172:	f005 fec5 	bl	8006f00 <siprintf>
	for(int i = 0; i < TL_MENU_Data.numer_of_choices - 1; i++){
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3301      	adds	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <__update_time_list+0xb0>)
 800117e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001182:	3b01      	subs	r3, #1
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	429a      	cmp	r2, r3
 8001188:	dbbf      	blt.n	800110a <__update_time_list+0x26>
	}
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bdb0      	pop	{r4, r5, r7, pc}
 8001194:	20000138 	.word	0x20000138
 8001198:	080077a0 	.word	0x080077a0
 800119c:	20000298 	.word	0x20000298
 80011a0:	080077b8 	.word	0x080077b8
 80011a4:	080077bc 	.word	0x080077bc
 80011a8:	080077c0 	.word	0x080077c0

080011ac <TL_MENU_Init>:

void TL_MENU_Init(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	TL_MENU_Data.first_line = 0;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <TL_MENU_Init+0x70>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
	TL_MENU_Data.numer_of_choices = 0;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <TL_MENU_Init+0x70>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	TL_MENU_Data.current_pointer = 0;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <TL_MENU_Init+0x70>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	TL_MENU_Data.woking_state = NORMAL_STATE;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <TL_MENU_Init+0x70>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	TIMELINE_Init();
 80011d0:	f000 faea 	bl	80017a8 <TIMELINE_Init>
	for(int i = 0; i < NUMBER_OF_CHOICE; i++){
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	e018      	b.n	800120c <TL_MENU_Init+0x60>
		for(int j = 0; j < 21; j++){
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	e00f      	b.n	8001200 <TL_MENU_Init+0x54>
			TL_MENU_Data.list_str[i][j] = 0;
 80011e0:	490e      	ldr	r1, [pc, #56]	; (800121c <TL_MENU_Init+0x70>)
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	00da      	lsls	r2, r3, #3
 80011ec:	1ad2      	subs	r2, r2, r3
 80011ee:	440a      	add	r2, r1
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	3301      	adds	r3, #1
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 21; j++){
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	3301      	adds	r3, #1
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2b14      	cmp	r3, #20
 8001204:	ddec      	ble.n	80011e0 <TL_MENU_Init+0x34>
	for(int i = 0; i < NUMBER_OF_CHOICE; i++){
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3301      	adds	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b0e      	cmp	r3, #14
 8001210:	dde3      	ble.n	80011da <TL_MENU_Init+0x2e>
		}
	}
}
 8001212:	bf00      	nop
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000138 	.word	0x20000138

08001220 <TL_MENU_Set_State>:

void TL_MENU_Set_State(){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <TL_MENU_Set_State+0x44>)
 8001226:	2202      	movs	r2, #2
 8001228:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <TL_MENU_Set_State+0x44>)
 800122c:	2200      	movs	r2, #0
 800122e:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <TL_MENU_Set_State+0x44>)
 8001232:	2201      	movs	r2, #1
 8001234:	725a      	strb	r2, [r3, #9]
	TL_MENU_Data.first_line = 0;
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <TL_MENU_Set_State+0x48>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
	TL_MENU_Data.current_pointer = 0;
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <TL_MENU_Set_State+0x48>)
 800123e:	2200      	movs	r2, #0
 8001240:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <TL_MENU_Set_State+0x4c>)
 8001246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800124a:	3301      	adds	r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <TL_MENU_Set_State+0x48>)
 8001250:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	TL_MENU_Data.woking_state = NORMAL_STATE;
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <TL_MENU_Set_State+0x48>)
 8001256:	2200      	movs	r2, #0
 8001258:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	__update_time_list();
 800125c:	f7ff ff42 	bl	80010e4 <__update_time_list>
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2000011c 	.word	0x2000011c
 8001268:	20000138 	.word	0x20000138
 800126c:	20000298 	.word	0x20000298

08001270 <TL_MENU_Change_Working_State>:

void TL_MENU_Change_Working_State(){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	if(TL_MENU_Data.current_pointer == 0) return;
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <TL_MENU_Change_Working_State+0x90>)
 8001276:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 800127a:	2b00      	cmp	r3, #0
 800127c:	d03e      	beq.n	80012fc <TL_MENU_Change_Working_State+0x8c>
	if(TL_MENU_Data.woking_state == NORMAL_STATE){
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <TL_MENU_Change_Working_State+0x90>)
 8001280:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10f      	bne.n	80012a8 <TL_MENU_Change_Working_State+0x38>
		TL_MENU_Data.woking_state = CONFIG_TIMELINE_STATE;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <TL_MENU_Change_Working_State+0x90>)
 800128a:	2201      	movs	r2, #1
 800128c:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
		TL_MENU_Data.timeline_state = TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <TL_MENU_Change_Working_State+0x90>)
 8001292:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 8001296:	3b01      	subs	r3, #1
 8001298:	4a1a      	ldr	r2, [pc, #104]	; (8001304 <TL_MENU_Change_Working_State+0x94>)
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	79da      	ldrb	r2, [r3, #7]
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <TL_MENU_Change_Working_State+0x90>)
 80012a2:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 80012a6:	e022      	b.n	80012ee <TL_MENU_Change_Working_State+0x7e>
	} else{
		TL_MENU_Data.woking_state = NORMAL_STATE;
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <TL_MENU_Change_Working_State+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
		if(TL_MENU_Data.timeline_state == DELETE_TIMELINE){
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <TL_MENU_Change_Working_State+0x90>)
 80012b2:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d109      	bne.n	80012ce <TL_MENU_Change_Working_State+0x5e>
			TIMELINE_Delete(TL_MENU_Data.current_pointer - 1);
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <TL_MENU_Change_Working_State+0x90>)
 80012bc:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	3b01      	subs	r3, #1
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fada 	bl	8001880 <TIMELINE_Delete>
 80012cc:	e00d      	b.n	80012ea <TL_MENU_Change_Working_State+0x7a>
		} else{
			TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state = TL_MENU_Data.timeline_state;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <TL_MENU_Change_Working_State+0x90>)
 80012d0:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 80012d4:	3b01      	subs	r3, #1
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <TL_MENU_Change_Working_State+0x90>)
 80012d8:	f892 113f 	ldrb.w	r1, [r2, #319]	; 0x13f
 80012dc:	4a09      	ldr	r2, [pc, #36]	; (8001304 <TL_MENU_Change_Working_State+0x94>)
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	460a      	mov	r2, r1
 80012e4:	71da      	strb	r2, [r3, #7]
			TIMELINE_Store_To_Flash();
 80012e6:	f000 fb79 	bl	80019dc <TIMELINE_Store_To_Flash>
		}
		__update_time_list();
 80012ea:	f7ff fefb 	bl	80010e4 <__update_time_list>
	}
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <TL_MENU_Change_Working_State+0x98>)
 80012f0:	2202      	movs	r2, #2
 80012f2:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <TL_MENU_Change_Working_State+0x98>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	721a      	strb	r2, [r3, #8]
 80012fa:	e000      	b.n	80012fe <TL_MENU_Change_Working_State+0x8e>
	if(TL_MENU_Data.current_pointer == 0) return;
 80012fc:	bf00      	nop
}
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000138 	.word	0x20000138
 8001304:	20000298 	.word	0x20000298
 8001308:	2000011c 	.word	0x2000011c

0800130c <TL_MENU_Change_Pointer>:

void TL_MENU_Change_Pointer(uint8_t p_is_increase){
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <TL_MENU_Change_Pointer+0xb4>)
 8001318:	2202      	movs	r2, #2
 800131a:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <TL_MENU_Change_Pointer+0xb4>)
 800131e:	2200      	movs	r2, #0
 8001320:	721a      	strb	r2, [r3, #8]
	TL_MENU_Data.current_pointer += (p_is_increase == INCREASE) ? 1 : -1;
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 8001324:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 8001328:	b2db      	uxtb	r3, r3
 800132a:	79fa      	ldrb	r2, [r7, #7]
 800132c:	2a01      	cmp	r2, #1
 800132e:	d101      	bne.n	8001334 <TL_MENU_Change_Pointer+0x28>
 8001330:	2201      	movs	r2, #1
 8001332:	e000      	b.n	8001336 <TL_MENU_Change_Pointer+0x2a>
 8001334:	22ff      	movs	r2, #255	; 0xff
 8001336:	4413      	add	r3, r2
 8001338:	b2db      	uxtb	r3, r3
 800133a:	b25a      	sxtb	r2, r3
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 800133e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	if(TL_MENU_Data.current_pointer < 0){
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 8001344:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 8001348:	2b00      	cmp	r3, #0
 800134a:	da04      	bge.n	8001356 <TL_MENU_Change_Pointer+0x4a>
		TL_MENU_Data.current_pointer = 0;
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 800134e:	2200      	movs	r2, #0
 8001350:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
 8001354:	e011      	b.n	800137a <TL_MENU_Change_Pointer+0x6e>
	} else if(TL_MENU_Data.current_pointer >= TL_MENU_Data.numer_of_choices){
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 8001358:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 800135c:	461a      	mov	r2, r3
 800135e:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 8001360:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001364:	429a      	cmp	r2, r3
 8001366:	db08      	blt.n	800137a <TL_MENU_Change_Pointer+0x6e>
		TL_MENU_Data.current_pointer = TL_MENU_Data.numer_of_choices - 1;
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 800136a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800136e:	3b01      	subs	r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	b25a      	sxtb	r2, r3
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 8001376:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}

	if(TL_MENU_Data.current_pointer > TL_MENU_Data.first_line + 3){
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 800137c:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 8001380:	461a      	mov	r2, r3
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3303      	adds	r3, #3
 8001388:	429a      	cmp	r2, r3
 800138a:	dd06      	ble.n	800139a <TL_MENU_Change_Pointer+0x8e>
		TL_MENU_Data.first_line++;
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 8001396:	701a      	strb	r2, [r3, #0]
	} else if(TL_MENU_Data.current_pointer < TL_MENU_Data.first_line){
		TL_MENU_Data.first_line--;
	}
}
 8001398:	e00d      	b.n	80013b6 <TL_MENU_Change_Pointer+0xaa>
	} else if(TL_MENU_Data.current_pointer < TL_MENU_Data.first_line){
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 800139c:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	da05      	bge.n	80013b6 <TL_MENU_Change_Pointer+0xaa>
		TL_MENU_Data.first_line--;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <TL_MENU_Change_Pointer+0xb8>)
 80013b4:	701a      	strb	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	2000011c 	.word	0x2000011c
 80013c4:	20000138 	.word	0x20000138

080013c8 <TL_MENU_Config_Timeline>:

void TL_MENU_Config_Timeline(uint8_t p_is_increase){
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <TL_MENU_Config_Timeline+0x64>)
 80013d4:	2202      	movs	r2, #2
 80013d6:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <TL_MENU_Config_Timeline+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	721a      	strb	r2, [r3, #8]

	TL_MENU_Data.timeline_state += (p_is_increase == INCREASE) ? 1 : -1;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <TL_MENU_Config_Timeline+0x68>)
 80013e0:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	2a01      	cmp	r2, #1
 80013e8:	d101      	bne.n	80013ee <TL_MENU_Config_Timeline+0x26>
 80013ea:	2201      	movs	r2, #1
 80013ec:	e000      	b.n	80013f0 <TL_MENU_Config_Timeline+0x28>
 80013ee:	22ff      	movs	r2, #255	; 0xff
 80013f0:	4413      	add	r3, r2
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <TL_MENU_Config_Timeline+0x68>)
 80013f6:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
	if((int8_t)TL_MENU_Data.timeline_state < 0){
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <TL_MENU_Config_Timeline+0x68>)
 80013fc:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8001400:	b25b      	sxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	da04      	bge.n	8001410 <TL_MENU_Config_Timeline+0x48>
		TL_MENU_Data.timeline_state = 2;
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <TL_MENU_Config_Timeline+0x68>)
 8001408:	2202      	movs	r2, #2
 800140a:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
	} else if(TL_MENU_Data.timeline_state > 2){
		TL_MENU_Data.timeline_state = 0;
	}
}
 800140e:	e008      	b.n	8001422 <TL_MENU_Config_Timeline+0x5a>
	} else if(TL_MENU_Data.timeline_state > 2){
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <TL_MENU_Config_Timeline+0x68>)
 8001412:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8001416:	2b02      	cmp	r3, #2
 8001418:	d903      	bls.n	8001422 <TL_MENU_Config_Timeline+0x5a>
		TL_MENU_Data.timeline_state = 0;
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <TL_MENU_Config_Timeline+0x68>)
 800141c:	2200      	movs	r2, #0
 800141e:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	2000011c 	.word	0x2000011c
 8001430:	20000138 	.word	0x20000138

08001434 <TL_MENU_Display>:

void TL_MENU_Display(){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
	if(MENU_Data.is_changing_menu == 1){
 800143a:	4b45      	ldr	r3, [pc, #276]	; (8001550 <TL_MENU_Display+0x11c>)
 800143c:	7a5b      	ldrb	r3, [r3, #9]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d107      	bne.n	8001452 <TL_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 8001442:	4b43      	ldr	r3, [pc, #268]	; (8001550 <TL_MENU_Display+0x11c>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4618      	mov	r0, r3
 8001448:	f005 f9ba 	bl	80067c0 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 800144c:	4b40      	ldr	r3, [pc, #256]	; (8001550 <TL_MENU_Display+0x11c>)
 800144e:	2200      	movs	r2, #0
 8001450:	725a      	strb	r2, [r3, #9]
	}
	for(int i = 0; i < 4; i++){
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	e072      	b.n	800153e <TL_MENU_Display+0x10a>
		LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 8001458:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <TL_MENU_Display+0x11c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f005 f9c0 	bl	80067e8 <LCD_Set_Cursor>
		LCD_Write(MENU_Data.hlcd, TL_MENU_Data.list_str[TL_MENU_Data.first_line + i]);
 8001468:	4b39      	ldr	r3, [pc, #228]	; (8001550 <TL_MENU_Display+0x11c>)
 800146a:	6858      	ldr	r0, [r3, #4]
 800146c:	4b39      	ldr	r3, [pc, #228]	; (8001554 <TL_MENU_Display+0x120>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	441a      	add	r2, r3
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	00da      	lsls	r2, r3, #3
 800147e:	1ad2      	subs	r2, r2, r3
 8001480:	4b34      	ldr	r3, [pc, #208]	; (8001554 <TL_MENU_Display+0x120>)
 8001482:	4413      	add	r3, r2
 8001484:	3301      	adds	r3, #1
 8001486:	4619      	mov	r1, r3
 8001488:	f005 f95c 	bl	8006744 <LCD_Write>
		if(TL_MENU_Data.current_pointer == TL_MENU_Data.first_line + i){
 800148c:	4b31      	ldr	r3, [pc, #196]	; (8001554 <TL_MENU_Display+0x120>)
 800148e:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 8001492:	461a      	mov	r2, r3
 8001494:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <TL_MENU_Display+0x120>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	440b      	add	r3, r1
 800149e:	429a      	cmp	r2, r3
 80014a0:	d14a      	bne.n	8001538 <TL_MENU_Display+0x104>
			if(TL_MENU_Data.woking_state == NORMAL_STATE){
 80014a2:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <TL_MENU_Display+0x120>)
 80014a4:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10e      	bne.n	80014ca <TL_MENU_Display+0x96>
				LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <TL_MENU_Display+0x11c>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f005 f996 	bl	80067e8 <LCD_Set_Cursor>
				LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <TL_MENU_Display+0x11c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	217e      	movs	r1, #126	; 0x7e
 80014c2:	4618      	mov	r0, r3
 80014c4:	f005 fa51 	bl	800696a <LCD_Send_Data>
 80014c8:	e036      	b.n	8001538 <TL_MENU_Display+0x104>
			} else{
				LCD_Set_Cursor(MENU_Data.hlcd, 15, i);
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <TL_MENU_Display+0x11c>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	210f      	movs	r1, #15
 80014d4:	4618      	mov	r0, r3
 80014d6:	f005 f987 	bl	80067e8 <LCD_Set_Cursor>
				LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <TL_MENU_Display+0x11c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	217e      	movs	r1, #126	; 0x7e
 80014e0:	4618      	mov	r0, r3
 80014e2:	f005 fa42 	bl	800696a <LCD_Send_Data>
				if(TL_MENU_Data.timeline_state == TURN_OFF_TIMELINE){
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <TL_MENU_Display+0x120>)
 80014e8:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d106      	bne.n	80014fe <TL_MENU_Display+0xca>
					LCD_Write(MENU_Data.hlcd, "OFF");
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <TL_MENU_Display+0x11c>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4918      	ldr	r1, [pc, #96]	; (8001558 <TL_MENU_Display+0x124>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f005 f924 	bl	8006744 <LCD_Write>
 80014fc:	e016      	b.n	800152c <TL_MENU_Display+0xf8>
				} else if(TL_MENU_Data.timeline_state == TURN_ON_TIMELINE){
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <TL_MENU_Display+0x120>)
 8001500:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8001504:	2b01      	cmp	r3, #1
 8001506:	d106      	bne.n	8001516 <TL_MENU_Display+0xe2>
					LCD_Write(MENU_Data.hlcd, " ON");
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <TL_MENU_Display+0x11c>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4913      	ldr	r1, [pc, #76]	; (800155c <TL_MENU_Display+0x128>)
 800150e:	4618      	mov	r0, r3
 8001510:	f005 f918 	bl	8006744 <LCD_Write>
 8001514:	e00a      	b.n	800152c <TL_MENU_Display+0xf8>
				} else if(TL_MENU_Data.timeline_state == DELETE_TIMELINE){
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <TL_MENU_Display+0x120>)
 8001518:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800151c:	2b02      	cmp	r3, #2
 800151e:	d105      	bne.n	800152c <TL_MENU_Display+0xf8>
					LCD_Write(MENU_Data.hlcd, "DEL");
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <TL_MENU_Display+0x11c>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	490e      	ldr	r1, [pc, #56]	; (8001560 <TL_MENU_Display+0x12c>)
 8001526:	4618      	mov	r0, r3
 8001528:	f005 f90c 	bl	8006744 <LCD_Write>
				}
				LCD_Send_Data(MENU_Data.hlcd, 0x7F);
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <TL_MENU_Display+0x11c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	217f      	movs	r1, #127	; 0x7f
 8001532:	4618      	mov	r0, r3
 8001534:	f005 fa19 	bl	800696a <LCD_Send_Data>
	for(int i = 0; i < 4; i++){
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3301      	adds	r3, #1
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b03      	cmp	r3, #3
 8001542:	dd89      	ble.n	8001458 <TL_MENU_Display+0x24>
			}
		}
	}
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000011c 	.word	0x2000011c
 8001554:	20000138 	.word	0x20000138
 8001558:	080077bc 	.word	0x080077bc
 800155c:	080077d8 	.word	0x080077d8
 8001560:	080077dc 	.word	0x080077dc

08001564 <BTN_Short_Pressing_Callback>:

BUTTON_HandleTypedef h_encoder_button;
ENCODER_HandleTypeDef h_encoder;
extern TIM_HandleTypeDef htim2;

void BTN_Short_Pressing_Callback(BUTTON_HandleTypedef *p_ButtonX){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	if(p_ButtonX == &h_encoder_button){
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a18      	ldr	r2, [pc, #96]	; (80015d0 <BTN_Short_Pressing_Callback+0x6c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d125      	bne.n	80015c0 <BTN_Short_Pressing_Callback+0x5c>
		switch(MENU_Data.menu_type){
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <BTN_Short_Pressing_Callback+0x70>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d823      	bhi.n	80015c4 <BTN_Short_Pressing_Callback+0x60>
 800157c:	a201      	add	r2, pc, #4	; (adr r2, 8001584 <BTN_Short_Pressing_Callback+0x20>)
 800157e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001582:	bf00      	nop
 8001584:	08001595 	.word	0x08001595
 8001588:	0800159b 	.word	0x0800159b
 800158c:	080015a3 	.word	0x080015a3
 8001590:	080015b9 	.word	0x080015b9
			case MAIN_MENU:
				TL_MENU_Set_State();
 8001594:	f7ff fe44 	bl	8001220 <TL_MENU_Set_State>
				break;
 8001598:	e015      	b.n	80015c6 <BTN_Short_Pressing_Callback+0x62>
			case SETTING_REALTIME_MENU:
				SR_MENU_Change_Setting_State(INCREASE);
 800159a:	2001      	movs	r0, #1
 800159c:	f7ff fa32 	bl	8000a04 <SR_MENU_Change_Setting_State>
				break;
 80015a0:	e011      	b.n	80015c6 <BTN_Short_Pressing_Callback+0x62>
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.current_pointer == 0){
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <BTN_Short_Pressing_Callback+0x74>)
 80015a4:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <BTN_Short_Pressing_Callback+0x4e>
					ST_MENU_Set_State();
 80015ac:	f7ff fbc8 	bl	8000d40 <ST_MENU_Set_State>
				} else{
					TL_MENU_Change_Working_State();
				}
				break;
 80015b0:	e009      	b.n	80015c6 <BTN_Short_Pressing_Callback+0x62>
					TL_MENU_Change_Working_State();
 80015b2:	f7ff fe5d 	bl	8001270 <TL_MENU_Change_Working_State>
				break;
 80015b6:	e006      	b.n	80015c6 <BTN_Short_Pressing_Callback+0x62>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Change_Setting_State(INCREASE);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff fbe9 	bl	8000d90 <ST_MENU_Change_Setting_State>
				break;
 80015be:	e002      	b.n	80015c6 <BTN_Short_Pressing_Callback+0x62>
			default:
				break;
		}
	}
 80015c0:	bf00      	nop
 80015c2:	e000      	b.n	80015c6 <BTN_Short_Pressing_Callback+0x62>
				break;
 80015c4:	bf00      	nop
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000278 	.word	0x20000278
 80015d4:	2000011c 	.word	0x2000011c
 80015d8:	20000138 	.word	0x20000138

080015dc <BTN_Long_Pressing_Callback>:

void BTN_Long_Pressing_Callback(BUTTON_HandleTypedef *p_ButtonX){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	if(p_ButtonX == &h_encoder_button){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a18      	ldr	r2, [pc, #96]	; (8001648 <BTN_Long_Pressing_Callback+0x6c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d125      	bne.n	8001638 <BTN_Long_Pressing_Callback+0x5c>
		switch(MENU_Data.menu_type){
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <BTN_Long_Pressing_Callback+0x70>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d823      	bhi.n	800163c <BTN_Long_Pressing_Callback+0x60>
 80015f4:	a201      	add	r2, pc, #4	; (adr r2, 80015fc <BTN_Long_Pressing_Callback+0x20>)
 80015f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fa:	bf00      	nop
 80015fc:	0800160d 	.word	0x0800160d
 8001600:	08001613 	.word	0x08001613
 8001604:	0800161b 	.word	0x0800161b
 8001608:	08001631 	.word	0x08001631
			case MAIN_MENU:
				SR_MENU_Set_State();
 800160c:	f7ff f9d6 	bl	80009bc <SR_MENU_Set_State>
				break;
 8001610:	e015      	b.n	800163e <BTN_Long_Pressing_Callback+0x62>
			case SETTING_REALTIME_MENU:
				SR_MENU_Change_Setting_State(DECREASE);
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff f9f6 	bl	8000a04 <SR_MENU_Change_Setting_State>
				break;
 8001618:	e011      	b.n	800163e <BTN_Long_Pressing_Callback+0x62>
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.woking_state == NORMAL_STATE){
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <BTN_Long_Pressing_Callback+0x74>)
 800161c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <BTN_Long_Pressing_Callback+0x4e>
					MAIN_MENU_Set_State();
 8001624:	f7ff f94a 	bl	80008bc <MAIN_MENU_Set_State>
				} else{
					TL_MENU_Change_Working_State();
				}
				break;
 8001628:	e009      	b.n	800163e <BTN_Long_Pressing_Callback+0x62>
					TL_MENU_Change_Working_State();
 800162a:	f7ff fe21 	bl	8001270 <TL_MENU_Change_Working_State>
				break;
 800162e:	e006      	b.n	800163e <BTN_Long_Pressing_Callback+0x62>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Change_Setting_State(DECREASE);
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fbad 	bl	8000d90 <ST_MENU_Change_Setting_State>
				break;
 8001636:	e002      	b.n	800163e <BTN_Long_Pressing_Callback+0x62>
			default:
				break;
		}
	}
 8001638:	bf00      	nop
 800163a:	e000      	b.n	800163e <BTN_Long_Pressing_Callback+0x62>
				break;
 800163c:	bf00      	nop
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000278 	.word	0x20000278
 800164c:	2000011c 	.word	0x2000011c
 8001650:	20000138 	.word	0x20000138

08001654 <ENCODER_Forward_Callback>:

void ENCODER_Forward_Callback(ENCODER_HandleTypeDef *p_encoder){
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	if(p_encoder == &h_encoder){
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <ENCODER_Forward_Callback+0x68>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d124      	bne.n	80016ae <ENCODER_Forward_Callback+0x5a>
		switch(MENU_Data.menu_type){
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <ENCODER_Forward_Callback+0x6c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b03      	cmp	r3, #3
 800166a:	d822      	bhi.n	80016b2 <ENCODER_Forward_Callback+0x5e>
 800166c:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <ENCODER_Forward_Callback+0x20>)
 800166e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001672:	bf00      	nop
 8001674:	080016b3 	.word	0x080016b3
 8001678:	08001685 	.word	0x08001685
 800167c:	0800168d 	.word	0x0800168d
 8001680:	080016a7 	.word	0x080016a7
			case MAIN_MENU:

				break;
			case SETTING_REALTIME_MENU:
				SR_MENU_Set_Value(INCREASE);
 8001684:	2001      	movs	r0, #1
 8001686:	f7ff f9f3 	bl	8000a70 <SR_MENU_Set_Value>
				break;
 800168a:	e013      	b.n	80016b4 <ENCODER_Forward_Callback+0x60>
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.woking_state == NORMAL_STATE)
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <ENCODER_Forward_Callback+0x70>)
 800168e:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8001692:	2b00      	cmp	r3, #0
 8001694:	d103      	bne.n	800169e <ENCODER_Forward_Callback+0x4a>
					TL_MENU_Change_Pointer(INCREASE);
 8001696:	2001      	movs	r0, #1
 8001698:	f7ff fe38 	bl	800130c <TL_MENU_Change_Pointer>
				else
					TL_MENU_Config_Timeline(INCREASE);
				break;
 800169c:	e00a      	b.n	80016b4 <ENCODER_Forward_Callback+0x60>
					TL_MENU_Config_Timeline(INCREASE);
 800169e:	2001      	movs	r0, #1
 80016a0:	f7ff fe92 	bl	80013c8 <TL_MENU_Config_Timeline>
				break;
 80016a4:	e006      	b.n	80016b4 <ENCODER_Forward_Callback+0x60>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Set_Value(INCREASE);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7ff fbb2 	bl	8000e10 <ST_MENU_Set_Value>
				break;
 80016ac:	e002      	b.n	80016b4 <ENCODER_Forward_Callback+0x60>
			default:
				break;
		}
	}
 80016ae:	bf00      	nop
 80016b0:	e000      	b.n	80016b4 <ENCODER_Forward_Callback+0x60>
				break;
 80016b2:	bf00      	nop
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000290 	.word	0x20000290
 80016c0:	2000011c 	.word	0x2000011c
 80016c4:	20000138 	.word	0x20000138

080016c8 <ENCODER_Backward_Callback>:

void ENCODER_Backward_Callback(ENCODER_HandleTypeDef *p_encoder){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if(p_encoder == &h_encoder){
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a17      	ldr	r2, [pc, #92]	; (8001730 <ENCODER_Backward_Callback+0x68>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d124      	bne.n	8001722 <ENCODER_Backward_Callback+0x5a>
		switch(MENU_Data.menu_type){
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <ENCODER_Backward_Callback+0x6c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d822      	bhi.n	8001726 <ENCODER_Backward_Callback+0x5e>
 80016e0:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <ENCODER_Backward_Callback+0x20>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	08001727 	.word	0x08001727
 80016ec:	080016f9 	.word	0x080016f9
 80016f0:	08001701 	.word	0x08001701
 80016f4:	0800171b 	.word	0x0800171b
			case MAIN_MENU:

				break;
			case SETTING_REALTIME_MENU:
				SR_MENU_Set_Value(DECREASE);
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff f9b9 	bl	8000a70 <SR_MENU_Set_Value>
				break;
 80016fe:	e013      	b.n	8001728 <ENCODER_Backward_Callback+0x60>
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.woking_state == NORMAL_STATE)
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <ENCODER_Backward_Callback+0x70>)
 8001702:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <ENCODER_Backward_Callback+0x4a>
					TL_MENU_Change_Pointer(DECREASE);
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fdfe 	bl	800130c <TL_MENU_Change_Pointer>
				else
					TL_MENU_Config_Timeline(DECREASE);
				break;
 8001710:	e00a      	b.n	8001728 <ENCODER_Backward_Callback+0x60>
					TL_MENU_Config_Timeline(DECREASE);
 8001712:	2000      	movs	r0, #0
 8001714:	f7ff fe58 	bl	80013c8 <TL_MENU_Config_Timeline>
				break;
 8001718:	e006      	b.n	8001728 <ENCODER_Backward_Callback+0x60>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Set_Value(DECREASE);
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fb78 	bl	8000e10 <ST_MENU_Set_Value>
				break;
 8001720:	e002      	b.n	8001728 <ENCODER_Backward_Callback+0x60>
			default:
				break;
		}
	}
 8001722:	bf00      	nop
 8001724:	e000      	b.n	8001728 <ENCODER_Backward_Callback+0x60>
				break;
 8001726:	bf00      	nop
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000290 	.word	0x20000290
 8001734:	2000011c 	.word	0x2000011c
 8001738:	20000138 	.word	0x20000138

0800173c <ROTARY_ENCODER_Init>:

void ROTARY_ENCODER_Init(){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	BUTTON_Init(&h_encoder_button, GPIOA, GPIO_PIN_1);
 8001740:	2202      	movs	r2, #2
 8001742:	490a      	ldr	r1, [pc, #40]	; (800176c <ROTARY_ENCODER_Init+0x30>)
 8001744:	480a      	ldr	r0, [pc, #40]	; (8001770 <ROTARY_ENCODER_Init+0x34>)
 8001746:	f005 f9e1 	bl	8006b0c <BUTTON_Init>
	BUTTON_Set_Callback_Function(NULL, NULL, BTN_Short_Pressing_Callback, BTN_Long_Pressing_Callback);
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <ROTARY_ENCODER_Init+0x38>)
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <ROTARY_ENCODER_Init+0x3c>)
 800174e:	2100      	movs	r1, #0
 8001750:	2000      	movs	r0, #0
 8001752:	f005 f9fd 	bl	8006b50 <BUTTON_Set_Callback_Function>
	ENCODER_Init(&h_encoder, &htim2);
 8001756:	4909      	ldr	r1, [pc, #36]	; (800177c <ROTARY_ENCODER_Init+0x40>)
 8001758:	4809      	ldr	r0, [pc, #36]	; (8001780 <ROTARY_ENCODER_Init+0x44>)
 800175a:	f004 ff11 	bl	8006580 <ENCODER_Init>
	ENCODER_Set_Callback_Function(ENCODER_Forward_Callback, ENCODER_Backward_Callback);
 800175e:	4909      	ldr	r1, [pc, #36]	; (8001784 <ROTARY_ENCODER_Init+0x48>)
 8001760:	4809      	ldr	r0, [pc, #36]	; (8001788 <ROTARY_ENCODER_Init+0x4c>)
 8001762:	f004 ff21 	bl	80065a8 <ENCODER_Set_Callback_Function>
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40010800 	.word	0x40010800
 8001770:	20000278 	.word	0x20000278
 8001774:	080015dd 	.word	0x080015dd
 8001778:	08001565 	.word	0x08001565
 800177c:	20000398 	.word	0x20000398
 8001780:	20000290 	.word	0x20000290
 8001784:	080016c9 	.word	0x080016c9
 8001788:	08001655 	.word	0x08001655

0800178c <ROTARY_ENCODER_Handle>:

void ROTARY_ENCODER_Handle(){
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	BUTTON_Handle(&h_encoder_button);
 8001790:	4803      	ldr	r0, [pc, #12]	; (80017a0 <ROTARY_ENCODER_Handle+0x14>)
 8001792:	f005 f92b 	bl	80069ec <BUTTON_Handle>
	ENCODER_Handle(&h_encoder);
 8001796:	4803      	ldr	r0, [pc, #12]	; (80017a4 <ROTARY_ENCODER_Handle+0x18>)
 8001798:	f004 ff32 	bl	8006600 <ENCODER_Handle>
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000278 	.word	0x20000278
 80017a4:	20000290 	.word	0x20000290

080017a8 <TIMELINE_Init>:
//			HAL_UART_Transmit(&huart2, (uint8_t *)Tx_Buffer, strlen(Tx_Buffer), 1000);
//		}
//	}
}

void TIMELINE_Init(){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
#ifdef __STM32F0xx_HAL_H
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63;
#endif
#ifdef __STM32F1xx_HAL_H
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63; // 0x0800FC00
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <TIMELINE_Init+0x80>)
 80017b0:	4a1e      	ldr	r2, [pc, #120]	; (800182c <TIMELINE_Init+0x84>)
 80017b2:	601a      	str	r2, [r3, #0]
#endif
#ifdef __STM32F4xx_HAL_H
	TIMELINE_Data.add = SECTOR_7_ADD;
#endif

	TIMELINE_Data.len = 0;
 80017b4:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <TIMELINE_Init+0x80>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	for(int i = 0; i < MAX_OPTIONS; i++){
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	e02a      	b.n	8001818 <TIMELINE_Init+0x70>
		uint8_t t_data[DATA_FRAME_SIZE_BYTE];
		FLASH_Read(TIMELINE_Data.add + i*DATA_FRAME_SIZE_BYTE, t_data, DATA_FRAME_SIZE_BYTE);
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <TIMELINE_Init+0x80>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	4639      	mov	r1, r7
 80017ce:	2204      	movs	r2, #4
 80017d0:	4618      	mov	r0, r3
 80017d2:	f005 fa3c 	bl	8006c4e <FLASH_Read>
		if(*(uint32_t *)t_data == 0xFFFFFFFF){
 80017d6:	463b      	mov	r3, r7
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017de:	d107      	bne.n	80017f0 <TIMELINE_Init+0x48>
			*(uint32_t *)(TIMELINE_Data.flash_data + i) = 0xFFFFFFFF;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4a12      	ldr	r2, [pc, #72]	; (8001830 <TIMELINE_Init+0x88>)
 80017e6:	4413      	add	r3, r2
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	e010      	b.n	8001812 <TIMELINE_Init+0x6a>
		} else{
			TIMELINE_Data.flash_data[i] = *((FLASH_DATA_t *)t_data);
 80017f0:	4639      	mov	r1, r7
 80017f2:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <TIMELINE_Init+0x80>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	3304      	adds	r3, #4
 80017fc:	460a      	mov	r2, r1
 80017fe:	6810      	ldr	r0, [r2, #0]
 8001800:	6018      	str	r0, [r3, #0]
			TIMELINE_Data.len++;
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <TIMELINE_Init+0x80>)
 8001804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001808:	3301      	adds	r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <TIMELINE_Init+0x80>)
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	for(int i = 0; i < MAX_OPTIONS; i++){
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3301      	adds	r3, #1
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b0d      	cmp	r3, #13
 800181c:	ddd1      	ble.n	80017c2 <TIMELINE_Init+0x1a>
		}
	}
}
 800181e:	bf00      	nop
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000298 	.word	0x20000298
 800182c:	0800fc00 	.word	0x0800fc00
 8001830:	2000029c 	.word	0x2000029c

08001834 <TIMELINE_Add>:

void TIMELINE_Add(FLASH_DATA_t *p_new_timeline){
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	if(TIMELINE_Data.len < MAX_OPTIONS){
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <TIMELINE_Add+0x48>)
 800183e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001842:	2b0d      	cmp	r3, #13
 8001844:	d815      	bhi.n	8001872 <TIMELINE_Add+0x3e>
		TIMELINE_Data.flash_data[TIMELINE_Data.len] = *p_new_timeline;
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <TIMELINE_Add+0x48>)
 8001848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800184c:	4a0b      	ldr	r2, [pc, #44]	; (800187c <TIMELINE_Add+0x48>)
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	3304      	adds	r3, #4
 8001856:	6810      	ldr	r0, [r2, #0]
 8001858:	6018      	str	r0, [r3, #0]
		TIMELINE_Data.len++;
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <TIMELINE_Add+0x48>)
 800185c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001860:	3301      	adds	r3, #1
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <TIMELINE_Add+0x48>)
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		TIMELINE_Sort();
 800186a:	f000 f851 	bl	8001910 <TIMELINE_Sort>
		TIMELINE_Store_To_Flash();
 800186e:	f000 f8b5 	bl	80019dc <TIMELINE_Store_To_Flash>
	}
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000298 	.word	0x20000298

08001880 <TIMELINE_Delete>:
	*p_des_timeline = *p_new_timeline;
	TIMELINE_Sort();
	TIMELINE_Store_To_Flash();
}

void TIMELINE_Delete(uint8_t p_index){
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
	if(TIMELINE_Data.len >= 0){
		for(int i = p_index; i < TIMELINE_Data.len - 1; i++){
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e01a      	b.n	80018c6 <TIMELINE_Delete+0x46>
			FLASH_DATA_t t_temp = TIMELINE_Data.flash_data[i];
 8001890:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <TIMELINE_Delete+0x88>)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	60bb      	str	r3, [r7, #8]
			TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[i+1];
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	4919      	ldr	r1, [pc, #100]	; (8001908 <TIMELINE_Delete+0x88>)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	4917      	ldr	r1, [pc, #92]	; (8001908 <TIMELINE_Delete+0x88>)
 80018aa:	0092      	lsls	r2, r2, #2
 80018ac:	440a      	add	r2, r1
 80018ae:	6852      	ldr	r2, [r2, #4]
 80018b0:	605a      	str	r2, [r3, #4]
			TIMELINE_Data.flash_data[i+1] = t_temp;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3301      	adds	r3, #1
 80018b6:	4a14      	ldr	r2, [pc, #80]	; (8001908 <TIMELINE_Delete+0x88>)
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	605a      	str	r2, [r3, #4]
		for(int i = p_index; i < TIMELINE_Data.len - 1; i++){
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3301      	adds	r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <TIMELINE_Delete+0x88>)
 80018c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018cc:	3b01      	subs	r3, #1
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbdd      	blt.n	8001890 <TIMELINE_Delete+0x10>
		}
		*(uint32_t *)(TIMELINE_Data.flash_data + TIMELINE_Data.len - 1) = 0xFFFFFFFF;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <TIMELINE_Delete+0x88>)
 80018d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018de:	3b01      	subs	r3, #1
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <TIMELINE_Delete+0x8c>)
 80018e4:	4413      	add	r3, r2
 80018e6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ea:	601a      	str	r2, [r3, #0]
		TIMELINE_Data.len--;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <TIMELINE_Delete+0x88>)
 80018ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <TIMELINE_Delete+0x88>)
 80018f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		TIMELINE_Store_To_Flash();
 80018fc:	f000 f86e 	bl	80019dc <TIMELINE_Store_To_Flash>
	}
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000298 	.word	0x20000298
 800190c:	2000029c 	.word	0x2000029c

08001910 <TIMELINE_Sort>:

void TIMELINE_Sort(){
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
	for(int i = 0; i < TIMELINE_Data.len; i++){
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	e050      	b.n	80019be <TIMELINE_Sort+0xae>
		for(int j = i + 1; j < TIMELINE_Data.len; j++){
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3301      	adds	r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	e042      	b.n	80019aa <TIMELINE_Sort+0x9a>
			uint16_t t_data_i = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 8001924:	4a2c      	ldr	r2, [pc, #176]	; (80019d8 <TIMELINE_Sort+0xc8>)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	791b      	ldrb	r3, [r3, #4]
 800192e:	b29b      	uxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	b29a      	uxth	r2, r3
 800193a:	4927      	ldr	r1, [pc, #156]	; (80019d8 <TIMELINE_Sort+0xc8>)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	795b      	ldrb	r3, [r3, #5]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4413      	add	r3, r2
 8001948:	80fb      	strh	r3, [r7, #6]
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 800194a:	4a23      	ldr	r2, [pc, #140]	; (80019d8 <TIMELINE_Sort+0xc8>)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	791b      	ldrb	r3, [r3, #4]
 8001954:	b29b      	uxth	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	b29a      	uxth	r2, r3
 8001960:	491d      	ldr	r1, [pc, #116]	; (80019d8 <TIMELINE_Sort+0xc8>)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	795b      	ldrb	r3, [r3, #5]
 800196a:	b29b      	uxth	r3, r3
 800196c:	4413      	add	r3, r2
 800196e:	80bb      	strh	r3, [r7, #4]
			if(t_data_i > t_data_j){
 8001970:	88fa      	ldrh	r2, [r7, #6]
 8001972:	88bb      	ldrh	r3, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	d915      	bls.n	80019a4 <TIMELINE_Sort+0x94>
				FLASH_DATA_t t_temp;
				t_temp = TIMELINE_Data.flash_data[i];
 8001978:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <TIMELINE_Sort+0xc8>)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	603b      	str	r3, [r7, #0]
				TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[j];
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <TIMELINE_Sort+0xc8>)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	4912      	ldr	r1, [pc, #72]	; (80019d8 <TIMELINE_Sort+0xc8>)
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	440a      	add	r2, r1
 8001994:	6852      	ldr	r2, [r2, #4]
 8001996:	605a      	str	r2, [r3, #4]
				TIMELINE_Data.flash_data[j] = t_temp;
 8001998:	4a0f      	ldr	r2, [pc, #60]	; (80019d8 <TIMELINE_Sort+0xc8>)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	605a      	str	r2, [r3, #4]
		for(int j = i + 1; j < TIMELINE_Data.len; j++){
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	3301      	adds	r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <TIMELINE_Sort+0xc8>)
 80019ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b0:	461a      	mov	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	4293      	cmp	r3, r2
 80019b6:	dbb5      	blt.n	8001924 <TIMELINE_Sort+0x14>
	for(int i = 0; i < TIMELINE_Data.len; i++){
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <TIMELINE_Sort+0xc8>)
 80019c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019c4:	461a      	mov	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4293      	cmp	r3, r2
 80019ca:	dba7      	blt.n	800191c <TIMELINE_Sort+0xc>
			}
		}
	}
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	20000298 	.word	0x20000298

080019dc <TIMELINE_Store_To_Flash>:

void TIMELINE_Store_To_Flash(){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
	FLASH_DATA_t *t_flash_data;
	t_flash_data = (FLASH_DATA_t *)malloc(TIMELINE_Data.len * DATA_FRAME_SIZE_BIT);
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <TIMELINE_Store_To_Flash+0x70>)
 80019e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e8:	015b      	lsls	r3, r3, #5
 80019ea:	4618      	mov	r0, r3
 80019ec:	f005 f984 	bl	8006cf8 <malloc>
 80019f0:	4603      	mov	r3, r0
 80019f2:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < TIMELINE_Data.len; i++){
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	e00e      	b.n	8001a18 <TIMELINE_Store_To_Flash+0x3c>
		*(t_flash_data + i) = *(TIMELINE_Data.flash_data + i);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <TIMELINE_Store_To_Flash+0x74>)
 8001a00:	1899      	adds	r1, r3, r2
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	4413      	add	r3, r2
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < TIMELINE_Data.len; i++){
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3301      	adds	r3, #1
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <TIMELINE_Store_To_Flash+0x70>)
 8001a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a1e:	461a      	mov	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4293      	cmp	r3, r2
 8001a24:	dbe9      	blt.n	80019fa <TIMELINE_Store_To_Flash+0x1e>
	}
	FLASH_Write(63, (uint8_t *)t_flash_data, TIMELINE_Data.len * DATA_FRAME_SIZE_BYTE);
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <TIMELINE_Store_To_Flash+0x70>)
 8001a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	6839      	ldr	r1, [r7, #0]
 8001a36:	203f      	movs	r0, #63	; 0x3f
 8001a38:	f005 f8c9 	bl	8006bce <FLASH_Write>
	free(t_flash_data);
 8001a3c:	6838      	ldr	r0, [r7, #0]
 8001a3e:	f005 f963 	bl	8006d08 <free>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000298 	.word	0x20000298
 8001a50:	2000029c 	.word	0x2000029c

08001a54 <REALTIME_Init>:
DS3231_HandleTypeDef hds3231;
REALTIME_DATA_HandleTypeDef REALTIME_Data;

static uint32_t timer = 0;

void REALTIME_Init(){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	DS3231_Init(&hds3231, &hi2c2);
 8001a58:	491e      	ldr	r1, [pc, #120]	; (8001ad4 <REALTIME_Init+0x80>)
 8001a5a:	481f      	ldr	r0, [pc, #124]	; (8001ad8 <REALTIME_Init+0x84>)
 8001a5c:	f004 fc60 	bl	8006320 <DS3231_Init>
	REALTIME_Data.system_day = 1;
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <REALTIME_Init+0x88>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = 0;
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <REALTIME_Init+0x88>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = 0;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <REALTIME_Init+0x88>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = 1;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <REALTIME_Init+0x88>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = 1;
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <REALTIME_Init+0x88>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = 0;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <REALTIME_Init+0x88>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	715a      	strb	r2, [r3, #5]

//	DS3231_Set_Time(&hds3231, 19, 54, 0, 6);
//	DS3231_Set_Date(&hds3231, 2, 9, 22);

	if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8001a84:	4814      	ldr	r0, [pc, #80]	; (8001ad8 <REALTIME_Init+0x84>)
 8001a86:	f004 fc93 	bl	80063b0 <DS3231_Get_Time>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01f      	beq.n	8001ad0 <REALTIME_Init+0x7c>
 8001a90:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <REALTIME_Init+0x84>)
 8001a92:	f004 fcfc 	bl	800648e <DS3231_Get_Date>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d019      	beq.n	8001ad0 <REALTIME_Init+0x7c>
		return;
	}

	REALTIME_Data.system_day = hds3231.current_day;
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <REALTIME_Init+0x84>)
 8001a9e:	78da      	ldrb	r2, [r3, #3]
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <REALTIME_Init+0x88>)
 8001aa2:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = hds3231.current_hour;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <REALTIME_Init+0x84>)
 8001aa6:	781a      	ldrb	r2, [r3, #0]
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <REALTIME_Init+0x88>)
 8001aaa:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = hds3231.current_minute;
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <REALTIME_Init+0x84>)
 8001aae:	785a      	ldrb	r2, [r3, #1]
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <REALTIME_Init+0x88>)
 8001ab2:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = hds3231.current_date;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <REALTIME_Init+0x84>)
 8001ab6:	791a      	ldrb	r2, [r3, #4]
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <REALTIME_Init+0x88>)
 8001aba:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = hds3231.current_month;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <REALTIME_Init+0x84>)
 8001abe:	795a      	ldrb	r2, [r3, #5]
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <REALTIME_Init+0x88>)
 8001ac2:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = hds3231.current_year;
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <REALTIME_Init+0x84>)
 8001ac6:	88db      	ldrh	r3, [r3, #6]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <REALTIME_Init+0x88>)
 8001acc:	715a      	strb	r2, [r3, #5]
 8001ace:	e000      	b.n	8001ad2 <REALTIME_Init+0x7e>
		return;
 8001ad0:	bf00      	nop
}
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000344 	.word	0x20000344
 8001ad8:	200002d8 	.word	0x200002d8
 8001adc:	200002e4 	.word	0x200002e4

08001ae0 <REALTIME_Handle>:

void REALTIME_Handle(){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - timer > CHECKING_REAL_TIME_CYCLE){
 8001ae4:	f000 fd74 	bl	80025d0 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <REALTIME_Handle+0x80>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d932      	bls.n	8001b5e <REALTIME_Handle+0x7e>
		if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8001af8:	481a      	ldr	r0, [pc, #104]	; (8001b64 <REALTIME_Handle+0x84>)
 8001afa:	f004 fc59 	bl	80063b0 <DS3231_Get_Time>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d02b      	beq.n	8001b5c <REALTIME_Handle+0x7c>
 8001b04:	4817      	ldr	r0, [pc, #92]	; (8001b64 <REALTIME_Handle+0x84>)
 8001b06:	f004 fcc2 	bl	800648e <DS3231_Get_Date>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d025      	beq.n	8001b5c <REALTIME_Handle+0x7c>
			return;
		}

		if(REALTIME_Data.system_minute != hds3231.current_minute){
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <REALTIME_Handle+0x88>)
 8001b12:	785a      	ldrb	r2, [r3, #1]
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <REALTIME_Handle+0x84>)
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d005      	beq.n	8001b28 <REALTIME_Handle+0x48>
			if(MENU_Data.menu_type == MAIN_MENU){
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <REALTIME_Handle+0x8c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <REALTIME_Handle+0x48>
				MAIN_MENU_Update_Value();
 8001b24:	f7fe fedc 	bl	80008e0 <MAIN_MENU_Update_Value>
			}
		}

		REALTIME_Data.system_day = hds3231.current_day;
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <REALTIME_Handle+0x84>)
 8001b2a:	78da      	ldrb	r2, [r3, #3]
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <REALTIME_Handle+0x88>)
 8001b2e:	709a      	strb	r2, [r3, #2]
		REALTIME_Data.system_hour = hds3231.current_hour;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <REALTIME_Handle+0x84>)
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <REALTIME_Handle+0x88>)
 8001b36:	701a      	strb	r2, [r3, #0]
		REALTIME_Data.system_minute = hds3231.current_minute;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <REALTIME_Handle+0x84>)
 8001b3a:	785a      	ldrb	r2, [r3, #1]
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <REALTIME_Handle+0x88>)
 8001b3e:	705a      	strb	r2, [r3, #1]
		REALTIME_Data.system_date = hds3231.current_date;
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <REALTIME_Handle+0x84>)
 8001b42:	791a      	ldrb	r2, [r3, #4]
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <REALTIME_Handle+0x88>)
 8001b46:	70da      	strb	r2, [r3, #3]
		REALTIME_Data.system_month = hds3231.current_month;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <REALTIME_Handle+0x84>)
 8001b4a:	795a      	ldrb	r2, [r3, #5]
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <REALTIME_Handle+0x88>)
 8001b4e:	711a      	strb	r2, [r3, #4]
		REALTIME_Data.system_year = hds3231.current_year;
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <REALTIME_Handle+0x84>)
 8001b52:	88db      	ldrh	r3, [r3, #6]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <REALTIME_Handle+0x88>)
 8001b58:	715a      	strb	r2, [r3, #5]
 8001b5a:	e000      	b.n	8001b5e <REALTIME_Handle+0x7e>
			return;
 8001b5c:	bf00      	nop
	}
}
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200002ec 	.word	0x200002ec
 8001b64:	200002d8 	.word	0x200002d8
 8001b68:	200002e4 	.word	0x200002e4
 8001b6c:	2000011c 	.word	0x2000011c

08001b70 <REALTIME_Set_New_Realtime>:

void REALTIME_Set_New_Realtime(REALTIME_DATA_HandleTypeDef *p_new_realtime){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	6078      	str	r0, [r7, #4]
	DS3231_Set_Time(&hds3231, p_new_realtime->system_hour, p_new_realtime->system_minute, 0, p_new_realtime->system_day);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7819      	ldrb	r1, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	785a      	ldrb	r2, [r3, #1]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	789b      	ldrb	r3, [r3, #2]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2300      	movs	r3, #0
 8001b88:	4813      	ldr	r0, [pc, #76]	; (8001bd8 <REALTIME_Set_New_Realtime+0x68>)
 8001b8a:	f004 fbd6 	bl	800633a <DS3231_Set_Time>
	DS3231_Set_Date(&hds3231, p_new_realtime->system_date, p_new_realtime->system_month, p_new_realtime->system_year);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	78d9      	ldrb	r1, [r3, #3]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	791a      	ldrb	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	795b      	ldrb	r3, [r3, #5]
 8001b9a:	480f      	ldr	r0, [pc, #60]	; (8001bd8 <REALTIME_Set_New_Realtime+0x68>)
 8001b9c:	f004 fc45 	bl	800642a <DS3231_Set_Date>

	REALTIME_Data.system_day = p_new_realtime->system_day;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	789a      	ldrb	r2, [r3, #2]
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <REALTIME_Set_New_Realtime+0x6c>)
 8001ba6:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = p_new_realtime->system_hour;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	781a      	ldrb	r2, [r3, #0]
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <REALTIME_Set_New_Realtime+0x6c>)
 8001bae:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = p_new_realtime->system_minute;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	785a      	ldrb	r2, [r3, #1]
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <REALTIME_Set_New_Realtime+0x6c>)
 8001bb6:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = p_new_realtime->system_date;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	78da      	ldrb	r2, [r3, #3]
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <REALTIME_Set_New_Realtime+0x6c>)
 8001bbe:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = p_new_realtime->system_month;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	791a      	ldrb	r2, [r3, #4]
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <REALTIME_Set_New_Realtime+0x6c>)
 8001bc6:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = p_new_realtime->system_year;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	795a      	ldrb	r2, [r3, #5]
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <REALTIME_Set_New_Realtime+0x6c>)
 8001bce:	715a      	strb	r2, [r3, #5]
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200002d8 	.word	0x200002d8
 8001bdc:	200002e4 	.word	0x200002e4

08001be0 <TEMP_AND_HUM_Handle>:

LCD_I2C_HandleTypeDef hlcd;
DHT_HandleTypeDef hdht;

#define CHECKING_SENSOR_TIME	2000
void TEMP_AND_HUM_Handle(){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	static uint32_t timer = 0;
	static uint8_t system_temperature = 0;
	static uint8_t system_huminity = 0;
	if(HAL_GetTick() - timer >= CHECKING_SENSOR_TIME){
 8001be4:	f000 fcf4 	bl	80025d0 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <TEMP_AND_HUM_Handle+0x88>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001bf4:	d335      	bcc.n	8001c62 <TEMP_AND_HUM_Handle+0x82>
		DHT_Read_Value(&hdht);
 8001bf6:	481d      	ldr	r0, [pc, #116]	; (8001c6c <TEMP_AND_HUM_Handle+0x8c>)
 8001bf8:	f004 faf9 	bl	80061ee <DHT_Read_Value>
		if(system_huminity != (uint8_t)hdht.huminity || system_temperature != (uint8_t)hdht.temperature){
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <TEMP_AND_HUM_Handle+0x8c>)
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fcb7 	bl	8000574 <__aeabi_f2uiz>
 8001c06:	4603      	mov	r3, r0
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <TEMP_AND_HUM_Handle+0x90>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d10a      	bne.n	8001c28 <TEMP_AND_HUM_Handle+0x48>
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <TEMP_AND_HUM_Handle+0x8c>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fcac 	bl	8000574 <__aeabi_f2uiz>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <TEMP_AND_HUM_Handle+0x94>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d017      	beq.n	8001c58 <TEMP_AND_HUM_Handle+0x78>
			system_huminity = hdht.huminity;
 8001c28:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <TEMP_AND_HUM_Handle+0x8c>)
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fca1 	bl	8000574 <__aeabi_f2uiz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <TEMP_AND_HUM_Handle+0x90>)
 8001c38:	701a      	strb	r2, [r3, #0]
			system_temperature = hdht.temperature;
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <TEMP_AND_HUM_Handle+0x8c>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc98 	bl	8000574 <__aeabi_f2uiz>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <TEMP_AND_HUM_Handle+0x94>)
 8001c4a:	701a      	strb	r2, [r3, #0]
			if(MENU_Data.menu_type == MAIN_MENU){
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <TEMP_AND_HUM_Handle+0x98>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <TEMP_AND_HUM_Handle+0x78>
				MAIN_MENU_Update_Value();
 8001c54:	f7fe fe44 	bl	80008e0 <MAIN_MENU_Update_Value>
			}
		}

		timer = HAL_GetTick();
 8001c58:	f000 fcba 	bl	80025d0 <HAL_GetTick>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4a02      	ldr	r2, [pc, #8]	; (8001c68 <TEMP_AND_HUM_Handle+0x88>)
 8001c60:	6013      	str	r3, [r2, #0]
	}
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000048c 	.word	0x2000048c
 8001c6c:	20000478 	.word	0x20000478
 8001c70:	20000490 	.word	0x20000490
 8001c74:	20000491 	.word	0x20000491
 8001c78:	2000011c 	.word	0x2000011c

08001c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c82:	f000 fc4d 	bl	8002520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c86:	f000 f84d 	bl	8001d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c8a:	f000 f9b5 	bl	8001ff8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c8e:	f000 f88b 	bl	8001da8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c92:	f000 f987 	bl	8001fa4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001c96:	f000 f8b5 	bl	8001e04 <MX_I2C2_Init>
  MX_TIM4_Init();
 8001c9a:	f000 f935 	bl	8001f08 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001c9e:	f000 f8df 	bl	8001e60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 8001ca2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ca6:	f000 fc9d 	bl	80025e4 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001caa:	2201      	movs	r2, #1
 8001cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb0:	4815      	ldr	r0, [pc, #84]	; (8001d08 <main+0x8c>)
 8001cb2:	f001 fa14 	bl	80030de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2104      	movs	r1, #4
 8001cba:	4814      	ldr	r0, [pc, #80]	; (8001d0c <main+0x90>)
 8001cbc:	f001 fa0f 	bl	80030de <HAL_GPIO_WritePin>

  REALTIME_Init();
 8001cc0:	f7ff fec8 	bl	8001a54 <REALTIME_Init>
  DHT_Init(&hdht, &htim4, DHT11, GPIOA, GPIO_PIN_0);
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <main+0x90>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	4910      	ldr	r1, [pc, #64]	; (8001d10 <main+0x94>)
 8001cce:	4811      	ldr	r0, [pc, #68]	; (8001d14 <main+0x98>)
 8001cd0:	f004 fa6d 	bl	80061ae <DHT_Init>
  LCD_Init(&hlcd, &hi2c1, 20, 4, 0x4E);
 8001cd4:	234e      	movs	r3, #78	; 0x4e
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2304      	movs	r3, #4
 8001cda:	2214      	movs	r2, #20
 8001cdc:	490e      	ldr	r1, [pc, #56]	; (8001d18 <main+0x9c>)
 8001cde:	480f      	ldr	r0, [pc, #60]	; (8001d1c <main+0xa0>)
 8001ce0:	f004 fcc4 	bl	800666c <LCD_Init>
  MENU_Init(&hlcd);
 8001ce4:	480d      	ldr	r0, [pc, #52]	; (8001d1c <main+0xa0>)
 8001ce6:	f7fe fe09 	bl	80008fc <MENU_Init>
  ROTARY_ENCODER_Init();
 8001cea:	f7ff fd27 	bl	800173c <ROTARY_ENCODER_Init>

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001cee:	213c      	movs	r1, #60	; 0x3c
 8001cf0:	480b      	ldr	r0, [pc, #44]	; (8001d20 <main+0xa4>)
 8001cf2:	f003 f909 	bl	8004f08 <HAL_TIM_Encoder_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  REALTIME_Handle();
 8001cf6:	f7ff fef3 	bl	8001ae0 <REALTIME_Handle>

	  TEMP_AND_HUM_Handle();
 8001cfa:	f7ff ff71 	bl	8001be0 <TEMP_AND_HUM_Handle>

	  MENU_Handle();
 8001cfe:	f7fe fe1b 	bl	8000938 <MENU_Handle>

	  ROTARY_ENCODER_Handle();
 8001d02:	f7ff fd43 	bl	800178c <ROTARY_ENCODER_Handle>
	  REALTIME_Handle();
 8001d06:	e7f6      	b.n	8001cf6 <main+0x7a>
 8001d08:	40011000 	.word	0x40011000
 8001d0c:	40010800 	.word	0x40010800
 8001d10:	200003e0 	.word	0x200003e0
 8001d14:	20000478 	.word	0x20000478
 8001d18:	200002f0 	.word	0x200002f0
 8001d1c:	2000046c 	.word	0x2000046c
 8001d20:	20000398 	.word	0x20000398

08001d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b090      	sub	sp, #64	; 0x40
 8001d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2a:	f107 0318 	add.w	r3, r7, #24
 8001d2e:	2228      	movs	r2, #40	; 0x28
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 fff0 	bl	8006d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d4e:	2310      	movs	r3, #16
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d52:	2302      	movs	r3, #2
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001d56:	2300      	movs	r3, #0
 8001d58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001d5a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d60:	f107 0318 	add.w	r3, r7, #24
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 fb53 	bl	8004410 <HAL_RCC_OscConfig>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001d70:	f000 f9ae 	bl	80020d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d74:	230f      	movs	r3, #15
 8001d76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 fdc0 	bl	8004914 <HAL_RCC_ClockConfig>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001d9a:	f000 f999 	bl	80020d0 <Error_Handler>
  }
}
 8001d9e:	bf00      	nop
 8001da0:	3740      	adds	r7, #64	; 0x40
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <MX_I2C1_Init+0x50>)
 8001dae:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <MX_I2C1_Init+0x54>)
 8001db0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <MX_I2C1_Init+0x50>)
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <MX_I2C1_Init+0x58>)
 8001db6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <MX_I2C1_Init+0x50>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <MX_I2C1_Init+0x50>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_I2C1_Init+0x50>)
 8001dc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <MX_I2C1_Init+0x50>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_I2C1_Init+0x50>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dd8:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <MX_I2C1_Init+0x50>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_I2C1_Init+0x50>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <MX_I2C1_Init+0x50>)
 8001de6:	f001 f993 	bl	8003110 <HAL_I2C_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001df0:	f000 f96e 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200002f0 	.word	0x200002f0
 8001dfc:	40005400 	.word	0x40005400
 8001e00:	000186a0 	.word	0x000186a0

08001e04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <MX_I2C2_Init+0x50>)
 8001e0a:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <MX_I2C2_Init+0x54>)
 8001e0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <MX_I2C2_Init+0x50>)
 8001e10:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <MX_I2C2_Init+0x58>)
 8001e12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <MX_I2C2_Init+0x50>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_I2C2_Init+0x50>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <MX_I2C2_Init+0x50>)
 8001e22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e26:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <MX_I2C2_Init+0x50>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <MX_I2C2_Init+0x50>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <MX_I2C2_Init+0x50>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <MX_I2C2_Init+0x50>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e40:	4804      	ldr	r0, [pc, #16]	; (8001e54 <MX_I2C2_Init+0x50>)
 8001e42:	f001 f965 	bl	8003110 <HAL_I2C_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e4c:	f000 f940 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000344 	.word	0x20000344
 8001e58:	40005800 	.word	0x40005800
 8001e5c:	000186a0 	.word	0x000186a0

08001e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08c      	sub	sp, #48	; 0x30
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	2224      	movs	r2, #36	; 0x24
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f004 ff52 	bl	8006d18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <MX_TIM2_Init+0xa4>)
 8001e7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e84:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <MX_TIM2_Init+0xa4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <MX_TIM2_Init+0xa4>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001e90:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <MX_TIM2_Init+0xa4>)
 8001e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <MX_TIM2_Init+0xa4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <MX_TIM2_Init+0xa4>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eac:	2301      	movs	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001eb4:	230a      	movs	r3, #10
 8001eb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001ec4:	230a      	movs	r3, #10
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	4619      	mov	r1, r3
 8001ece:	480d      	ldr	r0, [pc, #52]	; (8001f04 <MX_TIM2_Init+0xa4>)
 8001ed0:	f002 ff78 	bl	8004dc4 <HAL_TIM_Encoder_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001eda:	f000 f8f9 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4806      	ldr	r0, [pc, #24]	; (8001f04 <MX_TIM2_Init+0xa4>)
 8001eec:	f003 fbc6 	bl	800567c <HAL_TIMEx_MasterConfigSynchronization>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ef6:	f000 f8eb 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	3730      	adds	r7, #48	; 0x30
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000398 	.word	0x20000398

08001f08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0e:	f107 0308 	add.w	r3, r7, #8
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <MX_TIM4_Init+0x94>)
 8001f26:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <MX_TIM4_Init+0x98>)
 8001f28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <MX_TIM4_Init+0x94>)
 8001f2c:	223f      	movs	r2, #63	; 0x3f
 8001f2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <MX_TIM4_Init+0x94>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_TIM4_Init+0x94>)
 8001f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <MX_TIM4_Init+0x94>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <MX_TIM4_Init+0x94>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f4a:	4814      	ldr	r0, [pc, #80]	; (8001f9c <MX_TIM4_Init+0x94>)
 8001f4c:	f002 fe7a 	bl	8004c44 <HAL_TIM_Base_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001f56:	f000 f8bb 	bl	80020d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f60:	f107 0308 	add.w	r3, r7, #8
 8001f64:	4619      	mov	r1, r3
 8001f66:	480d      	ldr	r0, [pc, #52]	; (8001f9c <MX_TIM4_Init+0x94>)
 8001f68:	f003 f984 	bl	8005274 <HAL_TIM_ConfigClockSource>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001f72:	f000 f8ad 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f7e:	463b      	mov	r3, r7
 8001f80:	4619      	mov	r1, r3
 8001f82:	4806      	ldr	r0, [pc, #24]	; (8001f9c <MX_TIM4_Init+0x94>)
 8001f84:	f003 fb7a 	bl	800567c <HAL_TIMEx_MasterConfigSynchronization>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001f8e:	f000 f89f 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200003e0 	.word	0x200003e0
 8001fa0:	40000800 	.word	0x40000800

08001fa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <MX_USART1_UART_Init+0x50>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fdc:	f003 fbbe 	bl	800575c <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fe6:	f000 f873 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000428 	.word	0x20000428
 8001ff4:	40013800 	.word	0x40013800

08001ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffe:	f107 0310 	add.w	r3, r7, #16
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <MX_GPIO_Init+0xcc>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	4a2c      	ldr	r2, [pc, #176]	; (80020c4 <MX_GPIO_Init+0xcc>)
 8002012:	f043 0310 	orr.w	r3, r3, #16
 8002016:	6193      	str	r3, [r2, #24]
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <MX_GPIO_Init+0xcc>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <MX_GPIO_Init+0xcc>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a26      	ldr	r2, [pc, #152]	; (80020c4 <MX_GPIO_Init+0xcc>)
 800202a:	f043 0304 	orr.w	r3, r3, #4
 800202e:	6193      	str	r3, [r2, #24]
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <MX_GPIO_Init+0xcc>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <MX_GPIO_Init+0xcc>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a20      	ldr	r2, [pc, #128]	; (80020c4 <MX_GPIO_Init+0xcc>)
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <MX_GPIO_Init+0xcc>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002054:	2200      	movs	r2, #0
 8002056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800205a:	481b      	ldr	r0, [pc, #108]	; (80020c8 <MX_GPIO_Init+0xd0>)
 800205c:	f001 f83f 	bl	80030de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	2105      	movs	r1, #5
 8002064:	4819      	ldr	r0, [pc, #100]	; (80020cc <MX_GPIO_Init+0xd4>)
 8002066:	f001 f83a 	bl	80030de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800206a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800206e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002070:	2301      	movs	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2302      	movs	r3, #2
 800207a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	4619      	mov	r1, r3
 8002082:	4811      	ldr	r0, [pc, #68]	; (80020c8 <MX_GPIO_Init+0xd0>)
 8002084:	f000 fe90 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8002088:	2305      	movs	r3, #5
 800208a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208c:	2301      	movs	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2302      	movs	r3, #2
 8002096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4619      	mov	r1, r3
 800209e:	480b      	ldr	r0, [pc, #44]	; (80020cc <MX_GPIO_Init+0xd4>)
 80020a0:	f000 fe82 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020a4:	2302      	movs	r3, #2
 80020a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	4619      	mov	r1, r3
 80020b6:	4805      	ldr	r0, [pc, #20]	; (80020cc <MX_GPIO_Init+0xd4>)
 80020b8:	f000 fe76 	bl	8002da8 <HAL_GPIO_Init>

}
 80020bc:	bf00      	nop
 80020be:	3720      	adds	r7, #32
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40011000 	.word	0x40011000
 80020cc:	40010800 	.word	0x40010800

080020d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d4:	b672      	cpsid	i
}
 80020d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <Error_Handler+0x8>
	...

080020dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_MspInit+0x5c>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	4a14      	ldr	r2, [pc, #80]	; (8002138 <HAL_MspInit+0x5c>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6193      	str	r3, [r2, #24]
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_MspInit+0x5c>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <HAL_MspInit+0x5c>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a0e      	ldr	r2, [pc, #56]	; (8002138 <HAL_MspInit+0x5c>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_MspInit+0x5c>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_MspInit+0x60>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <HAL_MspInit+0x60>)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	40021000 	.word	0x40021000
 800213c:	40010000 	.word	0x40010000

08002140 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0318 	add.w	r3, r7, #24
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a2b      	ldr	r2, [pc, #172]	; (8002208 <HAL_I2C_MspInit+0xc8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d124      	bne.n	80021aa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002160:	4b2a      	ldr	r3, [pc, #168]	; (800220c <HAL_I2C_MspInit+0xcc>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a29      	ldr	r2, [pc, #164]	; (800220c <HAL_I2C_MspInit+0xcc>)
 8002166:	f043 0308 	orr.w	r3, r3, #8
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b27      	ldr	r3, [pc, #156]	; (800220c <HAL_I2C_MspInit+0xcc>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002178:	23c0      	movs	r3, #192	; 0xc0
 800217a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800217c:	2312      	movs	r3, #18
 800217e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f107 0318 	add.w	r3, r7, #24
 8002188:	4619      	mov	r1, r3
 800218a:	4821      	ldr	r0, [pc, #132]	; (8002210 <HAL_I2C_MspInit+0xd0>)
 800218c:	f000 fe0c 	bl	8002da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <HAL_I2C_MspInit+0xcc>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	4a1d      	ldr	r2, [pc, #116]	; (800220c <HAL_I2C_MspInit+0xcc>)
 8002196:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800219a:	61d3      	str	r3, [r2, #28]
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_I2C_MspInit+0xcc>)
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021a8:	e029      	b.n	80021fe <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a19      	ldr	r2, [pc, #100]	; (8002214 <HAL_I2C_MspInit+0xd4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d124      	bne.n	80021fe <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b4:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_I2C_MspInit+0xcc>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a14      	ldr	r2, [pc, #80]	; (800220c <HAL_I2C_MspInit+0xcc>)
 80021ba:	f043 0308 	orr.w	r3, r3, #8
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_I2C_MspInit+0xcc>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d2:	2312      	movs	r3, #18
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021da:	f107 0318 	add.w	r3, r7, #24
 80021de:	4619      	mov	r1, r3
 80021e0:	480b      	ldr	r0, [pc, #44]	; (8002210 <HAL_I2C_MspInit+0xd0>)
 80021e2:	f000 fde1 	bl	8002da8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_I2C_MspInit+0xcc>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4a08      	ldr	r2, [pc, #32]	; (800220c <HAL_I2C_MspInit+0xcc>)
 80021ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021f0:	61d3      	str	r3, [r2, #28]
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_I2C_MspInit+0xcc>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
}
 80021fe:	bf00      	nop
 8002200:	3728      	adds	r7, #40	; 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40005400 	.word	0x40005400
 800220c:	40021000 	.word	0x40021000
 8002210:	40010c00 	.word	0x40010c00
 8002214:	40005800 	.word	0x40005800

08002218 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	; 0x28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002236:	d156      	bne.n	80022e6 <HAL_TIM_Encoder_MspInit+0xce>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002238:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_TIM_Encoder_MspInit+0xd8>)
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <HAL_TIM_Encoder_MspInit+0xd8>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	61d3      	str	r3, [r2, #28]
 8002244:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002256:	f043 0304 	orr.w	r3, r3, #4
 800225a:	6193      	str	r3, [r2, #24]
 800225c:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_TIM_Encoder_MspInit+0xd8>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002268:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <HAL_TIM_Encoder_MspInit+0xd8>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a20      	ldr	r2, [pc, #128]	; (80022f0 <HAL_TIM_Encoder_MspInit+0xd8>)
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4619      	mov	r1, r3
 8002294:	4817      	ldr	r0, [pc, #92]	; (80022f4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002296:	f000 fd87 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800229a:	2308      	movs	r3, #8
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	4812      	ldr	r0, [pc, #72]	; (80022f8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80022ae:	f000 fd7b 	bl	8002da8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_TIM_Encoder_MspInit+0xe4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
 80022d0:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <HAL_TIM_Encoder_MspInit+0xe4>)
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	201c      	movs	r0, #28
 80022dc:	f000 fa7d 	bl	80027da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022e0:	201c      	movs	r0, #28
 80022e2:	f000 fa96 	bl	8002812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022e6:	bf00      	nop
 80022e8:	3728      	adds	r7, #40	; 0x28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40010800 	.word	0x40010800
 80022f8:	40010c00 	.word	0x40010c00
 80022fc:	40010000 	.word	0x40010000

08002300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a09      	ldr	r2, [pc, #36]	; (8002334 <HAL_TIM_Base_MspInit+0x34>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10b      	bne.n	800232a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_TIM_Base_MspInit+0x38>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a08      	ldr	r2, [pc, #32]	; (8002338 <HAL_TIM_Base_MspInit+0x38>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	61d3      	str	r3, [r2, #28]
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_TIM_Base_MspInit+0x38>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40000800 	.word	0x40000800
 8002338:	40021000 	.word	0x40021000

0800233c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <HAL_UART_MspInit+0x9c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d139      	bne.n	80023d0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800235c:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <HAL_UART_MspInit+0xa0>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <HAL_UART_MspInit+0xa0>)
 8002362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_UART_MspInit+0xa0>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_UART_MspInit+0xa0>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a18      	ldr	r2, [pc, #96]	; (80023dc <HAL_UART_MspInit+0xa0>)
 800237a:	f043 0304 	orr.w	r3, r3, #4
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <HAL_UART_MspInit+0xa0>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800238c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002396:	2303      	movs	r3, #3
 8002398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f107 0310 	add.w	r3, r7, #16
 800239e:	4619      	mov	r1, r3
 80023a0:	480f      	ldr	r0, [pc, #60]	; (80023e0 <HAL_UART_MspInit+0xa4>)
 80023a2:	f000 fd01 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b4:	f107 0310 	add.w	r3, r7, #16
 80023b8:	4619      	mov	r1, r3
 80023ba:	4809      	ldr	r0, [pc, #36]	; (80023e0 <HAL_UART_MspInit+0xa4>)
 80023bc:	f000 fcf4 	bl	8002da8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2100      	movs	r1, #0
 80023c4:	2025      	movs	r0, #37	; 0x25
 80023c6:	f000 fa08 	bl	80027da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ca:	2025      	movs	r0, #37	; 0x25
 80023cc:	f000 fa21 	bl	8002812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023d0:	bf00      	nop
 80023d2:	3720      	adds	r7, #32
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010800 	.word	0x40010800

080023e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <NMI_Handler+0x4>

080023ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <HardFault_Handler+0x4>

080023f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <MemManage_Handler+0x4>

080023f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fa:	e7fe      	b.n	80023fa <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <UsageFault_Handler+0x4>

08002402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242a:	f000 f8bf 	bl	80025ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <TIM2_IRQHandler+0x10>)
 800243a:	f002 fe13 	bl	8005064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000398 	.word	0x20000398

08002448 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <USART1_IRQHandler+0x10>)
 800244e:	f003 f9d3 	bl	80057f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000428 	.word	0x20000428

0800245c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002464:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <_sbrk+0x5c>)
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <_sbrk+0x60>)
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002470:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <_sbrk+0x64>)
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <_sbrk+0x68>)
 800247c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <_sbrk+0x64>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	429a      	cmp	r2, r3
 800248a:	d207      	bcs.n	800249c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800248c:	f004 fc0a 	bl	8006ca4 <__errno>
 8002490:	4603      	mov	r3, r0
 8002492:	220c      	movs	r2, #12
 8002494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	e009      	b.n	80024b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <_sbrk+0x64>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <_sbrk+0x64>)
 80024ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ae:	68fb      	ldr	r3, [r7, #12]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20005000 	.word	0x20005000
 80024bc:	00000400 	.word	0x00000400
 80024c0:	20000494 	.word	0x20000494
 80024c4:	200004f0 	.word	0x200004f0

080024c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d4:	480c      	ldr	r0, [pc, #48]	; (8002508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024d6:	490d      	ldr	r1, [pc, #52]	; (800250c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024dc:	e002      	b.n	80024e4 <LoopCopyDataInit>

080024de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e2:	3304      	adds	r3, #4

080024e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e8:	d3f9      	bcc.n	80024de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024ec:	4c0a      	ldr	r4, [pc, #40]	; (8002518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f0:	e001      	b.n	80024f6 <LoopFillZerobss>

080024f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f4:	3204      	adds	r2, #4

080024f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f8:	d3fb      	bcc.n	80024f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024fa:	f7ff ffe5 	bl	80024c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024fe:	f004 fbd7 	bl	8006cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002502:	f7ff fbbb 	bl	8001c7c <main>
  bx lr
 8002506:	4770      	bx	lr
  ldr r0, =_sdata
 8002508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800250c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002510:	08007844 	.word	0x08007844
  ldr r2, =_sbss
 8002514:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002518:	200004ec 	.word	0x200004ec

0800251c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800251c:	e7fe      	b.n	800251c <ADC1_2_IRQHandler>
	...

08002520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_Init+0x28>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <HAL_Init+0x28>)
 800252a:	f043 0310 	orr.w	r3, r3, #16
 800252e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002530:	2003      	movs	r0, #3
 8002532:	f000 f947 	bl	80027c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002536:	200f      	movs	r0, #15
 8002538:	f000 f808 	bl	800254c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800253c:	f7ff fdce 	bl	80020dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000

0800254c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_InitTick+0x54>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_InitTick+0x58>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4619      	mov	r1, r3
 800255e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002562:	fbb3 f3f1 	udiv	r3, r3, r1
 8002566:	fbb2 f3f3 	udiv	r3, r2, r3
 800256a:	4618      	mov	r0, r3
 800256c:	f000 f95f 	bl	800282e <HAL_SYSTICK_Config>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e00e      	b.n	8002598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b0f      	cmp	r3, #15
 800257e:	d80a      	bhi.n	8002596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002580:	2200      	movs	r2, #0
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	f04f 30ff 	mov.w	r0, #4294967295
 8002588:	f000 f927 	bl	80027da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800258c:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <HAL_InitTick+0x5c>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e000      	b.n	8002598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	2000008c 	.word	0x2000008c
 80025a4:	20000094 	.word	0x20000094
 80025a8:	20000090 	.word	0x20000090

080025ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_IncTick+0x1c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_IncTick+0x20>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	4a03      	ldr	r2, [pc, #12]	; (80025cc <HAL_IncTick+0x20>)
 80025be:	6013      	str	r3, [r2, #0]
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	20000094 	.word	0x20000094
 80025cc:	20000498 	.word	0x20000498

080025d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <HAL_GetTick+0x10>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	20000498 	.word	0x20000498

080025e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ec:	f7ff fff0 	bl	80025d0 <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d005      	beq.n	800260a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_Delay+0x44>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800260a:	bf00      	nop
 800260c:	f7ff ffe0 	bl	80025d0 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	429a      	cmp	r2, r3
 800261a:	d8f7      	bhi.n	800260c <HAL_Delay+0x28>
  {
  }
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000094 	.word	0x20000094

0800262c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <__NVIC_SetPriorityGrouping+0x44>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002648:	4013      	ands	r3, r2
 800264a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265e:	4a04      	ldr	r2, [pc, #16]	; (8002670 <__NVIC_SetPriorityGrouping+0x44>)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	60d3      	str	r3, [r2, #12]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <__NVIC_GetPriorityGrouping+0x18>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	f003 0307 	and.w	r3, r3, #7
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	db0b      	blt.n	80026ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	f003 021f 	and.w	r2, r3, #31
 80026a8:	4906      	ldr	r1, [pc, #24]	; (80026c4 <__NVIC_EnableIRQ+0x34>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2001      	movs	r0, #1
 80026b2:	fa00 f202 	lsl.w	r2, r0, r2
 80026b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100

080026c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	db0a      	blt.n	80026f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	490c      	ldr	r1, [pc, #48]	; (8002714 <__NVIC_SetPriority+0x4c>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	0112      	lsls	r2, r2, #4
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	440b      	add	r3, r1
 80026ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f0:	e00a      	b.n	8002708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4908      	ldr	r1, [pc, #32]	; (8002718 <__NVIC_SetPriority+0x50>)
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	3b04      	subs	r3, #4
 8002700:	0112      	lsls	r2, r2, #4
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	440b      	add	r3, r1
 8002706:	761a      	strb	r2, [r3, #24]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	; 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f1c3 0307 	rsb	r3, r3, #7
 8002736:	2b04      	cmp	r3, #4
 8002738:	bf28      	it	cs
 800273a:	2304      	movcs	r3, #4
 800273c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3304      	adds	r3, #4
 8002742:	2b06      	cmp	r3, #6
 8002744:	d902      	bls.n	800274c <NVIC_EncodePriority+0x30>
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3b03      	subs	r3, #3
 800274a:	e000      	b.n	800274e <NVIC_EncodePriority+0x32>
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	f04f 32ff 	mov.w	r2, #4294967295
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	401a      	ands	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002764:	f04f 31ff 	mov.w	r1, #4294967295
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	43d9      	mvns	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	4313      	orrs	r3, r2
         );
}
 8002776:	4618      	mov	r0, r3
 8002778:	3724      	adds	r7, #36	; 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002790:	d301      	bcc.n	8002796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002792:	2301      	movs	r3, #1
 8002794:	e00f      	b.n	80027b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002796:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <SysTick_Config+0x40>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3b01      	subs	r3, #1
 800279c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800279e:	210f      	movs	r1, #15
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	f7ff ff90 	bl	80026c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <SysTick_Config+0x40>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ae:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <SysTick_Config+0x40>)
 80027b0:	2207      	movs	r2, #7
 80027b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	e000e010 	.word	0xe000e010

080027c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ff2d 	bl	800262c <__NVIC_SetPriorityGrouping>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ec:	f7ff ff42 	bl	8002674 <__NVIC_GetPriorityGrouping>
 80027f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	6978      	ldr	r0, [r7, #20]
 80027f8:	f7ff ff90 	bl	800271c <NVIC_EncodePriority>
 80027fc:	4602      	mov	r2, r0
 80027fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff5f 	bl	80026c8 <__NVIC_SetPriority>
}
 800280a:	bf00      	nop
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800281c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff35 	bl	8002690 <__NVIC_EnableIRQ>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ffa2 	bl	8002780 <SysTick_Config>
 800283c:	4603      	mov	r3, r0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002858:	2b02      	cmp	r3, #2
 800285a:	d008      	beq.n	800286e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2204      	movs	r2, #4
 8002860:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e020      	b.n	80028b0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 020e 	bic.w	r2, r2, #14
 800287c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	2101      	movs	r1, #1
 8002898:	fa01 f202 	lsl.w	r2, r1, r2
 800289c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
	...

080028bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d005      	beq.n	80028de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2204      	movs	r2, #4
 80028d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	e051      	b.n	8002982 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 020e 	bic.w	r2, r2, #14
 80028ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a22      	ldr	r2, [pc, #136]	; (800298c <HAL_DMA_Abort_IT+0xd0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d029      	beq.n	800295c <HAL_DMA_Abort_IT+0xa0>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a20      	ldr	r2, [pc, #128]	; (8002990 <HAL_DMA_Abort_IT+0xd4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d022      	beq.n	8002958 <HAL_DMA_Abort_IT+0x9c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_DMA_Abort_IT+0xd8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d01a      	beq.n	8002952 <HAL_DMA_Abort_IT+0x96>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1d      	ldr	r2, [pc, #116]	; (8002998 <HAL_DMA_Abort_IT+0xdc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d012      	beq.n	800294c <HAL_DMA_Abort_IT+0x90>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1c      	ldr	r2, [pc, #112]	; (800299c <HAL_DMA_Abort_IT+0xe0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00a      	beq.n	8002946 <HAL_DMA_Abort_IT+0x8a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a1a      	ldr	r2, [pc, #104]	; (80029a0 <HAL_DMA_Abort_IT+0xe4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d102      	bne.n	8002940 <HAL_DMA_Abort_IT+0x84>
 800293a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800293e:	e00e      	b.n	800295e <HAL_DMA_Abort_IT+0xa2>
 8002940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002944:	e00b      	b.n	800295e <HAL_DMA_Abort_IT+0xa2>
 8002946:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800294a:	e008      	b.n	800295e <HAL_DMA_Abort_IT+0xa2>
 800294c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002950:	e005      	b.n	800295e <HAL_DMA_Abort_IT+0xa2>
 8002952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002956:	e002      	b.n	800295e <HAL_DMA_Abort_IT+0xa2>
 8002958:	2310      	movs	r3, #16
 800295a:	e000      	b.n	800295e <HAL_DMA_Abort_IT+0xa2>
 800295c:	2301      	movs	r3, #1
 800295e:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <HAL_DMA_Abort_IT+0xe8>)
 8002960:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
    } 
  }
  return status;
 8002982:	7bfb      	ldrb	r3, [r7, #15]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40020008 	.word	0x40020008
 8002990:	4002001c 	.word	0x4002001c
 8002994:	40020030 	.word	0x40020030
 8002998:	40020044 	.word	0x40020044
 800299c:	40020058 	.word	0x40020058
 80029a0:	4002006c 	.word	0x4002006c
 80029a4:	40020000 	.word	0x40020000

080029a8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80029a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80029c2:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <HAL_FLASH_Program+0xd8>)
 80029c4:	7e1b      	ldrb	r3, [r3, #24]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_FLASH_Program+0x26>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e054      	b.n	8002a78 <HAL_FLASH_Program+0xd0>
 80029ce:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <HAL_FLASH_Program+0xd8>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80029d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029d8:	f000 f8a8 	bl	8002b2c <FLASH_WaitForLastOperation>
 80029dc:	4603      	mov	r3, r0
 80029de:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d144      	bne.n	8002a70 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d102      	bne.n	80029f2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80029ec:	2301      	movs	r3, #1
 80029ee:	757b      	strb	r3, [r7, #21]
 80029f0:	e007      	b.n	8002a02 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d102      	bne.n	80029fe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80029f8:	2302      	movs	r3, #2
 80029fa:	757b      	strb	r3, [r7, #21]
 80029fc:	e001      	b.n	8002a02 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80029fe:	2304      	movs	r3, #4
 8002a00:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002a02:	2300      	movs	r3, #0
 8002a04:	75bb      	strb	r3, [r7, #22]
 8002a06:	e02d      	b.n	8002a64 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002a08:	7dbb      	ldrb	r3, [r7, #22]
 8002a0a:	005a      	lsls	r2, r3, #1
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	eb02 0c03 	add.w	ip, r2, r3
 8002a12:	7dbb      	ldrb	r3, [r7, #22]
 8002a14:	0119      	lsls	r1, r3, #4
 8002a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a1a:	f1c1 0620 	rsb	r6, r1, #32
 8002a1e:	f1a1 0020 	sub.w	r0, r1, #32
 8002a22:	fa22 f401 	lsr.w	r4, r2, r1
 8002a26:	fa03 f606 	lsl.w	r6, r3, r6
 8002a2a:	4334      	orrs	r4, r6
 8002a2c:	fa23 f000 	lsr.w	r0, r3, r0
 8002a30:	4304      	orrs	r4, r0
 8002a32:	fa23 f501 	lsr.w	r5, r3, r1
 8002a36:	b2a3      	uxth	r3, r4
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4660      	mov	r0, ip
 8002a3c:	f000 f85a 	bl	8002af4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002a40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a44:	f000 f872 	bl	8002b2c <FLASH_WaitForLastOperation>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_FLASH_Program+0xdc>)
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <HAL_FLASH_Program+0xdc>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002a5e:	7dbb      	ldrb	r3, [r7, #22]
 8002a60:	3301      	adds	r3, #1
 8002a62:	75bb      	strb	r3, [r7, #22]
 8002a64:	7dba      	ldrb	r2, [r7, #22]
 8002a66:	7d7b      	ldrb	r3, [r7, #21]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d3cd      	bcc.n	8002a08 <HAL_FLASH_Program+0x60>
 8002a6c:	e000      	b.n	8002a70 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002a6e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_FLASH_Program+0xd8>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	761a      	strb	r2, [r3, #24]

  return status;
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a80:	200004a0 	.word	0x200004a0
 8002a84:	40022000 	.word	0x40022000

08002a88 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <HAL_FLASH_Unlock+0x40>)
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00d      	beq.n	8002aba <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_FLASH_Unlock+0x40>)
 8002aa0:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <HAL_FLASH_Unlock+0x44>)
 8002aa2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <HAL_FLASH_Unlock+0x40>)
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <HAL_FLASH_Unlock+0x48>)
 8002aa8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002aaa:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <HAL_FLASH_Unlock+0x40>)
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002aba:	79fb      	ldrb	r3, [r7, #7]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	45670123 	.word	0x45670123
 8002ad0:	cdef89ab 	.word	0xcdef89ab

08002ad4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_FLASH_Lock+0x1c>)
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <HAL_FLASH_Lock+0x1c>)
 8002ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40022000 	.word	0x40022000

08002af4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <FLASH_Program_HalfWord+0x30>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <FLASH_Program_HalfWord+0x34>)
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <FLASH_Program_HalfWord+0x34>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	887a      	ldrh	r2, [r7, #2]
 8002b16:	801a      	strh	r2, [r3, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	200004a0 	.word	0x200004a0
 8002b28:	40022000 	.word	0x40022000

08002b2c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff fd4c 	bl	80025d0 <HAL_GetTick>
 8002b38:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002b3a:	e010      	b.n	8002b5e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b42:	d00c      	beq.n	8002b5e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <FLASH_WaitForLastOperation+0x2e>
 8002b4a:	f7ff fd41 	bl	80025d0 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d201      	bcs.n	8002b5e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e025      	b.n	8002baa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <FLASH_WaitForLastOperation+0x88>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1e8      	bne.n	8002b3c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <FLASH_WaitForLastOperation+0x88>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <FLASH_WaitForLastOperation+0x88>)
 8002b78:	2220      	movs	r2, #32
 8002b7a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002b7c:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <FLASH_WaitForLastOperation+0x88>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10b      	bne.n	8002ba0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <FLASH_WaitForLastOperation+0x88>)
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d105      	bne.n	8002ba0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <FLASH_WaitForLastOperation+0x88>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002ba0:	f000 f80a 	bl	8002bb8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40022000 	.word	0x40022000

08002bb8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <FLASH_SetErrorCode+0x98>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002bce:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <FLASH_SetErrorCode+0x9c>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f043 0302 	orr.w	r3, r3, #2
 8002bd6:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <FLASH_SetErrorCode+0x9c>)
 8002bd8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f043 0310 	orr.w	r3, r3, #16
 8002be0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002be2:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <FLASH_SetErrorCode+0x98>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <FLASH_SetErrorCode+0x9c>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	4a17      	ldr	r2, [pc, #92]	; (8002c54 <FLASH_SetErrorCode+0x9c>)
 8002bf8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <FLASH_SetErrorCode+0x98>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <FLASH_SetErrorCode+0x9c>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f043 0304 	orr.w	r3, r3, #4
 8002c16:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <FLASH_SetErrorCode+0x9c>)
 8002c18:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <FLASH_SetErrorCode+0x98>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <FLASH_SetErrorCode+0x98>)
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f240 1201 	movw	r2, #257	; 0x101
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d106      	bne.n	8002c3e <FLASH_SetErrorCode+0x86>
 8002c30:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <FLASH_SetErrorCode+0x98>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	4a06      	ldr	r2, [pc, #24]	; (8002c50 <FLASH_SetErrorCode+0x98>)
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	61d3      	str	r3, [r2, #28]
}  
 8002c3c:	e002      	b.n	8002c44 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002c3e:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <FLASH_SetErrorCode+0x98>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	60d3      	str	r3, [r2, #12]
}  
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40022000 	.word	0x40022000
 8002c54:	200004a0 	.word	0x200004a0

08002c58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c6a:	4b2f      	ldr	r3, [pc, #188]	; (8002d28 <HAL_FLASHEx_Erase+0xd0>)
 8002c6c:	7e1b      	ldrb	r3, [r3, #24]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_FLASHEx_Erase+0x1e>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e053      	b.n	8002d1e <HAL_FLASHEx_Erase+0xc6>
 8002c76:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <HAL_FLASHEx_Erase+0xd0>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d116      	bne.n	8002cb2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002c84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c88:	f7ff ff50 	bl	8002b2c <FLASH_WaitForLastOperation>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d141      	bne.n	8002d16 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002c92:	2001      	movs	r0, #1
 8002c94:	f000 f84c 	bl	8002d30 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c9c:	f7ff ff46 	bl	8002b2c <FLASH_WaitForLastOperation>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_FLASHEx_Erase+0xd4>)
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	4a20      	ldr	r2, [pc, #128]	; (8002d2c <HAL_FLASHEx_Erase+0xd4>)
 8002caa:	f023 0304 	bic.w	r3, r3, #4
 8002cae:	6113      	str	r3, [r2, #16]
 8002cb0:	e031      	b.n	8002d16 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002cb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cb6:	f7ff ff39 	bl	8002b2c <FLASH_WaitForLastOperation>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d12a      	bne.n	8002d16 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	e019      	b.n	8002d04 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002cd0:	68b8      	ldr	r0, [r7, #8]
 8002cd2:	f000 f849 	bl	8002d68 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cd6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cda:	f7ff ff27 	bl	8002b2c <FLASH_WaitForLastOperation>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_FLASHEx_Erase+0xd4>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	4a11      	ldr	r2, [pc, #68]	; (8002d2c <HAL_FLASHEx_Erase+0xd4>)
 8002ce8:	f023 0302 	bic.w	r3, r3, #2
 8002cec:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	601a      	str	r2, [r3, #0]
            break;
 8002cfa:	e00c      	b.n	8002d16 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d02:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	029a      	lsls	r2, r3, #10
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d3dc      	bcc.n	8002cd0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d16:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <HAL_FLASHEx_Erase+0xd0>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	761a      	strb	r2, [r3, #24]

  return status;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200004a0 	.word	0x200004a0
 8002d2c:	40022000 	.word	0x40022000

08002d30 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <FLASH_MassErase+0x30>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <FLASH_MassErase+0x34>)
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <FLASH_MassErase+0x34>)
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <FLASH_MassErase+0x34>)
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <FLASH_MassErase+0x34>)
 8002d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d54:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	200004a0 	.word	0x200004a0
 8002d64:	40022000 	.word	0x40022000

08002d68 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <FLASH_PageErase+0x38>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <FLASH_PageErase+0x3c>)
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <FLASH_PageErase+0x3c>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002d82:	4a08      	ldr	r2, [pc, #32]	; (8002da4 <FLASH_PageErase+0x3c>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <FLASH_PageErase+0x3c>)
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	4a05      	ldr	r2, [pc, #20]	; (8002da4 <FLASH_PageErase+0x3c>)
 8002d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d92:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	200004a0 	.word	0x200004a0
 8002da4:	40022000 	.word	0x40022000

08002da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b08b      	sub	sp, #44	; 0x2c
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002db6:	2300      	movs	r3, #0
 8002db8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dba:	e169      	b.n	8003090 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f040 8158 	bne.w	800308a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4a9a      	ldr	r2, [pc, #616]	; (8003048 <HAL_GPIO_Init+0x2a0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d05e      	beq.n	8002ea2 <HAL_GPIO_Init+0xfa>
 8002de4:	4a98      	ldr	r2, [pc, #608]	; (8003048 <HAL_GPIO_Init+0x2a0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d875      	bhi.n	8002ed6 <HAL_GPIO_Init+0x12e>
 8002dea:	4a98      	ldr	r2, [pc, #608]	; (800304c <HAL_GPIO_Init+0x2a4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d058      	beq.n	8002ea2 <HAL_GPIO_Init+0xfa>
 8002df0:	4a96      	ldr	r2, [pc, #600]	; (800304c <HAL_GPIO_Init+0x2a4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d86f      	bhi.n	8002ed6 <HAL_GPIO_Init+0x12e>
 8002df6:	4a96      	ldr	r2, [pc, #600]	; (8003050 <HAL_GPIO_Init+0x2a8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d052      	beq.n	8002ea2 <HAL_GPIO_Init+0xfa>
 8002dfc:	4a94      	ldr	r2, [pc, #592]	; (8003050 <HAL_GPIO_Init+0x2a8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d869      	bhi.n	8002ed6 <HAL_GPIO_Init+0x12e>
 8002e02:	4a94      	ldr	r2, [pc, #592]	; (8003054 <HAL_GPIO_Init+0x2ac>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d04c      	beq.n	8002ea2 <HAL_GPIO_Init+0xfa>
 8002e08:	4a92      	ldr	r2, [pc, #584]	; (8003054 <HAL_GPIO_Init+0x2ac>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d863      	bhi.n	8002ed6 <HAL_GPIO_Init+0x12e>
 8002e0e:	4a92      	ldr	r2, [pc, #584]	; (8003058 <HAL_GPIO_Init+0x2b0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d046      	beq.n	8002ea2 <HAL_GPIO_Init+0xfa>
 8002e14:	4a90      	ldr	r2, [pc, #576]	; (8003058 <HAL_GPIO_Init+0x2b0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d85d      	bhi.n	8002ed6 <HAL_GPIO_Init+0x12e>
 8002e1a:	2b12      	cmp	r3, #18
 8002e1c:	d82a      	bhi.n	8002e74 <HAL_GPIO_Init+0xcc>
 8002e1e:	2b12      	cmp	r3, #18
 8002e20:	d859      	bhi.n	8002ed6 <HAL_GPIO_Init+0x12e>
 8002e22:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <HAL_GPIO_Init+0x80>)
 8002e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e28:	08002ea3 	.word	0x08002ea3
 8002e2c:	08002e7d 	.word	0x08002e7d
 8002e30:	08002e8f 	.word	0x08002e8f
 8002e34:	08002ed1 	.word	0x08002ed1
 8002e38:	08002ed7 	.word	0x08002ed7
 8002e3c:	08002ed7 	.word	0x08002ed7
 8002e40:	08002ed7 	.word	0x08002ed7
 8002e44:	08002ed7 	.word	0x08002ed7
 8002e48:	08002ed7 	.word	0x08002ed7
 8002e4c:	08002ed7 	.word	0x08002ed7
 8002e50:	08002ed7 	.word	0x08002ed7
 8002e54:	08002ed7 	.word	0x08002ed7
 8002e58:	08002ed7 	.word	0x08002ed7
 8002e5c:	08002ed7 	.word	0x08002ed7
 8002e60:	08002ed7 	.word	0x08002ed7
 8002e64:	08002ed7 	.word	0x08002ed7
 8002e68:	08002ed7 	.word	0x08002ed7
 8002e6c:	08002e85 	.word	0x08002e85
 8002e70:	08002e99 	.word	0x08002e99
 8002e74:	4a79      	ldr	r2, [pc, #484]	; (800305c <HAL_GPIO_Init+0x2b4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e7a:	e02c      	b.n	8002ed6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	623b      	str	r3, [r7, #32]
          break;
 8002e82:	e029      	b.n	8002ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	623b      	str	r3, [r7, #32]
          break;
 8002e8c:	e024      	b.n	8002ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	3308      	adds	r3, #8
 8002e94:	623b      	str	r3, [r7, #32]
          break;
 8002e96:	e01f      	b.n	8002ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	623b      	str	r3, [r7, #32]
          break;
 8002ea0:	e01a      	b.n	8002ed8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eaa:	2304      	movs	r3, #4
 8002eac:	623b      	str	r3, [r7, #32]
          break;
 8002eae:	e013      	b.n	8002ed8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eb8:	2308      	movs	r3, #8
 8002eba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	611a      	str	r2, [r3, #16]
          break;
 8002ec2:	e009      	b.n	8002ed8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ec4:	2308      	movs	r3, #8
 8002ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	615a      	str	r2, [r3, #20]
          break;
 8002ece:	e003      	b.n	8002ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	623b      	str	r3, [r7, #32]
          break;
 8002ed4:	e000      	b.n	8002ed8 <HAL_GPIO_Init+0x130>
          break;
 8002ed6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2bff      	cmp	r3, #255	; 0xff
 8002edc:	d801      	bhi.n	8002ee2 <HAL_GPIO_Init+0x13a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	e001      	b.n	8002ee6 <HAL_GPIO_Init+0x13e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2bff      	cmp	r3, #255	; 0xff
 8002eec:	d802      	bhi.n	8002ef4 <HAL_GPIO_Init+0x14c>
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	e002      	b.n	8002efa <HAL_GPIO_Init+0x152>
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	3b08      	subs	r3, #8
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	210f      	movs	r1, #15
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	401a      	ands	r2, r3
 8002f0c:	6a39      	ldr	r1, [r7, #32]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	431a      	orrs	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80b1 	beq.w	800308a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f28:	4b4d      	ldr	r3, [pc, #308]	; (8003060 <HAL_GPIO_Init+0x2b8>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	4a4c      	ldr	r2, [pc, #304]	; (8003060 <HAL_GPIO_Init+0x2b8>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	6193      	str	r3, [r2, #24]
 8002f34:	4b4a      	ldr	r3, [pc, #296]	; (8003060 <HAL_GPIO_Init+0x2b8>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f40:	4a48      	ldr	r2, [pc, #288]	; (8003064 <HAL_GPIO_Init+0x2bc>)
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	3302      	adds	r3, #2
 8002f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	220f      	movs	r2, #15
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4013      	ands	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a40      	ldr	r2, [pc, #256]	; (8003068 <HAL_GPIO_Init+0x2c0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <HAL_GPIO_Init+0x1ec>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a3f      	ldr	r2, [pc, #252]	; (800306c <HAL_GPIO_Init+0x2c4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00d      	beq.n	8002f90 <HAL_GPIO_Init+0x1e8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a3e      	ldr	r2, [pc, #248]	; (8003070 <HAL_GPIO_Init+0x2c8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d007      	beq.n	8002f8c <HAL_GPIO_Init+0x1e4>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a3d      	ldr	r2, [pc, #244]	; (8003074 <HAL_GPIO_Init+0x2cc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d101      	bne.n	8002f88 <HAL_GPIO_Init+0x1e0>
 8002f84:	2303      	movs	r3, #3
 8002f86:	e006      	b.n	8002f96 <HAL_GPIO_Init+0x1ee>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	e004      	b.n	8002f96 <HAL_GPIO_Init+0x1ee>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e002      	b.n	8002f96 <HAL_GPIO_Init+0x1ee>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <HAL_GPIO_Init+0x1ee>
 8002f94:	2300      	movs	r3, #0
 8002f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f98:	f002 0203 	and.w	r2, r2, #3
 8002f9c:	0092      	lsls	r2, r2, #2
 8002f9e:	4093      	lsls	r3, r2
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fa6:	492f      	ldr	r1, [pc, #188]	; (8003064 <HAL_GPIO_Init+0x2bc>)
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	089b      	lsrs	r3, r3, #2
 8002fac:	3302      	adds	r3, #2
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fc0:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <HAL_GPIO_Init+0x2d0>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	492c      	ldr	r1, [pc, #176]	; (8003078 <HAL_GPIO_Init+0x2d0>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	e006      	b.n	8002fdc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fce:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <HAL_GPIO_Init+0x2d0>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	4928      	ldr	r1, [pc, #160]	; (8003078 <HAL_GPIO_Init+0x2d0>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d006      	beq.n	8002ff6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fe8:	4b23      	ldr	r3, [pc, #140]	; (8003078 <HAL_GPIO_Init+0x2d0>)
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	4922      	ldr	r1, [pc, #136]	; (8003078 <HAL_GPIO_Init+0x2d0>)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
 8002ff4:	e006      	b.n	8003004 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ff6:	4b20      	ldr	r3, [pc, #128]	; (8003078 <HAL_GPIO_Init+0x2d0>)
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	491e      	ldr	r1, [pc, #120]	; (8003078 <HAL_GPIO_Init+0x2d0>)
 8003000:	4013      	ands	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d006      	beq.n	800301e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_GPIO_Init+0x2d0>)
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	4918      	ldr	r1, [pc, #96]	; (8003078 <HAL_GPIO_Init+0x2d0>)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	608b      	str	r3, [r1, #8]
 800301c:	e006      	b.n	800302c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800301e:	4b16      	ldr	r3, [pc, #88]	; (8003078 <HAL_GPIO_Init+0x2d0>)
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	43db      	mvns	r3, r3
 8003026:	4914      	ldr	r1, [pc, #80]	; (8003078 <HAL_GPIO_Init+0x2d0>)
 8003028:	4013      	ands	r3, r2
 800302a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d021      	beq.n	800307c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <HAL_GPIO_Init+0x2d0>)
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	490e      	ldr	r1, [pc, #56]	; (8003078 <HAL_GPIO_Init+0x2d0>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	60cb      	str	r3, [r1, #12]
 8003044:	e021      	b.n	800308a <HAL_GPIO_Init+0x2e2>
 8003046:	bf00      	nop
 8003048:	10320000 	.word	0x10320000
 800304c:	10310000 	.word	0x10310000
 8003050:	10220000 	.word	0x10220000
 8003054:	10210000 	.word	0x10210000
 8003058:	10120000 	.word	0x10120000
 800305c:	10110000 	.word	0x10110000
 8003060:	40021000 	.word	0x40021000
 8003064:	40010000 	.word	0x40010000
 8003068:	40010800 	.word	0x40010800
 800306c:	40010c00 	.word	0x40010c00
 8003070:	40011000 	.word	0x40011000
 8003074:	40011400 	.word	0x40011400
 8003078:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_GPIO_Init+0x304>)
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	43db      	mvns	r3, r3
 8003084:	4909      	ldr	r1, [pc, #36]	; (80030ac <HAL_GPIO_Init+0x304>)
 8003086:	4013      	ands	r3, r2
 8003088:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	3301      	adds	r3, #1
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	fa22 f303 	lsr.w	r3, r2, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	f47f ae8e 	bne.w	8002dbc <HAL_GPIO_Init+0x14>
  }
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	372c      	adds	r7, #44	; 0x2c
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	40010400 	.word	0x40010400

080030b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	887b      	ldrh	r3, [r7, #2]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	e001      	b.n	80030d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	460b      	mov	r3, r1
 80030e8:	807b      	strh	r3, [r7, #2]
 80030ea:	4613      	mov	r3, r2
 80030ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ee:	787b      	ldrb	r3, [r7, #1]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f4:	887a      	ldrh	r2, [r7, #2]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030fa:	e003      	b.n	8003104 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030fc:	887b      	ldrh	r3, [r7, #2]
 80030fe:	041a      	lsls	r2, r3, #16
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	611a      	str	r2, [r3, #16]
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
	...

08003110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e12b      	b.n	800337a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff f802 	bl	8002140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2224      	movs	r2, #36	; 0x24
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003174:	f001 fd20 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8003178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4a81      	ldr	r2, [pc, #516]	; (8003384 <HAL_I2C_Init+0x274>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d807      	bhi.n	8003194 <HAL_I2C_Init+0x84>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a80      	ldr	r2, [pc, #512]	; (8003388 <HAL_I2C_Init+0x278>)
 8003188:	4293      	cmp	r3, r2
 800318a:	bf94      	ite	ls
 800318c:	2301      	movls	r3, #1
 800318e:	2300      	movhi	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e006      	b.n	80031a2 <HAL_I2C_Init+0x92>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4a7d      	ldr	r2, [pc, #500]	; (800338c <HAL_I2C_Init+0x27c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	bf94      	ite	ls
 800319c:	2301      	movls	r3, #1
 800319e:	2300      	movhi	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0e7      	b.n	800337a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4a78      	ldr	r2, [pc, #480]	; (8003390 <HAL_I2C_Init+0x280>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0c9b      	lsrs	r3, r3, #18
 80031b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4a6a      	ldr	r2, [pc, #424]	; (8003384 <HAL_I2C_Init+0x274>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d802      	bhi.n	80031e4 <HAL_I2C_Init+0xd4>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	3301      	adds	r3, #1
 80031e2:	e009      	b.n	80031f8 <HAL_I2C_Init+0xe8>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	4a69      	ldr	r2, [pc, #420]	; (8003394 <HAL_I2C_Init+0x284>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	3301      	adds	r3, #1
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800320a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	495c      	ldr	r1, [pc, #368]	; (8003384 <HAL_I2C_Init+0x274>)
 8003214:	428b      	cmp	r3, r1
 8003216:	d819      	bhi.n	800324c <HAL_I2C_Init+0x13c>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e59      	subs	r1, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fbb1 f3f3 	udiv	r3, r1, r3
 8003226:	1c59      	adds	r1, r3, #1
 8003228:	f640 73fc 	movw	r3, #4092	; 0xffc
 800322c:	400b      	ands	r3, r1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_I2C_Init+0x138>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1e59      	subs	r1, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003240:	3301      	adds	r3, #1
 8003242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003246:	e051      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 8003248:	2304      	movs	r3, #4
 800324a:	e04f      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d111      	bne.n	8003278 <HAL_I2C_Init+0x168>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1e58      	subs	r0, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	440b      	add	r3, r1
 8003262:	fbb0 f3f3 	udiv	r3, r0, r3
 8003266:	3301      	adds	r3, #1
 8003268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e012      	b.n	800329e <HAL_I2C_Init+0x18e>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1e58      	subs	r0, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6859      	ldr	r1, [r3, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	0099      	lsls	r1, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	fbb0 f3f3 	udiv	r3, r0, r3
 800328e:	3301      	adds	r3, #1
 8003290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_I2C_Init+0x196>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e022      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10e      	bne.n	80032cc <HAL_I2C_Init+0x1bc>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1e58      	subs	r0, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6859      	ldr	r1, [r3, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	440b      	add	r3, r1
 80032bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c0:	3301      	adds	r3, #1
 80032c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ca:	e00f      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1e58      	subs	r0, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	0099      	lsls	r1, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	6809      	ldr	r1, [r1, #0]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69da      	ldr	r2, [r3, #28]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800331a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6911      	ldr	r1, [r2, #16]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68d2      	ldr	r2, [r2, #12]
 8003326:	4311      	orrs	r1, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	430b      	orrs	r3, r1
 800332e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	000186a0 	.word	0x000186a0
 8003388:	001e847f 	.word	0x001e847f
 800338c:	003d08ff 	.word	0x003d08ff
 8003390:	431bde83 	.word	0x431bde83
 8003394:	10624dd3 	.word	0x10624dd3

08003398 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	461a      	mov	r2, r3
 80033a4:	460b      	mov	r3, r1
 80033a6:	817b      	strh	r3, [r7, #10]
 80033a8:	4613      	mov	r3, r2
 80033aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033ac:	f7ff f910 	bl	80025d0 <HAL_GetTick>
 80033b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	f040 80e0 	bne.w	8003580 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2319      	movs	r3, #25
 80033c6:	2201      	movs	r2, #1
 80033c8:	4970      	ldr	r1, [pc, #448]	; (800358c <HAL_I2C_Master_Transmit+0x1f4>)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 fe44 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
 80033d8:	e0d3      	b.n	8003582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_I2C_Master_Transmit+0x50>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e0cc      	b.n	8003582 <HAL_I2C_Master_Transmit+0x1ea>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d007      	beq.n	800340e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800341c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2221      	movs	r2, #33	; 0x21
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2210      	movs	r2, #16
 800342a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	893a      	ldrh	r2, [r7, #8]
 800343e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4a50      	ldr	r2, [pc, #320]	; (8003590 <HAL_I2C_Master_Transmit+0x1f8>)
 800344e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003450:	8979      	ldrh	r1, [r7, #10]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	6a3a      	ldr	r2, [r7, #32]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fbfe 	bl	8003c58 <I2C_MasterRequestWrite>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e08d      	b.n	8003582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800347c:	e066      	b.n	800354c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	6a39      	ldr	r1, [r7, #32]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 febe 	bl	8004204 <I2C_WaitOnTXEFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00d      	beq.n	80034aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b04      	cmp	r3, #4
 8003494:	d107      	bne.n	80034a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e06b      	b.n	8003582 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	781a      	ldrb	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d11b      	bne.n	8003520 <HAL_I2C_Master_Transmit+0x188>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d017      	beq.n	8003520 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	6a39      	ldr	r1, [r7, #32]
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 feae 	bl	8004286 <I2C_WaitOnBTFFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00d      	beq.n	800354c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	2b04      	cmp	r3, #4
 8003536:	d107      	bne.n	8003548 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003546:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e01a      	b.n	8003582 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	d194      	bne.n	800347e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	e000      	b.n	8003582 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003580:	2302      	movs	r3, #2
  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	00100002 	.word	0x00100002
 8003590:	ffff0000 	.word	0xffff0000

08003594 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	4608      	mov	r0, r1
 800359e:	4611      	mov	r1, r2
 80035a0:	461a      	mov	r2, r3
 80035a2:	4603      	mov	r3, r0
 80035a4:	817b      	strh	r3, [r7, #10]
 80035a6:	460b      	mov	r3, r1
 80035a8:	813b      	strh	r3, [r7, #8]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ae:	f7ff f80f 	bl	80025d0 <HAL_GetTick>
 80035b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b20      	cmp	r3, #32
 80035be:	f040 80d9 	bne.w	8003774 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	2319      	movs	r3, #25
 80035c8:	2201      	movs	r2, #1
 80035ca:	496d      	ldr	r1, [pc, #436]	; (8003780 <HAL_I2C_Mem_Write+0x1ec>)
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fd43 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
 80035da:	e0cc      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_I2C_Mem_Write+0x56>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e0c5      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d007      	beq.n	8003610 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800361e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2221      	movs	r2, #33	; 0x21
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2240      	movs	r2, #64	; 0x40
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a3a      	ldr	r2, [r7, #32]
 800363a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003640:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4a4d      	ldr	r2, [pc, #308]	; (8003784 <HAL_I2C_Mem_Write+0x1f0>)
 8003650:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003652:	88f8      	ldrh	r0, [r7, #6]
 8003654:	893a      	ldrh	r2, [r7, #8]
 8003656:	8979      	ldrh	r1, [r7, #10]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4603      	mov	r3, r0
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fb7a 	bl	8003d5c <I2C_RequestMemoryWrite>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d052      	beq.n	8003714 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e081      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fdc4 	bl	8004204 <I2C_WaitOnTXEFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00d      	beq.n	800369e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2b04      	cmp	r3, #4
 8003688:	d107      	bne.n	800369a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003698:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e06b      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d11b      	bne.n	8003714 <HAL_I2C_Mem_Write+0x180>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d017      	beq.n	8003714 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	781a      	ldrb	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1aa      	bne.n	8003672 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fdb0 	bl	8004286 <I2C_WaitOnBTFFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00d      	beq.n	8003748 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	2b04      	cmp	r3, #4
 8003732:	d107      	bne.n	8003744 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003742:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e016      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e000      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003774:	2302      	movs	r3, #2
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	00100002 	.word	0x00100002
 8003784:	ffff0000 	.word	0xffff0000

08003788 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08c      	sub	sp, #48	; 0x30
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	461a      	mov	r2, r3
 8003796:	4603      	mov	r3, r0
 8003798:	817b      	strh	r3, [r7, #10]
 800379a:	460b      	mov	r3, r1
 800379c:	813b      	strh	r3, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037a6:	f7fe ff13 	bl	80025d0 <HAL_GetTick>
 80037aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	f040 8244 	bne.w	8003c42 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	2319      	movs	r3, #25
 80037c0:	2201      	movs	r2, #1
 80037c2:	4982      	ldr	r1, [pc, #520]	; (80039cc <HAL_I2C_Mem_Read+0x244>)
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fc47 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
 80037d2:	e237      	b.n	8003c44 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_I2C_Mem_Read+0x5a>
 80037de:	2302      	movs	r3, #2
 80037e0:	e230      	b.n	8003c44 <HAL_I2C_Mem_Read+0x4bc>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d007      	beq.n	8003808 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003816:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2222      	movs	r2, #34	; 0x22
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2240      	movs	r2, #64	; 0x40
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003832:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003838:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4a62      	ldr	r2, [pc, #392]	; (80039d0 <HAL_I2C_Mem_Read+0x248>)
 8003848:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800384a:	88f8      	ldrh	r0, [r7, #6]
 800384c:	893a      	ldrh	r2, [r7, #8]
 800384e:	8979      	ldrh	r1, [r7, #10]
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	4603      	mov	r3, r0
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 fb14 	bl	8003e88 <I2C_RequestMemoryRead>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e1ec      	b.n	8003c44 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	2b00      	cmp	r3, #0
 8003870:	d113      	bne.n	800389a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	e1c0      	b.n	8003c1c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d11e      	bne.n	80038e0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038b2:	b672      	cpsid	i
}
 80038b4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038dc:	b662      	cpsie	i
}
 80038de:	e035      	b.n	800394c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d11e      	bne.n	8003926 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038f8:	b672      	cpsid	i
}
 80038fa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003920:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003922:	b662      	cpsie	i
}
 8003924:	e012      	b.n	800394c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003934:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800394c:	e166      	b.n	8003c1c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	2b03      	cmp	r3, #3
 8003954:	f200 811f 	bhi.w	8003b96 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395c:	2b01      	cmp	r3, #1
 800395e:	d123      	bne.n	80039a8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003962:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fccf 	bl	8004308 <I2C_WaitOnRXNEFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e167      	b.n	8003c44 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039a6:	e139      	b.n	8003c1c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d152      	bne.n	8003a56 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	2200      	movs	r2, #0
 80039b8:	4906      	ldr	r1, [pc, #24]	; (80039d4 <HAL_I2C_Mem_Read+0x24c>)
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fb4c 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e13c      	b.n	8003c44 <HAL_I2C_Mem_Read+0x4bc>
 80039ca:	bf00      	nop
 80039cc:	00100002 	.word	0x00100002
 80039d0:	ffff0000 	.word	0xffff0000
 80039d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80039d8:	b672      	cpsid	i
}
 80039da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a1e:	b662      	cpsie	i
}
 8003a20:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a54:	e0e2      	b.n	8003c1c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	497b      	ldr	r1, [pc, #492]	; (8003c4c <HAL_I2C_Mem_Read+0x4c4>)
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 faf9 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0e9      	b.n	8003c44 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a80:	b672      	cpsid	i
}
 8003a82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ab6:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <HAL_I2C_Mem_Read+0x4c8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	08db      	lsrs	r3, r3, #3
 8003abc:	4a65      	ldr	r2, [pc, #404]	; (8003c54 <HAL_I2C_Mem_Read+0x4cc>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	0a1a      	lsrs	r2, r3, #8
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00da      	lsls	r2, r3, #3
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d118      	bne.n	8003b0e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f043 0220 	orr.w	r2, r3, #32
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003afe:	b662      	cpsie	i
}
 8003b00:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e09a      	b.n	8003c44 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d1d9      	bne.n	8003ad0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b5e:	b662      	cpsie	i
}
 8003b60:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b94:	e042      	b.n	8003c1c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 fbb4 	bl	8004308 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e04c      	b.n	8003c44 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d118      	bne.n	8003c1c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f47f ae94 	bne.w	800394e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e000      	b.n	8003c44 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003c42:	2302      	movs	r3, #2
  }
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3728      	adds	r7, #40	; 0x28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	00010004 	.word	0x00010004
 8003c50:	2000008c 	.word	0x2000008c
 8003c54:	14f8b589 	.word	0x14f8b589

08003c58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	460b      	mov	r3, r1
 8003c66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d006      	beq.n	8003c82 <I2C_MasterRequestWrite+0x2a>
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d003      	beq.n	8003c82 <I2C_MasterRequestWrite+0x2a>
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c80:	d108      	bne.n	8003c94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e00b      	b.n	8003cac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	2b12      	cmp	r3, #18
 8003c9a:	d107      	bne.n	8003cac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003caa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f9cd 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd2:	d103      	bne.n	8003cdc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e035      	b.n	8003d4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ce8:	d108      	bne.n	8003cfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cea:	897b      	ldrh	r3, [r7, #10]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cf8:	611a      	str	r2, [r3, #16]
 8003cfa:	e01b      	b.n	8003d34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cfc:	897b      	ldrh	r3, [r7, #10]
 8003cfe:	11db      	asrs	r3, r3, #7
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 0306 	and.w	r3, r3, #6
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f063 030f 	orn	r3, r3, #15
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	490e      	ldr	r1, [pc, #56]	; (8003d54 <I2C_MasterRequestWrite+0xfc>)
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f9f3 	bl	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e010      	b.n	8003d4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d2a:	897b      	ldrh	r3, [r7, #10]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4907      	ldr	r1, [pc, #28]	; (8003d58 <I2C_MasterRequestWrite+0x100>)
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f9e3 	bl	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	00010008 	.word	0x00010008
 8003d58:	00010002 	.word	0x00010002

08003d5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	4608      	mov	r0, r1
 8003d66:	4611      	mov	r1, r2
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	817b      	strh	r3, [r7, #10]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	813b      	strh	r3, [r7, #8]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f960 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dac:	d103      	bne.n	8003db6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e05f      	b.n	8003e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	6a3a      	ldr	r2, [r7, #32]
 8003dce:	492d      	ldr	r1, [pc, #180]	; (8003e84 <I2C_RequestMemoryWrite+0x128>)
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f998 	bl	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e04c      	b.n	8003e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df8:	6a39      	ldr	r1, [r7, #32]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fa02 	bl	8004204 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00d      	beq.n	8003e22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d107      	bne.n	8003e1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e02b      	b.n	8003e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d105      	bne.n	8003e34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e28:	893b      	ldrh	r3, [r7, #8]
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	611a      	str	r2, [r3, #16]
 8003e32:	e021      	b.n	8003e78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e34:	893b      	ldrh	r3, [r7, #8]
 8003e36:	0a1b      	lsrs	r3, r3, #8
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e44:	6a39      	ldr	r1, [r7, #32]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f9dc 	bl	8004204 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d107      	bne.n	8003e6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e005      	b.n	8003e7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e6e:	893b      	ldrh	r3, [r7, #8]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	00010002 	.word	0x00010002

08003e88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	4608      	mov	r0, r1
 8003e92:	4611      	mov	r1, r2
 8003e94:	461a      	mov	r2, r3
 8003e96:	4603      	mov	r3, r0
 8003e98:	817b      	strh	r3, [r7, #10]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	813b      	strh	r3, [r7, #8]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f8c2 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee8:	d103      	bne.n	8003ef2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e0aa      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ef6:	897b      	ldrh	r3, [r7, #10]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	4952      	ldr	r1, [pc, #328]	; (8004054 <I2C_RequestMemoryRead+0x1cc>)
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f8fa 	bl	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e097      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f34:	6a39      	ldr	r1, [r7, #32]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f964 	bl	8004204 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d107      	bne.n	8003f5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e076      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d105      	bne.n	8003f70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f64:	893b      	ldrh	r3, [r7, #8]
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	611a      	str	r2, [r3, #16]
 8003f6e:	e021      	b.n	8003fb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f70:	893b      	ldrh	r3, [r7, #8]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f80:	6a39      	ldr	r1, [r7, #32]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f93e 	bl	8004204 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00d      	beq.n	8003faa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d107      	bne.n	8003fa6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e050      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003faa:	893b      	ldrh	r3, [r7, #8]
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	6a39      	ldr	r1, [r7, #32]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f923 	bl	8004204 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00d      	beq.n	8003fe0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d107      	bne.n	8003fdc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e035      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f82b 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004016:	d103      	bne.n	8004020 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800401e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e013      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004024:	897b      	ldrh	r3, [r7, #10]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	b2da      	uxtb	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	6a3a      	ldr	r2, [r7, #32]
 8004038:	4906      	ldr	r1, [pc, #24]	; (8004054 <I2C_RequestMemoryRead+0x1cc>)
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f863 	bl	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	00010002 	.word	0x00010002

08004058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004068:	e025      	b.n	80040b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d021      	beq.n	80040b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004072:	f7fe faad 	bl	80025d0 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d302      	bcc.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d116      	bne.n	80040b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f043 0220 	orr.w	r2, r3, #32
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e023      	b.n	80040fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d10d      	bne.n	80040dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	43da      	mvns	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4013      	ands	r3, r2
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	bf0c      	ite	eq
 80040d2:	2301      	moveq	r3, #1
 80040d4:	2300      	movne	r3, #0
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	e00c      	b.n	80040f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	43da      	mvns	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d0b6      	beq.n	800406a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004114:	e051      	b.n	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004124:	d123      	bne.n	800416e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004134:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800413e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f043 0204 	orr.w	r2, r3, #4
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e046      	b.n	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d021      	beq.n	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004176:	f7fe fa2b 	bl	80025d0 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	d302      	bcc.n	800418c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d116      	bne.n	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f043 0220 	orr.w	r2, r3, #32
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e020      	b.n	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	0c1b      	lsrs	r3, r3, #16
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d10c      	bne.n	80041de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	43da      	mvns	r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4013      	ands	r3, r2
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	e00b      	b.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	43da      	mvns	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	4013      	ands	r3, r2
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf14      	ite	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	2300      	moveq	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d18d      	bne.n	8004116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004210:	e02d      	b.n	800426e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f8ce 	bl	80043b4 <I2C_IsAcknowledgeFailed>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e02d      	b.n	800427e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d021      	beq.n	800426e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fe f9d1 	bl	80025d0 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d116      	bne.n	800426e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e007      	b.n	800427e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	2b80      	cmp	r3, #128	; 0x80
 800427a:	d1ca      	bne.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004292:	e02d      	b.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f88d 	bl	80043b4 <I2C_IsAcknowledgeFailed>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e02d      	b.n	8004300 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d021      	beq.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ac:	f7fe f990 	bl	80025d0 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d302      	bcc.n	80042c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d116      	bne.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	f043 0220 	orr.w	r2, r3, #32
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e007      	b.n	8004300 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d1ca      	bne.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004314:	e042      	b.n	800439c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b10      	cmp	r3, #16
 8004322:	d119      	bne.n	8004358 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0210 	mvn.w	r2, #16
 800432c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e029      	b.n	80043ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004358:	f7fe f93a 	bl	80025d0 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	429a      	cmp	r2, r3
 8004366:	d302      	bcc.n	800436e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d116      	bne.n	800439c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	f043 0220 	orr.w	r2, r3, #32
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e007      	b.n	80043ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b40      	cmp	r3, #64	; 0x40
 80043a8:	d1b5      	bne.n	8004316 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ca:	d11b      	bne.n	8004404 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	f043 0204 	orr.w	r2, r3, #4
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e272      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8087 	beq.w	800453e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004430:	4b92      	ldr	r3, [pc, #584]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 030c 	and.w	r3, r3, #12
 8004438:	2b04      	cmp	r3, #4
 800443a:	d00c      	beq.n	8004456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800443c:	4b8f      	ldr	r3, [pc, #572]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 030c 	and.w	r3, r3, #12
 8004444:	2b08      	cmp	r3, #8
 8004446:	d112      	bne.n	800446e <HAL_RCC_OscConfig+0x5e>
 8004448:	4b8c      	ldr	r3, [pc, #560]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	d10b      	bne.n	800446e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004456:	4b89      	ldr	r3, [pc, #548]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d06c      	beq.n	800453c <HAL_RCC_OscConfig+0x12c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d168      	bne.n	800453c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e24c      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004476:	d106      	bne.n	8004486 <HAL_RCC_OscConfig+0x76>
 8004478:	4b80      	ldr	r3, [pc, #512]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a7f      	ldr	r2, [pc, #508]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800447e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	e02e      	b.n	80044e4 <HAL_RCC_OscConfig+0xd4>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x98>
 800448e:	4b7b      	ldr	r3, [pc, #492]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a7a      	ldr	r2, [pc, #488]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b78      	ldr	r3, [pc, #480]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a77      	ldr	r2, [pc, #476]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	e01d      	b.n	80044e4 <HAL_RCC_OscConfig+0xd4>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0xbc>
 80044b2:	4b72      	ldr	r3, [pc, #456]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a71      	ldr	r2, [pc, #452]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	4b6f      	ldr	r3, [pc, #444]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a6e      	ldr	r2, [pc, #440]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e00b      	b.n	80044e4 <HAL_RCC_OscConfig+0xd4>
 80044cc:	4b6b      	ldr	r3, [pc, #428]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a6a      	ldr	r2, [pc, #424]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b68      	ldr	r3, [pc, #416]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a67      	ldr	r2, [pc, #412]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d013      	beq.n	8004514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fe f870 	bl	80025d0 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fe f86c 	bl	80025d0 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	; 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e200      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004506:	4b5d      	ldr	r3, [pc, #372]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0xe4>
 8004512:	e014      	b.n	800453e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7fe f85c 	bl	80025d0 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800451c:	f7fe f858 	bl	80025d0 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	; 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e1ec      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452e:	4b53      	ldr	r3, [pc, #332]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x10c>
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800453c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d063      	beq.n	8004612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800454a:	4b4c      	ldr	r3, [pc, #304]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004556:	4b49      	ldr	r3, [pc, #292]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b08      	cmp	r3, #8
 8004560:	d11c      	bne.n	800459c <HAL_RCC_OscConfig+0x18c>
 8004562:	4b46      	ldr	r3, [pc, #280]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d116      	bne.n	800459c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456e:	4b43      	ldr	r3, [pc, #268]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <HAL_RCC_OscConfig+0x176>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e1c0      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004586:	4b3d      	ldr	r3, [pc, #244]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4939      	ldr	r1, [pc, #228]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459a:	e03a      	b.n	8004612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a4:	4b36      	ldr	r3, [pc, #216]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7fe f811 	bl	80025d0 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b2:	f7fe f80d 	bl	80025d0 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e1a1      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c4:	4b2d      	ldr	r3, [pc, #180]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	4b2a      	ldr	r3, [pc, #168]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4927      	ldr	r1, [pc, #156]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]
 80045e4:	e015      	b.n	8004612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e6:	4b26      	ldr	r3, [pc, #152]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fd fff0 	bl	80025d0 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f4:	f7fd ffec 	bl	80025d0 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e180      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004606:	4b1d      	ldr	r3, [pc, #116]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d03a      	beq.n	8004694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d019      	beq.n	800465a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004626:	4b17      	ldr	r3, [pc, #92]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004628:	2201      	movs	r2, #1
 800462a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462c:	f7fd ffd0 	bl	80025d0 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004634:	f7fd ffcc 	bl	80025d0 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e160      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004646:	4b0d      	ldr	r3, [pc, #52]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004652:	2001      	movs	r0, #1
 8004654:	f000 fad8 	bl	8004c08 <RCC_Delay>
 8004658:	e01c      	b.n	8004694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465a:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004660:	f7fd ffb6 	bl	80025d0 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004666:	e00f      	b.n	8004688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004668:	f7fd ffb2 	bl	80025d0 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d908      	bls.n	8004688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e146      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	42420000 	.word	0x42420000
 8004684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	4b92      	ldr	r3, [pc, #584]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e9      	bne.n	8004668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80a6 	beq.w	80047ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a6:	4b8b      	ldr	r3, [pc, #556]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10d      	bne.n	80046ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b2:	4b88      	ldr	r3, [pc, #544]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	4a87      	ldr	r2, [pc, #540]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046bc:	61d3      	str	r3, [r2, #28]
 80046be:	4b85      	ldr	r3, [pc, #532]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c6:	60bb      	str	r3, [r7, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ca:	2301      	movs	r3, #1
 80046cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ce:	4b82      	ldr	r3, [pc, #520]	; (80048d8 <HAL_RCC_OscConfig+0x4c8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d118      	bne.n	800470c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046da:	4b7f      	ldr	r3, [pc, #508]	; (80048d8 <HAL_RCC_OscConfig+0x4c8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a7e      	ldr	r2, [pc, #504]	; (80048d8 <HAL_RCC_OscConfig+0x4c8>)
 80046e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e6:	f7fd ff73 	bl	80025d0 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ee:	f7fd ff6f 	bl	80025d0 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b64      	cmp	r3, #100	; 0x64
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e103      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004700:	4b75      	ldr	r3, [pc, #468]	; (80048d8 <HAL_RCC_OscConfig+0x4c8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d106      	bne.n	8004722 <HAL_RCC_OscConfig+0x312>
 8004714:	4b6f      	ldr	r3, [pc, #444]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	4a6e      	ldr	r2, [pc, #440]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	6213      	str	r3, [r2, #32]
 8004720:	e02d      	b.n	800477e <HAL_RCC_OscConfig+0x36e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10c      	bne.n	8004744 <HAL_RCC_OscConfig+0x334>
 800472a:	4b6a      	ldr	r3, [pc, #424]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	4a69      	ldr	r2, [pc, #420]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004730:	f023 0301 	bic.w	r3, r3, #1
 8004734:	6213      	str	r3, [r2, #32]
 8004736:	4b67      	ldr	r3, [pc, #412]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	4a66      	ldr	r2, [pc, #408]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	f023 0304 	bic.w	r3, r3, #4
 8004740:	6213      	str	r3, [r2, #32]
 8004742:	e01c      	b.n	800477e <HAL_RCC_OscConfig+0x36e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	2b05      	cmp	r3, #5
 800474a:	d10c      	bne.n	8004766 <HAL_RCC_OscConfig+0x356>
 800474c:	4b61      	ldr	r3, [pc, #388]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	4a60      	ldr	r2, [pc, #384]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004752:	f043 0304 	orr.w	r3, r3, #4
 8004756:	6213      	str	r3, [r2, #32]
 8004758:	4b5e      	ldr	r3, [pc, #376]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	4a5d      	ldr	r2, [pc, #372]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6213      	str	r3, [r2, #32]
 8004764:	e00b      	b.n	800477e <HAL_RCC_OscConfig+0x36e>
 8004766:	4b5b      	ldr	r3, [pc, #364]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	4a5a      	ldr	r2, [pc, #360]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	6213      	str	r3, [r2, #32]
 8004772:	4b58      	ldr	r3, [pc, #352]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	4a57      	ldr	r2, [pc, #348]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d015      	beq.n	80047b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004786:	f7fd ff23 	bl	80025d0 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478c:	e00a      	b.n	80047a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478e:	f7fd ff1f 	bl	80025d0 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	f241 3288 	movw	r2, #5000	; 0x1388
 800479c:	4293      	cmp	r3, r2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e0b1      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a4:	4b4b      	ldr	r3, [pc, #300]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0ee      	beq.n	800478e <HAL_RCC_OscConfig+0x37e>
 80047b0:	e014      	b.n	80047dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b2:	f7fd ff0d 	bl	80025d0 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b8:	e00a      	b.n	80047d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ba:	f7fd ff09 	bl	80025d0 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e09b      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d0:	4b40      	ldr	r3, [pc, #256]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1ee      	bne.n	80047ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d105      	bne.n	80047ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e2:	4b3c      	ldr	r3, [pc, #240]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	4a3b      	ldr	r2, [pc, #236]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 8087 	beq.w	8004906 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f8:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 030c 	and.w	r3, r3, #12
 8004800:	2b08      	cmp	r3, #8
 8004802:	d061      	beq.n	80048c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d146      	bne.n	800489a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480c:	4b33      	ldr	r3, [pc, #204]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004812:	f7fd fedd 	bl	80025d0 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481a:	f7fd fed9 	bl	80025d0 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e06d      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800482c:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f0      	bne.n	800481a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004840:	d108      	bne.n	8004854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004842:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	4921      	ldr	r1, [pc, #132]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004850:	4313      	orrs	r3, r2
 8004852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004854:	4b1f      	ldr	r3, [pc, #124]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a19      	ldr	r1, [r3, #32]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	430b      	orrs	r3, r1
 8004866:	491b      	ldr	r1, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800486c:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004872:	f7fd fead 	bl	80025d0 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487a:	f7fd fea9 	bl	80025d0 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e03d      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800488c:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCC_OscConfig+0x46a>
 8004898:	e035      	b.n	8004906 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489a:	4b10      	ldr	r3, [pc, #64]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a0:	f7fd fe96 	bl	80025d0 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fd fe92 	bl	80025d0 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e026      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x498>
 80048c6:	e01e      	b.n	8004906 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d107      	bne.n	80048e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e019      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40007000 	.word	0x40007000
 80048dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCC_OscConfig+0x500>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d106      	bne.n	8004902 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d001      	beq.n	8004906 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000

08004914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0d0      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004928:	4b6a      	ldr	r3, [pc, #424]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d910      	bls.n	8004958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b67      	ldr	r3, [pc, #412]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 0207 	bic.w	r2, r3, #7
 800493e:	4965      	ldr	r1, [pc, #404]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b63      	ldr	r3, [pc, #396]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0b8      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004970:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a58      	ldr	r2, [pc, #352]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004976:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800497a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004988:	4b53      	ldr	r3, [pc, #332]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a52      	ldr	r2, [pc, #328]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004992:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004994:	4b50      	ldr	r3, [pc, #320]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	494d      	ldr	r1, [pc, #308]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d040      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	4b47      	ldr	r3, [pc, #284]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d115      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e07f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d2:	4b41      	ldr	r3, [pc, #260]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d109      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e073      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e2:	4b3d      	ldr	r3, [pc, #244]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e06b      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049f2:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f023 0203 	bic.w	r2, r3, #3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	4936      	ldr	r1, [pc, #216]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a04:	f7fd fde4 	bl	80025d0 <HAL_GetTick>
 8004a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a0c:	f7fd fde0 	bl	80025d0 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e053      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a22:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f003 020c 	and.w	r2, r3, #12
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d1eb      	bne.n	8004a0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a34:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d210      	bcs.n	8004a64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 0207 	bic.w	r2, r3, #7
 8004a4a:	4922      	ldr	r1, [pc, #136]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b20      	ldr	r3, [pc, #128]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e032      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a70:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4916      	ldr	r1, [pc, #88]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	490e      	ldr	r1, [pc, #56]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004aa2:	f000 f821 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	490a      	ldr	r1, [pc, #40]	; (8004adc <HAL_RCC_ClockConfig+0x1c8>)
 8004ab4:	5ccb      	ldrb	r3, [r1, r3]
 8004ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aba:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8004abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fd fd42 	bl	800254c <HAL_InitTick>

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40022000 	.word	0x40022000
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	080077f0 	.word	0x080077f0
 8004ae0:	2000008c 	.word	0x2000008c
 8004ae4:	20000090 	.word	0x20000090

08004ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae8:	b490      	push	{r4, r7}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004aee:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xac>)
 8004af0:	1d3c      	adds	r4, r7, #4
 8004af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004af8:	f240 2301 	movw	r3, #513	; 0x201
 8004afc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61fb      	str	r3, [r7, #28]
 8004b02:	2300      	movs	r3, #0
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b12:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d002      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x40>
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d003      	beq.n	8004b2e <HAL_RCC_GetSysClockFreq+0x46>
 8004b26:	e02b      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b28:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b2a:	623b      	str	r3, [r7, #32]
      break;
 8004b2c:	e02b      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	0c9b      	lsrs	r3, r3, #18
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	3328      	adds	r3, #40	; 0x28
 8004b38:	443b      	add	r3, r7
 8004b3a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b3e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d012      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	0c5b      	lsrs	r3, r3, #17
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	3328      	adds	r3, #40	; 0x28
 8004b56:	443b      	add	r3, r7
 8004b58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b62:	fb03 f202 	mul.w	r2, r3, r2
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6e:	e004      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	4a0b      	ldr	r2, [pc, #44]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b74:	fb02 f303 	mul.w	r3, r2, r3
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	623b      	str	r3, [r7, #32]
      break;
 8004b7e:	e002      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b82:	623b      	str	r3, [r7, #32]
      break;
 8004b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b86:	6a3b      	ldr	r3, [r7, #32]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3728      	adds	r7, #40	; 0x28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc90      	pop	{r4, r7}
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	080077e0 	.word	0x080077e0
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	007a1200 	.word	0x007a1200
 8004ba0:	003d0900 	.word	0x003d0900

08004ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba8:	4b02      	ldr	r3, [pc, #8]	; (8004bb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004baa:	681b      	ldr	r3, [r3, #0]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr
 8004bb4:	2000008c 	.word	0x2000008c

08004bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bbc:	f7ff fff2 	bl	8004ba4 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	0a1b      	lsrs	r3, r3, #8
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4903      	ldr	r1, [pc, #12]	; (8004bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	08007800 	.word	0x08007800

08004be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004be4:	f7ff ffde 	bl	8004ba4 <HAL_RCC_GetHCLKFreq>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	0adb      	lsrs	r3, r3, #11
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	4903      	ldr	r1, [pc, #12]	; (8004c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf6:	5ccb      	ldrb	r3, [r1, r3]
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40021000 	.word	0x40021000
 8004c04:	08007800 	.word	0x08007800

08004c08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <RCC_Delay+0x34>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <RCC_Delay+0x38>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	0a5b      	lsrs	r3, r3, #9
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	fb02 f303 	mul.w	r3, r2, r3
 8004c22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c24:	bf00      	nop
  }
  while (Delay --);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1e5a      	subs	r2, r3, #1
 8004c2a:	60fa      	str	r2, [r7, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f9      	bne.n	8004c24 <RCC_Delay+0x1c>
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	2000008c 	.word	0x2000008c
 8004c40:	10624dd3 	.word	0x10624dd3

08004c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e041      	b.n	8004cda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fd fb48 	bl	8002300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f000 fbde 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d001      	beq.n	8004cfc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e032      	b.n	8004d62 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <HAL_TIM_Base_Start+0x88>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00e      	beq.n	8004d2c <HAL_TIM_Base_Start+0x48>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d16:	d009      	beq.n	8004d2c <HAL_TIM_Base_Start+0x48>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a14      	ldr	r2, [pc, #80]	; (8004d70 <HAL_TIM_Base_Start+0x8c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_TIM_Base_Start+0x48>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <HAL_TIM_Base_Start+0x90>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d111      	bne.n	8004d50 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b06      	cmp	r3, #6
 8004d3c:	d010      	beq.n	8004d60 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4e:	e007      	b.n	8004d60 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800

08004d78 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6a1a      	ldr	r2, [r3, #32]
 8004d86:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10f      	bne.n	8004db0 <HAL_TIM_Base_Stop+0x38>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a1a      	ldr	r2, [r3, #32]
 8004d96:	f240 4344 	movw	r3, #1092	; 0x444
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d107      	bne.n	8004db0 <HAL_TIM_Base_Stop+0x38>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e093      	b.n	8004f00 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d106      	bne.n	8004df2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7fd fa13 	bl	8002218 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2202      	movs	r2, #2
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e08:	f023 0307 	bic.w	r3, r3, #7
 8004e0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f000 fb13 	bl	8005444 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e46:	f023 0303 	bic.w	r3, r3, #3
 8004e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	4313      	orrs	r3, r2
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e64:	f023 030c 	bic.w	r3, r3, #12
 8004e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	4313      	orrs	r3, r2
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	011a      	lsls	r2, r3, #4
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	031b      	lsls	r3, r3, #12
 8004e94:	4313      	orrs	r3, r2
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f30:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d110      	bne.n	8004f5a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d102      	bne.n	8004f44 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f3e:	7b7b      	ldrb	r3, [r7, #13]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d001      	beq.n	8004f48 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e089      	b.n	800505c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f58:	e031      	b.n	8004fbe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d110      	bne.n	8004f82 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f60:	7bbb      	ldrb	r3, [r7, #14]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d102      	bne.n	8004f6c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f66:	7b3b      	ldrb	r3, [r7, #12]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d001      	beq.n	8004f70 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e075      	b.n	800505c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f80:	e01d      	b.n	8004fbe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d108      	bne.n	8004f9a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f88:	7bbb      	ldrb	r3, [r7, #14]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d105      	bne.n	8004f9a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f8e:	7b7b      	ldrb	r3, [r7, #13]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d102      	bne.n	8004f9a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f94:	7b3b      	ldrb	r3, [r7, #12]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d001      	beq.n	8004f9e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e05e      	b.n	800505c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_TIM_Encoder_Start_IT+0xc4>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d010      	beq.n	8004fec <HAL_TIM_Encoder_Start_IT+0xe4>
 8004fca:	e01f      	b.n	800500c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fb2d 	bl	8005634 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0202 	orr.w	r2, r2, #2
 8004fe8:	60da      	str	r2, [r3, #12]
      break;
 8004fea:	e02e      	b.n	800504a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	2104      	movs	r1, #4
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fb1d 	bl	8005634 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0204 	orr.w	r2, r2, #4
 8005008:	60da      	str	r2, [r3, #12]
      break;
 800500a:	e01e      	b.n	800504a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2201      	movs	r2, #1
 8005012:	2100      	movs	r1, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fb0d 	bl	8005634 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2201      	movs	r2, #1
 8005020:	2104      	movs	r1, #4
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fb06 	bl	8005634 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0202 	orr.w	r2, r2, #2
 8005036:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0204 	orr.w	r2, r2, #4
 8005046:	60da      	str	r2, [r3, #12]
      break;
 8005048:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0201 	orr.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b02      	cmp	r3, #2
 8005078:	d122      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b02      	cmp	r3, #2
 8005086:	d11b      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0202 	mvn.w	r2, #2
 8005090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f001 fa56 	bl	8006558 <HAL_TIM_IC_CaptureCallback>
 80050ac:	e005      	b.n	80050ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f9ad 	bl	800540e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f9b3 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d122      	bne.n	8005114 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d11b      	bne.n	8005114 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0204 	mvn.w	r2, #4
 80050e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2202      	movs	r2, #2
 80050ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f001 fa2c 	bl	8006558 <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f983 	bl	800540e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f989 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b08      	cmp	r3, #8
 8005120:	d122      	bne.n	8005168 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b08      	cmp	r3, #8
 800512e:	d11b      	bne.n	8005168 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0208 	mvn.w	r2, #8
 8005138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2204      	movs	r2, #4
 800513e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f001 fa02 	bl	8006558 <HAL_TIM_IC_CaptureCallback>
 8005154:	e005      	b.n	8005162 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f959 	bl	800540e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f95f 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b10      	cmp	r3, #16
 8005174:	d122      	bne.n	80051bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b10      	cmp	r3, #16
 8005182:	d11b      	bne.n	80051bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f06f 0210 	mvn.w	r2, #16
 800518c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2208      	movs	r2, #8
 8005192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 f9d8 	bl	8006558 <HAL_TIM_IC_CaptureCallback>
 80051a8:	e005      	b.n	80051b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f92f 	bl	800540e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f935 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d10e      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d107      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0201 	mvn.w	r2, #1
 80051e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f90a 	bl	80053fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f2:	2b80      	cmp	r3, #128	; 0x80
 80051f4:	d10e      	bne.n	8005214 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005200:	2b80      	cmp	r3, #128	; 0x80
 8005202:	d107      	bne.n	8005214 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800520c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fa9b 	bl	800574a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	d10e      	bne.n	8005240 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d107      	bne.n	8005240 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f8f9 	bl	8005432 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b20      	cmp	r3, #32
 800524c:	d10e      	bne.n	800526c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b20      	cmp	r3, #32
 800525a:	d107      	bne.n	800526c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0220 	mvn.w	r2, #32
 8005264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fa66 	bl	8005738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800526c:	bf00      	nop
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_TIM_ConfigClockSource+0x18>
 8005288:	2302      	movs	r3, #2
 800528a:	e0b3      	b.n	80053f4 <HAL_TIM_ConfigClockSource+0x180>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c4:	d03e      	beq.n	8005344 <HAL_TIM_ConfigClockSource+0xd0>
 80052c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ca:	f200 8087 	bhi.w	80053dc <HAL_TIM_ConfigClockSource+0x168>
 80052ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d2:	f000 8085 	beq.w	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 80052d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052da:	d87f      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
 80052dc:	2b70      	cmp	r3, #112	; 0x70
 80052de:	d01a      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0xa2>
 80052e0:	2b70      	cmp	r3, #112	; 0x70
 80052e2:	d87b      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
 80052e4:	2b60      	cmp	r3, #96	; 0x60
 80052e6:	d050      	beq.n	800538a <HAL_TIM_ConfigClockSource+0x116>
 80052e8:	2b60      	cmp	r3, #96	; 0x60
 80052ea:	d877      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
 80052ec:	2b50      	cmp	r3, #80	; 0x50
 80052ee:	d03c      	beq.n	800536a <HAL_TIM_ConfigClockSource+0xf6>
 80052f0:	2b50      	cmp	r3, #80	; 0x50
 80052f2:	d873      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	d058      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x136>
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	d86f      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
 80052fc:	2b30      	cmp	r3, #48	; 0x30
 80052fe:	d064      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x156>
 8005300:	2b30      	cmp	r3, #48	; 0x30
 8005302:	d86b      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
 8005304:	2b20      	cmp	r3, #32
 8005306:	d060      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x156>
 8005308:	2b20      	cmp	r3, #32
 800530a:	d867      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
 800530c:	2b00      	cmp	r3, #0
 800530e:	d05c      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x156>
 8005310:	2b10      	cmp	r3, #16
 8005312:	d05a      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005314:	e062      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6899      	ldr	r1, [r3, #8]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f000 f966 	bl	80055f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005338:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	609a      	str	r2, [r3, #8]
      break;
 8005342:	e04e      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	6899      	ldr	r1, [r3, #8]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f000 f94f 	bl	80055f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005366:	609a      	str	r2, [r3, #8]
      break;
 8005368:	e03b      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6859      	ldr	r1, [r3, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	461a      	mov	r2, r3
 8005378:	f000 f8c6 	bl	8005508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2150      	movs	r1, #80	; 0x50
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f91d 	bl	80055c2 <TIM_ITRx_SetConfig>
      break;
 8005388:	e02b      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6859      	ldr	r1, [r3, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	461a      	mov	r2, r3
 8005398:	f000 f8e4 	bl	8005564 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2160      	movs	r1, #96	; 0x60
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f90d 	bl	80055c2 <TIM_ITRx_SetConfig>
      break;
 80053a8:	e01b      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6859      	ldr	r1, [r3, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f000 f8a6 	bl	8005508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2140      	movs	r1, #64	; 0x40
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 f8fd 	bl	80055c2 <TIM_ITRx_SetConfig>
      break;
 80053c8:	e00b      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4619      	mov	r1, r3
 80053d4:	4610      	mov	r0, r2
 80053d6:	f000 f8f4 	bl	80055c2 <TIM_ITRx_SetConfig>
        break;
 80053da:	e002      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053dc:	bf00      	nop
 80053de:	e000      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr

0800540e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr

08005420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr

08005432 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr

08005444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a29      	ldr	r2, [pc, #164]	; (80054fc <TIM_Base_SetConfig+0xb8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00b      	beq.n	8005474 <TIM_Base_SetConfig+0x30>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d007      	beq.n	8005474 <TIM_Base_SetConfig+0x30>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a26      	ldr	r2, [pc, #152]	; (8005500 <TIM_Base_SetConfig+0xbc>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_Base_SetConfig+0x30>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a25      	ldr	r2, [pc, #148]	; (8005504 <TIM_Base_SetConfig+0xc0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d108      	bne.n	8005486 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1c      	ldr	r2, [pc, #112]	; (80054fc <TIM_Base_SetConfig+0xb8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00b      	beq.n	80054a6 <TIM_Base_SetConfig+0x62>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005494:	d007      	beq.n	80054a6 <TIM_Base_SetConfig+0x62>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a19      	ldr	r2, [pc, #100]	; (8005500 <TIM_Base_SetConfig+0xbc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d003      	beq.n	80054a6 <TIM_Base_SetConfig+0x62>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a18      	ldr	r2, [pc, #96]	; (8005504 <TIM_Base_SetConfig+0xc0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d108      	bne.n	80054b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a07      	ldr	r2, [pc, #28]	; (80054fc <TIM_Base_SetConfig+0xb8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d103      	bne.n	80054ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	615a      	str	r2, [r3, #20]
}
 80054f2:	bf00      	nop
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr
 80054fc:	40012c00 	.word	0x40012c00
 8005500:	40000400 	.word	0x40000400
 8005504:	40000800 	.word	0x40000800

08005508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f023 0201 	bic.w	r2, r3, #1
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f023 030a 	bic.w	r3, r3, #10
 8005544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	621a      	str	r2, [r3, #32]
}
 800555a:	bf00      	nop
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr

08005564 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f023 0210 	bic.w	r2, r3, #16
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800558e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	031b      	lsls	r3, r3, #12
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	621a      	str	r2, [r3, #32]
}
 80055b8:	bf00      	nop
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr

080055c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	f043 0307 	orr.w	r3, r3, #7
 80055e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	609a      	str	r2, [r3, #8]
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr

080055f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b087      	sub	sp, #28
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
 8005602:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005610:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	021a      	lsls	r2, r3, #8
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	431a      	orrs	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4313      	orrs	r3, r2
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	609a      	str	r2, [r3, #8]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr

08005634 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	2201      	movs	r2, #1
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a1a      	ldr	r2, [r3, #32]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	43db      	mvns	r3, r3
 8005656:	401a      	ands	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a1a      	ldr	r2, [r3, #32]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	fa01 f303 	lsl.w	r3, r1, r3
 800566c:	431a      	orrs	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr

0800567c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005690:	2302      	movs	r3, #2
 8005692:	e046      	b.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a16      	ldr	r2, [pc, #88]	; (800572c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00e      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e0:	d009      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a12      	ldr	r2, [pc, #72]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a10      	ldr	r2, [pc, #64]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d10c      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	4313      	orrs	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800

08005738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr

0800574a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e03f      	b.n	80057ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fc fdda 	bl	800233c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2224      	movs	r2, #36	; 0x24
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800579e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fb49 	bl	8005e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695a      	ldr	r2, [r3, #20]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	; 0x28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005818:	2300      	movs	r3, #0
 800581a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10d      	bne.n	800584a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_UART_IRQHandler+0x52>
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa4f 	bl	8005ce6 <UART_Receive_IT>
      return;
 8005848:	e17b      	b.n	8005b42 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 80b1 	beq.w	80059b4 <HAL_UART_IRQHandler+0x1bc>
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d105      	bne.n	8005868 <HAL_UART_IRQHandler+0x70>
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 80a6 	beq.w	80059b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_UART_IRQHandler+0x90>
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	f043 0201 	orr.w	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <HAL_UART_IRQHandler+0xb0>
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	f043 0202 	orr.w	r2, r3, #2
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <HAL_UART_IRQHandler+0xd0>
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	f043 0204 	orr.w	r2, r3, #4
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00f      	beq.n	80058f2 <HAL_UART_IRQHandler+0xfa>
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	f003 0320 	and.w	r3, r3, #32
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d104      	bne.n	80058e6 <HAL_UART_IRQHandler+0xee>
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f043 0208 	orr.w	r2, r3, #8
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 811e 	beq.w	8005b38 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b00      	cmp	r3, #0
 8005904:	d007      	beq.n	8005916 <HAL_UART_IRQHandler+0x11e>
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f9e8 	bl	8005ce6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005920:	2b00      	cmp	r3, #0
 8005922:	bf14      	ite	ne
 8005924:	2301      	movne	r3, #1
 8005926:	2300      	moveq	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d102      	bne.n	800593e <HAL_UART_IRQHandler+0x146>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d031      	beq.n	80059a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f92a 	bl	8005b98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	d023      	beq.n	800599a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695a      	ldr	r2, [r3, #20]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005960:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	2b00      	cmp	r3, #0
 8005968:	d013      	beq.n	8005992 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	4a76      	ldr	r2, [pc, #472]	; (8005b48 <HAL_UART_IRQHandler+0x350>)
 8005970:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	4618      	mov	r0, r3
 8005978:	f7fc ffa0 	bl	80028bc <HAL_DMA_Abort_IT>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d016      	beq.n	80059b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800598c:	4610      	mov	r0, r2
 800598e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005990:	e00e      	b.n	80059b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f8ec 	bl	8005b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005998:	e00a      	b.n	80059b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f8e8 	bl	8005b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a0:	e006      	b.n	80059b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f8e4 	bl	8005b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80059ae:	e0c3      	b.n	8005b38 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	bf00      	nop
    return;
 80059b2:	e0c1      	b.n	8005b38 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	f040 80a1 	bne.w	8005b00 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 809b 	beq.w	8005b00 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 8095 	beq.w	8005b00 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d04e      	beq.n	8005a98 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005a04:	8a3b      	ldrh	r3, [r7, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 8098 	beq.w	8005b3c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a10:	8a3a      	ldrh	r2, [r7, #16]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	f080 8092 	bcs.w	8005b3c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8a3a      	ldrh	r2, [r7, #16]
 8005a1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d02b      	beq.n	8005a80 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a36:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695a      	ldr	r2, [r3, #20]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0201 	bic.w	r2, r2, #1
 8005a46:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a56:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0210 	bic.w	r2, r2, #16
 8005a74:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fc fee3 	bl	8002846 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f876 	bl	8005b82 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a96:	e051      	b.n	8005b3c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d047      	beq.n	8005b40 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005ab0:	8a7b      	ldrh	r3, [r7, #18]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d044      	beq.n	8005b40 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ac4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695a      	ldr	r2, [r3, #20]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0201 	bic.w	r2, r2, #1
 8005ad4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0210 	bic.w	r2, r2, #16
 8005af2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005af4:	8a7b      	ldrh	r3, [r7, #18]
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f842 	bl	8005b82 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005afe:	e01f      	b.n	8005b40 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d008      	beq.n	8005b1c <HAL_UART_IRQHandler+0x324>
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f87f 	bl	8005c18 <UART_Transmit_IT>
    return;
 8005b1a:	e012      	b.n	8005b42 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <HAL_UART_IRQHandler+0x34a>
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f8c0 	bl	8005cb6 <UART_EndTransmit_IT>
    return;
 8005b36:	e004      	b.n	8005b42 <HAL_UART_IRQHandler+0x34a>
    return;
 8005b38:	bf00      	nop
 8005b3a:	e002      	b.n	8005b42 <HAL_UART_IRQHandler+0x34a>
      return;
 8005b3c:	bf00      	nop
 8005b3e:	e000      	b.n	8005b42 <HAL_UART_IRQHandler+0x34a>
      return;
 8005b40:	bf00      	nop
  }
}
 8005b42:	3728      	adds	r7, #40	; 0x28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	08005bf1 	.word	0x08005bf1

08005b4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr

08005b5e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr

08005b70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr

08005b82 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr

08005b98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695a      	ldr	r2, [r3, #20]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d107      	bne.n	8005bd8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0210 	bic.w	r2, r2, #16
 8005bd6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bc80      	pop	{r7}
 8005bee:	4770      	bx	lr

08005bf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f7ff ffb0 	bl	8005b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b21      	cmp	r3, #33	; 0x21
 8005c2a:	d13e      	bne.n	8005caa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c34:	d114      	bne.n	8005c60 <UART_Transmit_IT+0x48>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d110      	bne.n	8005c60 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	1c9a      	adds	r2, r3, #2
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	621a      	str	r2, [r3, #32]
 8005c5e:	e008      	b.n	8005c72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	1c59      	adds	r1, r3, #1
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	6211      	str	r1, [r2, #32]
 8005c6a:	781a      	ldrb	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10f      	bne.n	8005ca6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ca4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e000      	b.n	8005cac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005caa:	2302      	movs	r3, #2
  }
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr

08005cb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ccc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff ff38 	bl	8005b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b086      	sub	sp, #24
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b22      	cmp	r3, #34	; 0x22
 8005cf8:	f040 8099 	bne.w	8005e2e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d04:	d117      	bne.n	8005d36 <UART_Receive_IT+0x50>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d113      	bne.n	8005d36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	1c9a      	adds	r2, r3, #2
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	629a      	str	r2, [r3, #40]	; 0x28
 8005d34:	e026      	b.n	8005d84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d48:	d007      	beq.n	8005d5a <UART_Receive_IT+0x74>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10a      	bne.n	8005d68 <UART_Receive_IT+0x82>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	e008      	b.n	8005d7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	4619      	mov	r1, r3
 8005d92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d148      	bne.n	8005e2a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0220 	bic.w	r2, r2, #32
 8005da6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d123      	bne.n	8005e20 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0210 	bic.w	r2, r2, #16
 8005dec:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b10      	cmp	r3, #16
 8005dfa:	d10a      	bne.n	8005e12 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff feb2 	bl	8005b82 <HAL_UARTEx_RxEventCallback>
 8005e1e:	e002      	b.n	8005e26 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff fe9c 	bl	8005b5e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e002      	b.n	8005e30 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e000      	b.n	8005e30 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005e2e:	2302      	movs	r3, #2
  }
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005e72:	f023 030c 	bic.w	r3, r3, #12
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699a      	ldr	r2, [r3, #24]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a2c      	ldr	r2, [pc, #176]	; (8005f4c <UART_SetConfig+0x114>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d103      	bne.n	8005ea8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ea0:	f7fe fe9e 	bl	8004be0 <HAL_RCC_GetPCLK2Freq>
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	e002      	b.n	8005eae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ea8:	f7fe fe86 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8005eac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009a      	lsls	r2, r3, #2
 8005eb8:	441a      	add	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	4a22      	ldr	r2, [pc, #136]	; (8005f50 <UART_SetConfig+0x118>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	0119      	lsls	r1, r3, #4
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009a      	lsls	r2, r3, #2
 8005ed8:	441a      	add	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ee4:	4b1a      	ldr	r3, [pc, #104]	; (8005f50 <UART_SetConfig+0x118>)
 8005ee6:	fba3 0302 	umull	r0, r3, r3, r2
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	2064      	movs	r0, #100	; 0x64
 8005eee:	fb00 f303 	mul.w	r3, r0, r3
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	3332      	adds	r3, #50	; 0x32
 8005ef8:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <UART_SetConfig+0x118>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f04:	4419      	add	r1, r3
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	009a      	lsls	r2, r3, #2
 8005f10:	441a      	add	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f1c:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <UART_SetConfig+0x118>)
 8005f1e:	fba3 0302 	umull	r0, r3, r3, r2
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	2064      	movs	r0, #100	; 0x64
 8005f26:	fb00 f303 	mul.w	r3, r0, r3
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	3332      	adds	r3, #50	; 0x32
 8005f30:	4a07      	ldr	r2, [pc, #28]	; (8005f50 <UART_SetConfig+0x118>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	f003 020f 	and.w	r2, r3, #15
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	440a      	add	r2, r1
 8005f42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f44:	bf00      	nop
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40013800 	.word	0x40013800
 8005f50:	51eb851f 	.word	0x51eb851f

08005f54 <DHT_Set_Pin_Output>:
#define DHT11_STARTTIME 18000
#define DHT22_STARTTIME 12000

#define TIME_OUT		10

static void DHT_Set_Pin_Output(DHT_HandleTypeDef* p_DHT){
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f5c:	f107 0308 	add.w	r3, r7, #8
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	605a      	str	r2, [r3, #4]
 8005f66:	609a      	str	r2, [r3, #8]
 8005f68:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	891b      	ldrh	r3, [r3, #8]
 8005f6e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f70:	2301      	movs	r3, #1
 8005f72:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f74:	2302      	movs	r3, #2
 8005f76:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f107 0208 	add.w	r2, r7, #8
 8005f80:	4611      	mov	r1, r2
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fc ff10 	bl	8002da8 <HAL_GPIO_Init>
}
 8005f88:	bf00      	nop
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <DHT_Set_Pin_Input>:

static void DHT_Set_Pin_Input(DHT_HandleTypeDef* p_DHT){
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f98:	f107 0308 	add.w	r3, r7, #8
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	605a      	str	r2, [r3, #4]
 8005fa2:	609a      	str	r2, [r3, #8]
 8005fa4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	891b      	ldrh	r3, [r3, #8]
 8005faa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f107 0208 	add.w	r2, r7, #8
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fc fef2 	bl	8002da8 <HAL_GPIO_Init>
}
 8005fc4:	bf00      	nop
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <DHT_Start>:

static void DHT_Start(DHT_HandleTypeDef* p_DHT){
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	DHT_Set_Pin_Output(p_DHT);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff ffbd 	bl	8005f54 <DHT_Set_Pin_Output>
	HAL_GPIO_WritePin(p_DHT->DHT_Port, p_DHT->DHT_Pin, 0);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6858      	ldr	r0, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	891b      	ldrh	r3, [r3, #8]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f7fd f87a 	bl	80030de <HAL_GPIO_WritePin>
	DELAY_US_Run((p_DHT->sensor_type == DHT11) ? DHT11_STARTTIME : DHT22_STARTTIME);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d102      	bne.n	8005ff8 <DHT_Start+0x2c>
 8005ff2:	f244 6350 	movw	r3, #18000	; 0x4650
 8005ff6:	e001      	b.n	8005ffc <DHT_Start+0x30>
 8005ff8:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 fa89 	bl	8006514 <DELAY_US_Run>
	HAL_GPIO_WritePin(p_DHT->DHT_Port, p_DHT->DHT_Pin, 1);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6858      	ldr	r0, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	891b      	ldrh	r3, [r3, #8]
 800600a:	2201      	movs	r2, #1
 800600c:	4619      	mov	r1, r3
 800600e:	f7fd f866 	bl	80030de <HAL_GPIO_WritePin>
}
 8006012:	bf00      	nop
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <DHT_Check_Response>:

static uint8_t DHT_Check_Response(DHT_HandleTypeDef* p_DHT){
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
	DHT_Set_Pin_Input(p_DHT);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff ffb4 	bl	8005f90 <DHT_Set_Pin_Input>
	DELAY_US_Run(40);
 8006028:	2028      	movs	r0, #40	; 0x28
 800602a:	f000 fa73 	bl	8006514 <DELAY_US_Run>
	if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	891b      	ldrh	r3, [r3, #8]
 8006036:	4619      	mov	r1, r3
 8006038:	4610      	mov	r0, r2
 800603a:	f7fd f839 	bl	80030b0 <HAL_GPIO_ReadPin>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10f      	bne.n	8006064 <DHT_Check_Response+0x4a>
		DELAY_US_Run(80);
 8006044:	2050      	movs	r0, #80	; 0x50
 8006046:	f000 fa65 	bl	8006514 <DELAY_US_Run>
		if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	891b      	ldrh	r3, [r3, #8]
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f7fd f82b 	bl	80030b0 <HAL_GPIO_ReadPin>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d103      	bne.n	8006068 <DHT_Check_Response+0x4e>
			return DHT_FAIL;
 8006060:	2300      	movs	r3, #0
 8006062:	e01a      	b.n	800609a <DHT_Check_Response+0x80>
		}
	} else{
		return DHT_FAIL;
 8006064:	2300      	movs	r3, #0
 8006066:	e018      	b.n	800609a <DHT_Check_Response+0x80>
	}

	uint32_t timer_out = HAL_GetTick();
 8006068:	f7fc fab2 	bl	80025d0 <HAL_GetTick>
 800606c:	60f8      	str	r0, [r7, #12]
	while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 800606e:	e008      	b.n	8006082 <DHT_Check_Response+0x68>
		if(HAL_GetTick() - timer_out > TIME_OUT){
 8006070:	f7fc faae 	bl	80025d0 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b0a      	cmp	r3, #10
 800607c:	d901      	bls.n	8006082 <DHT_Check_Response+0x68>
			return DHT_FAIL;
 800607e:	2300      	movs	r3, #0
 8006080:	e00b      	b.n	800609a <DHT_Check_Response+0x80>
	while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	891b      	ldrh	r3, [r3, #8]
 800608a:	4619      	mov	r1, r3
 800608c:	4610      	mov	r0, r2
 800608e:	f7fd f80f 	bl	80030b0 <HAL_GPIO_ReadPin>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1eb      	bne.n	8006070 <DHT_Check_Response+0x56>
		}
	}

	return DHT_OK;
 8006098:	2301      	movs	r3, #1
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <DHT_Read>:

static uint8_t DHT_Read(DHT_HandleTypeDef* p_DHT, uint8_t p_data[5]){
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b086      	sub	sp, #24
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
	DHT_Set_Pin_Input(p_DHT);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff ff6f 	bl	8005f90 <DHT_Set_Pin_Input>
	for(int i = 0; i < 5; i++){
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	e072      	b.n	800619e <DHT_Read+0xfc>
		for(int j = 0; j < 8; j++)
 80060b8:	2300      	movs	r3, #0
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	e069      	b.n	8006192 <DHT_Read+0xf0>
		{
			uint32_t timer_out = HAL_GetTick();
 80060be:	f7fc fa87 	bl	80025d0 <HAL_GetTick>
 80060c2:	60f8      	str	r0, [r7, #12]
			while(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 80060c4:	e008      	b.n	80060d8 <DHT_Read+0x36>
				if(HAL_GetTick() - timer_out > TIME_OUT){
 80060c6:	f7fc fa83 	bl	80025d0 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b0a      	cmp	r3, #10
 80060d2:	d901      	bls.n	80060d8 <DHT_Read+0x36>
					return DHT_FAIL;
 80060d4:	2300      	movs	r3, #0
 80060d6:	e066      	b.n	80061a6 <DHT_Read+0x104>
			while(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	891b      	ldrh	r3, [r3, #8]
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f7fc ffe4 	bl	80030b0 <HAL_GPIO_ReadPin>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0eb      	beq.n	80060c6 <DHT_Read+0x24>
				}
			}
			DELAY_US_Run(40);
 80060ee:	2028      	movs	r0, #40	; 0x28
 80060f0:	f000 fa10 	bl	8006514 <DELAY_US_Run>
			if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	891b      	ldrh	r3, [r3, #8]
 80060fc:	4619      	mov	r1, r3
 80060fe:	4610      	mov	r0, r2
 8006100:	f7fc ffd6 	bl	80030b0 <HAL_GPIO_ReadPin>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d115      	bne.n	8006136 <DHT_Read+0x94>
			{
				*(p_data + i) &= ~(1 << (7-j));
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	4413      	add	r3, r2
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	b25a      	sxtb	r2, r3
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f1c3 0307 	rsb	r3, r3, #7
 800611a:	2101      	movs	r1, #1
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	b25b      	sxtb	r3, r3
 8006122:	43db      	mvns	r3, r3
 8006124:	b25b      	sxtb	r3, r3
 8006126:	4013      	ands	r3, r2
 8006128:	b259      	sxtb	r1, r3
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	4413      	add	r3, r2
 8006130:	b2ca      	uxtb	r2, r1
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	e012      	b.n	800615c <DHT_Read+0xba>
			} else {
				*(p_data + i) |= (1 << (7-j));
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	4413      	add	r3, r2
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	b25a      	sxtb	r2, r3
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f1c3 0307 	rsb	r3, r3, #7
 8006146:	2101      	movs	r1, #1
 8006148:	fa01 f303 	lsl.w	r3, r1, r3
 800614c:	b25b      	sxtb	r3, r3
 800614e:	4313      	orrs	r3, r2
 8006150:	b259      	sxtb	r1, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	4413      	add	r3, r2
 8006158:	b2ca      	uxtb	r2, r1
 800615a:	701a      	strb	r2, [r3, #0]
			}
			timer_out = HAL_GetTick();
 800615c:	f7fc fa38 	bl	80025d0 <HAL_GetTick>
 8006160:	60f8      	str	r0, [r7, #12]
			while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8006162:	e008      	b.n	8006176 <DHT_Read+0xd4>
				if(HAL_GetTick() - timer_out > TIME_OUT){
 8006164:	f7fc fa34 	bl	80025d0 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b0a      	cmp	r3, #10
 8006170:	d901      	bls.n	8006176 <DHT_Read+0xd4>
					return DHT_FAIL;
 8006172:	2300      	movs	r3, #0
 8006174:	e017      	b.n	80061a6 <DHT_Read+0x104>
			while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	891b      	ldrh	r3, [r3, #8]
 800617e:	4619      	mov	r1, r3
 8006180:	4610      	mov	r0, r2
 8006182:	f7fc ff95 	bl	80030b0 <HAL_GPIO_ReadPin>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1eb      	bne.n	8006164 <DHT_Read+0xc2>
		for(int j = 0; j < 8; j++)
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	3301      	adds	r3, #1
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b07      	cmp	r3, #7
 8006196:	dd92      	ble.n	80060be <DHT_Read+0x1c>
	for(int i = 0; i < 5; i++){
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	3301      	adds	r3, #1
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	dd89      	ble.n	80060b8 <DHT_Read+0x16>
				}
			}
		}
	}
	return DHT_OK;
 80061a4:	2301      	movs	r3, #1
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <DHT_Init>:

void DHT_Init(DHT_HandleTypeDef* p_DHT, TIM_HandleTypeDef* p_htim, uint8_t p_sensor_type, GPIO_TypeDef* p_Port, uint16_t p_Pin){
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	603b      	str	r3, [r7, #0]
 80061ba:	4613      	mov	r3, r2
 80061bc:	71fb      	strb	r3, [r7, #7]
	DELAY_US_Init(p_htim);
 80061be:	68b8      	ldr	r0, [r7, #8]
 80061c0:	f000 f99a 	bl	80064f8 <DELAY_US_Init>
	p_DHT->sensor_type = p_sensor_type;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	79fa      	ldrb	r2, [r7, #7]
 80061c8:	701a      	strb	r2, [r3, #0]
	p_DHT->DHT_Port = p_Port;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	605a      	str	r2, [r3, #4]
	p_DHT->DHT_Pin = p_Pin;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8b3a      	ldrh	r2, [r7, #24]
 80061d4:	811a      	strh	r2, [r3, #8]
	p_DHT->temperature = 0.0;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	60da      	str	r2, [r3, #12]
	p_DHT->huminity = 0.0;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	611a      	str	r2, [r3, #16]
}
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <DHT_Read_Value>:

uint8_t DHT_Read_Value(DHT_HandleTypeDef* p_DHT){
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
	uint8_t t_data[5] = {};
 80061f6:	2300      	movs	r3, #0
 80061f8:	60bb      	str	r3, [r7, #8]
 80061fa:	2300      	movs	r3, #0
 80061fc:	733b      	strb	r3, [r7, #12]
	DHT_Start(p_DHT);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff fee4 	bl	8005fcc <DHT_Start>
	if(DHT_Check_Response(p_DHT) == DHT_FAIL)
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff ff08 	bl	800601a <DHT_Check_Response>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <DHT_Read_Value+0x26>
		return DHT_FAIL;
 8006210:	2300      	movs	r3, #0
 8006212:	e044      	b.n	800629e <DHT_Read_Value+0xb0>
	if(DHT_Read(p_DHT, t_data) == DHT_FAIL)
 8006214:	f107 0308 	add.w	r3, r7, #8
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff ff41 	bl	80060a2 <DHT_Read>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <DHT_Read_Value+0x3c>
		return DHT_FAIL;
 8006226:	2300      	movs	r3, #0
 8006228:	e039      	b.n	800629e <DHT_Read_Value+0xb0>
	if(((t_data[0] + t_data[1] + t_data[2] + t_data[3]) & 0xFF) != t_data[4])
 800622a:	7a3b      	ldrb	r3, [r7, #8]
 800622c:	461a      	mov	r2, r3
 800622e:	7a7b      	ldrb	r3, [r7, #9]
 8006230:	4413      	add	r3, r2
 8006232:	7aba      	ldrb	r2, [r7, #10]
 8006234:	4413      	add	r3, r2
 8006236:	7afa      	ldrb	r2, [r7, #11]
 8006238:	4413      	add	r3, r2
 800623a:	b2db      	uxtb	r3, r3
 800623c:	7b3a      	ldrb	r2, [r7, #12]
 800623e:	4293      	cmp	r3, r2
 8006240:	d001      	beq.n	8006246 <DHT_Read_Value+0x58>
		return DHT_FAIL;
 8006242:	2300      	movs	r3, #0
 8006244:	e02b      	b.n	800629e <DHT_Read_Value+0xb0>

	if(t_data[0] < 100 && t_data[0] > 0)
 8006246:	7a3b      	ldrb	r3, [r7, #8]
 8006248:	2b63      	cmp	r3, #99	; 0x63
 800624a:	d813      	bhi.n	8006274 <DHT_Read_Value+0x86>
 800624c:	7a3b      	ldrb	r3, [r7, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d010      	beq.n	8006274 <DHT_Read_Value+0x86>
		p_DHT->huminity = t_data[0] / 1.0;
 8006252:	7a3b      	ldrb	r3, [r7, #8]
 8006254:	4618      	mov	r0, r3
 8006256:	f7fa f8d3 	bl	8000400 <__aeabi_i2d>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4610      	mov	r0, r2
 8006260:	4619      	mov	r1, r3
 8006262:	f7fa f937 	bl	80004d4 <__aeabi_d2f>
 8006266:	4602      	mov	r2, r0
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	611a      	str	r2, [r3, #16]
	else
		return DHT_FAIL;

	if(t_data[2] < 100 && t_data[2] > 0)
 800626c:	7abb      	ldrb	r3, [r7, #10]
 800626e:	2b63      	cmp	r3, #99	; 0x63
 8006270:	d902      	bls.n	8006278 <DHT_Read_Value+0x8a>
 8006272:	e013      	b.n	800629c <DHT_Read_Value+0xae>
		return DHT_FAIL;
 8006274:	2300      	movs	r3, #0
 8006276:	e012      	b.n	800629e <DHT_Read_Value+0xb0>
	if(t_data[2] < 100 && t_data[2] > 0)
 8006278:	7abb      	ldrb	r3, [r7, #10]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00e      	beq.n	800629c <DHT_Read_Value+0xae>
		p_DHT->temperature = t_data[2] / 1.0;
 800627e:	7abb      	ldrb	r3, [r7, #10]
 8006280:	4618      	mov	r0, r3
 8006282:	f7fa f8bd 	bl	8000400 <__aeabi_i2d>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4610      	mov	r0, r2
 800628c:	4619      	mov	r1, r3
 800628e:	f7fa f921 	bl	80004d4 <__aeabi_d2f>
 8006292:	4602      	mov	r2, r0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60da      	str	r2, [r3, #12]
	else
		return DHT_FAIL;

	return DHT_OK;
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <DHT_Read_Value+0xb0>
		return DHT_FAIL;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <BCD_To_DEC>:

#define DS3231_ADDRESS			(0x68 << 1)
#define SECOND_VALUE_ADDRESS	(0x00)
#define DATE_VALUE_ADDRESS		(0x04)

static uint8_t BCD_To_DEC(uint8_t p_BCD_value){
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	4603      	mov	r3, r0
 80062ae:	71fb      	strb	r3, [r7, #7]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	0092      	lsls	r2, r2, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	4413      	add	r3, r2
 80062ca:	b2db      	uxtb	r3, r3
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bc80      	pop	{r7}
 80062d4:	4770      	bx	lr
	...

080062d8 <DEC_To_BCD>:

static uint8_t DEC_To_BCD(uint8_t p_DEC_value){
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	71fb      	strb	r3, [r7, #7]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	4a0d      	ldr	r2, [pc, #52]	; (800631c <DEC_To_BCD+0x44>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	08db      	lsrs	r3, r3, #3
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	b258      	sxtb	r0, r3
 80062f2:	79fa      	ldrb	r2, [r7, #7]
 80062f4:	4b09      	ldr	r3, [pc, #36]	; (800631c <DEC_To_BCD+0x44>)
 80062f6:	fba3 1302 	umull	r1, r3, r3, r2
 80062fa:	08d9      	lsrs	r1, r3, #3
 80062fc:	460b      	mov	r3, r1
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	b2db      	uxtb	r3, r3
 8006308:	b25b      	sxtb	r3, r3
 800630a:	4303      	orrs	r3, r0
 800630c:	b25b      	sxtb	r3, r3
 800630e:	b2db      	uxtb	r3, r3
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	cccccccd 	.word	0xcccccccd

08006320 <DS3231_Init>:

void DS3231_Init(DS3231_HandleTypeDef *p_ds3231, I2C_HandleTypeDef *p_hi2c){
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
	p_ds3231->hi2c = p_hi2c;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	609a      	str	r2, [r3, #8]
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	bc80      	pop	{r7}
 8006338:	4770      	bx	lr

0800633a <DS3231_Set_Time>:

void DS3231_Set_Time(DS3231_HandleTypeDef *p_ds3231, uint8_t p_hour, uint8_t p_minute, uint8_t p_second, uint8_t p_day){
 800633a:	b580      	push	{r7, lr}
 800633c:	b088      	sub	sp, #32
 800633e:	af04      	add	r7, sp, #16
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	4608      	mov	r0, r1
 8006344:	4611      	mov	r1, r2
 8006346:	461a      	mov	r2, r3
 8006348:	4603      	mov	r3, r0
 800634a:	70fb      	strb	r3, [r7, #3]
 800634c:	460b      	mov	r3, r1
 800634e:	70bb      	strb	r3, [r7, #2]
 8006350:	4613      	mov	r3, r2
 8006352:	707b      	strb	r3, [r7, #1]
	uint8_t t_i2c_buffer[4];
	t_i2c_buffer[0] = DEC_To_BCD(p_second);
 8006354:	787b      	ldrb	r3, [r7, #1]
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff ffbe 	bl	80062d8 <DEC_To_BCD>
 800635c:	4603      	mov	r3, r0
 800635e:	733b      	strb	r3, [r7, #12]
	t_i2c_buffer[1] = DEC_To_BCD(p_minute);
 8006360:	78bb      	ldrb	r3, [r7, #2]
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff ffb8 	bl	80062d8 <DEC_To_BCD>
 8006368:	4603      	mov	r3, r0
 800636a:	737b      	strb	r3, [r7, #13]
	t_i2c_buffer[2] = DEC_To_BCD(p_hour) & (~USING_12_HOURS_TIME);
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff ffb2 	bl	80062d8 <DEC_To_BCD>
 8006374:	4603      	mov	r3, r0
 8006376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800637a:	b2db      	uxtb	r3, r3
 800637c:	73bb      	strb	r3, [r7, #14]
	t_i2c_buffer[3] = DEC_To_BCD(p_day);
 800637e:	7e3b      	ldrb	r3, [r7, #24]
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff ffa9 	bl	80062d8 <DEC_To_BCD>
 8006386:	4603      	mov	r3, r0
 8006388:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6898      	ldr	r0, [r3, #8]
 800638e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006392:	9302      	str	r3, [sp, #8]
 8006394:	2304      	movs	r3, #4
 8006396:	9301      	str	r3, [sp, #4]
 8006398:	f107 030c 	add.w	r3, r7, #12
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	2301      	movs	r3, #1
 80063a0:	2200      	movs	r2, #0
 80063a2:	21d0      	movs	r1, #208	; 0xd0
 80063a4:	f7fd f8f6 	bl	8003594 <HAL_I2C_Mem_Write>
}
 80063a8:	bf00      	nop
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <DS3231_Get_Time>:

uint8_t DS3231_Get_Time(DS3231_HandleTypeDef *p_ds3231){
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af04      	add	r7, sp, #16
 80063b6:	6078      	str	r0, [r7, #4]
	uint8_t t_i2c_buffer[4];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000) != HAL_OK){
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6898      	ldr	r0, [r3, #8]
 80063bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063c0:	9302      	str	r3, [sp, #8]
 80063c2:	2304      	movs	r3, #4
 80063c4:	9301      	str	r3, [sp, #4]
 80063c6:	f107 030c 	add.w	r3, r7, #12
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	2301      	movs	r3, #1
 80063ce:	2200      	movs	r2, #0
 80063d0:	21d0      	movs	r1, #208	; 0xd0
 80063d2:	f7fd f9d9 	bl	8003788 <HAL_I2C_Mem_Read>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <DS3231_Get_Time+0x30>
		return DS3231_FAIL;
 80063dc:	2300      	movs	r3, #0
 80063de:	e020      	b.n	8006422 <DS3231_Get_Time+0x72>
	}
	p_ds3231->current_second = BCD_To_DEC(t_i2c_buffer[0]);
 80063e0:	7b3b      	ldrb	r3, [r7, #12]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff ff5f 	bl	80062a6 <BCD_To_DEC>
 80063e8:	4603      	mov	r3, r0
 80063ea:	461a      	mov	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	709a      	strb	r2, [r3, #2]
	p_ds3231->current_minute = BCD_To_DEC(t_i2c_buffer[1]);
 80063f0:	7b7b      	ldrb	r3, [r7, #13]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff ff57 	bl	80062a6 <BCD_To_DEC>
 80063f8:	4603      	mov	r3, r0
 80063fa:	461a      	mov	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	705a      	strb	r2, [r3, #1]
	p_ds3231->current_hour = BCD_To_DEC(t_i2c_buffer[2]);
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff ff4f 	bl	80062a6 <BCD_To_DEC>
 8006408:	4603      	mov	r3, r0
 800640a:	461a      	mov	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	701a      	strb	r2, [r3, #0]
	p_ds3231->current_day = BCD_To_DEC(t_i2c_buffer[3]);
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff ff47 	bl	80062a6 <BCD_To_DEC>
 8006418:	4603      	mov	r3, r0
 800641a:	461a      	mov	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	70da      	strb	r2, [r3, #3]
	return DS3231_OK;
 8006420:	2301      	movs	r3, #1
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <DS3231_Set_Date>:

void DS3231_Set_Date(DS3231_HandleTypeDef *p_ds3231, uint8_t p_date, uint8_t p_month, uint8_t p_year){
 800642a:	b580      	push	{r7, lr}
 800642c:	b088      	sub	sp, #32
 800642e:	af04      	add	r7, sp, #16
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	4608      	mov	r0, r1
 8006434:	4611      	mov	r1, r2
 8006436:	461a      	mov	r2, r3
 8006438:	4603      	mov	r3, r0
 800643a:	70fb      	strb	r3, [r7, #3]
 800643c:	460b      	mov	r3, r1
 800643e:	70bb      	strb	r3, [r7, #2]
 8006440:	4613      	mov	r3, r2
 8006442:	707b      	strb	r3, [r7, #1]
	uint8_t t_i2c_buffer[3];
	t_i2c_buffer[0] = DEC_To_BCD(p_date);
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff ff46 	bl	80062d8 <DEC_To_BCD>
 800644c:	4603      	mov	r3, r0
 800644e:	733b      	strb	r3, [r7, #12]
	t_i2c_buffer[1] = DEC_To_BCD(p_month);
 8006450:	78bb      	ldrb	r3, [r7, #2]
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff ff40 	bl	80062d8 <DEC_To_BCD>
 8006458:	4603      	mov	r3, r0
 800645a:	737b      	strb	r3, [r7, #13]
	t_i2c_buffer[2] = DEC_To_BCD(p_year);
 800645c:	787b      	ldrb	r3, [r7, #1]
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff ff3a 	bl	80062d8 <DEC_To_BCD>
 8006464:	4603      	mov	r3, r0
 8006466:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6898      	ldr	r0, [r3, #8]
 800646c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006470:	9302      	str	r3, [sp, #8]
 8006472:	2303      	movs	r3, #3
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	f107 030c 	add.w	r3, r7, #12
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	2301      	movs	r3, #1
 800647e:	2204      	movs	r2, #4
 8006480:	21d0      	movs	r1, #208	; 0xd0
 8006482:	f7fd f887 	bl	8003594 <HAL_I2C_Mem_Write>
}
 8006486:	bf00      	nop
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <DS3231_Get_Date>:

uint8_t DS3231_Get_Date(DS3231_HandleTypeDef *p_ds3231){
 800648e:	b580      	push	{r7, lr}
 8006490:	b088      	sub	sp, #32
 8006492:	af04      	add	r7, sp, #16
 8006494:	6078      	str	r0, [r7, #4]
	uint8_t t_i2c_buffer[3];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000) != HAL_OK){
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6898      	ldr	r0, [r3, #8]
 800649a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800649e:	9302      	str	r3, [sp, #8]
 80064a0:	2303      	movs	r3, #3
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	f107 030c 	add.w	r3, r7, #12
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	2301      	movs	r3, #1
 80064ac:	2204      	movs	r2, #4
 80064ae:	21d0      	movs	r1, #208	; 0xd0
 80064b0:	f7fd f96a 	bl	8003788 <HAL_I2C_Mem_Read>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <DS3231_Get_Date+0x30>
		return DS3231_FAIL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e018      	b.n	80064f0 <DS3231_Get_Date+0x62>
	}
	p_ds3231->current_date = BCD_To_DEC(t_i2c_buffer[0]);
 80064be:	7b3b      	ldrb	r3, [r7, #12]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff fef0 	bl	80062a6 <BCD_To_DEC>
 80064c6:	4603      	mov	r3, r0
 80064c8:	461a      	mov	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	711a      	strb	r2, [r3, #4]
	p_ds3231->current_month = BCD_To_DEC(t_i2c_buffer[1]);
 80064ce:	7b7b      	ldrb	r3, [r7, #13]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7ff fee8 	bl	80062a6 <BCD_To_DEC>
 80064d6:	4603      	mov	r3, r0
 80064d8:	461a      	mov	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	715a      	strb	r2, [r3, #5]
	p_ds3231->current_year = BCD_To_DEC(t_i2c_buffer[2]);
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fee0 	bl	80062a6 <BCD_To_DEC>
 80064e6:	4603      	mov	r3, r0
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	80da      	strh	r2, [r3, #6]
	return DS3231_OK;
 80064ee:	2301      	movs	r3, #1
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <DELAY_US_Init>:
#include "Delay_us.h"

TIM_HandleTypeDef *delay_timer;

void DELAY_US_Init(TIM_HandleTypeDef *p_htim){
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	delay_timer = p_htim;
 8006500:	4a03      	ldr	r2, [pc, #12]	; (8006510 <DELAY_US_Init+0x18>)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6013      	str	r3, [r2, #0]
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	bc80      	pop	{r7}
 800650e:	4770      	bx	lr
 8006510:	200004c0 	.word	0x200004c0

08006514 <DELAY_US_Run>:

void DELAY_US_Run(uint32_t p_delay_time){
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
	delay_timer->Instance->CNT = 0;
 800651c:	4b0d      	ldr	r3, [pc, #52]	; (8006554 <DELAY_US_Run+0x40>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2200      	movs	r2, #0
 8006524:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(delay_timer);
 8006526:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <DELAY_US_Run+0x40>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fbda 	bl	8004ce4 <HAL_TIM_Base_Start>
	while(delay_timer->Instance->CNT < p_delay_time);
 8006530:	bf00      	nop
 8006532:	4b08      	ldr	r3, [pc, #32]	; (8006554 <DELAY_US_Run+0x40>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	429a      	cmp	r2, r3
 800653e:	d8f8      	bhi.n	8006532 <DELAY_US_Run+0x1e>
	HAL_TIM_Base_Stop(delay_timer);
 8006540:	4b04      	ldr	r3, [pc, #16]	; (8006554 <DELAY_US_Run+0x40>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe fc17 	bl	8004d78 <HAL_TIM_Base_Stop>
}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	200004c0 	.word	0x200004c0

08006558 <HAL_TIM_IC_CaptureCallback>:
encoder_callback_function_t __ENCODER_Forward_Callback = NULL;
encoder_callback_function_t __ENCODER_Backward_Callback = NULL;

#ifdef _USING_LIBRARY_ENCODER_IT_FUNCTION_
extern ENCODER_HandleTypeDef h_encoder;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
	if(h_encoder.encoder_timer->Instance == htim->Instance){
 8006560:	4b06      	ldr	r3, [pc, #24]	; (800657c <HAL_TIM_IC_CaptureCallback+0x24>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d102      	bne.n	8006574 <HAL_TIM_IC_CaptureCallback+0x1c>
		ENCODER_IT_Handle(&h_encoder);
 800656e:	4803      	ldr	r0, [pc, #12]	; (800657c <HAL_TIM_IC_CaptureCallback+0x24>)
 8006570:	f000 f82e 	bl	80065d0 <ENCODER_IT_Handle>
	}
}
 8006574:	bf00      	nop
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20000290 	.word	0x20000290

08006580 <ENCODER_Init>:
#endif

void ENCODER_Init(ENCODER_HandleTypeDef *p_encoder, TIM_HandleTypeDef *p_encoder_timer){
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
	p_encoder->encoder_timer = p_encoder_timer;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	601a      	str	r2, [r3, #0]
	p_encoder->current_possition = 0;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	809a      	strh	r2, [r3, #4]
	p_encoder->last_position = 0;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	80da      	strh	r2, [r3, #6]
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr
	...

080065a8 <ENCODER_Set_Callback_Function>:

void ENCODER_Set_Callback_Function(encoder_callback_function_t p_forward_callback_function, encoder_callback_function_t p_backward_callback_function){
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
	__ENCODER_Forward_Callback = p_forward_callback_function;
 80065b2:	4a05      	ldr	r2, [pc, #20]	; (80065c8 <ENCODER_Set_Callback_Function+0x20>)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6013      	str	r3, [r2, #0]
	__ENCODER_Backward_Callback = p_backward_callback_function;
 80065b8:	4a04      	ldr	r2, [pc, #16]	; (80065cc <ENCODER_Set_Callback_Function+0x24>)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	6013      	str	r3, [r2, #0]
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr
 80065c8:	200004c4 	.word	0x200004c4
 80065cc:	200004c8 	.word	0x200004c8

080065d0 <ENCODER_IT_Handle>:

void ENCODER_IT_Handle(ENCODER_HandleTypeDef *p_encoder){
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	uint32_t t_counter = __HAL_TIM_GET_COUNTER(p_encoder->encoder_timer);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	60fb      	str	r3, [r7, #12]
	p_encoder->current_possition =  (int16_t)t_counter / 4;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	b21b      	sxth	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	da00      	bge.n	80065ec <ENCODER_IT_Handle+0x1c>
 80065ea:	3303      	adds	r3, #3
 80065ec:	109b      	asrs	r3, r3, #2
 80065ee:	b21a      	sxth	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	809a      	strh	r2, [r3, #4]
}
 80065f4:	bf00      	nop
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr
	...

08006600 <ENCODER_Handle>:

void ENCODER_Handle(ENCODER_HandleTypeDef *p_encoder){
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
	if(p_encoder->current_possition > p_encoder->last_position){
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006614:	429a      	cmp	r2, r3
 8006616:	dd0c      	ble.n	8006632 <ENCODER_Handle+0x32>
		if(__ENCODER_Forward_Callback != NULL){
 8006618:	4b12      	ldr	r3, [pc, #72]	; (8006664 <ENCODER_Handle+0x64>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <ENCODER_Handle+0x28>
			__ENCODER_Forward_Callback(p_encoder);
 8006620:	4b10      	ldr	r3, [pc, #64]	; (8006664 <ENCODER_Handle+0x64>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	4798      	blx	r3
		}
		p_encoder->last_position = p_encoder->current_possition;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	80da      	strh	r2, [r3, #6]
	}
	if(p_encoder->current_possition < p_encoder->last_position){
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800663e:	429a      	cmp	r2, r3
 8006640:	da0c      	bge.n	800665c <ENCODER_Handle+0x5c>
		if(__ENCODER_Backward_Callback != NULL){
 8006642:	4b09      	ldr	r3, [pc, #36]	; (8006668 <ENCODER_Handle+0x68>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <ENCODER_Handle+0x52>
			__ENCODER_Backward_Callback(p_encoder);
 800664a:	4b07      	ldr	r3, [pc, #28]	; (8006668 <ENCODER_Handle+0x68>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	4798      	blx	r3
		}
		p_encoder->last_position = p_encoder->current_possition;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	80da      	strh	r2, [r3, #6]
	}
}
 800665c:	bf00      	nop
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	200004c4 	.word	0x200004c4
 8006668:	200004c8 	.word	0x200004c8

0800666c <LCD_Init>:
#include "LCD_I2C.h"

void LCD_Init(LCD_I2C_HandleTypeDef *p_lcd, I2C_HandleTypeDef *p_hi2c, uint8_t p_cols, uint8_t p_rows, uint8_t p_SLAVE_ADDRESS){
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	4611      	mov	r1, r2
 8006678:	461a      	mov	r2, r3
 800667a:	460b      	mov	r3, r1
 800667c:	71fb      	strb	r3, [r7, #7]
 800667e:	4613      	mov	r3, r2
 8006680:	71bb      	strb	r3, [r7, #6]
	p_lcd->SLAVE_ADDRESS = p_SLAVE_ADDRESS;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	7e3a      	ldrb	r2, [r7, #24]
 8006686:	709a      	strb	r2, [r3, #2]
	p_lcd->LCD_Backlight_Value = LCD_BACKLIGHT;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2208      	movs	r2, #8
 800668c:	70da      	strb	r2, [r3, #3]
	p_lcd->LCD_Columns = p_cols;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	79fa      	ldrb	r2, [r7, #7]
 8006692:	701a      	strb	r2, [r3, #0]
	p_lcd->LCD_Rows = p_rows;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	79ba      	ldrb	r2, [r7, #6]
 8006698:	705a      	strb	r2, [r3, #1]
	p_lcd->hi2c = p_hi2c;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	609a      	str	r2, [r3, #8]
	p_lcd->LCD_Display_Option = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2204      	movs	r2, #4
 80066a4:	711a      	strb	r2, [r3, #4]

	// 4 bit initialization
	HAL_Delay(50);  // wait for >40ms
 80066a6:	2032      	movs	r0, #50	; 0x32
 80066a8:	f7fb ff9c 	bl	80025e4 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x30);
 80066ac:	2130      	movs	r1, #48	; 0x30
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 f920 	bl	80068f4 <LCD_Send_Command>
	HAL_Delay(5);  // wait for >4.1ms
 80066b4:	2005      	movs	r0, #5
 80066b6:	f7fb ff95 	bl	80025e4 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x30);
 80066ba:	2130      	movs	r1, #48	; 0x30
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f919 	bl	80068f4 <LCD_Send_Command>
	HAL_Delay(1);  // wait for >100us
 80066c2:	2001      	movs	r0, #1
 80066c4:	f7fb ff8e 	bl	80025e4 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x30);
 80066c8:	2130      	movs	r1, #48	; 0x30
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f912 	bl	80068f4 <LCD_Send_Command>
	HAL_Delay(10);
 80066d0:	200a      	movs	r0, #10
 80066d2:	f7fb ff87 	bl	80025e4 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x20);  // 4bit mode
 80066d6:	2120      	movs	r1, #32
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f90b 	bl	80068f4 <LCD_Send_Command>
	HAL_Delay(10);
 80066de:	200a      	movs	r0, #10
 80066e0:	f7fb ff80 	bl	80025e4 <HAL_Delay>

	// Display initialization
	LCD_Send_Command(p_lcd, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80066e4:	2128      	movs	r1, #40	; 0x28
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 f904 	bl	80068f4 <LCD_Send_Command>
	HAL_Delay(1);
 80066ec:	2001      	movs	r0, #1
 80066ee:	f7fb ff79 	bl	80025e4 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80066f2:	2108      	movs	r1, #8
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f8fd 	bl	80068f4 <LCD_Send_Command>
	HAL_Delay(1);
 80066fa:	2001      	movs	r0, #1
 80066fc:	f7fb ff72 	bl	80025e4 <HAL_Delay>

	LCD_Send_Command(p_lcd, 0x01);  // clear display
 8006700:	2101      	movs	r1, #1
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f8f6 	bl	80068f4 <LCD_Send_Command>
	HAL_Delay(1);
 8006708:	2001      	movs	r0, #1
 800670a:	f7fb ff6b 	bl	80025e4 <HAL_Delay>
	HAL_Delay(1);
 800670e:	2001      	movs	r0, #1
 8006710:	f7fb ff68 	bl	80025e4 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8006714:	2106      	movs	r1, #6
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f8ec 	bl	80068f4 <LCD_Send_Command>
	HAL_Delay(1);
 800671c:	2001      	movs	r0, #1
 800671e:	f7fb ff61 	bl	80025e4 <HAL_Delay>
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	791b      	ldrb	r3, [r3, #4]
 8006726:	f043 0308 	orr.w	r3, r3, #8
 800672a:	b2db      	uxtb	r3, r3
 800672c:	4619      	mov	r1, r3
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 f8e0 	bl	80068f4 <LCD_Send_Command>

	HAL_Delay(500);
 8006734:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006738:	f7fb ff54 	bl	80025e4 <HAL_Delay>
}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <LCD_Write>:

void LCD_Write(LCD_I2C_HandleTypeDef *p_lcd, const char *p_str, ...){
 8006744:	b40e      	push	{r1, r2, r3}
 8006746:	b580      	push	{r7, lr}
 8006748:	b08b      	sub	sp, #44	; 0x2c
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
	char t_stringArray[21] = {};
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	f107 0310 	add.w	r3, r7, #16
 8006756:	2200      	movs	r2, #0
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	605a      	str	r2, [r3, #4]
 800675c:	609a      	str	r2, [r3, #8]
 800675e:	60da      	str	r2, [r3, #12]
 8006760:	741a      	strb	r2, [r3, #16]

	va_list t_args;
	va_start(t_args, p_str);
 8006762:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006766:	60bb      	str	r3, [r7, #8]
	vsprintf(t_stringArray, p_str, t_args);
 8006768:	f107 030c 	add.w	r3, r7, #12
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fc03 	bl	8006f7c <vsiprintf>
	va_end(t_args);

	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 8006776:	2300      	movs	r3, #0
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
 800677a:	e00b      	b.n	8006794 <LCD_Write+0x50>
		LCD_Send_Data(p_lcd, t_stringArray[i]);
 800677c:	f107 020c 	add.w	r2, r7, #12
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	4413      	add	r3, r2
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f8ee 	bl	800696a <LCD_Send_Data>
	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	3301      	adds	r3, #1
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
 8006794:	f107 030c 	add.w	r3, r7, #12
 8006798:	4618      	mov	r0, r3
 800679a:	f7f9 fcd7 	bl	800014c <strlen>
 800679e:	4602      	mov	r2, r0
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d905      	bls.n	80067b2 <LCD_Write+0x6e>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	4293      	cmp	r3, r2
 80067b0:	dbe4      	blt.n	800677c <LCD_Write+0x38>
	}
}
 80067b2:	bf00      	nop
 80067b4:	372c      	adds	r7, #44	; 0x2c
 80067b6:	46bd      	mov	sp, r7
 80067b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067bc:	b003      	add	sp, #12
 80067be:	4770      	bx	lr

080067c0 <LCD_Clear>:

void LCD_Write_Custom_Char(LCD_I2C_HandleTypeDef *p_lcd, char p_location){
	LCD_Send_Data(p_lcd, p_location);
}

void LCD_Clear(LCD_I2C_HandleTypeDef *p_lcd){
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 80067c8:	2101      	movs	r1, #1
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f892 	bl	80068f4 <LCD_Send_Command>
	HAL_Delay(2);
 80067d0:	2002      	movs	r0, #2
 80067d2:	f7fb ff07 	bl	80025e4 <HAL_Delay>
	LCD_Set_Cursor(p_lcd, 0, 0);
 80067d6:	2200      	movs	r2, #0
 80067d8:	2100      	movs	r1, #0
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f804 	bl	80067e8 <LCD_Set_Cursor>
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <LCD_Set_Cursor>:

void LCD_Set_Cursor(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_col, uint8_t p_row){
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
 80067f4:	4613      	mov	r3, r2
 80067f6:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 80067f8:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <LCD_Set_Cursor+0x50>)
 80067fa:	60fb      	str	r3, [r7, #12]
	if(p_row > p_lcd->LCD_Rows) p_row = p_lcd->LCD_Rows - 1;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	785b      	ldrb	r3, [r3, #1]
 8006800:	78ba      	ldrb	r2, [r7, #2]
 8006802:	429a      	cmp	r2, r3
 8006804:	d903      	bls.n	800680e <LCD_Set_Cursor+0x26>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	785b      	ldrb	r3, [r3, #1]
 800680a:	3b01      	subs	r3, #1
 800680c:	70bb      	strb	r3, [r7, #2]
	LCD_Send_Command(p_lcd, LCD_SETDDRAMADDR | (p_col + t_row_Offets[p_row]));
 800680e:	78bb      	ldrb	r3, [r7, #2]
 8006810:	3310      	adds	r3, #16
 8006812:	443b      	add	r3, r7
 8006814:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	4413      	add	r3, r2
 800681c:	b2db      	uxtb	r3, r3
 800681e:	b25b      	sxtb	r3, r3
 8006820:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006824:	b25b      	sxtb	r3, r3
 8006826:	b2db      	uxtb	r3, r3
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f862 	bl	80068f4 <LCD_Send_Command>
}
 8006830:	bf00      	nop
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	54144000 	.word	0x54144000

0800683c <LCD_Create_Char>:

void LCD_Create_Char(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_location, uint8_t p_charMap[]){
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	460b      	mov	r3, r1
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	72fb      	strb	r3, [r7, #11]
	p_location &= 7; // only have 8 locations 0-7.
 800684a:	7afb      	ldrb	r3, [r7, #11]
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	72fb      	strb	r3, [r7, #11]
	p_location <<= 3;
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	00db      	lsls	r3, r3, #3
 8006856:	72fb      	strb	r3, [r7, #11]
	LCD_Send_Command(p_lcd, LCD_SETCGRAMADDR | p_location);
 8006858:	7afb      	ldrb	r3, [r7, #11]
 800685a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800685e:	b2db      	uxtb	r3, r3
 8006860:	4619      	mov	r1, r3
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 f846 	bl	80068f4 <LCD_Send_Command>
	for(int i = 0; i < 8; i++) LCD_Send_Data(p_lcd, p_charMap[i]);
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	e00a      	b.n	8006884 <LCD_Create_Char+0x48>
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	4413      	add	r3, r2
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	4619      	mov	r1, r3
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f876 	bl	800696a <LCD_Send_Data>
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	3301      	adds	r3, #1
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	2b07      	cmp	r3, #7
 8006888:	ddf1      	ble.n	800686e <LCD_Create_Char+0x32>
}
 800688a:	bf00      	nop
 800688c:	bf00      	nop
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <LCD_Cursor_Blink>:
void LCD_No_Backlight(LCD_I2C_HandleTypeDef *p_lcd){
	p_lcd->LCD_Backlight_Value = LCD_NOBACKLIGHT;
	LCD_Send_Command(p_lcd, 0);
}

void LCD_Cursor_Blink(LCD_I2C_HandleTypeDef *p_lcd){
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
	p_lcd->LCD_Display_Option |= LCD_BLINKON;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	791b      	ldrb	r3, [r3, #4]
 80068a0:	f043 0301 	orr.w	r3, r3, #1
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	711a      	strb	r2, [r3, #4]
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	791b      	ldrb	r3, [r3, #4]
 80068ae:	f043 0308 	orr.w	r3, r3, #8
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f81c 	bl	80068f4 <LCD_Send_Command>
}
 80068bc:	bf00      	nop
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <LCD_Cursor_No_Blink>:

void LCD_Cursor_No_Blink(LCD_I2C_HandleTypeDef *p_lcd){
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
	p_lcd->LCD_Display_Option &= ~LCD_BLINKON;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	791b      	ldrb	r3, [r3, #4]
 80068d0:	f023 0301 	bic.w	r3, r3, #1
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	711a      	strb	r2, [r3, #4]
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	791b      	ldrb	r3, [r3, #4]
 80068de:	f043 0308 	orr.w	r3, r3, #8
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	4619      	mov	r1, r3
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f804 	bl	80068f4 <LCD_Send_Command>
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <LCD_Send_Command>:
void LCD_Display_Off(LCD_I2C_HandleTypeDef *p_lcd){
	p_lcd->LCD_Display_Option &= ~LCD_DISPLAYON;
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
}

void LCD_Send_Command(LCD_I2C_HandleTypeDef *p_lcd, char cmd){
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	70fb      	strb	r3, [r7, #3]
	char p_data_H, p_data_L;
	uint8_t p_I2C_Bufer[4];
	p_data_H = cmd & 0xF0;
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	f023 030f 	bic.w	r3, r3, #15
 8006906:	73fb      	strb	r3, [r7, #15]
	p_data_L = (cmd << 4) & 0xF0;
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	73bb      	strb	r3, [r7, #14]

	p_I2C_Bufer[0] = p_data_H | p_lcd->LCD_Backlight_Value | En;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	78da      	ldrb	r2, [r3, #3]
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	4313      	orrs	r3, r2
 8006916:	b2db      	uxtb	r3, r3
 8006918:	f043 0304 	orr.w	r3, r3, #4
 800691c:	b2db      	uxtb	r3, r3
 800691e:	723b      	strb	r3, [r7, #8]
	p_I2C_Bufer[1] = p_data_H | p_lcd->LCD_Backlight_Value;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	78da      	ldrb	r2, [r3, #3]
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	4313      	orrs	r3, r2
 8006928:	b2db      	uxtb	r3, r3
 800692a:	727b      	strb	r3, [r7, #9]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	78da      	ldrb	r2, [r3, #3]
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	4313      	orrs	r3, r2
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f043 0304 	orr.w	r3, r3, #4
 800693a:	b2db      	uxtb	r3, r3
 800693c:	72bb      	strb	r3, [r7, #10]
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	78da      	ldrb	r2, [r3, #3]
 8006942:	7bbb      	ldrb	r3, [r7, #14]
 8006944:	4313      	orrs	r3, r2
 8006946:	b2db      	uxtb	r3, r3
 8006948:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6898      	ldr	r0, [r3, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	789b      	ldrb	r3, [r3, #2]
 8006952:	b299      	uxth	r1, r3
 8006954:	f107 0208 	add.w	r2, r7, #8
 8006958:	2364      	movs	r3, #100	; 0x64
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	2304      	movs	r3, #4
 800695e:	f7fc fd1b 	bl	8003398 <HAL_I2C_Master_Transmit>
}
 8006962:	bf00      	nop
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <LCD_Send_Data>:

void LCD_Send_Data(LCD_I2C_HandleTypeDef *p_lcd, char data){
 800696a:	b580      	push	{r7, lr}
 800696c:	b086      	sub	sp, #24
 800696e:	af02      	add	r7, sp, #8
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	460b      	mov	r3, r1
 8006974:	70fb      	strb	r3, [r7, #3]
	char p_data_H, p_data_L;
	uint8_t p_I2C_Bufer[4];
	p_data_H = data & 0xF0;
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	f023 030f 	bic.w	r3, r3, #15
 800697c:	73fb      	strb	r3, [r7, #15]
	p_data_L = (data << 4) & 0xF0;
 800697e:	78fb      	ldrb	r3, [r7, #3]
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	73bb      	strb	r3, [r7, #14]

	p_I2C_Bufer[0] = p_data_H | p_lcd->LCD_Backlight_Value | En | Rs;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	78da      	ldrb	r2, [r3, #3]
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	4313      	orrs	r3, r2
 800698c:	b2db      	uxtb	r3, r3
 800698e:	f043 0305 	orr.w	r3, r3, #5
 8006992:	b2db      	uxtb	r3, r3
 8006994:	723b      	strb	r3, [r7, #8]
	p_I2C_Bufer[1] = p_data_H | p_lcd->LCD_Backlight_Value | Rs;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	78da      	ldrb	r2, [r3, #3]
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	4313      	orrs	r3, r2
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f043 0301 	orr.w	r3, r3, #1
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	727b      	strb	r3, [r7, #9]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En | Rs;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	78da      	ldrb	r2, [r3, #3]
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	f043 0305 	orr.w	r3, r3, #5
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	72bb      	strb	r3, [r7, #10]
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value | Rs;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	78da      	ldrb	r2, [r3, #3]
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f043 0301 	orr.w	r3, r3, #1
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6898      	ldr	r0, [r3, #8]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	789b      	ldrb	r3, [r3, #2]
 80069d4:	b299      	uxth	r1, r3
 80069d6:	f107 0208 	add.w	r2, r7, #8
 80069da:	2364      	movs	r3, #100	; 0x64
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	2304      	movs	r3, #4
 80069e0:	f7fc fcda 	bl	8003398 <HAL_I2C_Master_Transmit>
}
 80069e4:	bf00      	nop
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <BUTTON_Handle>:
button_callback_function_t __BUTTON_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Releasing_Callback = NULL;
button_callback_function_t __BUTTON_Short_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Long_Pressing_Callback = NULL;

void BUTTON_Handle(BUTTON_HandleTypedef *ButtonX){
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
	uint8_t state = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691a      	ldr	r2, [r3, #16]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	8a9b      	ldrh	r3, [r3, #20]
 80069fc:	4619      	mov	r1, r3
 80069fe:	4610      	mov	r0, r2
 8006a00:	f7fc fb56 	bl	80030b0 <HAL_GPIO_ReadPin>
 8006a04:	4603      	mov	r3, r0
 8006a06:	73fb      	strb	r3, [r7, #15]
	if(state != ButtonX->BTN_Filter){
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	789b      	ldrb	r3, [r3, #2]
 8006a0c:	7bfa      	ldrb	r2, [r7, #15]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d00a      	beq.n	8006a28 <BUTTON_Handle+0x3c>
		ButtonX->BTN_Filter = state;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	7bfa      	ldrb	r2, [r7, #15]
 8006a16:	709a      	strb	r2, [r3, #2]
		ButtonX->is_debouncing = 1;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	70da      	strb	r2, [r3, #3]
		ButtonX->time_debounce = HAL_GetTick();
 8006a1e:	f7fb fdd7 	bl	80025d0 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	609a      	str	r2, [r3, #8]
	}

	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->time_debounce >= 15)){
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	78db      	ldrb	r3, [r3, #3]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00e      	beq.n	8006a4e <BUTTON_Handle+0x62>
 8006a30:	f7fb fdce 	bl	80025d0 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b0e      	cmp	r3, #14
 8006a3e:	d906      	bls.n	8006a4e <BUTTON_Handle+0x62>
		ButtonX->BTN_Current = ButtonX->BTN_Filter;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	789a      	ldrb	r2, [r3, #2]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	701a      	strb	r2, [r3, #0]
		ButtonX->is_debouncing = 0;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	70da      	strb	r2, [r3, #3]
	}

	if(ButtonX->BTN_Current != ButtonX->BTN_Last){
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	781a      	ldrb	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	785b      	ldrb	r3, [r3, #1]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d034      	beq.n	8006ac4 <BUTTON_Handle+0xd8>
		if(ButtonX->BTN_Current == 0){
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d110      	bne.n	8006a84 <BUTTON_Handle+0x98>
			if(__BUTTON_Pressing_Callback != NULL){
 8006a62:	4b26      	ldr	r3, [pc, #152]	; (8006afc <BUTTON_Handle+0x110>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <BUTTON_Handle+0x86>
				__BUTTON_Pressing_Callback(ButtonX);
 8006a6a:	4b24      	ldr	r3, [pc, #144]	; (8006afc <BUTTON_Handle+0x110>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
			}
			ButtonX->is_press = 1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	711a      	strb	r2, [r3, #4]
			ButtonX->time_start_press = HAL_GetTick();
 8006a78:	f7fb fdaa 	bl	80025d0 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60da      	str	r2, [r3, #12]
 8006a82:	e01b      	b.n	8006abc <BUTTON_Handle+0xd0>
		}
		else{
			ButtonX->is_press = 0;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	711a      	strb	r2, [r3, #4]
			if(HAL_GetTick() - ButtonX->time_start_press <= 1000){
 8006a8a:	f7fb fda1 	bl	80025d0 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a9a:	d807      	bhi.n	8006aac <BUTTON_Handle+0xc0>
				if(__BUTTON_Short_Pressing_Callback != NULL){
 8006a9c:	4b18      	ldr	r3, [pc, #96]	; (8006b00 <BUTTON_Handle+0x114>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <BUTTON_Handle+0xc0>
					__BUTTON_Short_Pressing_Callback(ButtonX);
 8006aa4:	4b16      	ldr	r3, [pc, #88]	; (8006b00 <BUTTON_Handle+0x114>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	4798      	blx	r3
				}
			}
			if(__BUTTON_Releasing_Callback != NULL){
 8006aac:	4b15      	ldr	r3, [pc, #84]	; (8006b04 <BUTTON_Handle+0x118>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <BUTTON_Handle+0xd0>
				__BUTTON_Releasing_Callback(ButtonX);
 8006ab4:	4b13      	ldr	r3, [pc, #76]	; (8006b04 <BUTTON_Handle+0x118>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
			}
		}
		ButtonX->BTN_Last = ButtonX->BTN_Current;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	781a      	ldrb	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	705a      	strb	r2, [r3, #1]
	}

	if(ButtonX->is_press && (HAL_GetTick() - ButtonX->time_start_press >= TIME_FOR_LONG_PRESSING)){
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	791b      	ldrb	r3, [r3, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d013      	beq.n	8006af4 <BUTTON_Handle+0x108>
 8006acc:	f7fb fd80 	bl	80025d0 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006adc:	d30a      	bcc.n	8006af4 <BUTTON_Handle+0x108>
		if(__BUTTON_Long_Pressing_Callback != NULL){
 8006ade:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <BUTTON_Handle+0x11c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <BUTTON_Handle+0x102>
			__BUTTON_Long_Pressing_Callback(ButtonX);
 8006ae6:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <BUTTON_Handle+0x11c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	4798      	blx	r3
		}
		ButtonX->is_press = 0;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	711a      	strb	r2, [r3, #4]
	}
}
 8006af4:	bf00      	nop
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	200004cc 	.word	0x200004cc
 8006b00:	200004d4 	.word	0x200004d4
 8006b04:	200004d0 	.word	0x200004d0
 8006b08:	200004d8 	.word	0x200004d8

08006b0c <BUTTON_Init>:

void BUTTON_Init(BUTTON_HandleTypedef *ButtonX, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	80fb      	strh	r3, [r7, #6]
	ButtonX->GPIOx = GPIOx;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	611a      	str	r2, [r3, #16]
	ButtonX->GPIO_Pin = GPIO_Pin;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	88fa      	ldrh	r2, [r7, #6]
 8006b24:	829a      	strh	r2, [r3, #20]
	ButtonX->BTN_Current = 1;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	701a      	strb	r2, [r3, #0]
	ButtonX->BTN_Last = 1;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	705a      	strb	r2, [r3, #1]
	ButtonX->BTN_Filter = 1;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2201      	movs	r2, #1
 8006b36:	709a      	strb	r2, [r3, #2]
	ButtonX->is_debouncing = 0;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	70da      	strb	r2, [r3, #3]
	ButtonX->is_press = 0;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	711a      	strb	r2, [r3, #4]
}
 8006b44:	bf00      	nop
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bc80      	pop	{r7}
 8006b4c:	4770      	bx	lr
	...

08006b50 <BUTTON_Set_Callback_Function>:

void BUTTON_Set_Callback_Function(button_callback_function_t p_pressing_callback_function,
								button_callback_function_t p_releasing_callback_function,
								button_callback_function_t p_short_pressing_callback_function,
								button_callback_function_t p_long_pressing_callback_function){
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
	__BUTTON_Pressing_Callback = p_pressing_callback_function;
 8006b5e:	4a08      	ldr	r2, [pc, #32]	; (8006b80 <BUTTON_Set_Callback_Function+0x30>)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6013      	str	r3, [r2, #0]
	__BUTTON_Releasing_Callback = p_releasing_callback_function;
 8006b64:	4a07      	ldr	r2, [pc, #28]	; (8006b84 <BUTTON_Set_Callback_Function+0x34>)
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	6013      	str	r3, [r2, #0]
	__BUTTON_Short_Pressing_Callback = p_short_pressing_callback_function;
 8006b6a:	4a07      	ldr	r2, [pc, #28]	; (8006b88 <BUTTON_Set_Callback_Function+0x38>)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6013      	str	r3, [r2, #0]
	__BUTTON_Long_Pressing_Callback = p_long_pressing_callback_function;
 8006b70:	4a06      	ldr	r2, [pc, #24]	; (8006b8c <BUTTON_Set_Callback_Function+0x3c>)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	6013      	str	r3, [r2, #0]
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bc80      	pop	{r7}
 8006b7e:	4770      	bx	lr
 8006b80:	200004cc 	.word	0x200004cc
 8006b84:	200004d0 	.word	0x200004d0
 8006b88:	200004d4 	.word	0x200004d4
 8006b8c:	200004d8 	.word	0x200004d8

08006b90 <FLASH_Erase>:
#include "flash.h"

void FLASH_Erase(uint32_t p_page){
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8006b98:	f7fb ff76 	bl	8002a88 <HAL_FLASH_Unlock>
	eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
#endif

#ifdef __STM32F1xx_HAL_H
	eraseInit.Banks = 1;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	613b      	str	r3, [r7, #16]
	eraseInit.NbPages = 1;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	61bb      	str	r3, [r7, #24]
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8006baa:	029b      	lsls	r3, r3, #10
 8006bac:	617b      	str	r3, [r7, #20]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
	eraseInit.NbPages = 1;
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
#endif

	HAL_FLASHEx_Erase(&eraseInit, &t_PageError);
 8006bb2:	f107 021c 	add.w	r2, r7, #28
 8006bb6:	f107 030c 	add.w	r3, r7, #12
 8006bba:	4611      	mov	r1, r2
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fc f84b 	bl	8002c58 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8006bc2:	f7fb ff87 	bl	8002ad4 <HAL_FLASH_Lock>
//	while(FLASH->CR & FLASH_SR_BSY);
//	FLASH->CR &= ~FLASH_CR_PER;
//	FLASH->CR &= ~FLASH_CR_STRT;
//
//	FLASH->CR |= FLASH_CR_LOCK;
}
 8006bc6:	bf00      	nop
 8006bc8:	3720      	adds	r7, #32
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <FLASH_Write>:

void FLASH_Write(uint32_t p_page, uint8_t *p_data, uint16_t p_len){
 8006bce:	b5b0      	push	{r4, r5, r7, lr}
 8006bd0:	b086      	sub	sp, #24
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	80fb      	strh	r3, [r7, #6]
	FLASH_Erase(63);
 8006bdc:	203f      	movs	r0, #63	; 0x3f
 8006bde:	f7ff ffd7 	bl	8006b90 <FLASH_Erase>
#ifdef __STM32F4xx_HAL_H
	uint32_t t_add = SECTOR_7_ADD;
#endif
#ifdef __STM32F1xx_HAL_H
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8006be8:	029b      	lsls	r3, r3, #10
 8006bea:	613b      	str	r3, [r7, #16]
#endif
#ifdef __STM32F0xx_HAL_H
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
#endif
	HAL_FLASH_Unlock();
 8006bec:	f7fb ff4c 	bl	8002a88 <HAL_FLASH_Unlock>
	for(int i = 0; i < p_len; i += 2){
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	617b      	str	r3, [r7, #20]
 8006bf4:	e021      	b.n	8006c3a <FLASH_Write+0x6c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, t_add + i, p_data[i] | ((uint16_t)((i+1 >= p_len) ? 0xFF : p_data[i+1]) << 8));
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	18d1      	adds	r1, r2, r3
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	4413      	add	r3, r2
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	4618      	mov	r0, r3
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	da06      	bge.n	8006c1e <FLASH_Write+0x50>
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	3301      	adds	r3, #1
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	4413      	add	r3, r2
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	e001      	b.n	8006c22 <FLASH_Write+0x54>
 8006c1e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8006c22:	4303      	orrs	r3, r0
 8006c24:	17da      	asrs	r2, r3, #31
 8006c26:	461c      	mov	r4, r3
 8006c28:	4615      	mov	r5, r2
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	462b      	mov	r3, r5
 8006c2e:	2001      	movs	r0, #1
 8006c30:	f7fb feba 	bl	80029a8 <HAL_FLASH_Program>
	for(int i = 0; i < p_len; i += 2){
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	3302      	adds	r3, #2
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	88fb      	ldrh	r3, [r7, #6]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	dbd9      	blt.n	8006bf6 <FLASH_Write+0x28>
	}
	HAL_FLASH_Lock();
 8006c42:	f7fb ff47 	bl	8002ad4 <HAL_FLASH_Lock>
//	}
//	FLASH->CR |= FLASH_CR_PG;
//	for(int i = 0; i < p_len; i += 2){
//		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, t_add + i, p_data[i] | (uint16_t)((i+1 >= p_len) ? 0xFF : p_data[i+1]) << 8);
//	}
}
 8006c46:	bf00      	nop
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bdb0      	pop	{r4, r5, r7, pc}

08006c4e <FLASH_Read>:

void FLASH_Read(uint32_t add, uint8_t *p_data, uint16_t p_len){
 8006c4e:	b480      	push	{r7}
 8006c50:	b087      	sub	sp, #28
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < p_len; i += 2){
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	e016      	b.n	8006c90 <FLASH_Read+0x42>
		uint16_t t_data = *(volatile uint16_t *)(add + i);
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4413      	add	r3, r2
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	827b      	strh	r3, [r7, #18]
		p_data[i] = t_data;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	4413      	add	r3, r2
 8006c72:	8a7a      	ldrh	r2, [r7, #18]
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]
		p_data[i+1] = t_data >> 8;
 8006c78:	8a7b      	ldrh	r3, [r7, #18]
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	b299      	uxth	r1, r3
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	3301      	adds	r3, #1
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	4413      	add	r3, r2
 8006c86:	b2ca      	uxtb	r2, r1
 8006c88:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < p_len; i += 2){
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	3302      	adds	r3, #2
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	88fb      	ldrh	r3, [r7, #6]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	dbe4      	blt.n	8006c62 <FLASH_Read+0x14>
	}
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr

08006ca4 <__errno>:
 8006ca4:	4b01      	ldr	r3, [pc, #4]	; (8006cac <__errno+0x8>)
 8006ca6:	6818      	ldr	r0, [r3, #0]
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	20000098 	.word	0x20000098

08006cb0 <__libc_init_array>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	2600      	movs	r6, #0
 8006cb4:	4d0c      	ldr	r5, [pc, #48]	; (8006ce8 <__libc_init_array+0x38>)
 8006cb6:	4c0d      	ldr	r4, [pc, #52]	; (8006cec <__libc_init_array+0x3c>)
 8006cb8:	1b64      	subs	r4, r4, r5
 8006cba:	10a4      	asrs	r4, r4, #2
 8006cbc:	42a6      	cmp	r6, r4
 8006cbe:	d109      	bne.n	8006cd4 <__libc_init_array+0x24>
 8006cc0:	f000 fcd4 	bl	800766c <_init>
 8006cc4:	2600      	movs	r6, #0
 8006cc6:	4d0a      	ldr	r5, [pc, #40]	; (8006cf0 <__libc_init_array+0x40>)
 8006cc8:	4c0a      	ldr	r4, [pc, #40]	; (8006cf4 <__libc_init_array+0x44>)
 8006cca:	1b64      	subs	r4, r4, r5
 8006ccc:	10a4      	asrs	r4, r4, #2
 8006cce:	42a6      	cmp	r6, r4
 8006cd0:	d105      	bne.n	8006cde <__libc_init_array+0x2e>
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd8:	4798      	blx	r3
 8006cda:	3601      	adds	r6, #1
 8006cdc:	e7ee      	b.n	8006cbc <__libc_init_array+0xc>
 8006cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce2:	4798      	blx	r3
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	e7f2      	b.n	8006cce <__libc_init_array+0x1e>
 8006ce8:	0800783c 	.word	0x0800783c
 8006cec:	0800783c 	.word	0x0800783c
 8006cf0:	0800783c 	.word	0x0800783c
 8006cf4:	08007840 	.word	0x08007840

08006cf8 <malloc>:
 8006cf8:	4b02      	ldr	r3, [pc, #8]	; (8006d04 <malloc+0xc>)
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	f000 b87b 	b.w	8006df8 <_malloc_r>
 8006d02:	bf00      	nop
 8006d04:	20000098 	.word	0x20000098

08006d08 <free>:
 8006d08:	4b02      	ldr	r3, [pc, #8]	; (8006d14 <free+0xc>)
 8006d0a:	4601      	mov	r1, r0
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	f000 b80b 	b.w	8006d28 <_free_r>
 8006d12:	bf00      	nop
 8006d14:	20000098 	.word	0x20000098

08006d18 <memset>:
 8006d18:	4603      	mov	r3, r0
 8006d1a:	4402      	add	r2, r0
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d100      	bne.n	8006d22 <memset+0xa>
 8006d20:	4770      	bx	lr
 8006d22:	f803 1b01 	strb.w	r1, [r3], #1
 8006d26:	e7f9      	b.n	8006d1c <memset+0x4>

08006d28 <_free_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	2900      	cmp	r1, #0
 8006d2e:	d040      	beq.n	8006db2 <_free_r+0x8a>
 8006d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d34:	1f0c      	subs	r4, r1, #4
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bfb8      	it	lt
 8006d3a:	18e4      	addlt	r4, r4, r3
 8006d3c:	f000 f928 	bl	8006f90 <__malloc_lock>
 8006d40:	4a1c      	ldr	r2, [pc, #112]	; (8006db4 <_free_r+0x8c>)
 8006d42:	6813      	ldr	r3, [r2, #0]
 8006d44:	b933      	cbnz	r3, 8006d54 <_free_r+0x2c>
 8006d46:	6063      	str	r3, [r4, #4]
 8006d48:	6014      	str	r4, [r2, #0]
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d50:	f000 b924 	b.w	8006f9c <__malloc_unlock>
 8006d54:	42a3      	cmp	r3, r4
 8006d56:	d908      	bls.n	8006d6a <_free_r+0x42>
 8006d58:	6820      	ldr	r0, [r4, #0]
 8006d5a:	1821      	adds	r1, r4, r0
 8006d5c:	428b      	cmp	r3, r1
 8006d5e:	bf01      	itttt	eq
 8006d60:	6819      	ldreq	r1, [r3, #0]
 8006d62:	685b      	ldreq	r3, [r3, #4]
 8006d64:	1809      	addeq	r1, r1, r0
 8006d66:	6021      	streq	r1, [r4, #0]
 8006d68:	e7ed      	b.n	8006d46 <_free_r+0x1e>
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	b10b      	cbz	r3, 8006d74 <_free_r+0x4c>
 8006d70:	42a3      	cmp	r3, r4
 8006d72:	d9fa      	bls.n	8006d6a <_free_r+0x42>
 8006d74:	6811      	ldr	r1, [r2, #0]
 8006d76:	1850      	adds	r0, r2, r1
 8006d78:	42a0      	cmp	r0, r4
 8006d7a:	d10b      	bne.n	8006d94 <_free_r+0x6c>
 8006d7c:	6820      	ldr	r0, [r4, #0]
 8006d7e:	4401      	add	r1, r0
 8006d80:	1850      	adds	r0, r2, r1
 8006d82:	4283      	cmp	r3, r0
 8006d84:	6011      	str	r1, [r2, #0]
 8006d86:	d1e0      	bne.n	8006d4a <_free_r+0x22>
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	4401      	add	r1, r0
 8006d8e:	6011      	str	r1, [r2, #0]
 8006d90:	6053      	str	r3, [r2, #4]
 8006d92:	e7da      	b.n	8006d4a <_free_r+0x22>
 8006d94:	d902      	bls.n	8006d9c <_free_r+0x74>
 8006d96:	230c      	movs	r3, #12
 8006d98:	602b      	str	r3, [r5, #0]
 8006d9a:	e7d6      	b.n	8006d4a <_free_r+0x22>
 8006d9c:	6820      	ldr	r0, [r4, #0]
 8006d9e:	1821      	adds	r1, r4, r0
 8006da0:	428b      	cmp	r3, r1
 8006da2:	bf01      	itttt	eq
 8006da4:	6819      	ldreq	r1, [r3, #0]
 8006da6:	685b      	ldreq	r3, [r3, #4]
 8006da8:	1809      	addeq	r1, r1, r0
 8006daa:	6021      	streq	r1, [r4, #0]
 8006dac:	6063      	str	r3, [r4, #4]
 8006dae:	6054      	str	r4, [r2, #4]
 8006db0:	e7cb      	b.n	8006d4a <_free_r+0x22>
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	200004dc 	.word	0x200004dc

08006db8 <sbrk_aligned>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	4e0e      	ldr	r6, [pc, #56]	; (8006df4 <sbrk_aligned+0x3c>)
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	6831      	ldr	r1, [r6, #0]
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	b911      	cbnz	r1, 8006dca <sbrk_aligned+0x12>
 8006dc4:	f000 f88c 	bl	8006ee0 <_sbrk_r>
 8006dc8:	6030      	str	r0, [r6, #0]
 8006dca:	4621      	mov	r1, r4
 8006dcc:	4628      	mov	r0, r5
 8006dce:	f000 f887 	bl	8006ee0 <_sbrk_r>
 8006dd2:	1c43      	adds	r3, r0, #1
 8006dd4:	d00a      	beq.n	8006dec <sbrk_aligned+0x34>
 8006dd6:	1cc4      	adds	r4, r0, #3
 8006dd8:	f024 0403 	bic.w	r4, r4, #3
 8006ddc:	42a0      	cmp	r0, r4
 8006dde:	d007      	beq.n	8006df0 <sbrk_aligned+0x38>
 8006de0:	1a21      	subs	r1, r4, r0
 8006de2:	4628      	mov	r0, r5
 8006de4:	f000 f87c 	bl	8006ee0 <_sbrk_r>
 8006de8:	3001      	adds	r0, #1
 8006dea:	d101      	bne.n	8006df0 <sbrk_aligned+0x38>
 8006dec:	f04f 34ff 	mov.w	r4, #4294967295
 8006df0:	4620      	mov	r0, r4
 8006df2:	bd70      	pop	{r4, r5, r6, pc}
 8006df4:	200004e0 	.word	0x200004e0

08006df8 <_malloc_r>:
 8006df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dfc:	1ccd      	adds	r5, r1, #3
 8006dfe:	f025 0503 	bic.w	r5, r5, #3
 8006e02:	3508      	adds	r5, #8
 8006e04:	2d0c      	cmp	r5, #12
 8006e06:	bf38      	it	cc
 8006e08:	250c      	movcc	r5, #12
 8006e0a:	2d00      	cmp	r5, #0
 8006e0c:	4607      	mov	r7, r0
 8006e0e:	db01      	blt.n	8006e14 <_malloc_r+0x1c>
 8006e10:	42a9      	cmp	r1, r5
 8006e12:	d905      	bls.n	8006e20 <_malloc_r+0x28>
 8006e14:	230c      	movs	r3, #12
 8006e16:	2600      	movs	r6, #0
 8006e18:	603b      	str	r3, [r7, #0]
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e20:	4e2e      	ldr	r6, [pc, #184]	; (8006edc <_malloc_r+0xe4>)
 8006e22:	f000 f8b5 	bl	8006f90 <__malloc_lock>
 8006e26:	6833      	ldr	r3, [r6, #0]
 8006e28:	461c      	mov	r4, r3
 8006e2a:	bb34      	cbnz	r4, 8006e7a <_malloc_r+0x82>
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f7ff ffc2 	bl	8006db8 <sbrk_aligned>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	4604      	mov	r4, r0
 8006e38:	d14d      	bne.n	8006ed6 <_malloc_r+0xde>
 8006e3a:	6834      	ldr	r4, [r6, #0]
 8006e3c:	4626      	mov	r6, r4
 8006e3e:	2e00      	cmp	r6, #0
 8006e40:	d140      	bne.n	8006ec4 <_malloc_r+0xcc>
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	4631      	mov	r1, r6
 8006e46:	4638      	mov	r0, r7
 8006e48:	eb04 0803 	add.w	r8, r4, r3
 8006e4c:	f000 f848 	bl	8006ee0 <_sbrk_r>
 8006e50:	4580      	cmp	r8, r0
 8006e52:	d13a      	bne.n	8006eca <_malloc_r+0xd2>
 8006e54:	6821      	ldr	r1, [r4, #0]
 8006e56:	3503      	adds	r5, #3
 8006e58:	1a6d      	subs	r5, r5, r1
 8006e5a:	f025 0503 	bic.w	r5, r5, #3
 8006e5e:	3508      	adds	r5, #8
 8006e60:	2d0c      	cmp	r5, #12
 8006e62:	bf38      	it	cc
 8006e64:	250c      	movcc	r5, #12
 8006e66:	4638      	mov	r0, r7
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f7ff ffa5 	bl	8006db8 <sbrk_aligned>
 8006e6e:	3001      	adds	r0, #1
 8006e70:	d02b      	beq.n	8006eca <_malloc_r+0xd2>
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	442b      	add	r3, r5
 8006e76:	6023      	str	r3, [r4, #0]
 8006e78:	e00e      	b.n	8006e98 <_malloc_r+0xa0>
 8006e7a:	6822      	ldr	r2, [r4, #0]
 8006e7c:	1b52      	subs	r2, r2, r5
 8006e7e:	d41e      	bmi.n	8006ebe <_malloc_r+0xc6>
 8006e80:	2a0b      	cmp	r2, #11
 8006e82:	d916      	bls.n	8006eb2 <_malloc_r+0xba>
 8006e84:	1961      	adds	r1, r4, r5
 8006e86:	42a3      	cmp	r3, r4
 8006e88:	6025      	str	r5, [r4, #0]
 8006e8a:	bf18      	it	ne
 8006e8c:	6059      	strne	r1, [r3, #4]
 8006e8e:	6863      	ldr	r3, [r4, #4]
 8006e90:	bf08      	it	eq
 8006e92:	6031      	streq	r1, [r6, #0]
 8006e94:	5162      	str	r2, [r4, r5]
 8006e96:	604b      	str	r3, [r1, #4]
 8006e98:	4638      	mov	r0, r7
 8006e9a:	f104 060b 	add.w	r6, r4, #11
 8006e9e:	f000 f87d 	bl	8006f9c <__malloc_unlock>
 8006ea2:	f026 0607 	bic.w	r6, r6, #7
 8006ea6:	1d23      	adds	r3, r4, #4
 8006ea8:	1af2      	subs	r2, r6, r3
 8006eaa:	d0b6      	beq.n	8006e1a <_malloc_r+0x22>
 8006eac:	1b9b      	subs	r3, r3, r6
 8006eae:	50a3      	str	r3, [r4, r2]
 8006eb0:	e7b3      	b.n	8006e1a <_malloc_r+0x22>
 8006eb2:	6862      	ldr	r2, [r4, #4]
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	bf0c      	ite	eq
 8006eb8:	6032      	streq	r2, [r6, #0]
 8006eba:	605a      	strne	r2, [r3, #4]
 8006ebc:	e7ec      	b.n	8006e98 <_malloc_r+0xa0>
 8006ebe:	4623      	mov	r3, r4
 8006ec0:	6864      	ldr	r4, [r4, #4]
 8006ec2:	e7b2      	b.n	8006e2a <_malloc_r+0x32>
 8006ec4:	4634      	mov	r4, r6
 8006ec6:	6876      	ldr	r6, [r6, #4]
 8006ec8:	e7b9      	b.n	8006e3e <_malloc_r+0x46>
 8006eca:	230c      	movs	r3, #12
 8006ecc:	4638      	mov	r0, r7
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	f000 f864 	bl	8006f9c <__malloc_unlock>
 8006ed4:	e7a1      	b.n	8006e1a <_malloc_r+0x22>
 8006ed6:	6025      	str	r5, [r4, #0]
 8006ed8:	e7de      	b.n	8006e98 <_malloc_r+0xa0>
 8006eda:	bf00      	nop
 8006edc:	200004dc 	.word	0x200004dc

08006ee0 <_sbrk_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	4d05      	ldr	r5, [pc, #20]	; (8006efc <_sbrk_r+0x1c>)
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	4608      	mov	r0, r1
 8006eea:	602b      	str	r3, [r5, #0]
 8006eec:	f7fb fab6 	bl	800245c <_sbrk>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d102      	bne.n	8006efa <_sbrk_r+0x1a>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b103      	cbz	r3, 8006efa <_sbrk_r+0x1a>
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	200004e4 	.word	0x200004e4

08006f00 <siprintf>:
 8006f00:	b40e      	push	{r1, r2, r3}
 8006f02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f06:	b500      	push	{lr}
 8006f08:	b09c      	sub	sp, #112	; 0x70
 8006f0a:	ab1d      	add	r3, sp, #116	; 0x74
 8006f0c:	9002      	str	r0, [sp, #8]
 8006f0e:	9006      	str	r0, [sp, #24]
 8006f10:	9107      	str	r1, [sp, #28]
 8006f12:	9104      	str	r1, [sp, #16]
 8006f14:	4808      	ldr	r0, [pc, #32]	; (8006f38 <siprintf+0x38>)
 8006f16:	4909      	ldr	r1, [pc, #36]	; (8006f3c <siprintf+0x3c>)
 8006f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f1c:	9105      	str	r1, [sp, #20]
 8006f1e:	6800      	ldr	r0, [r0, #0]
 8006f20:	a902      	add	r1, sp, #8
 8006f22:	9301      	str	r3, [sp, #4]
 8006f24:	f000 f89c 	bl	8007060 <_svfiprintf_r>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	9b02      	ldr	r3, [sp, #8]
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	b01c      	add	sp, #112	; 0x70
 8006f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f34:	b003      	add	sp, #12
 8006f36:	4770      	bx	lr
 8006f38:	20000098 	.word	0x20000098
 8006f3c:	ffff0208 	.word	0xffff0208

08006f40 <strcpy>:
 8006f40:	4603      	mov	r3, r0
 8006f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f46:	f803 2b01 	strb.w	r2, [r3], #1
 8006f4a:	2a00      	cmp	r2, #0
 8006f4c:	d1f9      	bne.n	8006f42 <strcpy+0x2>
 8006f4e:	4770      	bx	lr

08006f50 <_vsiprintf_r>:
 8006f50:	b500      	push	{lr}
 8006f52:	b09b      	sub	sp, #108	; 0x6c
 8006f54:	9100      	str	r1, [sp, #0]
 8006f56:	9104      	str	r1, [sp, #16]
 8006f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f5c:	9105      	str	r1, [sp, #20]
 8006f5e:	9102      	str	r1, [sp, #8]
 8006f60:	4905      	ldr	r1, [pc, #20]	; (8006f78 <_vsiprintf_r+0x28>)
 8006f62:	9103      	str	r1, [sp, #12]
 8006f64:	4669      	mov	r1, sp
 8006f66:	f000 f87b 	bl	8007060 <_svfiprintf_r>
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	9b00      	ldr	r3, [sp, #0]
 8006f6e:	701a      	strb	r2, [r3, #0]
 8006f70:	b01b      	add	sp, #108	; 0x6c
 8006f72:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f76:	bf00      	nop
 8006f78:	ffff0208 	.word	0xffff0208

08006f7c <vsiprintf>:
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	460a      	mov	r2, r1
 8006f80:	4601      	mov	r1, r0
 8006f82:	4802      	ldr	r0, [pc, #8]	; (8006f8c <vsiprintf+0x10>)
 8006f84:	6800      	ldr	r0, [r0, #0]
 8006f86:	f7ff bfe3 	b.w	8006f50 <_vsiprintf_r>
 8006f8a:	bf00      	nop
 8006f8c:	20000098 	.word	0x20000098

08006f90 <__malloc_lock>:
 8006f90:	4801      	ldr	r0, [pc, #4]	; (8006f98 <__malloc_lock+0x8>)
 8006f92:	f000 bafb 	b.w	800758c <__retarget_lock_acquire_recursive>
 8006f96:	bf00      	nop
 8006f98:	200004e8 	.word	0x200004e8

08006f9c <__malloc_unlock>:
 8006f9c:	4801      	ldr	r0, [pc, #4]	; (8006fa4 <__malloc_unlock+0x8>)
 8006f9e:	f000 baf6 	b.w	800758e <__retarget_lock_release_recursive>
 8006fa2:	bf00      	nop
 8006fa4:	200004e8 	.word	0x200004e8

08006fa8 <__ssputs_r>:
 8006fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fac:	688e      	ldr	r6, [r1, #8]
 8006fae:	4682      	mov	sl, r0
 8006fb0:	429e      	cmp	r6, r3
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	4690      	mov	r8, r2
 8006fb6:	461f      	mov	r7, r3
 8006fb8:	d838      	bhi.n	800702c <__ssputs_r+0x84>
 8006fba:	898a      	ldrh	r2, [r1, #12]
 8006fbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fc0:	d032      	beq.n	8007028 <__ssputs_r+0x80>
 8006fc2:	6825      	ldr	r5, [r4, #0]
 8006fc4:	6909      	ldr	r1, [r1, #16]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	eba5 0901 	sub.w	r9, r5, r1
 8006fcc:	6965      	ldr	r5, [r4, #20]
 8006fce:	444b      	add	r3, r9
 8006fd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fd8:	106d      	asrs	r5, r5, #1
 8006fda:	429d      	cmp	r5, r3
 8006fdc:	bf38      	it	cc
 8006fde:	461d      	movcc	r5, r3
 8006fe0:	0553      	lsls	r3, r2, #21
 8006fe2:	d531      	bpl.n	8007048 <__ssputs_r+0xa0>
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	f7ff ff07 	bl	8006df8 <_malloc_r>
 8006fea:	4606      	mov	r6, r0
 8006fec:	b950      	cbnz	r0, 8007004 <__ssputs_r+0x5c>
 8006fee:	230c      	movs	r3, #12
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	f8ca 3000 	str.w	r3, [sl]
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ffe:	81a3      	strh	r3, [r4, #12]
 8007000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007004:	464a      	mov	r2, r9
 8007006:	6921      	ldr	r1, [r4, #16]
 8007008:	f000 fad0 	bl	80075ac <memcpy>
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007016:	81a3      	strh	r3, [r4, #12]
 8007018:	6126      	str	r6, [r4, #16]
 800701a:	444e      	add	r6, r9
 800701c:	6026      	str	r6, [r4, #0]
 800701e:	463e      	mov	r6, r7
 8007020:	6165      	str	r5, [r4, #20]
 8007022:	eba5 0509 	sub.w	r5, r5, r9
 8007026:	60a5      	str	r5, [r4, #8]
 8007028:	42be      	cmp	r6, r7
 800702a:	d900      	bls.n	800702e <__ssputs_r+0x86>
 800702c:	463e      	mov	r6, r7
 800702e:	4632      	mov	r2, r6
 8007030:	4641      	mov	r1, r8
 8007032:	6820      	ldr	r0, [r4, #0]
 8007034:	f000 fac8 	bl	80075c8 <memmove>
 8007038:	68a3      	ldr	r3, [r4, #8]
 800703a:	2000      	movs	r0, #0
 800703c:	1b9b      	subs	r3, r3, r6
 800703e:	60a3      	str	r3, [r4, #8]
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	4433      	add	r3, r6
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	e7db      	b.n	8007000 <__ssputs_r+0x58>
 8007048:	462a      	mov	r2, r5
 800704a:	f000 fad7 	bl	80075fc <_realloc_r>
 800704e:	4606      	mov	r6, r0
 8007050:	2800      	cmp	r0, #0
 8007052:	d1e1      	bne.n	8007018 <__ssputs_r+0x70>
 8007054:	4650      	mov	r0, sl
 8007056:	6921      	ldr	r1, [r4, #16]
 8007058:	f7ff fe66 	bl	8006d28 <_free_r>
 800705c:	e7c7      	b.n	8006fee <__ssputs_r+0x46>
	...

08007060 <_svfiprintf_r>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	4698      	mov	r8, r3
 8007066:	898b      	ldrh	r3, [r1, #12]
 8007068:	4607      	mov	r7, r0
 800706a:	061b      	lsls	r3, r3, #24
 800706c:	460d      	mov	r5, r1
 800706e:	4614      	mov	r4, r2
 8007070:	b09d      	sub	sp, #116	; 0x74
 8007072:	d50e      	bpl.n	8007092 <_svfiprintf_r+0x32>
 8007074:	690b      	ldr	r3, [r1, #16]
 8007076:	b963      	cbnz	r3, 8007092 <_svfiprintf_r+0x32>
 8007078:	2140      	movs	r1, #64	; 0x40
 800707a:	f7ff febd 	bl	8006df8 <_malloc_r>
 800707e:	6028      	str	r0, [r5, #0]
 8007080:	6128      	str	r0, [r5, #16]
 8007082:	b920      	cbnz	r0, 800708e <_svfiprintf_r+0x2e>
 8007084:	230c      	movs	r3, #12
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	f04f 30ff 	mov.w	r0, #4294967295
 800708c:	e0d1      	b.n	8007232 <_svfiprintf_r+0x1d2>
 800708e:	2340      	movs	r3, #64	; 0x40
 8007090:	616b      	str	r3, [r5, #20]
 8007092:	2300      	movs	r3, #0
 8007094:	9309      	str	r3, [sp, #36]	; 0x24
 8007096:	2320      	movs	r3, #32
 8007098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800709c:	2330      	movs	r3, #48	; 0x30
 800709e:	f04f 0901 	mov.w	r9, #1
 80070a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80070a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800724c <_svfiprintf_r+0x1ec>
 80070aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070ae:	4623      	mov	r3, r4
 80070b0:	469a      	mov	sl, r3
 80070b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070b6:	b10a      	cbz	r2, 80070bc <_svfiprintf_r+0x5c>
 80070b8:	2a25      	cmp	r2, #37	; 0x25
 80070ba:	d1f9      	bne.n	80070b0 <_svfiprintf_r+0x50>
 80070bc:	ebba 0b04 	subs.w	fp, sl, r4
 80070c0:	d00b      	beq.n	80070da <_svfiprintf_r+0x7a>
 80070c2:	465b      	mov	r3, fp
 80070c4:	4622      	mov	r2, r4
 80070c6:	4629      	mov	r1, r5
 80070c8:	4638      	mov	r0, r7
 80070ca:	f7ff ff6d 	bl	8006fa8 <__ssputs_r>
 80070ce:	3001      	adds	r0, #1
 80070d0:	f000 80aa 	beq.w	8007228 <_svfiprintf_r+0x1c8>
 80070d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070d6:	445a      	add	r2, fp
 80070d8:	9209      	str	r2, [sp, #36]	; 0x24
 80070da:	f89a 3000 	ldrb.w	r3, [sl]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 80a2 	beq.w	8007228 <_svfiprintf_r+0x1c8>
 80070e4:	2300      	movs	r3, #0
 80070e6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ee:	f10a 0a01 	add.w	sl, sl, #1
 80070f2:	9304      	str	r3, [sp, #16]
 80070f4:	9307      	str	r3, [sp, #28]
 80070f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070fa:	931a      	str	r3, [sp, #104]	; 0x68
 80070fc:	4654      	mov	r4, sl
 80070fe:	2205      	movs	r2, #5
 8007100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007104:	4851      	ldr	r0, [pc, #324]	; (800724c <_svfiprintf_r+0x1ec>)
 8007106:	f000 fa43 	bl	8007590 <memchr>
 800710a:	9a04      	ldr	r2, [sp, #16]
 800710c:	b9d8      	cbnz	r0, 8007146 <_svfiprintf_r+0xe6>
 800710e:	06d0      	lsls	r0, r2, #27
 8007110:	bf44      	itt	mi
 8007112:	2320      	movmi	r3, #32
 8007114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007118:	0711      	lsls	r1, r2, #28
 800711a:	bf44      	itt	mi
 800711c:	232b      	movmi	r3, #43	; 0x2b
 800711e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007122:	f89a 3000 	ldrb.w	r3, [sl]
 8007126:	2b2a      	cmp	r3, #42	; 0x2a
 8007128:	d015      	beq.n	8007156 <_svfiprintf_r+0xf6>
 800712a:	4654      	mov	r4, sl
 800712c:	2000      	movs	r0, #0
 800712e:	f04f 0c0a 	mov.w	ip, #10
 8007132:	9a07      	ldr	r2, [sp, #28]
 8007134:	4621      	mov	r1, r4
 8007136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800713a:	3b30      	subs	r3, #48	; 0x30
 800713c:	2b09      	cmp	r3, #9
 800713e:	d94e      	bls.n	80071de <_svfiprintf_r+0x17e>
 8007140:	b1b0      	cbz	r0, 8007170 <_svfiprintf_r+0x110>
 8007142:	9207      	str	r2, [sp, #28]
 8007144:	e014      	b.n	8007170 <_svfiprintf_r+0x110>
 8007146:	eba0 0308 	sub.w	r3, r0, r8
 800714a:	fa09 f303 	lsl.w	r3, r9, r3
 800714e:	4313      	orrs	r3, r2
 8007150:	46a2      	mov	sl, r4
 8007152:	9304      	str	r3, [sp, #16]
 8007154:	e7d2      	b.n	80070fc <_svfiprintf_r+0x9c>
 8007156:	9b03      	ldr	r3, [sp, #12]
 8007158:	1d19      	adds	r1, r3, #4
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	9103      	str	r1, [sp, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	bfbb      	ittet	lt
 8007162:	425b      	neglt	r3, r3
 8007164:	f042 0202 	orrlt.w	r2, r2, #2
 8007168:	9307      	strge	r3, [sp, #28]
 800716a:	9307      	strlt	r3, [sp, #28]
 800716c:	bfb8      	it	lt
 800716e:	9204      	strlt	r2, [sp, #16]
 8007170:	7823      	ldrb	r3, [r4, #0]
 8007172:	2b2e      	cmp	r3, #46	; 0x2e
 8007174:	d10c      	bne.n	8007190 <_svfiprintf_r+0x130>
 8007176:	7863      	ldrb	r3, [r4, #1]
 8007178:	2b2a      	cmp	r3, #42	; 0x2a
 800717a:	d135      	bne.n	80071e8 <_svfiprintf_r+0x188>
 800717c:	9b03      	ldr	r3, [sp, #12]
 800717e:	3402      	adds	r4, #2
 8007180:	1d1a      	adds	r2, r3, #4
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	9203      	str	r2, [sp, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	bfb8      	it	lt
 800718a:	f04f 33ff 	movlt.w	r3, #4294967295
 800718e:	9305      	str	r3, [sp, #20]
 8007190:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007250 <_svfiprintf_r+0x1f0>
 8007194:	2203      	movs	r2, #3
 8007196:	4650      	mov	r0, sl
 8007198:	7821      	ldrb	r1, [r4, #0]
 800719a:	f000 f9f9 	bl	8007590 <memchr>
 800719e:	b140      	cbz	r0, 80071b2 <_svfiprintf_r+0x152>
 80071a0:	2340      	movs	r3, #64	; 0x40
 80071a2:	eba0 000a 	sub.w	r0, r0, sl
 80071a6:	fa03 f000 	lsl.w	r0, r3, r0
 80071aa:	9b04      	ldr	r3, [sp, #16]
 80071ac:	3401      	adds	r4, #1
 80071ae:	4303      	orrs	r3, r0
 80071b0:	9304      	str	r3, [sp, #16]
 80071b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b6:	2206      	movs	r2, #6
 80071b8:	4826      	ldr	r0, [pc, #152]	; (8007254 <_svfiprintf_r+0x1f4>)
 80071ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071be:	f000 f9e7 	bl	8007590 <memchr>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	d038      	beq.n	8007238 <_svfiprintf_r+0x1d8>
 80071c6:	4b24      	ldr	r3, [pc, #144]	; (8007258 <_svfiprintf_r+0x1f8>)
 80071c8:	bb1b      	cbnz	r3, 8007212 <_svfiprintf_r+0x1b2>
 80071ca:	9b03      	ldr	r3, [sp, #12]
 80071cc:	3307      	adds	r3, #7
 80071ce:	f023 0307 	bic.w	r3, r3, #7
 80071d2:	3308      	adds	r3, #8
 80071d4:	9303      	str	r3, [sp, #12]
 80071d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d8:	4433      	add	r3, r6
 80071da:	9309      	str	r3, [sp, #36]	; 0x24
 80071dc:	e767      	b.n	80070ae <_svfiprintf_r+0x4e>
 80071de:	460c      	mov	r4, r1
 80071e0:	2001      	movs	r0, #1
 80071e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80071e6:	e7a5      	b.n	8007134 <_svfiprintf_r+0xd4>
 80071e8:	2300      	movs	r3, #0
 80071ea:	f04f 0c0a 	mov.w	ip, #10
 80071ee:	4619      	mov	r1, r3
 80071f0:	3401      	adds	r4, #1
 80071f2:	9305      	str	r3, [sp, #20]
 80071f4:	4620      	mov	r0, r4
 80071f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071fa:	3a30      	subs	r2, #48	; 0x30
 80071fc:	2a09      	cmp	r2, #9
 80071fe:	d903      	bls.n	8007208 <_svfiprintf_r+0x1a8>
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0c5      	beq.n	8007190 <_svfiprintf_r+0x130>
 8007204:	9105      	str	r1, [sp, #20]
 8007206:	e7c3      	b.n	8007190 <_svfiprintf_r+0x130>
 8007208:	4604      	mov	r4, r0
 800720a:	2301      	movs	r3, #1
 800720c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007210:	e7f0      	b.n	80071f4 <_svfiprintf_r+0x194>
 8007212:	ab03      	add	r3, sp, #12
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	462a      	mov	r2, r5
 8007218:	4638      	mov	r0, r7
 800721a:	4b10      	ldr	r3, [pc, #64]	; (800725c <_svfiprintf_r+0x1fc>)
 800721c:	a904      	add	r1, sp, #16
 800721e:	f3af 8000 	nop.w
 8007222:	1c42      	adds	r2, r0, #1
 8007224:	4606      	mov	r6, r0
 8007226:	d1d6      	bne.n	80071d6 <_svfiprintf_r+0x176>
 8007228:	89ab      	ldrh	r3, [r5, #12]
 800722a:	065b      	lsls	r3, r3, #25
 800722c:	f53f af2c 	bmi.w	8007088 <_svfiprintf_r+0x28>
 8007230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007232:	b01d      	add	sp, #116	; 0x74
 8007234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007238:	ab03      	add	r3, sp, #12
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	462a      	mov	r2, r5
 800723e:	4638      	mov	r0, r7
 8007240:	4b06      	ldr	r3, [pc, #24]	; (800725c <_svfiprintf_r+0x1fc>)
 8007242:	a904      	add	r1, sp, #16
 8007244:	f000 f87c 	bl	8007340 <_printf_i>
 8007248:	e7eb      	b.n	8007222 <_svfiprintf_r+0x1c2>
 800724a:	bf00      	nop
 800724c:	08007808 	.word	0x08007808
 8007250:	0800780e 	.word	0x0800780e
 8007254:	08007812 	.word	0x08007812
 8007258:	00000000 	.word	0x00000000
 800725c:	08006fa9 	.word	0x08006fa9

08007260 <_printf_common>:
 8007260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007264:	4616      	mov	r6, r2
 8007266:	4699      	mov	r9, r3
 8007268:	688a      	ldr	r2, [r1, #8]
 800726a:	690b      	ldr	r3, [r1, #16]
 800726c:	4607      	mov	r7, r0
 800726e:	4293      	cmp	r3, r2
 8007270:	bfb8      	it	lt
 8007272:	4613      	movlt	r3, r2
 8007274:	6033      	str	r3, [r6, #0]
 8007276:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800727a:	460c      	mov	r4, r1
 800727c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007280:	b10a      	cbz	r2, 8007286 <_printf_common+0x26>
 8007282:	3301      	adds	r3, #1
 8007284:	6033      	str	r3, [r6, #0]
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	0699      	lsls	r1, r3, #26
 800728a:	bf42      	ittt	mi
 800728c:	6833      	ldrmi	r3, [r6, #0]
 800728e:	3302      	addmi	r3, #2
 8007290:	6033      	strmi	r3, [r6, #0]
 8007292:	6825      	ldr	r5, [r4, #0]
 8007294:	f015 0506 	ands.w	r5, r5, #6
 8007298:	d106      	bne.n	80072a8 <_printf_common+0x48>
 800729a:	f104 0a19 	add.w	sl, r4, #25
 800729e:	68e3      	ldr	r3, [r4, #12]
 80072a0:	6832      	ldr	r2, [r6, #0]
 80072a2:	1a9b      	subs	r3, r3, r2
 80072a4:	42ab      	cmp	r3, r5
 80072a6:	dc28      	bgt.n	80072fa <_printf_common+0x9a>
 80072a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072ac:	1e13      	subs	r3, r2, #0
 80072ae:	6822      	ldr	r2, [r4, #0]
 80072b0:	bf18      	it	ne
 80072b2:	2301      	movne	r3, #1
 80072b4:	0692      	lsls	r2, r2, #26
 80072b6:	d42d      	bmi.n	8007314 <_printf_common+0xb4>
 80072b8:	4649      	mov	r1, r9
 80072ba:	4638      	mov	r0, r7
 80072bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072c0:	47c0      	blx	r8
 80072c2:	3001      	adds	r0, #1
 80072c4:	d020      	beq.n	8007308 <_printf_common+0xa8>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	68e5      	ldr	r5, [r4, #12]
 80072ca:	f003 0306 	and.w	r3, r3, #6
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	bf18      	it	ne
 80072d2:	2500      	movne	r5, #0
 80072d4:	6832      	ldr	r2, [r6, #0]
 80072d6:	f04f 0600 	mov.w	r6, #0
 80072da:	68a3      	ldr	r3, [r4, #8]
 80072dc:	bf08      	it	eq
 80072de:	1aad      	subeq	r5, r5, r2
 80072e0:	6922      	ldr	r2, [r4, #16]
 80072e2:	bf08      	it	eq
 80072e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072e8:	4293      	cmp	r3, r2
 80072ea:	bfc4      	itt	gt
 80072ec:	1a9b      	subgt	r3, r3, r2
 80072ee:	18ed      	addgt	r5, r5, r3
 80072f0:	341a      	adds	r4, #26
 80072f2:	42b5      	cmp	r5, r6
 80072f4:	d11a      	bne.n	800732c <_printf_common+0xcc>
 80072f6:	2000      	movs	r0, #0
 80072f8:	e008      	b.n	800730c <_printf_common+0xac>
 80072fa:	2301      	movs	r3, #1
 80072fc:	4652      	mov	r2, sl
 80072fe:	4649      	mov	r1, r9
 8007300:	4638      	mov	r0, r7
 8007302:	47c0      	blx	r8
 8007304:	3001      	adds	r0, #1
 8007306:	d103      	bne.n	8007310 <_printf_common+0xb0>
 8007308:	f04f 30ff 	mov.w	r0, #4294967295
 800730c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007310:	3501      	adds	r5, #1
 8007312:	e7c4      	b.n	800729e <_printf_common+0x3e>
 8007314:	2030      	movs	r0, #48	; 0x30
 8007316:	18e1      	adds	r1, r4, r3
 8007318:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007322:	4422      	add	r2, r4
 8007324:	3302      	adds	r3, #2
 8007326:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800732a:	e7c5      	b.n	80072b8 <_printf_common+0x58>
 800732c:	2301      	movs	r3, #1
 800732e:	4622      	mov	r2, r4
 8007330:	4649      	mov	r1, r9
 8007332:	4638      	mov	r0, r7
 8007334:	47c0      	blx	r8
 8007336:	3001      	adds	r0, #1
 8007338:	d0e6      	beq.n	8007308 <_printf_common+0xa8>
 800733a:	3601      	adds	r6, #1
 800733c:	e7d9      	b.n	80072f2 <_printf_common+0x92>
	...

08007340 <_printf_i>:
 8007340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007344:	7e0f      	ldrb	r7, [r1, #24]
 8007346:	4691      	mov	r9, r2
 8007348:	2f78      	cmp	r7, #120	; 0x78
 800734a:	4680      	mov	r8, r0
 800734c:	460c      	mov	r4, r1
 800734e:	469a      	mov	sl, r3
 8007350:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007356:	d807      	bhi.n	8007368 <_printf_i+0x28>
 8007358:	2f62      	cmp	r7, #98	; 0x62
 800735a:	d80a      	bhi.n	8007372 <_printf_i+0x32>
 800735c:	2f00      	cmp	r7, #0
 800735e:	f000 80d9 	beq.w	8007514 <_printf_i+0x1d4>
 8007362:	2f58      	cmp	r7, #88	; 0x58
 8007364:	f000 80a4 	beq.w	80074b0 <_printf_i+0x170>
 8007368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800736c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007370:	e03a      	b.n	80073e8 <_printf_i+0xa8>
 8007372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007376:	2b15      	cmp	r3, #21
 8007378:	d8f6      	bhi.n	8007368 <_printf_i+0x28>
 800737a:	a101      	add	r1, pc, #4	; (adr r1, 8007380 <_printf_i+0x40>)
 800737c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007380:	080073d9 	.word	0x080073d9
 8007384:	080073ed 	.word	0x080073ed
 8007388:	08007369 	.word	0x08007369
 800738c:	08007369 	.word	0x08007369
 8007390:	08007369 	.word	0x08007369
 8007394:	08007369 	.word	0x08007369
 8007398:	080073ed 	.word	0x080073ed
 800739c:	08007369 	.word	0x08007369
 80073a0:	08007369 	.word	0x08007369
 80073a4:	08007369 	.word	0x08007369
 80073a8:	08007369 	.word	0x08007369
 80073ac:	080074fb 	.word	0x080074fb
 80073b0:	0800741d 	.word	0x0800741d
 80073b4:	080074dd 	.word	0x080074dd
 80073b8:	08007369 	.word	0x08007369
 80073bc:	08007369 	.word	0x08007369
 80073c0:	0800751d 	.word	0x0800751d
 80073c4:	08007369 	.word	0x08007369
 80073c8:	0800741d 	.word	0x0800741d
 80073cc:	08007369 	.word	0x08007369
 80073d0:	08007369 	.word	0x08007369
 80073d4:	080074e5 	.word	0x080074e5
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	1d1a      	adds	r2, r3, #4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	602a      	str	r2, [r5, #0]
 80073e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073e8:	2301      	movs	r3, #1
 80073ea:	e0a4      	b.n	8007536 <_printf_i+0x1f6>
 80073ec:	6820      	ldr	r0, [r4, #0]
 80073ee:	6829      	ldr	r1, [r5, #0]
 80073f0:	0606      	lsls	r6, r0, #24
 80073f2:	f101 0304 	add.w	r3, r1, #4
 80073f6:	d50a      	bpl.n	800740e <_printf_i+0xce>
 80073f8:	680e      	ldr	r6, [r1, #0]
 80073fa:	602b      	str	r3, [r5, #0]
 80073fc:	2e00      	cmp	r6, #0
 80073fe:	da03      	bge.n	8007408 <_printf_i+0xc8>
 8007400:	232d      	movs	r3, #45	; 0x2d
 8007402:	4276      	negs	r6, r6
 8007404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007408:	230a      	movs	r3, #10
 800740a:	485e      	ldr	r0, [pc, #376]	; (8007584 <_printf_i+0x244>)
 800740c:	e019      	b.n	8007442 <_printf_i+0x102>
 800740e:	680e      	ldr	r6, [r1, #0]
 8007410:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007414:	602b      	str	r3, [r5, #0]
 8007416:	bf18      	it	ne
 8007418:	b236      	sxthne	r6, r6
 800741a:	e7ef      	b.n	80073fc <_printf_i+0xbc>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	6820      	ldr	r0, [r4, #0]
 8007420:	1d19      	adds	r1, r3, #4
 8007422:	6029      	str	r1, [r5, #0]
 8007424:	0601      	lsls	r1, r0, #24
 8007426:	d501      	bpl.n	800742c <_printf_i+0xec>
 8007428:	681e      	ldr	r6, [r3, #0]
 800742a:	e002      	b.n	8007432 <_printf_i+0xf2>
 800742c:	0646      	lsls	r6, r0, #25
 800742e:	d5fb      	bpl.n	8007428 <_printf_i+0xe8>
 8007430:	881e      	ldrh	r6, [r3, #0]
 8007432:	2f6f      	cmp	r7, #111	; 0x6f
 8007434:	bf0c      	ite	eq
 8007436:	2308      	moveq	r3, #8
 8007438:	230a      	movne	r3, #10
 800743a:	4852      	ldr	r0, [pc, #328]	; (8007584 <_printf_i+0x244>)
 800743c:	2100      	movs	r1, #0
 800743e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007442:	6865      	ldr	r5, [r4, #4]
 8007444:	2d00      	cmp	r5, #0
 8007446:	bfa8      	it	ge
 8007448:	6821      	ldrge	r1, [r4, #0]
 800744a:	60a5      	str	r5, [r4, #8]
 800744c:	bfa4      	itt	ge
 800744e:	f021 0104 	bicge.w	r1, r1, #4
 8007452:	6021      	strge	r1, [r4, #0]
 8007454:	b90e      	cbnz	r6, 800745a <_printf_i+0x11a>
 8007456:	2d00      	cmp	r5, #0
 8007458:	d04d      	beq.n	80074f6 <_printf_i+0x1b6>
 800745a:	4615      	mov	r5, r2
 800745c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007460:	fb03 6711 	mls	r7, r3, r1, r6
 8007464:	5dc7      	ldrb	r7, [r0, r7]
 8007466:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800746a:	4637      	mov	r7, r6
 800746c:	42bb      	cmp	r3, r7
 800746e:	460e      	mov	r6, r1
 8007470:	d9f4      	bls.n	800745c <_printf_i+0x11c>
 8007472:	2b08      	cmp	r3, #8
 8007474:	d10b      	bne.n	800748e <_printf_i+0x14e>
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	07de      	lsls	r6, r3, #31
 800747a:	d508      	bpl.n	800748e <_printf_i+0x14e>
 800747c:	6923      	ldr	r3, [r4, #16]
 800747e:	6861      	ldr	r1, [r4, #4]
 8007480:	4299      	cmp	r1, r3
 8007482:	bfde      	ittt	le
 8007484:	2330      	movle	r3, #48	; 0x30
 8007486:	f805 3c01 	strble.w	r3, [r5, #-1]
 800748a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800748e:	1b52      	subs	r2, r2, r5
 8007490:	6122      	str	r2, [r4, #16]
 8007492:	464b      	mov	r3, r9
 8007494:	4621      	mov	r1, r4
 8007496:	4640      	mov	r0, r8
 8007498:	f8cd a000 	str.w	sl, [sp]
 800749c:	aa03      	add	r2, sp, #12
 800749e:	f7ff fedf 	bl	8007260 <_printf_common>
 80074a2:	3001      	adds	r0, #1
 80074a4:	d14c      	bne.n	8007540 <_printf_i+0x200>
 80074a6:	f04f 30ff 	mov.w	r0, #4294967295
 80074aa:	b004      	add	sp, #16
 80074ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b0:	4834      	ldr	r0, [pc, #208]	; (8007584 <_printf_i+0x244>)
 80074b2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074b6:	6829      	ldr	r1, [r5, #0]
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80074be:	6029      	str	r1, [r5, #0]
 80074c0:	061d      	lsls	r5, r3, #24
 80074c2:	d514      	bpl.n	80074ee <_printf_i+0x1ae>
 80074c4:	07df      	lsls	r7, r3, #31
 80074c6:	bf44      	itt	mi
 80074c8:	f043 0320 	orrmi.w	r3, r3, #32
 80074cc:	6023      	strmi	r3, [r4, #0]
 80074ce:	b91e      	cbnz	r6, 80074d8 <_printf_i+0x198>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	f023 0320 	bic.w	r3, r3, #32
 80074d6:	6023      	str	r3, [r4, #0]
 80074d8:	2310      	movs	r3, #16
 80074da:	e7af      	b.n	800743c <_printf_i+0xfc>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	f043 0320 	orr.w	r3, r3, #32
 80074e2:	6023      	str	r3, [r4, #0]
 80074e4:	2378      	movs	r3, #120	; 0x78
 80074e6:	4828      	ldr	r0, [pc, #160]	; (8007588 <_printf_i+0x248>)
 80074e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074ec:	e7e3      	b.n	80074b6 <_printf_i+0x176>
 80074ee:	0659      	lsls	r1, r3, #25
 80074f0:	bf48      	it	mi
 80074f2:	b2b6      	uxthmi	r6, r6
 80074f4:	e7e6      	b.n	80074c4 <_printf_i+0x184>
 80074f6:	4615      	mov	r5, r2
 80074f8:	e7bb      	b.n	8007472 <_printf_i+0x132>
 80074fa:	682b      	ldr	r3, [r5, #0]
 80074fc:	6826      	ldr	r6, [r4, #0]
 80074fe:	1d18      	adds	r0, r3, #4
 8007500:	6961      	ldr	r1, [r4, #20]
 8007502:	6028      	str	r0, [r5, #0]
 8007504:	0635      	lsls	r5, r6, #24
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	d501      	bpl.n	800750e <_printf_i+0x1ce>
 800750a:	6019      	str	r1, [r3, #0]
 800750c:	e002      	b.n	8007514 <_printf_i+0x1d4>
 800750e:	0670      	lsls	r0, r6, #25
 8007510:	d5fb      	bpl.n	800750a <_printf_i+0x1ca>
 8007512:	8019      	strh	r1, [r3, #0]
 8007514:	2300      	movs	r3, #0
 8007516:	4615      	mov	r5, r2
 8007518:	6123      	str	r3, [r4, #16]
 800751a:	e7ba      	b.n	8007492 <_printf_i+0x152>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	2100      	movs	r1, #0
 8007520:	1d1a      	adds	r2, r3, #4
 8007522:	602a      	str	r2, [r5, #0]
 8007524:	681d      	ldr	r5, [r3, #0]
 8007526:	6862      	ldr	r2, [r4, #4]
 8007528:	4628      	mov	r0, r5
 800752a:	f000 f831 	bl	8007590 <memchr>
 800752e:	b108      	cbz	r0, 8007534 <_printf_i+0x1f4>
 8007530:	1b40      	subs	r0, r0, r5
 8007532:	6060      	str	r0, [r4, #4]
 8007534:	6863      	ldr	r3, [r4, #4]
 8007536:	6123      	str	r3, [r4, #16]
 8007538:	2300      	movs	r3, #0
 800753a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800753e:	e7a8      	b.n	8007492 <_printf_i+0x152>
 8007540:	462a      	mov	r2, r5
 8007542:	4649      	mov	r1, r9
 8007544:	4640      	mov	r0, r8
 8007546:	6923      	ldr	r3, [r4, #16]
 8007548:	47d0      	blx	sl
 800754a:	3001      	adds	r0, #1
 800754c:	d0ab      	beq.n	80074a6 <_printf_i+0x166>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	079b      	lsls	r3, r3, #30
 8007552:	d413      	bmi.n	800757c <_printf_i+0x23c>
 8007554:	68e0      	ldr	r0, [r4, #12]
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	4298      	cmp	r0, r3
 800755a:	bfb8      	it	lt
 800755c:	4618      	movlt	r0, r3
 800755e:	e7a4      	b.n	80074aa <_printf_i+0x16a>
 8007560:	2301      	movs	r3, #1
 8007562:	4632      	mov	r2, r6
 8007564:	4649      	mov	r1, r9
 8007566:	4640      	mov	r0, r8
 8007568:	47d0      	blx	sl
 800756a:	3001      	adds	r0, #1
 800756c:	d09b      	beq.n	80074a6 <_printf_i+0x166>
 800756e:	3501      	adds	r5, #1
 8007570:	68e3      	ldr	r3, [r4, #12]
 8007572:	9903      	ldr	r1, [sp, #12]
 8007574:	1a5b      	subs	r3, r3, r1
 8007576:	42ab      	cmp	r3, r5
 8007578:	dcf2      	bgt.n	8007560 <_printf_i+0x220>
 800757a:	e7eb      	b.n	8007554 <_printf_i+0x214>
 800757c:	2500      	movs	r5, #0
 800757e:	f104 0619 	add.w	r6, r4, #25
 8007582:	e7f5      	b.n	8007570 <_printf_i+0x230>
 8007584:	08007819 	.word	0x08007819
 8007588:	0800782a 	.word	0x0800782a

0800758c <__retarget_lock_acquire_recursive>:
 800758c:	4770      	bx	lr

0800758e <__retarget_lock_release_recursive>:
 800758e:	4770      	bx	lr

08007590 <memchr>:
 8007590:	4603      	mov	r3, r0
 8007592:	b510      	push	{r4, lr}
 8007594:	b2c9      	uxtb	r1, r1
 8007596:	4402      	add	r2, r0
 8007598:	4293      	cmp	r3, r2
 800759a:	4618      	mov	r0, r3
 800759c:	d101      	bne.n	80075a2 <memchr+0x12>
 800759e:	2000      	movs	r0, #0
 80075a0:	e003      	b.n	80075aa <memchr+0x1a>
 80075a2:	7804      	ldrb	r4, [r0, #0]
 80075a4:	3301      	adds	r3, #1
 80075a6:	428c      	cmp	r4, r1
 80075a8:	d1f6      	bne.n	8007598 <memchr+0x8>
 80075aa:	bd10      	pop	{r4, pc}

080075ac <memcpy>:
 80075ac:	440a      	add	r2, r1
 80075ae:	4291      	cmp	r1, r2
 80075b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80075b4:	d100      	bne.n	80075b8 <memcpy+0xc>
 80075b6:	4770      	bx	lr
 80075b8:	b510      	push	{r4, lr}
 80075ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075be:	4291      	cmp	r1, r2
 80075c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075c4:	d1f9      	bne.n	80075ba <memcpy+0xe>
 80075c6:	bd10      	pop	{r4, pc}

080075c8 <memmove>:
 80075c8:	4288      	cmp	r0, r1
 80075ca:	b510      	push	{r4, lr}
 80075cc:	eb01 0402 	add.w	r4, r1, r2
 80075d0:	d902      	bls.n	80075d8 <memmove+0x10>
 80075d2:	4284      	cmp	r4, r0
 80075d4:	4623      	mov	r3, r4
 80075d6:	d807      	bhi.n	80075e8 <memmove+0x20>
 80075d8:	1e43      	subs	r3, r0, #1
 80075da:	42a1      	cmp	r1, r4
 80075dc:	d008      	beq.n	80075f0 <memmove+0x28>
 80075de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075e6:	e7f8      	b.n	80075da <memmove+0x12>
 80075e8:	4601      	mov	r1, r0
 80075ea:	4402      	add	r2, r0
 80075ec:	428a      	cmp	r2, r1
 80075ee:	d100      	bne.n	80075f2 <memmove+0x2a>
 80075f0:	bd10      	pop	{r4, pc}
 80075f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075fa:	e7f7      	b.n	80075ec <memmove+0x24>

080075fc <_realloc_r>:
 80075fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007600:	4680      	mov	r8, r0
 8007602:	4614      	mov	r4, r2
 8007604:	460e      	mov	r6, r1
 8007606:	b921      	cbnz	r1, 8007612 <_realloc_r+0x16>
 8007608:	4611      	mov	r1, r2
 800760a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800760e:	f7ff bbf3 	b.w	8006df8 <_malloc_r>
 8007612:	b92a      	cbnz	r2, 8007620 <_realloc_r+0x24>
 8007614:	f7ff fb88 	bl	8006d28 <_free_r>
 8007618:	4625      	mov	r5, r4
 800761a:	4628      	mov	r0, r5
 800761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007620:	f000 f81b 	bl	800765a <_malloc_usable_size_r>
 8007624:	4284      	cmp	r4, r0
 8007626:	4607      	mov	r7, r0
 8007628:	d802      	bhi.n	8007630 <_realloc_r+0x34>
 800762a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800762e:	d812      	bhi.n	8007656 <_realloc_r+0x5a>
 8007630:	4621      	mov	r1, r4
 8007632:	4640      	mov	r0, r8
 8007634:	f7ff fbe0 	bl	8006df8 <_malloc_r>
 8007638:	4605      	mov	r5, r0
 800763a:	2800      	cmp	r0, #0
 800763c:	d0ed      	beq.n	800761a <_realloc_r+0x1e>
 800763e:	42bc      	cmp	r4, r7
 8007640:	4622      	mov	r2, r4
 8007642:	4631      	mov	r1, r6
 8007644:	bf28      	it	cs
 8007646:	463a      	movcs	r2, r7
 8007648:	f7ff ffb0 	bl	80075ac <memcpy>
 800764c:	4631      	mov	r1, r6
 800764e:	4640      	mov	r0, r8
 8007650:	f7ff fb6a 	bl	8006d28 <_free_r>
 8007654:	e7e1      	b.n	800761a <_realloc_r+0x1e>
 8007656:	4635      	mov	r5, r6
 8007658:	e7df      	b.n	800761a <_realloc_r+0x1e>

0800765a <_malloc_usable_size_r>:
 800765a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800765e:	1f18      	subs	r0, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	bfbc      	itt	lt
 8007664:	580b      	ldrlt	r3, [r1, r0]
 8007666:	18c0      	addlt	r0, r0, r3
 8007668:	4770      	bx	lr
	...

0800766c <_init>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	bf00      	nop
 8007670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007672:	bc08      	pop	{r3}
 8007674:	469e      	mov	lr, r3
 8007676:	4770      	bx	lr

08007678 <_fini>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr
