
Digital_Clock_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08004f30  08004f30  00014f30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005154  08005154  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08005154  08005154  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005154  08005154  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005154  08005154  00015154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800515c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200000a8  08005200  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08005200  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed02  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005717  00000000  00000000  0003edcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000eb50  00000000  00000000  000444e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00053038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e70  00000000  00000000  00054178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cc1a  00000000  00000000  00055fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023fae  00000000  00000000  00072c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093ef8  00000000  00000000  00096bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012aaa8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000372c  00000000  00000000  0012aaf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f18 	.word	0x08004f18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08004f18 	.word	0x08004f18

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_d2f>:
 80004d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004dc:	bf24      	itt	cs
 80004de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004e6:	d90d      	bls.n	8000504 <__aeabi_d2f+0x30>
 80004e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004fc:	bf08      	it	eq
 80004fe:	f020 0001 	biceq.w	r0, r0, #1
 8000502:	4770      	bx	lr
 8000504:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000508:	d121      	bne.n	800054e <__aeabi_d2f+0x7a>
 800050a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800050e:	bfbc      	itt	lt
 8000510:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000514:	4770      	bxlt	lr
 8000516:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800051a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800051e:	f1c2 0218 	rsb	r2, r2, #24
 8000522:	f1c2 0c20 	rsb	ip, r2, #32
 8000526:	fa10 f30c 	lsls.w	r3, r0, ip
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	bf18      	it	ne
 8000530:	f040 0001 	orrne.w	r0, r0, #1
 8000534:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000538:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800053c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000540:	ea40 000c 	orr.w	r0, r0, ip
 8000544:	fa23 f302 	lsr.w	r3, r3, r2
 8000548:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800054c:	e7cc      	b.n	80004e8 <__aeabi_d2f+0x14>
 800054e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000552:	d107      	bne.n	8000564 <__aeabi_d2f+0x90>
 8000554:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000558:	bf1e      	ittt	ne
 800055a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800055e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000562:	4770      	bxne	lr
 8000564:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000568:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800056c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__aeabi_f2uiz>:
 8000574:	0042      	lsls	r2, r0, #1
 8000576:	d20e      	bcs.n	8000596 <__aeabi_f2uiz+0x22>
 8000578:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800057c:	d30b      	bcc.n	8000596 <__aeabi_f2uiz+0x22>
 800057e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000582:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000586:	d409      	bmi.n	800059c <__aeabi_f2uiz+0x28>
 8000588:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800058c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000590:	fa23 f002 	lsr.w	r0, r3, r2
 8000594:	4770      	bx	lr
 8000596:	f04f 0000 	mov.w	r0, #0
 800059a:	4770      	bx	lr
 800059c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005a0:	d101      	bne.n	80005a6 <__aeabi_f2uiz+0x32>
 80005a2:	0242      	lsls	r2, r0, #9
 80005a4:	d102      	bne.n	80005ac <__aeabi_f2uiz+0x38>
 80005a6:	f04f 30ff 	mov.w	r0, #4294967295
 80005aa:	4770      	bx	lr
 80005ac:	f04f 0000 	mov.w	r0, #0
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__buzzer_off>:
static void __buzzer_on(){
	HAL_GPIO_WritePin(ALARM_Data.buzzer_port, ALARM_Data.buzzer_pin, 1);
}

static void __buzzer_off(){
	HAL_GPIO_WritePin(ALARM_Data.buzzer_port, ALARM_Data.buzzer_pin, 0);
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <__buzzer_off+0xc>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	8a19      	ldrh	r1, [r3, #16]
 80005ba:	68d8      	ldr	r0, [r3, #12]
 80005bc:	f002 b85e 	b.w	800267c <HAL_GPIO_WritePin>
 80005c0:	200000c4 	.word	0x200000c4

080005c4 <ALARM_Init>:
		__buzzer_off();
	}
}

void ALARM_Init(GPIO_TypeDef *p_buzzer_port, uint16_t p_buzzer_pin){
	ALARM_Data.state = FINDING_NEXT_TIMELINE;
 80005c4:	2200      	movs	r2, #0
 80005c6:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <ALARM_Init+0x10>)
 80005c8:	701a      	strb	r2, [r3, #0]
	ALARM_Data.buzzer_port = p_buzzer_port;
 80005ca:	60d8      	str	r0, [r3, #12]
	ALARM_Data.buzzer_pin = p_buzzer_pin;
 80005cc:	8219      	strh	r1, [r3, #16]
	__buzzer_off();
 80005ce:	f7ff bff1 	b.w	80005b4 <__buzzer_off>
 80005d2:	bf00      	nop
 80005d4:	200000c4 	.word	0x200000c4

080005d8 <ALARM_Handle>:
}

void ALARM_Handle(){
 80005d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(ALARM_Data.state){
 80005da:	4c43      	ldr	r4, [pc, #268]	; (80006e8 <ALARM_Handle+0x110>)
 80005dc:	7823      	ldrb	r3, [r4, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d02a      	beq.n	8000638 <ALARM_Handle+0x60>
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d049      	beq.n	800067a <ALARM_Handle+0xa2>
 80005e6:	bb33      	cbnz	r3, 8000636 <ALARM_Handle+0x5e>
	if(TIMELINE_Data.len != 0){
 80005e8:	4a40      	ldr	r2, [pc, #256]	; (80006ec <ALARM_Handle+0x114>)
 80005ea:	f892 603c 	ldrb.w	r6, [r2, #60]	; 0x3c
 80005ee:	b316      	cbz	r6, 8000636 <ALARM_Handle+0x5e>
			uint8_t t_system_time = REALTIME_Data.system_hour * 60 + REALTIME_Data.system_minute;
 80005f0:	483f      	ldr	r0, [pc, #252]	; (80006f0 <ALARM_Handle+0x118>)
			if(t_system_time < t_alarm_time && ((0x01 << (REALTIME_Data.system_day - 1)) & TIMELINE_Data.flash_data[i].day) != 0){
 80005f2:	7887      	ldrb	r7, [r0, #2]
			uint8_t t_system_time = REALTIME_Data.system_hour * 60 + REALTIME_Data.system_minute;
 80005f4:	7801      	ldrb	r1, [r0, #0]
 80005f6:	7845      	ldrb	r5, [r0, #1]
			if(t_system_time < t_alarm_time && ((0x01 << (REALTIME_Data.system_day - 1)) & TIMELINE_Data.flash_data[i].day) != 0){
 80005f8:	1e78      	subs	r0, r7, #1
 80005fa:	2701      	movs	r7, #1
			uint8_t t_system_time = REALTIME_Data.system_hour * 60 + REALTIME_Data.system_minute;
 80005fc:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8000600:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8000604:	b2c9      	uxtb	r1, r1
 8000606:	4087      	lsls	r7, r0
			if(TIMELINE_Data.flash_data[i].timeline_state == TIMELINE_OFF) continue;
 8000608:	79d0      	ldrb	r0, [r2, #7]
 800060a:	b178      	cbz	r0, 800062c <ALARM_Handle+0x54>
			uint8_t t_alarm_time = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 800060c:	7910      	ldrb	r0, [r2, #4]
 800060e:	ebc0 1500 	rsb	r5, r0, r0, lsl #4
 8000612:	7950      	ldrb	r0, [r2, #5]
 8000614:	eb00 0085 	add.w	r0, r0, r5, lsl #2
			if(t_system_time < t_alarm_time && ((0x01 << (REALTIME_Data.system_day - 1)) & TIMELINE_Data.flash_data[i].day) != 0){
 8000618:	b2c0      	uxtb	r0, r0
 800061a:	4281      	cmp	r1, r0
 800061c:	d206      	bcs.n	800062c <ALARM_Handle+0x54>
 800061e:	7990      	ldrb	r0, [r2, #6]
 8000620:	4238      	tst	r0, r7
 8000622:	d003      	beq.n	800062c <ALARM_Handle+0x54>
				ALARM_Data.next_timeline_index = i;
 8000624:	7063      	strb	r3, [r4, #1]
				ALARM_Data.state = WAITING_FOR_TIMELINE;
 8000626:	2301      	movs	r3, #1
		ALARM_Data.state = FINDING_NEXT_TIMELINE;
 8000628:	7023      	strb	r3, [r4, #0]
		return;
 800062a:	e004      	b.n	8000636 <ALARM_Handle+0x5e>
		for(int i = 0; i < TIMELINE_Data.len; i++){
 800062c:	3301      	adds	r3, #1
 800062e:	42b3      	cmp	r3, r6
 8000630:	f102 0204 	add.w	r2, r2, #4
 8000634:	dbe8      	blt.n	8000608 <ALARM_Handle+0x30>
			__alarm_running();
			break;
		default:
			break;
	}
}
 8000636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t t_alarm_time = TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].hour * 60 + TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].minute;
 8000638:	7863      	ldrb	r3, [r4, #1]
	if(TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].timeline_state == TIMELINE_OFF){
 800063a:	492c      	ldr	r1, [pc, #176]	; (80006ec <ALARM_Handle+0x114>)
 800063c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8000640:	79cb      	ldrb	r3, [r1, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f0      	beq.n	8000628 <ALARM_Handle+0x50>
	uint8_t t_system_time = REALTIME_Data.system_hour * 60 + REALTIME_Data.system_minute;
 8000646:	482a      	ldr	r0, [pc, #168]	; (80006f0 <ALARM_Handle+0x118>)
 8000648:	7802      	ldrb	r2, [r0, #0]
 800064a:	ebc2 1302 	rsb	r3, r2, r2, lsl #4
 800064e:	7842      	ldrb	r2, [r0, #1]
 8000650:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	uint8_t t_alarm_time = TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].hour * 60 + TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].minute;
 8000654:	790b      	ldrb	r3, [r1, #4]
	if(t_system_time == t_alarm_time){
 8000656:	b2d2      	uxtb	r2, r2
	uint8_t t_alarm_time = TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].hour * 60 + TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].minute;
 8000658:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
 800065c:	794b      	ldrb	r3, [r1, #5]
 800065e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	if(t_system_time == t_alarm_time){
 8000662:	b2db      	uxtb	r3, r3
 8000664:	429a      	cmp	r2, r3
 8000666:	d1e6      	bne.n	8000636 <ALARM_Handle+0x5e>
		ALARM_Data.state = ALARM_RUNNING;
 8000668:	2302      	movs	r3, #2
 800066a:	7023      	strb	r3, [r4, #0]
		ALARM_Data.buzzer_running_timer = HAL_GetTick();
 800066c:	f001 fbe8 	bl	8001e40 <HAL_GetTick>
 8000670:	6060      	str	r0, [r4, #4]
				ALARM_Data.buzzer_cycle_timer = HAL_GetTick();
 8000672:	f001 fbe5 	bl	8001e40 <HAL_GetTick>
 8000676:	60a0      	str	r0, [r4, #8]
 8000678:	e7dd      	b.n	8000636 <ALARM_Handle+0x5e>
	if(HAL_GetTick() - ALARM_Data.buzzer_running_timer < BUZZER_RUNNING_TIME){
 800067a:	f001 fbe1 	bl	8001e40 <HAL_GetTick>
 800067e:	6863      	ldr	r3, [r4, #4]
 8000680:	1ac0      	subs	r0, r0, r3
 8000682:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000686:	4298      	cmp	r0, r3
 8000688:	d828      	bhi.n	80006dc <ALARM_Handle+0x104>
		if(buzzer_counter <= 2){
 800068a:	4d1a      	ldr	r5, [pc, #104]	; (80006f4 <ALARM_Handle+0x11c>)
 800068c:	782b      	ldrb	r3, [r5, #0]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d812      	bhi.n	80006b8 <ALARM_Handle+0xe0>
			if(buzzer_counter % 2 == 0)
 8000692:	07db      	lsls	r3, r3, #31
 8000694:	d41f      	bmi.n	80006d6 <ALARM_Handle+0xfe>
	HAL_GPIO_WritePin(ALARM_Data.buzzer_port, ALARM_Data.buzzer_pin, 1);
 8000696:	2201      	movs	r2, #1
 8000698:	8a21      	ldrh	r1, [r4, #16]
 800069a:	68e0      	ldr	r0, [r4, #12]
 800069c:	f001 ffee 	bl	800267c <HAL_GPIO_WritePin>
			if(HAL_GetTick() - ALARM_Data.buzzer_cycle_timer >= BUZZER_SHORT_CYCLE){
 80006a0:	f001 fbce 	bl	8001e40 <HAL_GetTick>
 80006a4:	68a3      	ldr	r3, [r4, #8]
 80006a6:	1ac0      	subs	r0, r0, r3
 80006a8:	2863      	cmp	r0, #99	; 0x63
 80006aa:	d905      	bls.n	80006b8 <ALARM_Handle+0xe0>
				buzzer_counter++;
 80006ac:	782b      	ldrb	r3, [r5, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	702b      	strb	r3, [r5, #0]
				ALARM_Data.buzzer_cycle_timer = HAL_GetTick();
 80006b2:	f001 fbc5 	bl	8001e40 <HAL_GetTick>
 80006b6:	60a0      	str	r0, [r4, #8]
		if(buzzer_counter == 3){
 80006b8:	782b      	ldrb	r3, [r5, #0]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d1bb      	bne.n	8000636 <ALARM_Handle+0x5e>
			__buzzer_off();
 80006be:	f7ff ff79 	bl	80005b4 <__buzzer_off>
			if(HAL_GetTick() - ALARM_Data.buzzer_cycle_timer >= BUZZER_LONG_CYCLE){
 80006c2:	f001 fbbd 	bl	8001e40 <HAL_GetTick>
 80006c6:	68a3      	ldr	r3, [r4, #8]
 80006c8:	1ac0      	subs	r0, r0, r3
 80006ca:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80006ce:	d3b2      	bcc.n	8000636 <ALARM_Handle+0x5e>
				buzzer_counter = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	702b      	strb	r3, [r5, #0]
 80006d4:	e7cd      	b.n	8000672 <ALARM_Handle+0x9a>
				__buzzer_off();
 80006d6:	f7ff ff6d 	bl	80005b4 <__buzzer_off>
 80006da:	e7e1      	b.n	80006a0 <ALARM_Handle+0xc8>
		ALARM_Data.state = FINDING_NEXT_TIMELINE;
 80006dc:	2300      	movs	r3, #0
 80006de:	7023      	strb	r3, [r4, #0]
}
 80006e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		__buzzer_off();
 80006e4:	f7ff bf66 	b.w	80005b4 <__buzzer_off>
 80006e8:	200000c4 	.word	0x200000c4
 80006ec:	200000fc 	.word	0x200000fc
 80006f0:	2000013c 	.word	0x2000013c
 80006f4:	200000d8 	.word	0x200000d8

080006f8 <ALARM_Stop_Buzzer>:

void ALARM_Stop_Buzzer(){
	if(ALARM_Data.state == ALARM_RUNNING){
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <ALARM_Stop_Buzzer+0x10>)
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	2a02      	cmp	r2, #2
		ALARM_Data.state = FINDING_NEXT_TIMELINE;
 80006fe:	bf04      	itt	eq
 8000700:	2200      	moveq	r2, #0
 8000702:	701a      	strbeq	r2, [r3, #0]
	}
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200000c4 	.word	0x200000c4

0800070c <ALARM_Is_Buzzer_Running>:

uint8_t ALARM_Is_Buzzer_Running(){
	return (ALARM_Data.state == ALARM_RUNNING) ? 1 : 0;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <ALARM_Is_Buzzer_Running+0xc>)
 800070e:	7818      	ldrb	r0, [r3, #0]
}
 8000710:	1e83      	subs	r3, r0, #2
 8000712:	4258      	negs	r0, r3
 8000714:	4158      	adcs	r0, r3
 8000716:	4770      	bx	lr
 8000718:	200000c4 	.word	0x200000c4

0800071c <BTN_Short_Pressing_Callback>:

BUTTON_HandleTypedef h_encoder_button;
ENCODER_HandleTypeDef h_encoder;
extern TIM_HandleTypeDef htim2;

void BTN_Short_Pressing_Callback(BUTTON_HandleTypedef *p_ButtonX){
 800071c:	b508      	push	{r3, lr}
	if(p_ButtonX == &h_encoder_button){
 800071e:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <BTN_Short_Pressing_Callback+0x98>)
 8000720:	4283      	cmp	r3, r0
 8000722:	d145      	bne.n	80007b0 <BTN_Short_Pressing_Callback+0x94>
		if(ALARM_Is_Buzzer_Running()){
 8000724:	f7ff fff2 	bl	800070c <ALARM_Is_Buzzer_Running>
 8000728:	b388      	cbz	r0, 800078e <BTN_Short_Pressing_Callback+0x72>
				break;
			default:
				break;
		}
	}
}
 800072a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			ALARM_Stop_Buzzer();
 800072e:	f7ff bfe3 	b.w	80006f8 <ALARM_Stop_Buzzer>
}
 8000732:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				SETTING_MENU_Set_State();
 8000736:	f000 bc07 	b.w	8000f48 <SETTING_MENU_Set_State>
				if(SETTING_MENU_Data.current_pointer == 0){
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <BTN_Short_Pressing_Callback+0x9c>)
 800073c:	f993 3000 	ldrsb.w	r3, [r3]
 8000740:	b91b      	cbnz	r3, 800074a <BTN_Short_Pressing_Callback+0x2e>
}
 8000742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					SETTING_MENU_Change_Working_State();
 8000746:	f000 bc39 	b.w	8000fbc <SETTING_MENU_Change_Working_State>
				} else if(SETTING_MENU_Data.current_pointer == 1){
 800074a:	2b01      	cmp	r3, #1
 800074c:	d103      	bne.n	8000756 <BTN_Short_Pressing_Callback+0x3a>
}
 800074e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					TL_MENU_Set_State();
 8000752:	f000 be9f 	b.w	8001494 <TL_MENU_Set_State>
				} else if(SETTING_MENU_Data.current_pointer == 2){
 8000756:	2b02      	cmp	r3, #2
 8000758:	d12a      	bne.n	80007b0 <BTN_Short_Pressing_Callback+0x94>
}
 800075a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					SR_MENU_Set_State();
 800075e:	f000 bcb3 	b.w	80010c8 <SR_MENU_Set_State>
				SR_MENU_Change_Setting_State(INCREASE);
 8000762:	2001      	movs	r0, #1
}
 8000764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				SR_MENU_Change_Setting_State(INCREASE);
 8000768:	f000 bcc2 	b.w	80010f0 <SR_MENU_Change_Setting_State>
				if(TL_MENU_Data.current_pointer == 0){
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <BTN_Short_Pressing_Callback+0xa0>)
 800076e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000772:	b91b      	cbnz	r3, 800077c <BTN_Short_Pressing_Callback+0x60>
}
 8000774:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					ST_MENU_Set_State();
 8000778:	f000 bda4 	b.w	80012c4 <ST_MENU_Set_State>
}
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					TL_MENU_Change_Working_State();
 8000780:	f000 bea0 	b.w	80014c4 <TL_MENU_Change_Working_State>
				ST_MENU_Change_Setting_State(INCREASE);
 8000784:	2001      	movs	r0, #1
}
 8000786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				ST_MENU_Change_Setting_State(INCREASE);
 800078a:	f000 bdaf 	b.w	80012ec <ST_MENU_Change_Setting_State>
		switch(MENU_Data.menu_type){
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <BTN_Short_Pressing_Callback+0xa4>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b04      	cmp	r3, #4
 8000794:	d80c      	bhi.n	80007b0 <BTN_Short_Pressing_Callback+0x94>
 8000796:	a201      	add	r2, pc, #4	; (adr r2, 800079c <BTN_Short_Pressing_Callback+0x80>)
 8000798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079c:	08000733 	.word	0x08000733
 80007a0:	0800073b 	.word	0x0800073b
 80007a4:	08000763 	.word	0x08000763
 80007a8:	0800076d 	.word	0x0800076d
 80007ac:	08000785 	.word	0x08000785
}
 80007b0:	bd08      	pop	{r3, pc}
 80007b2:	bf00      	nop
 80007b4:	200000e4 	.word	0x200000e4
 80007b8:	20000168 	.word	0x20000168
 80007bc:	20000177 	.word	0x20000177
 80007c0:	20000154 	.word	0x20000154

080007c4 <BTN_Long_Pressing_Callback>:

void BTN_Long_Pressing_Callback(BUTTON_HandleTypedef *p_ButtonX){
 80007c4:	b508      	push	{r3, lr}
	if(p_ButtonX == &h_encoder_button){
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <BTN_Long_Pressing_Callback+0x7c>)
 80007c8:	4283      	cmp	r3, r0
 80007ca:	d137      	bne.n	800083c <BTN_Long_Pressing_Callback+0x78>
		if(ALARM_Is_Buzzer_Running()){
 80007cc:	f7ff ff9e 	bl	800070c <ALARM_Is_Buzzer_Running>
 80007d0:	b320      	cbz	r0, 800081c <BTN_Long_Pressing_Callback+0x58>
				break;
			default:
				break;
		}
	}
}
 80007d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			ALARM_Stop_Buzzer();
 80007d6:	f7ff bf8f 	b.w	80006f8 <ALARM_Stop_Buzzer>
				if(SETTING_MENU_Data.is_setting_time_format == 1){
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <BTN_Long_Pressing_Callback+0x80>)
 80007dc:	785b      	ldrb	r3, [r3, #1]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d103      	bne.n	80007ea <BTN_Long_Pressing_Callback+0x26>
}
 80007e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					SETTING_MENU_Change_Working_State();
 80007e6:	f000 bbe9 	b.w	8000fbc <SETTING_MENU_Change_Working_State>
}
 80007ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					MAIN_MENU_Set_State();
 80007ee:	f000 bb4f 	b.w	8000e90 <MAIN_MENU_Set_State>
				SR_MENU_Change_Setting_State(DECREASE);
 80007f2:	2000      	movs	r0, #0
}
 80007f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				SR_MENU_Change_Setting_State(DECREASE);
 80007f8:	f000 bc7a 	b.w	80010f0 <SR_MENU_Change_Setting_State>
				if(TL_MENU_Data.woking_state == NORMAL_STATE){
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <BTN_Long_Pressing_Callback+0x84>)
 80007fe:	78db      	ldrb	r3, [r3, #3]
 8000800:	b91b      	cbnz	r3, 800080a <BTN_Long_Pressing_Callback+0x46>
}
 8000802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					SETTING_MENU_Set_State();
 8000806:	f000 bb9f 	b.w	8000f48 <SETTING_MENU_Set_State>
}
 800080a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					TL_MENU_Change_Working_State();
 800080e:	f000 be59 	b.w	80014c4 <TL_MENU_Change_Working_State>
				ST_MENU_Change_Setting_State(DECREASE);
 8000812:	2000      	movs	r0, #0
}
 8000814:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				ST_MENU_Change_Setting_State(DECREASE);
 8000818:	f000 bd68 	b.w	80012ec <ST_MENU_Change_Setting_State>
		switch(MENU_Data.menu_type){
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <BTN_Long_Pressing_Callback+0x88>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	3b01      	subs	r3, #1
 8000822:	2b03      	cmp	r3, #3
 8000824:	d80a      	bhi.n	800083c <BTN_Long_Pressing_Callback+0x78>
 8000826:	a201      	add	r2, pc, #4	; (adr r2, 800082c <BTN_Long_Pressing_Callback+0x68>)
 8000828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082c:	080007db 	.word	0x080007db
 8000830:	080007f3 	.word	0x080007f3
 8000834:	080007fd 	.word	0x080007fd
 8000838:	08000813 	.word	0x08000813
}
 800083c:	bd08      	pop	{r3, pc}
 800083e:	bf00      	nop
 8000840:	200000e4 	.word	0x200000e4
 8000844:	20000168 	.word	0x20000168
 8000848:	20000177 	.word	0x20000177
 800084c:	20000154 	.word	0x20000154

08000850 <ENCODER_Forward_Callback>:

void ENCODER_Forward_Callback(ENCODER_HandleTypeDef *p_encoder){
	if(p_encoder == &h_encoder){
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <ENCODER_Forward_Callback+0x48>)
 8000852:	4283      	cmp	r3, r0
 8000854:	d11f      	bne.n	8000896 <ENCODER_Forward_Callback+0x46>
		switch(MENU_Data.menu_type){
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <ENCODER_Forward_Callback+0x4c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	3b01      	subs	r3, #1
 800085c:	2b03      	cmp	r3, #3
 800085e:	d81a      	bhi.n	8000896 <ENCODER_Forward_Callback+0x46>
 8000860:	e8df f003 	tbb	[pc, r3]
 8000864:	160e0b02 	.word	0x160e0b02
			case MAIN_MENU:

				break;
			case SETTING_MENU:
				if(SETTING_MENU_Data.is_setting_time_format == 1){
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ENCODER_Forward_Callback+0x50>)
 800086a:	785b      	ldrb	r3, [r3, #1]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d101      	bne.n	8000874 <ENCODER_Forward_Callback+0x24>
					SETTING_MENU_Config_Time_Format();
 8000870:	f000 bb7a 	b.w	8000f68 <SETTING_MENU_Config_Time_Format>
				} else{
					SETTING_MENU_Change_Pointer(INCREASE);
 8000874:	2001      	movs	r0, #1
 8000876:	f000 bb87 	b.w	8000f88 <SETTING_MENU_Change_Pointer>
				}
				break;
			case SETTING_REALTIME_MENU:
				SR_MENU_Set_Value(INCREASE);
 800087a:	2001      	movs	r0, #1
 800087c:	f000 bc5a 	b.w	8001134 <SR_MENU_Set_Value>
				break;
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.woking_state == NORMAL_STATE)
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <ENCODER_Forward_Callback+0x54>)
					TL_MENU_Change_Pointer(INCREASE);
 8000882:	2001      	movs	r0, #1
				if(TL_MENU_Data.woking_state == NORMAL_STATE)
 8000884:	78db      	ldrb	r3, [r3, #3]
 8000886:	b90b      	cbnz	r3, 800088c <ENCODER_Forward_Callback+0x3c>
					TL_MENU_Change_Pointer(INCREASE);
 8000888:	f000 be58 	b.w	800153c <TL_MENU_Change_Pointer>
				else
					TL_MENU_Config_Timeline(INCREASE);
 800088c:	f000 be7e 	b.w	800158c <TL_MENU_Config_Timeline>
				break;
			case SETTING_TIMELINE_MENU:
				ST_MENU_Set_Value(INCREASE);
 8000890:	2001      	movs	r0, #1
 8000892:	f000 bd51 	b.w	8001338 <ST_MENU_Set_Value>
				break;
			default:
				break;
		}
	}
}
 8000896:	4770      	bx	lr
 8000898:	200000dc 	.word	0x200000dc
 800089c:	20000154 	.word	0x20000154
 80008a0:	20000168 	.word	0x20000168
 80008a4:	20000177 	.word	0x20000177

080008a8 <ENCODER_Backward_Callback>:

void ENCODER_Backward_Callback(ENCODER_HandleTypeDef *p_encoder){
	if(p_encoder == &h_encoder){
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <ENCODER_Backward_Callback+0x48>)
 80008aa:	4283      	cmp	r3, r0
 80008ac:	d11f      	bne.n	80008ee <ENCODER_Backward_Callback+0x46>
		switch(MENU_Data.menu_type){
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <ENCODER_Backward_Callback+0x4c>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d81a      	bhi.n	80008ee <ENCODER_Backward_Callback+0x46>
 80008b8:	e8df f003 	tbb	[pc, r3]
 80008bc:	160e0b02 	.word	0x160e0b02
			case MAIN_MENU:

				break;
			case SETTING_MENU:
				if(SETTING_MENU_Data.is_setting_time_format == 1){
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <ENCODER_Backward_Callback+0x50>)
 80008c2:	785b      	ldrb	r3, [r3, #1]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d101      	bne.n	80008cc <ENCODER_Backward_Callback+0x24>
					SETTING_MENU_Config_Time_Format();
 80008c8:	f000 bb4e 	b.w	8000f68 <SETTING_MENU_Config_Time_Format>
				} else{
					SETTING_MENU_Change_Pointer(DECREASE);
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 bb5b 	b.w	8000f88 <SETTING_MENU_Change_Pointer>
				}
				break;
			case SETTING_REALTIME_MENU:
				SR_MENU_Set_Value(DECREASE);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 bc2e 	b.w	8001134 <SR_MENU_Set_Value>
				break;
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.woking_state == NORMAL_STATE)
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <ENCODER_Backward_Callback+0x54>)
 80008da:	78d8      	ldrb	r0, [r3, #3]
 80008dc:	b908      	cbnz	r0, 80008e2 <ENCODER_Backward_Callback+0x3a>
					TL_MENU_Change_Pointer(DECREASE);
 80008de:	f000 be2d 	b.w	800153c <TL_MENU_Change_Pointer>
				else
					TL_MENU_Config_Timeline(DECREASE);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 be52 	b.w	800158c <TL_MENU_Config_Timeline>
				break;
			case SETTING_TIMELINE_MENU:
				ST_MENU_Set_Value(DECREASE);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 bd25 	b.w	8001338 <ST_MENU_Set_Value>
				break;
			default:
				break;
		}
	}
}
 80008ee:	4770      	bx	lr
 80008f0:	200000dc 	.word	0x200000dc
 80008f4:	20000154 	.word	0x20000154
 80008f8:	20000168 	.word	0x20000168
 80008fc:	20000177 	.word	0x20000177

08000900 <ROTARY_ENCODER_Init>:

void ROTARY_ENCODER_Init(){
 8000900:	b508      	push	{r3, lr}
	BUTTON_Init(&h_encoder_button, GPIOB, GPIO_PIN_4);
 8000902:	2210      	movs	r2, #16
 8000904:	4909      	ldr	r1, [pc, #36]	; (800092c <ROTARY_ENCODER_Init+0x2c>)
 8000906:	480a      	ldr	r0, [pc, #40]	; (8000930 <ROTARY_ENCODER_Init+0x30>)
 8000908:	f003 fddc 	bl	80044c4 <BUTTON_Init>
	BUTTON_Set_Callback_Function(NULL, NULL, BTN_Short_Pressing_Callback, BTN_Long_Pressing_Callback);
 800090c:	2100      	movs	r1, #0
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <ROTARY_ENCODER_Init+0x34>)
 8000910:	4608      	mov	r0, r1
 8000912:	4a09      	ldr	r2, [pc, #36]	; (8000938 <ROTARY_ENCODER_Init+0x38>)
 8000914:	f003 fde0 	bl	80044d8 <BUTTON_Set_Callback_Function>
	ENCODER_Init(&h_encoder, &htim2);
 8000918:	4908      	ldr	r1, [pc, #32]	; (800093c <ROTARY_ENCODER_Init+0x3c>)
 800091a:	4809      	ldr	r0, [pc, #36]	; (8000940 <ROTARY_ENCODER_Init+0x40>)
 800091c:	f003 fbfa 	bl	8004114 <ENCODER_Init>
	ENCODER_Set_Callback_Function(ENCODER_Forward_Callback, ENCODER_Backward_Callback);
}
 8000920:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ENCODER_Set_Callback_Function(ENCODER_Forward_Callback, ENCODER_Backward_Callback);
 8000924:	4907      	ldr	r1, [pc, #28]	; (8000944 <ROTARY_ENCODER_Init+0x44>)
 8000926:	4808      	ldr	r0, [pc, #32]	; (8000948 <ROTARY_ENCODER_Init+0x48>)
 8000928:	f003 bbf8 	b.w	800411c <ENCODER_Set_Callback_Function>
 800092c:	40010c00 	.word	0x40010c00
 8000930:	200000e4 	.word	0x200000e4
 8000934:	080007c5 	.word	0x080007c5
 8000938:	0800071d 	.word	0x0800071d
 800093c:	2000027c 	.word	0x2000027c
 8000940:	200000dc 	.word	0x200000dc
 8000944:	080008a9 	.word	0x080008a9
 8000948:	08000851 	.word	0x08000851

0800094c <ROTARY_ENCODER_Handle>:

void ROTARY_ENCODER_Handle(){
 800094c:	b508      	push	{r3, lr}
	BUTTON_Handle(&h_encoder_button);
 800094e:	4804      	ldr	r0, [pc, #16]	; (8000960 <ROTARY_ENCODER_Handle+0x14>)
 8000950:	f003 fd5e 	bl	8004410 <BUTTON_Handle>
	ENCODER_Handle(&h_encoder);
}
 8000954:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ENCODER_Handle(&h_encoder);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <ROTARY_ENCODER_Handle+0x18>)
 800095a:	f003 bbff 	b.w	800415c <ENCODER_Handle>
 800095e:	bf00      	nop
 8000960:	200000e4 	.word	0x200000e4
 8000964:	200000dc 	.word	0x200000dc

08000968 <TIMELINE_Init>:
//			HAL_UART_Transmit(&huart2, (uint8_t *)Tx_Buffer, strlen(Tx_Buffer), 1000);
//		}
//	}
}

void TIMELINE_Init(){
 8000968:	b573      	push	{r0, r1, r4, r5, r6, lr}
#ifdef __STM32F0xx_HAL_H
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63;
#endif
#ifdef __STM32F1xx_HAL_H
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63; // 0x0800FC00
 800096a:	4c11      	ldr	r4, [pc, #68]	; (80009b0 <TIMELINE_Init+0x48>)
#endif
#ifdef __STM32F4xx_HAL_H
	TIMELINE_Data.add = SECTOR_7_ADD;
#endif

	TIMELINE_Data.len = 0;
 800096c:	2500      	movs	r5, #0
 800096e:	4626      	mov	r6, r4
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63; // 0x0800FC00
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <TIMELINE_Init+0x4c>)
	TIMELINE_Data.len = 0;
 8000972:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63; // 0x0800FC00
 8000976:	6023      	str	r3, [r4, #0]
	for(int i = 0; i < MAX_OPTIONS; i++){
		uint8_t t_data[DATA_FRAME_SIZE_BYTE];
		FLASH_Read(TIMELINE_Data.add + i*DATA_FRAME_SIZE_BYTE, t_data, DATA_FRAME_SIZE_BYTE);
 8000978:	2204      	movs	r2, #4
 800097a:	6830      	ldr	r0, [r6, #0]
 800097c:	eb0d 0102 	add.w	r1, sp, r2
 8000980:	4428      	add	r0, r5
 8000982:	f003 fdf8 	bl	8004576 <FLASH_Read>
		if(*(uint32_t *)t_data == 0xFFFFFFFF){
 8000986:	9b01      	ldr	r3, [sp, #4]
	for(int i = 0; i < MAX_OPTIONS; i++){
 8000988:	3504      	adds	r5, #4
		if(*(uint32_t *)t_data == 0xFFFFFFFF){
 800098a:	1c5a      	adds	r2, r3, #1
			*(uint32_t *)(TIMELINE_Data.flash_data + i) = 0xFFFFFFFF;
		} else{
			TIMELINE_Data.flash_data[i] = *((FLASH_DATA_t *)t_data);
 800098c:	bf17      	itett	ne
 800098e:	9801      	ldrne	r0, [sp, #4]
			*(uint32_t *)(TIMELINE_Data.flash_data + i) = 0xFFFFFFFF;
 8000990:	6063      	streq	r3, [r4, #4]
			TIMELINE_Data.flash_data[i] = *((FLASH_DATA_t *)t_data);
 8000992:	6060      	strne	r0, [r4, #4]
			TIMELINE_Data.len++;
 8000994:	f896 303c 	ldrbne.w	r3, [r6, #60]	; 0x3c
 8000998:	f104 0204 	add.w	r2, r4, #4
 800099c:	bf1c      	itt	ne
 800099e:	3301      	addne	r3, #1
 80009a0:	f886 303c 	strbne.w	r3, [r6, #60]	; 0x3c
	for(int i = 0; i < MAX_OPTIONS; i++){
 80009a4:	2d38      	cmp	r5, #56	; 0x38
 80009a6:	4614      	mov	r4, r2
 80009a8:	d1e6      	bne.n	8000978 <TIMELINE_Init+0x10>
		}
	}
}
 80009aa:	b002      	add	sp, #8
 80009ac:	bd70      	pop	{r4, r5, r6, pc}
 80009ae:	bf00      	nop
 80009b0:	200000fc 	.word	0x200000fc
 80009b4:	0800fc00 	.word	0x0800fc00

080009b8 <TIMELINE_Sort>:
		TIMELINE_Store_To_Flash();
	}
}

void TIMELINE_Sort(){
	for(int i = 0; i < TIMELINE_Data.len; i++){
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <TIMELINE_Sort+0x64>)
void TIMELINE_Sort(){
 80009ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(int i = 0; i < TIMELINE_Data.len; i++){
 80009be:	2400      	movs	r4, #0
 80009c0:	469e      	mov	lr, r3
 80009c2:	f89e 703c 	ldrb.w	r7, [lr, #60]	; 0x3c
 80009c6:	42a7      	cmp	r7, r4
 80009c8:	dc01      	bgt.n	80009ce <TIMELINE_Sort+0x16>
				TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[j];
				TIMELINE_Data.flash_data[j] = t_temp;
			}
		}
	}
}
 80009ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for(int j = i + 1; j < TIMELINE_Data.len; j++){
 80009ce:	3401      	adds	r4, #1
 80009d0:	461a      	mov	r2, r3
 80009d2:	4625      	mov	r5, r4
 80009d4:	42af      	cmp	r7, r5
 80009d6:	dc01      	bgt.n	80009dc <TIMELINE_Sort+0x24>
 80009d8:	3304      	adds	r3, #4
 80009da:	e7f2      	b.n	80009c2 <TIMELINE_Sort+0xa>
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 80009dc:	7a11      	ldrb	r1, [r2, #8]
			uint16_t t_data_i = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 80009de:	791e      	ldrb	r6, [r3, #4]
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 80009e0:	ebc1 1801 	rsb	r8, r1, r1, lsl #4
			uint16_t t_data_i = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 80009e4:	f893 c005 	ldrb.w	ip, [r3, #5]
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 80009e8:	7a51      	ldrb	r1, [r2, #9]
			uint16_t t_data_i = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 80009ea:	ebc6 1006 	rsb	r0, r6, r6, lsl #4
 80009ee:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 80009f2:	eb01 0188 	add.w	r1, r1, r8, lsl #2
			if(t_data_i > t_data_j){
 80009f6:	b280      	uxth	r0, r0
 80009f8:	b289      	uxth	r1, r1
 80009fa:	4288      	cmp	r0, r1
 80009fc:	d90a      	bls.n	8000a14 <TIMELINE_Sort+0x5c>
				t_temp = TIMELINE_Data.flash_data[i];
 80009fe:	7998      	ldrb	r0, [r3, #6]
 8000a00:	79d9      	ldrb	r1, [r3, #7]
				TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[j];
 8000a02:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8000a06:	f8c3 8004 	str.w	r8, [r3, #4]
				TIMELINE_Data.flash_data[j] = t_temp;
 8000a0a:	7216      	strb	r6, [r2, #8]
 8000a0c:	f882 c009 	strb.w	ip, [r2, #9]
 8000a10:	7290      	strb	r0, [r2, #10]
 8000a12:	72d1      	strb	r1, [r2, #11]
		for(int j = i + 1; j < TIMELINE_Data.len; j++){
 8000a14:	3501      	adds	r5, #1
 8000a16:	3204      	adds	r2, #4
 8000a18:	e7dc      	b.n	80009d4 <TIMELINE_Sort+0x1c>
 8000a1a:	bf00      	nop
 8000a1c:	200000fc 	.word	0x200000fc

08000a20 <TIMELINE_Store_To_Flash>:

void TIMELINE_Store_To_Flash(){
 8000a20:	b570      	push	{r4, r5, r6, lr}
	FLASH_DATA_t *t_flash_data;
	t_flash_data = (FLASH_DATA_t *)malloc(TIMELINE_Data.len * DATA_FRAME_SIZE_BIT);
 8000a22:	4e0b      	ldr	r6, [pc, #44]	; (8000a50 <TIMELINE_Store_To_Flash+0x30>)
 8000a24:	f896 403c 	ldrb.w	r4, [r6, #60]	; 0x3c
 8000a28:	0160      	lsls	r0, r4, #5
 8000a2a:	f003 fddb 	bl	80045e4 <malloc>
 8000a2e:	4605      	mov	r5, r0
	for(int i = 0; i < TIMELINE_Data.len; i++){
		*(t_flash_data + i) = *(TIMELINE_Data.flash_data + i);
 8000a30:	00a4      	lsls	r4, r4, #2
 8000a32:	4622      	mov	r2, r4
 8000a34:	1d31      	adds	r1, r6, #4
 8000a36:	f003 fde5 	bl	8004604 <memcpy>
	}
	FLASH_Write(63, (uint8_t *)t_flash_data, TIMELINE_Data.len * DATA_FRAME_SIZE_BYTE);
 8000a3a:	4622      	mov	r2, r4
 8000a3c:	4629      	mov	r1, r5
 8000a3e:	203f      	movs	r0, #63	; 0x3f
 8000a40:	f003 fd72 	bl	8004528 <FLASH_Write>
	free(t_flash_data);
 8000a44:	4628      	mov	r0, r5
}
 8000a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free(t_flash_data);
 8000a4a:	f003 bdd3 	b.w	80045f4 <free>
 8000a4e:	bf00      	nop
 8000a50:	200000fc 	.word	0x200000fc

08000a54 <TIMELINE_Add>:
void TIMELINE_Add(FLASH_DATA_t *p_new_timeline){
 8000a54:	b508      	push	{r3, lr}
	if(TIMELINE_Data.len < MAX_OPTIONS){
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <TIMELINE_Add+0x28>)
 8000a58:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8000a5c:	2b0d      	cmp	r3, #13
 8000a5e:	d80c      	bhi.n	8000a7a <TIMELINE_Add+0x26>
		TIMELINE_Data.flash_data[TIMELINE_Data.len] = *p_new_timeline;
 8000a60:	6800      	ldr	r0, [r0, #0]
 8000a62:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8000a66:	6048      	str	r0, [r1, #4]
		TIMELINE_Data.len++;
 8000a68:	3301      	adds	r3, #1
 8000a6a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
		TIMELINE_Sort();
 8000a6e:	f7ff ffa3 	bl	80009b8 <TIMELINE_Sort>
}
 8000a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		TIMELINE_Store_To_Flash();
 8000a76:	f7ff bfd3 	b.w	8000a20 <TIMELINE_Store_To_Flash>
}
 8000a7a:	bd08      	pop	{r3, pc}
 8000a7c:	200000fc 	.word	0x200000fc

08000a80 <TIMELINE_Delete>:
void TIMELINE_Delete(uint8_t p_index){
 8000a80:	b4f0      	push	{r4, r5, r6, r7}
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <TIMELINE_Delete+0x40>)
 8000a84:	eb02 0380 	add.w	r3, r2, r0, lsl #2
		for(int i = p_index; i < TIMELINE_Data.len - 1; i++){
 8000a88:	f892 403c 	ldrb.w	r4, [r2, #60]	; 0x3c
 8000a8c:	1e61      	subs	r1, r4, #1
 8000a8e:	4281      	cmp	r1, r0
 8000a90:	dc08      	bgt.n	8000aa4 <TIMELINE_Delete+0x24>
		*(uint32_t *)(TIMELINE_Data.flash_data + TIMELINE_Data.len - 1) = 0xFFFFFFFF;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		TIMELINE_Data.len--;
 8000a9a:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8000a9e:	bcf0      	pop	{r4, r5, r6, r7}
		TIMELINE_Store_To_Flash();
 8000aa0:	f7ff bfbe 	b.w	8000a20 <TIMELINE_Store_To_Flash>
			TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[i+1];
 8000aa4:	689f      	ldr	r7, [r3, #8]
			FLASH_DATA_t t_temp = TIMELINE_Data.flash_data[i];
 8000aa6:	791e      	ldrb	r6, [r3, #4]
 8000aa8:	795d      	ldrb	r5, [r3, #5]
 8000aaa:	799c      	ldrb	r4, [r3, #6]
 8000aac:	79d9      	ldrb	r1, [r3, #7]
			TIMELINE_Data.flash_data[i+1] = t_temp;
 8000aae:	721e      	strb	r6, [r3, #8]
			TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[i+1];
 8000ab0:	605f      	str	r7, [r3, #4]
			TIMELINE_Data.flash_data[i+1] = t_temp;
 8000ab2:	725d      	strb	r5, [r3, #9]
 8000ab4:	729c      	strb	r4, [r3, #10]
 8000ab6:	72d9      	strb	r1, [r3, #11]
			TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[i+1];
 8000ab8:	3001      	adds	r0, #1
 8000aba:	3304      	adds	r3, #4
 8000abc:	e7e4      	b.n	8000a88 <TIMELINE_Delete+0x8>
 8000abe:	bf00      	nop
 8000ac0:	200000fc 	.word	0x200000fc

08000ac4 <REALTIME_Init>:
extern RTC_HandleTypeDef hrtc;
#endif

static uint32_t timer = 0;

void REALTIME_Init(){
 8000ac4:	b538      	push	{r3, r4, r5, lr}
	DS3231_Init(&hds3231, &hi2c2);
 8000ac6:	4d11      	ldr	r5, [pc, #68]	; (8000b0c <REALTIME_Init+0x48>)
 8000ac8:	4911      	ldr	r1, [pc, #68]	; (8000b10 <REALTIME_Init+0x4c>)
 8000aca:	4628      	mov	r0, r5
 8000acc:	f003 fa33 	bl	8003f36 <DS3231_Init>
	REALTIME_Data.system_day = 1;
 8000ad0:	2201      	movs	r2, #1
	REALTIME_Data.system_hour = 0;
 8000ad2:	2300      	movs	r3, #0
	REALTIME_Data.system_day = 1;
 8000ad4:	4c0f      	ldr	r4, [pc, #60]	; (8000b14 <REALTIME_Init+0x50>)
	REALTIME_Data.system_minute = Time.Minutes;
	REALTIME_Data.system_date = Date.Date;
	REALTIME_Data.system_month = Date.Month;
	REALTIME_Data.system_year = Date.Year;
#else
	if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8000ad6:	4628      	mov	r0, r5
	REALTIME_Data.system_day = 1;
 8000ad8:	70a2      	strb	r2, [r4, #2]
	REALTIME_Data.system_hour = 0;
 8000ada:	7023      	strb	r3, [r4, #0]
	REALTIME_Data.system_minute = 0;
 8000adc:	7063      	strb	r3, [r4, #1]
	REALTIME_Data.system_date = 1;
 8000ade:	70e2      	strb	r2, [r4, #3]
	REALTIME_Data.system_month = 1;
 8000ae0:	7122      	strb	r2, [r4, #4]
	REALTIME_Data.system_year = 0;
 8000ae2:	7163      	strb	r3, [r4, #5]
	if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8000ae4:	f003 fa5f 	bl	8003fa6 <DS3231_Get_Time>
 8000ae8:	b178      	cbz	r0, 8000b0a <REALTIME_Init+0x46>
 8000aea:	4628      	mov	r0, r5
 8000aec:	f003 fac3 	bl	8004076 <DS3231_Get_Date>
 8000af0:	b158      	cbz	r0, 8000b0a <REALTIME_Init+0x46>
		return;
	}

	REALTIME_Data.system_day = hds3231.current_day;
 8000af2:	78eb      	ldrb	r3, [r5, #3]
 8000af4:	70a3      	strb	r3, [r4, #2]
	REALTIME_Data.system_hour = hds3231.current_hour;
 8000af6:	782b      	ldrb	r3, [r5, #0]
 8000af8:	7023      	strb	r3, [r4, #0]
	REALTIME_Data.system_minute = hds3231.current_minute;
 8000afa:	786b      	ldrb	r3, [r5, #1]
 8000afc:	7063      	strb	r3, [r4, #1]
	REALTIME_Data.system_date = hds3231.current_date;
 8000afe:	792b      	ldrb	r3, [r5, #4]
 8000b00:	70e3      	strb	r3, [r4, #3]
	REALTIME_Data.system_month = hds3231.current_month;
 8000b02:	796b      	ldrb	r3, [r5, #5]
 8000b04:	7123      	strb	r3, [r4, #4]
	REALTIME_Data.system_year = hds3231.current_year;
 8000b06:	88eb      	ldrh	r3, [r5, #6]
 8000b08:	7163      	strb	r3, [r4, #5]
#endif
}
 8000b0a:	bd38      	pop	{r3, r4, r5, pc}
 8000b0c:	20000144 	.word	0x20000144
 8000b10:	200001c0 	.word	0x200001c0
 8000b14:	2000013c 	.word	0x2000013c

08000b18 <REALTIME_Handle>:

void REALTIME_Handle(){
 8000b18:	b538      	push	{r3, r4, r5, lr}
	if(HAL_GetTick() - timer > CHECKING_REAL_TIME_CYCLE){
 8000b1a:	f001 f991 	bl	8001e40 <HAL_GetTick>
 8000b1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b22:	4298      	cmp	r0, r3
 8000b24:	d91e      	bls.n	8000b64 <REALTIME_Handle+0x4c>
		REALTIME_Data.system_minute = Time.Minutes;
		REALTIME_Data.system_date = Date.Date;
		REALTIME_Data.system_month = Date.Month;
		REALTIME_Data.system_year = Date.Year;
#else
		if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8000b26:	4c10      	ldr	r4, [pc, #64]	; (8000b68 <REALTIME_Handle+0x50>)
 8000b28:	4620      	mov	r0, r4
 8000b2a:	f003 fa3c 	bl	8003fa6 <DS3231_Get_Time>
 8000b2e:	b1c8      	cbz	r0, 8000b64 <REALTIME_Handle+0x4c>
 8000b30:	4620      	mov	r0, r4
 8000b32:	f003 faa0 	bl	8004076 <DS3231_Get_Date>
 8000b36:	b1a8      	cbz	r0, 8000b64 <REALTIME_Handle+0x4c>
			return;
		}

		if(REALTIME_Data.system_minute != hds3231.current_minute){
 8000b38:	4d0c      	ldr	r5, [pc, #48]	; (8000b6c <REALTIME_Handle+0x54>)
 8000b3a:	7863      	ldrb	r3, [r4, #1]
 8000b3c:	786a      	ldrb	r2, [r5, #1]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d004      	beq.n	8000b4c <REALTIME_Handle+0x34>
			if(MENU_Data.menu_type == MAIN_MENU){
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <REALTIME_Handle+0x58>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b90b      	cbnz	r3, 8000b4c <REALTIME_Handle+0x34>
				MAIN_MENU_Update_Value();
 8000b48:	f000 f9ac 	bl	8000ea4 <MAIN_MENU_Update_Value>
			}
		}

		REALTIME_Data.system_day = hds3231.current_day;
 8000b4c:	78e3      	ldrb	r3, [r4, #3]
 8000b4e:	70ab      	strb	r3, [r5, #2]
		REALTIME_Data.system_hour = hds3231.current_hour;
 8000b50:	7823      	ldrb	r3, [r4, #0]
 8000b52:	702b      	strb	r3, [r5, #0]
		REALTIME_Data.system_minute = hds3231.current_minute;
 8000b54:	7863      	ldrb	r3, [r4, #1]
 8000b56:	706b      	strb	r3, [r5, #1]
		REALTIME_Data.system_date = hds3231.current_date;
 8000b58:	7923      	ldrb	r3, [r4, #4]
 8000b5a:	70eb      	strb	r3, [r5, #3]
		REALTIME_Data.system_month = hds3231.current_month;
 8000b5c:	7963      	ldrb	r3, [r4, #5]
 8000b5e:	712b      	strb	r3, [r5, #4]
		REALTIME_Data.system_year = hds3231.current_year;
 8000b60:	88e3      	ldrh	r3, [r4, #6]
 8000b62:	716b      	strb	r3, [r5, #5]
#endif
	}
}
 8000b64:	bd38      	pop	{r3, r4, r5, pc}
 8000b66:	bf00      	nop
 8000b68:	20000144 	.word	0x20000144
 8000b6c:	2000013c 	.word	0x2000013c
 8000b70:	20000154 	.word	0x20000154

08000b74 <REALTIME_Set_New_Realtime>:

void REALTIME_Set_New_Realtime(REALTIME_DATA_HandleTypeDef *p_new_realtime){
 8000b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b76:	4604      	mov	r4, r0
	Date.Year = REALTIME_Data.system_year;

	if(HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
	if(HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
#else
	DS3231_Set_Time(&hds3231, p_new_realtime->system_hour, p_new_realtime->system_minute, 0, p_new_realtime->system_day);
 8000b78:	7883      	ldrb	r3, [r0, #2]
 8000b7a:	4d0e      	ldr	r5, [pc, #56]	; (8000bb4 <REALTIME_Set_New_Realtime+0x40>)
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	7842      	ldrb	r2, [r0, #1]
 8000b80:	7801      	ldrb	r1, [r0, #0]
 8000b82:	2300      	movs	r3, #0
 8000b84:	4628      	mov	r0, r5
 8000b86:	f003 f9d8 	bl	8003f3a <DS3231_Set_Time>
	DS3231_Set_Date(&hds3231, p_new_realtime->system_date, p_new_realtime->system_month, p_new_realtime->system_year);
 8000b8a:	7963      	ldrb	r3, [r4, #5]
 8000b8c:	7922      	ldrb	r2, [r4, #4]
 8000b8e:	4628      	mov	r0, r5
 8000b90:	78e1      	ldrb	r1, [r4, #3]
 8000b92:	f003 fa46 	bl	8004022 <DS3231_Set_Date>

	REALTIME_Data.system_day = p_new_realtime->system_day;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <REALTIME_Set_New_Realtime+0x44>)
 8000b98:	78a2      	ldrb	r2, [r4, #2]
 8000b9a:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = p_new_realtime->system_hour;
 8000b9c:	7822      	ldrb	r2, [r4, #0]
 8000b9e:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = p_new_realtime->system_minute;
 8000ba0:	7862      	ldrb	r2, [r4, #1]
 8000ba2:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = p_new_realtime->system_date;
 8000ba4:	78e2      	ldrb	r2, [r4, #3]
 8000ba6:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = p_new_realtime->system_month;
 8000ba8:	7922      	ldrb	r2, [r4, #4]
 8000baa:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = p_new_realtime->system_year;
 8000bac:	7962      	ldrb	r2, [r4, #5]
 8000bae:	715a      	strb	r2, [r3, #5]
#endif
}
 8000bb0:	b003      	add	sp, #12
 8000bb2:	bd30      	pop	{r4, r5, pc}
 8000bb4:	20000144 	.word	0x20000144
 8000bb8:	2000013c 	.word	0x2000013c

08000bbc <MAIN_MENU_Init>:
		{0xFF, 0x02, 0xFF, 0xFF, 0x01, 0xFF},	// 8
		{0xFF, 0x02, 0xFF, 0x01, 0x01, 0xFF},	// 9
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00},	// Nothing
};

void MAIN_MENU_Init(){
 8000bbc:	b530      	push	{r4, r5, lr}
 8000bbe:	b091      	sub	sp, #68	; 0x44
	uint8_t num_char_0[] = {
 8000bc0:	466b      	mov	r3, sp
 8000bc2:	4d29      	ldr	r5, [pc, #164]	; (8000c68 <MAIN_MENU_Init+0xac>)
			0b00000,
			0b00000,
			0b00000,
			0b00000,
	};
	LCD_Create_Char(MENU_Data.hlcd, 0, num_char_0);
 8000bc4:	4c29      	ldr	r4, [pc, #164]	; (8000c6c <MAIN_MENU_Init+0xb0>)
	uint8_t num_char_0[] = {
 8000bc6:	6828      	ldr	r0, [r5, #0]
 8000bc8:	6869      	ldr	r1, [r5, #4]
	LCD_Create_Char(MENU_Data.hlcd, 0, num_char_0);
 8000bca:	466a      	mov	r2, sp
	uint8_t num_char_0[] = {
 8000bcc:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 0, num_char_0);
 8000bce:	6860      	ldr	r0, [r4, #4]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	f003 fc08 	bl	80043e6 <LCD_Create_Char>

	uint8_t num_char_1[] = {
 8000bd6:	68a8      	ldr	r0, [r5, #8]
 8000bd8:	68e9      	ldr	r1, [r5, #12]
 8000bda:	ab02      	add	r3, sp, #8
 8000bdc:	c303      	stmia	r3!, {r0, r1}
			0b00000,
			0b00000,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 1, num_char_1);
 8000bde:	aa02      	add	r2, sp, #8
 8000be0:	6860      	ldr	r0, [r4, #4]
 8000be2:	2101      	movs	r1, #1
 8000be4:	f003 fbff 	bl	80043e6 <LCD_Create_Char>

	uint8_t num_char_2[] = {
 8000be8:	6928      	ldr	r0, [r5, #16]
 8000bea:	6969      	ldr	r1, [r5, #20]
 8000bec:	ab04      	add	r3, sp, #16
 8000bee:	c303      	stmia	r3!, {r0, r1}
			0b00000,
			0b00000,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 2, num_char_2);
 8000bf0:	aa04      	add	r2, sp, #16
 8000bf2:	6860      	ldr	r0, [r4, #4]
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	f003 fbf6 	bl	80043e6 <LCD_Create_Char>

	uint8_t thermometro[8] = {
 8000bfa:	4a1d      	ldr	r2, [pc, #116]	; (8000c70 <MAIN_MENU_Init+0xb4>)
 8000bfc:	ab06      	add	r3, sp, #24
 8000bfe:	6810      	ldr	r0, [r2, #0]
 8000c00:	6851      	ldr	r1, [r2, #4]
			0b01110,
			0b11111,
			0b11111,
			0b01110
	};
	LCD_Create_Char(MENU_Data.hlcd, 3, thermometro);
 8000c02:	aa06      	add	r2, sp, #24
	uint8_t thermometro[8] = {
 8000c04:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 3, thermometro);
 8000c06:	6860      	ldr	r0, [r4, #4]
 8000c08:	2103      	movs	r1, #3
 8000c0a:	f003 fbec 	bl	80043e6 <LCD_Create_Char>

	uint8_t igrasia[8] = {
 8000c0e:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <MAIN_MENU_Init+0xb8>)
 8000c10:	ab08      	add	r3, sp, #32
 8000c12:	6810      	ldr	r0, [r2, #0]
 8000c14:	6851      	ldr	r1, [r2, #4]
			0b10001,
			0b10001,
			0b10001,
			0b01110,
	};
	LCD_Create_Char(MENU_Data.hlcd, 4, igrasia);
 8000c16:	aa08      	add	r2, sp, #32
	uint8_t igrasia[8] = {
 8000c18:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 4, igrasia);
 8000c1a:	6860      	ldr	r0, [r4, #4]
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	f003 fbe2 	bl	80043e6 <LCD_Create_Char>

	uint8_t full_battery[8] = {
 8000c22:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <MAIN_MENU_Init+0xbc>)
 8000c24:	ab0a      	add	r3, sp, #40	; 0x28
 8000c26:	6810      	ldr	r0, [r2, #0]
 8000c28:	6851      	ldr	r1, [r2, #4]
			0b11111,
			0b11111,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 5, full_battery);
 8000c2a:	aa0a      	add	r2, sp, #40	; 0x28
	uint8_t full_battery[8] = {
 8000c2c:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 5, full_battery);
 8000c2e:	6860      	ldr	r0, [r4, #4]
 8000c30:	2105      	movs	r1, #5
 8000c32:	f003 fbd8 	bl	80043e6 <LCD_Create_Char>

	uint8_t half_battery[8] = {
 8000c36:	4a11      	ldr	r2, [pc, #68]	; (8000c7c <MAIN_MENU_Init+0xc0>)
 8000c38:	ab0c      	add	r3, sp, #48	; 0x30
 8000c3a:	6810      	ldr	r0, [r2, #0]
 8000c3c:	6851      	ldr	r1, [r2, #4]
			0b11111,
			0b11111,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 6, half_battery);
 8000c3e:	aa0c      	add	r2, sp, #48	; 0x30
	uint8_t half_battery[8] = {
 8000c40:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 6, half_battery);
 8000c42:	6860      	ldr	r0, [r4, #4]
 8000c44:	2106      	movs	r1, #6
 8000c46:	f003 fbce 	bl	80043e6 <LCD_Create_Char>

	uint8_t low_battery[8] = {
 8000c4a:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <MAIN_MENU_Init+0xc4>)
 8000c4c:	ab0e      	add	r3, sp, #56	; 0x38
 8000c4e:	6810      	ldr	r0, [r2, #0]
 8000c50:	6851      	ldr	r1, [r2, #4]
			0b10001,
			0b10001,
			0b10001,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 7, low_battery);
 8000c52:	aa0e      	add	r2, sp, #56	; 0x38
	uint8_t low_battery[8] = {
 8000c54:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 7, low_battery);
 8000c56:	2107      	movs	r1, #7
 8000c58:	6860      	ldr	r0, [r4, #4]
 8000c5a:	f003 fbc4 	bl	80043e6 <LCD_Create_Char>

	MAIN_MENU_Data.time_format = FORMAT_24_HOURS;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MAIN_MENU_Init+0xc8>)
 8000c62:	701a      	strb	r2, [r3, #0]
}
 8000c64:	b011      	add	sp, #68	; 0x44
 8000c66:	bd30      	pop	{r4, r5, pc}
 8000c68:	08004f30 	.word	0x08004f30
 8000c6c:	20000154 	.word	0x20000154
 8000c70:	08004f48 	.word	0x08004f48
 8000c74:	08004f51 	.word	0x08004f51
 8000c78:	08004f5a 	.word	0x08004f5a
 8000c7c:	08004f63 	.word	0x08004f63
 8000c80:	08004f6c 	.word	0x08004f6c
 8000c84:	20000150 	.word	0x20000150

08000c88 <MAIN_MENU_Display_Num>:

void MAIN_MENU_Display_Num(uint8_t p_number, uint8_t p_col, uint8_t p_row){
	if(p_row > 2) return;
 8000c88:	2a02      	cmp	r2, #2
void MAIN_MENU_Display_Num(uint8_t p_number, uint8_t p_col, uint8_t p_row){
 8000c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8e:	4607      	mov	r7, r0
 8000c90:	4689      	mov	r9, r1
 8000c92:	4616      	mov	r6, r2
	if(p_row > 2) return;
 8000c94:	d82b      	bhi.n	8000cee <MAIN_MENU_Display_Num+0x66>

	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row);
 8000c96:	f04f 0806 	mov.w	r8, #6
 8000c9a:	4c16      	ldr	r4, [pc, #88]	; (8000cf4 <MAIN_MENU_Display_Num+0x6c>)
	for(int i = 0; i < 3; i++){
 8000c9c:	f04f 0a00 	mov.w	sl, #0
	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row);
 8000ca0:	6860      	ldr	r0, [r4, #4]
 8000ca2:	f003 faf9 	bl	8004298 <LCD_Set_Cursor>
	for(int i = 0; i < 3; i++){
 8000ca6:	4d14      	ldr	r5, [pc, #80]	; (8000cf8 <MAIN_MENU_Display_Num+0x70>)
 8000ca8:	fb08 5807 	mla	r8, r8, r7, r5
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i]);
 8000cac:	f818 1b01 	ldrb.w	r1, [r8], #1
 8000cb0:	6860      	ldr	r0, [r4, #4]
	for(int i = 0; i < 3; i++){
 8000cb2:	f10a 0a01 	add.w	sl, sl, #1
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i]);
 8000cb6:	f003 fb27 	bl	8004308 <LCD_Send_Data>
	for(int i = 0; i < 3; i++){
 8000cba:	f1ba 0f03 	cmp.w	sl, #3
 8000cbe:	d1f5      	bne.n	8000cac <MAIN_MENU_Display_Num+0x24>
	}

	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row + 1);
 8000cc0:	1c72      	adds	r2, r6, #1
 8000cc2:	4649      	mov	r1, r9
 8000cc4:	6860      	ldr	r0, [r4, #4]
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	f003 fae6 	bl	8004298 <LCD_Set_Cursor>
	for(int i = 0; i < 3; i++){
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i+3]);
 8000ccc:	2006      	movs	r0, #6
 8000cce:	fb00 5507 	mla	r5, r0, r7, r5
 8000cd2:	6860      	ldr	r0, [r4, #4]
 8000cd4:	78e9      	ldrb	r1, [r5, #3]
 8000cd6:	f003 fb17 	bl	8004308 <LCD_Send_Data>
 8000cda:	7929      	ldrb	r1, [r5, #4]
 8000cdc:	6860      	ldr	r0, [r4, #4]
 8000cde:	f003 fb13 	bl	8004308 <LCD_Send_Data>
 8000ce2:	7969      	ldrb	r1, [r5, #5]
 8000ce4:	6860      	ldr	r0, [r4, #4]
	}

}
 8000ce6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i+3]);
 8000cea:	f003 bb0d 	b.w	8004308 <LCD_Send_Data>
}
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000154 	.word	0x20000154
 8000cf8:	08004fa3 	.word	0x08004fa3

08000cfc <MAIN_MENU_Display>:

void MAIN_MENU_Display(){
 8000cfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(MENU_Data.is_changing_menu){
 8000cfe:	4c58      	ldr	r4, [pc, #352]	; (8000e60 <MAIN_MENU_Display+0x164>)
 8000d00:	7a63      	ldrb	r3, [r4, #9]
 8000d02:	b123      	cbz	r3, 8000d0e <MAIN_MENU_Display+0x12>
		LCD_Clear(MENU_Data.hlcd);
 8000d04:	6860      	ldr	r0, [r4, #4]
 8000d06:	f003 fadf 	bl	80042c8 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	7263      	strb	r3, [r4, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 0);
	char t_day_string[] = "SUN";
	if(REALTIME_Data.system_day > 0){
 8000d0e:	4d55      	ldr	r5, [pc, #340]	; (8000e64 <MAIN_MENU_Display+0x168>)
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 0);
 8000d10:	2103      	movs	r1, #3
 8000d12:	2200      	movs	r2, #0
 8000d14:	6860      	ldr	r0, [r4, #4]
 8000d16:	f003 fabf 	bl	8004298 <LCD_Set_Cursor>
	char t_day_string[] = "SUN";
 8000d1a:	4b53      	ldr	r3, [pc, #332]	; (8000e68 <MAIN_MENU_Display+0x16c>)
	if(REALTIME_Data.system_day > 0){
 8000d1c:	78a9      	ldrb	r1, [r5, #2]
	char t_day_string[] = "SUN";
 8000d1e:	9303      	str	r3, [sp, #12]
	if(REALTIME_Data.system_day > 0){
 8000d20:	b131      	cbz	r1, 8000d30 <MAIN_MENU_Display+0x34>
		strcpy(t_day_string, DAY_Str[REALTIME_Data.system_day - 1]);
 8000d22:	4b52      	ldr	r3, [pc, #328]	; (8000e6c <MAIN_MENU_Display+0x170>)
 8000d24:	3901      	subs	r1, #1
 8000d26:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8000d2a:	a803      	add	r0, sp, #12
 8000d2c:	f003 fd6c 	bl	8004808 <strcpy>
	}
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000d30:	796b      	ldrb	r3, [r5, #5]
 8000d32:	494f      	ldr	r1, [pc, #316]	; (8000e70 <MAIN_MENU_Display+0x174>)
 8000d34:	9301      	str	r3, [sp, #4]
 8000d36:	792b      	ldrb	r3, [r5, #4]
 8000d38:	aa03      	add	r2, sp, #12
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	6860      	ldr	r0, [r4, #4]
 8000d3e:	78eb      	ldrb	r3, [r5, #3]
 8000d40:	f003 fb28 	bl	8004394 <LCD_Write>
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
	LCD_Set_Cursor(MENU_Data.hlcd, 2, 1);
	LCD_Send_Data(MENU_Data.hlcd, 3);
	LCD_Write(MENU_Data.hlcd, "%02dC  ", (uint8_t)hdht.temperature);
 8000d44:	4e4b      	ldr	r6, [pc, #300]	; (8000e74 <MAIN_MENU_Display+0x178>)
	LCD_Set_Cursor(MENU_Data.hlcd, 2, 1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2102      	movs	r1, #2
 8000d4a:	6860      	ldr	r0, [r4, #4]
 8000d4c:	f003 faa4 	bl	8004298 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, 3);
 8000d50:	2103      	movs	r1, #3
 8000d52:	6860      	ldr	r0, [r4, #4]
 8000d54:	f003 fad8 	bl	8004308 <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02dC  ", (uint8_t)hdht.temperature);
 8000d58:	68f0      	ldr	r0, [r6, #12]
 8000d5a:	f7ff fc0b 	bl	8000574 <__aeabi_f2uiz>
 8000d5e:	4946      	ldr	r1, [pc, #280]	; (8000e78 <MAIN_MENU_Display+0x17c>)
 8000d60:	b2c2      	uxtb	r2, r0
 8000d62:	6860      	ldr	r0, [r4, #4]
 8000d64:	f003 fb16 	bl	8004394 <LCD_Write>
	LCD_Send_Data(MENU_Data.hlcd, 4);
 8000d68:	2104      	movs	r1, #4
 8000d6a:	6860      	ldr	r0, [r4, #4]
 8000d6c:	f003 facc 	bl	8004308 <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02d%%  ", (uint8_t)hdht.huminity);
 8000d70:	6930      	ldr	r0, [r6, #16]
 8000d72:	f7ff fbff 	bl	8000574 <__aeabi_f2uiz>
 8000d76:	4941      	ldr	r1, [pc, #260]	; (8000e7c <MAIN_MENU_Display+0x180>)
 8000d78:	b2c2      	uxtb	r2, r0
 8000d7a:	6860      	ldr	r0, [r4, #4]
 8000d7c:	f003 fb0a 	bl	8004394 <LCD_Write>


	if(MAIN_MENU_Data.time_format == FORMAT_24_HOURS){
 8000d80:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <MAIN_MENU_Display+0x184>)
 8000d82:	260a      	movs	r6, #10
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	7828      	ldrb	r0, [r5, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d138      	bne.n	8000dfe <MAIN_MENU_Display+0x102>
		MAIN_MENU_Display_Num(REALTIME_Data.system_hour / 10, 2, 2);
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	fbb0 f0f6 	udiv	r0, r0, r6
 8000d92:	4611      	mov	r1, r2
 8000d94:	f7ff ff78 	bl	8000c88 <MAIN_MENU_Display_Num>
		MAIN_MENU_Display_Num(REALTIME_Data.system_hour % 10, 6, 2);
 8000d98:	7828      	ldrb	r0, [r5, #0]
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	fbb0 f3f6 	udiv	r3, r0, r6
 8000da0:	fb06 0013 	mls	r0, r6, r3, r0
 8000da4:	2106      	movs	r1, #6
 8000da6:	b2c0      	uxtb	r0, r0
 8000da8:	f7ff ff6e 	bl	8000c88 <MAIN_MENU_Display_Num>
		MAIN_MENU_Display_Num((REALTIME_Data.system_hour - 12) % 10, 6, 2);
		LCD_Set_Cursor(MENU_Data.hlcd, 18, 3);
		LCD_Write(MENU_Data.hlcd, "%s", (REALTIME_Data.system_hour > 12) ? "PM" : "AM");
	}

	if(MENU_Data.blink_state){
 8000dac:	7c23      	ldrb	r3, [r4, #16]
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8000dae:	2202      	movs	r2, #2
 8000db0:	2109      	movs	r1, #9
 8000db2:	6860      	ldr	r0, [r4, #4]
	if(MENU_Data.blink_state){
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d045      	beq.n	8000e44 <MAIN_MENU_Display+0x148>
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8000db8:	f003 fa6e 	bl	8004298 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, '.');
 8000dbc:	212e      	movs	r1, #46	; 0x2e
 8000dbe:	6860      	ldr	r0, [r4, #4]
 8000dc0:	f003 faa2 	bl	8004308 <LCD_Send_Data>
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 8000dc4:	2109      	movs	r1, #9
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	6860      	ldr	r0, [r4, #4]
 8000dca:	f003 fa65 	bl	8004298 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, '.');
 8000dce:	212e      	movs	r1, #46	; 0x2e
	} else{
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
		LCD_Send_Data(MENU_Data.hlcd, ' ');
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
		LCD_Send_Data(MENU_Data.hlcd, ' ');
 8000dd0:	6860      	ldr	r0, [r4, #4]
	}

	MAIN_MENU_Display_Num(REALTIME_Data.system_minute / 10, 10, 2);
 8000dd2:	240a      	movs	r4, #10
		LCD_Send_Data(MENU_Data.hlcd, ' ');
 8000dd4:	f003 fa98 	bl	8004308 <LCD_Send_Data>
	MAIN_MENU_Display_Num(REALTIME_Data.system_minute / 10, 10, 2);
 8000dd8:	7868      	ldrb	r0, [r5, #1]
 8000dda:	4621      	mov	r1, r4
 8000ddc:	fbb0 f0f4 	udiv	r0, r0, r4
 8000de0:	2202      	movs	r2, #2
 8000de2:	f7ff ff51 	bl	8000c88 <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(REALTIME_Data.system_minute % 10, 14, 2);
 8000de6:	7868      	ldrb	r0, [r5, #1]
 8000de8:	2202      	movs	r2, #2
 8000dea:	fbb0 f1f4 	udiv	r1, r0, r4
 8000dee:	fb04 0011 	mls	r0, r4, r1, r0
 8000df2:	210e      	movs	r1, #14
 8000df4:	b2c0      	uxtb	r0, r0
 8000df6:	f7ff ff47 	bl	8000c88 <MAIN_MENU_Display_Num>
}
 8000dfa:	b004      	add	sp, #16
 8000dfc:	bd70      	pop	{r4, r5, r6, pc}
		MAIN_MENU_Display_Num((REALTIME_Data.system_hour - 12) / 10, 2, 2);
 8000dfe:	380c      	subs	r0, #12
 8000e00:	2202      	movs	r2, #2
 8000e02:	fb90 f0f6 	sdiv	r0, r0, r6
 8000e06:	4611      	mov	r1, r2
 8000e08:	b2c0      	uxtb	r0, r0
 8000e0a:	f7ff ff3d 	bl	8000c88 <MAIN_MENU_Display_Num>
		MAIN_MENU_Display_Num((REALTIME_Data.system_hour - 12) % 10, 6, 2);
 8000e0e:	7828      	ldrb	r0, [r5, #0]
 8000e10:	2202      	movs	r2, #2
 8000e12:	380c      	subs	r0, #12
 8000e14:	fb90 f3f6 	sdiv	r3, r0, r6
 8000e18:	fb06 0013 	mls	r0, r6, r3, r0
 8000e1c:	2106      	movs	r1, #6
 8000e1e:	b2c0      	uxtb	r0, r0
 8000e20:	f7ff ff32 	bl	8000c88 <MAIN_MENU_Display_Num>
		LCD_Set_Cursor(MENU_Data.hlcd, 18, 3);
 8000e24:	6860      	ldr	r0, [r4, #4]
 8000e26:	2203      	movs	r2, #3
 8000e28:	2112      	movs	r1, #18
 8000e2a:	f003 fa35 	bl	8004298 <LCD_Set_Cursor>
		LCD_Write(MENU_Data.hlcd, "%s", (REALTIME_Data.system_hour > 12) ? "PM" : "AM");
 8000e2e:	7829      	ldrb	r1, [r5, #0]
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MAIN_MENU_Display+0x188>)
 8000e32:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <MAIN_MENU_Display+0x18c>)
 8000e34:	6860      	ldr	r0, [r4, #4]
 8000e36:	290c      	cmp	r1, #12
 8000e38:	bf98      	it	ls
 8000e3a:	461a      	movls	r2, r3
 8000e3c:	4913      	ldr	r1, [pc, #76]	; (8000e8c <MAIN_MENU_Display+0x190>)
 8000e3e:	f003 faa9 	bl	8004394 <LCD_Write>
 8000e42:	e7b3      	b.n	8000dac <MAIN_MENU_Display+0xb0>
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8000e44:	f003 fa28 	bl	8004298 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, ' ');
 8000e48:	2120      	movs	r1, #32
 8000e4a:	6860      	ldr	r0, [r4, #4]
 8000e4c:	f003 fa5c 	bl	8004308 <LCD_Send_Data>
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 8000e50:	2109      	movs	r1, #9
 8000e52:	2203      	movs	r2, #3
 8000e54:	6860      	ldr	r0, [r4, #4]
 8000e56:	f003 fa1f 	bl	8004298 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, ' ');
 8000e5a:	2120      	movs	r1, #32
 8000e5c:	e7b8      	b.n	8000dd0 <MAIN_MENU_Display+0xd4>
 8000e5e:	bf00      	nop
 8000e60:	20000154 	.word	0x20000154
 8000e64:	2000013c 	.word	0x2000013c
 8000e68:	004e5553 	.word	0x004e5553
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	08004f7b 	.word	0x08004f7b
 8000e74:	200001ac 	.word	0x200001ac
 8000e78:	08004f8f 	.word	0x08004f8f
 8000e7c:	08004f97 	.word	0x08004f97
 8000e80:	20000150 	.word	0x20000150
 8000e84:	08004f78 	.word	0x08004f78
 8000e88:	08004f75 	.word	0x08004f75
 8000e8c:	08004fa0 	.word	0x08004fa0

08000e90 <MAIN_MENU_Set_State>:

void MAIN_MENU_Set_State(){
	MENU_Data.menu_type = MAIN_MENU;
 8000e90:	2200      	movs	r2, #0
 8000e92:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <MAIN_MENU_Set_State+0x10>)
 8000e94:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e9a:	811a      	strh	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000154 	.word	0x20000154

08000ea4 <MAIN_MENU_Update_Value>:

void MAIN_MENU_Update_Value(){
	MENU_Data.menu_type = MAIN_MENU;
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	4b02      	ldr	r3, [pc, #8]	; (8000eb0 <MAIN_MENU_Update_Value+0xc>)
 8000ea8:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000eaa:	721a      	strb	r2, [r3, #8]
}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000154 	.word	0x20000154

08000eb4 <MENU_Init>:

#define BLINKING_CYCLE		1000

void MENU_Init(LCD_I2C_HandleTypeDef *p_hlcd){
	MENU_Data.hlcd = p_hlcd;
	MENU_Data.changed = 0;
 8000eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
void MENU_Init(LCD_I2C_HandleTypeDef *p_hlcd){
 8000eb8:	b508      	push	{r3, lr}
	MENU_Data.hlcd = p_hlcd;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MENU_Init+0x2c>)
	MENU_Data.changed = 0;
 8000ebc:	811a      	strh	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
	MENU_Data.menu_type = MAIN_MENU;
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
	MENU_Data.blinking_timer = 0;
 8000ec2:	60da      	str	r2, [r3, #12]
	MENU_Data.blink_state = 1;
 8000ec4:	2201      	movs	r2, #1
	MENU_Data.hlcd = p_hlcd;
 8000ec6:	6058      	str	r0, [r3, #4]
	MENU_Data.blink_state = 1;
 8000ec8:	741a      	strb	r2, [r3, #16]
	MAIN_MENU_Init();
 8000eca:	f7ff fe77 	bl	8000bbc <MAIN_MENU_Init>
	SR_MENU_Init();
 8000ece:	f000 f8ef 	bl	80010b0 <SR_MENU_Init>
	TL_MENU_Init();
 8000ed2:	f000 fad5 	bl	8001480 <TL_MENU_Init>
	ST_MENU_Init();
}
 8000ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ST_MENU_Init();
 8000eda:	f000 b9f1 	b.w	80012c0 <ST_MENU_Init>
 8000ede:	bf00      	nop
 8000ee0:	20000154 	.word	0x20000154

08000ee4 <MENU_Handle>:
//		timer = HAL_GetTick();
//		count ++;
//	}
//}

void MENU_Handle(){
 8000ee4:	b510      	push	{r4, lr}
	if(!MENU_Data.changed){
 8000ee6:	4c17      	ldr	r4, [pc, #92]	; (8000f44 <MENU_Handle+0x60>)
 8000ee8:	7a23      	ldrb	r3, [r4, #8]
 8000eea:	b95b      	cbnz	r3, 8000f04 <MENU_Handle+0x20>
		switch(MENU_Data.menu_type){
 8000eec:	7823      	ldrb	r3, [r4, #0]
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d806      	bhi.n	8000f00 <MENU_Handle+0x1c>
 8000ef2:	e8df f003 	tbb	[pc, r3]
 8000ef6:	1a03      	.short	0x1a03
 8000ef8:	201d      	.short	0x201d
 8000efa:	23          	.byte	0x23
 8000efb:	00          	.byte	0x00
			case MAIN_MENU:
				MAIN_MENU_Display();
 8000efc:	f7ff fefe 	bl	8000cfc <MAIN_MENU_Display>
				ST_MENU_Display();
				break;
			default:
				break;
		}
		MENU_Data.changed = 1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	7223      	strb	r3, [r4, #8]
	}

	if(HAL_GetTick() - MENU_Data.blinking_timer > BLINKING_CYCLE){
 8000f04:	f000 ff9c 	bl	8001e40 <HAL_GetTick>
 8000f08:	68e3      	ldr	r3, [r4, #12]
 8000f0a:	1ac0      	subs	r0, r0, r3
 8000f0c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f10:	d90a      	bls.n	8000f28 <MENU_Handle+0x44>
		if(MENU_Data.menu_type == MAIN_MENU){
 8000f12:	7823      	ldrb	r3, [r4, #0]
 8000f14:	b92b      	cbnz	r3, 8000f22 <MENU_Handle+0x3e>
			MENU_Data.changed = 0;
 8000f16:	7223      	strb	r3, [r4, #8]
			MENU_Data.blink_state = !MENU_Data.blink_state;
 8000f18:	7c23      	ldrb	r3, [r4, #16]
 8000f1a:	fab3 f383 	clz	r3, r3
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	7423      	strb	r3, [r4, #16]
		}
		MENU_Data.blinking_timer = HAL_GetTick();
 8000f22:	f000 ff8d 	bl	8001e40 <HAL_GetTick>
 8000f26:	60e0      	str	r0, [r4, #12]
	}

}
 8000f28:	bd10      	pop	{r4, pc}
				SETTING_MENU_Display();
 8000f2a:	f000 f859 	bl	8000fe0 <SETTING_MENU_Display>
				break;
 8000f2e:	e7e7      	b.n	8000f00 <MENU_Handle+0x1c>
				SR_MENU_Display();
 8000f30:	f000 f946 	bl	80011c0 <SR_MENU_Display>
				break;
 8000f34:	e7e4      	b.n	8000f00 <MENU_Handle+0x1c>
				TL_MENU_Display();
 8000f36:	f000 fb43 	bl	80015c0 <TL_MENU_Display>
				break;
 8000f3a:	e7e1      	b.n	8000f00 <MENU_Handle+0x1c>
				ST_MENU_Display();
 8000f3c:	f000 fa34 	bl	80013a8 <ST_MENU_Display>
				break;
 8000f40:	e7de      	b.n	8000f00 <MENU_Handle+0x1c>
 8000f42:	bf00      	nop
 8000f44:	20000154 	.word	0x20000154

08000f48 <SETTING_MENU_Set_State>:
	SETTING_MENU_Data.current_pointer = 0;
	SETTING_MENU_Data.is_setting_time_format = 0;
}

void SETTING_MENU_Set_State(){
	MENU_Data.menu_type = SETTING_MENU;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SETTING_MENU_Set_State+0x18>)
 8000f4c:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f52:	811a      	strh	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
	SETTING_MENU_Data.current_pointer = 0;
 8000f54:	2200      	movs	r2, #0
 8000f56:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <SETTING_MENU_Set_State+0x1c>)
 8000f58:	701a      	strb	r2, [r3, #0]
	SETTING_MENU_Data.is_setting_time_format = 0;
 8000f5a:	705a      	strb	r2, [r3, #1]
}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000154 	.word	0x20000154
 8000f64:	20000168 	.word	0x20000168

08000f68 <SETTING_MENU_Config_Time_Format>:

void SETTING_MENU_Config_Time_Format(){
	if(MAIN_MENU_Data.time_format == FORMAT_12_HOURS){
 8000f68:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <SETTING_MENU_Config_Time_Format+0x18>)
 8000f6a:	7813      	ldrb	r3, [r2, #0]
 8000f6c:	fab3 f383 	clz	r3, r3
 8000f70:	095b      	lsrs	r3, r3, #5
 8000f72:	7013      	strb	r3, [r2, #0]
		MAIN_MENU_Data.time_format = FORMAT_24_HOURS;
	} else{
		MAIN_MENU_Data.time_format = FORMAT_12_HOURS;
	}
	MENU_Data.menu_type = SETTING_MENU;
 8000f74:	2201      	movs	r2, #1
 8000f76:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <SETTING_MENU_Config_Time_Format+0x1c>)
 8000f78:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	721a      	strb	r2, [r3, #8]
}
 8000f7e:	4770      	bx	lr
 8000f80:	20000150 	.word	0x20000150
 8000f84:	20000154 	.word	0x20000154

08000f88 <SETTING_MENU_Change_Pointer>:

void SETTING_MENU_Change_Pointer(uint8_t p_is_increase){
	SETTING_MENU_Data.current_pointer += (p_is_increase) ? 1 : -1;
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	bf14      	ite	ne
 8000f8c:	2101      	movne	r1, #1
 8000f8e:	21ff      	moveq	r1, #255	; 0xff
 8000f90:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <SETTING_MENU_Change_Pointer+0x2c>)
 8000f92:	7813      	ldrb	r3, [r2, #0]
 8000f94:	440b      	add	r3, r1
 8000f96:	b25b      	sxtb	r3, r3
	if(SETTING_MENU_Data.current_pointer < 0){
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	da07      	bge.n	8000fac <SETTING_MENU_Change_Pointer+0x24>
		SETTING_MENU_Data.current_pointer = 0;
 8000f9c:	2300      	movs	r3, #0
	}
	if(SETTING_MENU_Data.current_pointer > 2){
		SETTING_MENU_Data.current_pointer = 2;
 8000f9e:	7013      	strb	r3, [r2, #0]
	}
	MENU_Data.menu_type = SETTING_MENU;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SETTING_MENU_Change_Pointer+0x30>)
 8000fa4:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	721a      	strb	r2, [r3, #8]
}
 8000faa:	4770      	bx	lr
	if(SETTING_MENU_Data.current_pointer > 2){
 8000fac:	2b02      	cmp	r3, #2
		SETTING_MENU_Data.current_pointer = 2;
 8000fae:	bfc8      	it	gt
 8000fb0:	2302      	movgt	r3, #2
 8000fb2:	e7f4      	b.n	8000f9e <SETTING_MENU_Change_Pointer+0x16>
 8000fb4:	20000168 	.word	0x20000168
 8000fb8:	20000154 	.word	0x20000154

08000fbc <SETTING_MENU_Change_Working_State>:

void SETTING_MENU_Change_Working_State(){
	if(SETTING_MENU_Data.current_pointer == 0){
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <SETTING_MENU_Change_Working_State+0x1c>)
 8000fbe:	f992 1000 	ldrsb.w	r1, [r2]
 8000fc2:	b941      	cbnz	r1, 8000fd6 <SETTING_MENU_Change_Working_State+0x1a>
		SETTING_MENU_Data.is_setting_time_format = !SETTING_MENU_Data.is_setting_time_format;
 8000fc4:	7853      	ldrb	r3, [r2, #1]
 8000fc6:	fab3 f383 	clz	r3, r3
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	7053      	strb	r3, [r2, #1]
		MENU_Data.menu_type = SETTING_MENU;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <SETTING_MENU_Change_Working_State+0x20>)
 8000fd2:	701a      	strb	r2, [r3, #0]
		MENU_Data.changed = 0;
 8000fd4:	7219      	strb	r1, [r3, #8]
	}
}
 8000fd6:	4770      	bx	lr
 8000fd8:	20000168 	.word	0x20000168
 8000fdc:	20000154 	.word	0x20000154

08000fe0 <SETTING_MENU_Display>:

void SETTING_MENU_Display(){
 8000fe0:	b538      	push	{r3, r4, r5, lr}
	if(MENU_Data.is_changing_menu){
 8000fe2:	4c2a      	ldr	r4, [pc, #168]	; (800108c <SETTING_MENU_Display+0xac>)
 8000fe4:	7a63      	ldrb	r3, [r4, #9]
 8000fe6:	b123      	cbz	r3, 8000ff2 <SETTING_MENU_Display+0x12>
		LCD_Clear(MENU_Data.hlcd);
 8000fe8:	6860      	ldr	r0, [r4, #4]
 8000fea:	f003 f96d 	bl	80042c8 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	7263      	strb	r3, [r4, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 4, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	6860      	ldr	r0, [r4, #4]
 8000ff8:	f003 f94e 	bl	8004298 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Setting Menu");
 8000ffc:	4924      	ldr	r1, [pc, #144]	; (8001090 <SETTING_MENU_Display+0xb0>)
 8000ffe:	6860      	ldr	r0, [r4, #4]
 8001000:	f003 f9c8 	bl	8004394 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 1);
 8001004:	2201      	movs	r2, #1
 8001006:	2100      	movs	r1, #0
 8001008:	6860      	ldr	r0, [r4, #4]
 800100a:	f003 f945 	bl	8004298 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, " Time format:  %s ", (MAIN_MENU_Data.time_format == FORMAT_12_HOURS) ? "12" : "24");
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <SETTING_MENU_Display+0xb4>)
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <SETTING_MENU_Display+0xb8>)
 8001012:	7819      	ldrb	r1, [r3, #0]
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <SETTING_MENU_Display+0xbc>)
 8001016:	6860      	ldr	r0, [r4, #4]
 8001018:	2900      	cmp	r1, #0
 800101a:	bf18      	it	ne
 800101c:	461a      	movne	r2, r3
 800101e:	4920      	ldr	r1, [pc, #128]	; (80010a0 <SETTING_MENU_Display+0xc0>)
 8001020:	f003 f9b8 	bl	8004394 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 2);
 8001024:	2202      	movs	r2, #2
 8001026:	2100      	movs	r1, #0
 8001028:	6860      	ldr	r0, [r4, #4]
 800102a:	f003 f935 	bl	8004298 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, " Alarm");
 800102e:	491d      	ldr	r1, [pc, #116]	; (80010a4 <SETTING_MENU_Display+0xc4>)
 8001030:	6860      	ldr	r0, [r4, #4]
 8001032:	f003 f9af 	bl	8004394 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 3);
 8001036:	2203      	movs	r2, #3
 8001038:	2100      	movs	r1, #0
 800103a:	6860      	ldr	r0, [r4, #4]
 800103c:	f003 f92c 	bl	8004298 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, " Setting real-time");
 8001040:	4919      	ldr	r1, [pc, #100]	; (80010a8 <SETTING_MENU_Display+0xc8>)
 8001042:	6860      	ldr	r0, [r4, #4]
 8001044:	f003 f9a6 	bl	8004394 <LCD_Write>
	if(SETTING_MENU_Data.is_setting_time_format == 1){
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <SETTING_MENU_Display+0xcc>)
 800104a:	785d      	ldrb	r5, [r3, #1]
 800104c:	2d01      	cmp	r5, #1
 800104e:	d113      	bne.n	8001078 <SETTING_MENU_Display+0x98>
		LCD_Set_Cursor(MENU_Data.hlcd, 14, 1);
 8001050:	462a      	mov	r2, r5
 8001052:	210e      	movs	r1, #14
 8001054:	6860      	ldr	r0, [r4, #4]
 8001056:	f003 f91f 	bl	8004298 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 800105a:	217e      	movs	r1, #126	; 0x7e
 800105c:	6860      	ldr	r0, [r4, #4]
 800105e:	f003 f953 	bl	8004308 <LCD_Send_Data>
		LCD_Set_Cursor(MENU_Data.hlcd, 17, 1);
 8001062:	2111      	movs	r1, #17
 8001064:	462a      	mov	r2, r5
 8001066:	6860      	ldr	r0, [r4, #4]
 8001068:	f003 f916 	bl	8004298 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, 0x7F);
 800106c:	217f      	movs	r1, #127	; 0x7f
	} else{
		LCD_Set_Cursor(MENU_Data.hlcd, 0, SETTING_MENU_Data.current_pointer + 1);
		LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 800106e:	6860      	ldr	r0, [r4, #4]
	}
}
 8001070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 8001074:	f003 b948 	b.w	8004308 <LCD_Send_Data>
		LCD_Set_Cursor(MENU_Data.hlcd, 0, SETTING_MENU_Data.current_pointer + 1);
 8001078:	781a      	ldrb	r2, [r3, #0]
 800107a:	2100      	movs	r1, #0
 800107c:	3201      	adds	r2, #1
 800107e:	6860      	ldr	r0, [r4, #4]
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	f003 f909 	bl	8004298 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 8001086:	217e      	movs	r1, #126	; 0x7e
 8001088:	e7f1      	b.n	800106e <SETTING_MENU_Display+0x8e>
 800108a:	bf00      	nop
 800108c:	20000154 	.word	0x20000154
 8001090:	08004feb 	.word	0x08004feb
 8001094:	20000150 	.word	0x20000150
 8001098:	08004fe5 	.word	0x08004fe5
 800109c:	08004fe8 	.word	0x08004fe8
 80010a0:	08004ff8 	.word	0x08004ff8
 80010a4:	0800500b 	.word	0x0800500b
 80010a8:	08005012 	.word	0x08005012
 80010ac:	20000168 	.word	0x20000168

080010b0 <SR_MENU_Init>:
};

extern char DAY_Str[7][4];

void SR_MENU_Init(){
	SR_MENU_Data.state = SETTING_HOUR;
 80010b0:	2200      	movs	r2, #0
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SR_MENU_Init+0x14>)
 80010b4:	701a      	strb	r2, [r3, #0]
	REALTIME_DATA_HandleTypeDef t_realtime = {0, 0, 0, 0, 0, 0};
	SR_MENU_Data.new_realtime = t_realtime;
 80010b6:	705a      	strb	r2, [r3, #1]
 80010b8:	709a      	strb	r2, [r3, #2]
 80010ba:	70da      	strb	r2, [r3, #3]
 80010bc:	711a      	strb	r2, [r3, #4]
 80010be:	715a      	strb	r2, [r3, #5]
 80010c0:	719a      	strb	r2, [r3, #6]
}
 80010c2:	4770      	bx	lr
 80010c4:	2000016a 	.word	0x2000016a

080010c8 <SR_MENU_Set_State>:

void SR_MENU_Set_State(){
	SR_MENU_Data.state = SETTING_HOUR;
 80010c8:	2200      	movs	r2, #0
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <SR_MENU_Set_State+0x20>)
 80010cc:	701a      	strb	r2, [r3, #0]
	REALTIME_DATA_HandleTypeDef t_realtime = {0, 0, 0, 0, 0, 0};
	SR_MENU_Data.new_realtime = t_realtime;
 80010ce:	705a      	strb	r2, [r3, #1]
 80010d0:	709a      	strb	r2, [r3, #2]
 80010d2:	70da      	strb	r2, [r3, #3]
 80010d4:	711a      	strb	r2, [r3, #4]
 80010d6:	715a      	strb	r2, [r3, #5]
 80010d8:	719a      	strb	r2, [r3, #6]
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 80010da:	2202      	movs	r2, #2
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <SR_MENU_Set_State+0x24>)
 80010de:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80010e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e4:	811a      	strh	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
}
 80010e6:	4770      	bx	lr
 80010e8:	2000016a 	.word	0x2000016a
 80010ec:	20000154 	.word	0x20000154

080010f0 <SR_MENU_Change_Setting_State>:

void SR_MENU_Change_Setting_State(uint8_t p_is_increase){
 80010f0:	b508      	push	{r3, lr}
	if(SR_MENU_Data.state == CHECKING_AGAIN){
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <SR_MENU_Change_Setting_State+0x3c>)
 80010f4:	7813      	ldrb	r3, [r2, #0]
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d106      	bne.n	8001108 <SR_MENU_Change_Setting_State+0x18>
		REALTIME_Set_New_Realtime(&SR_MENU_Data.new_realtime);
 80010fa:	1c50      	adds	r0, r2, #1
 80010fc:	f7ff fd3a 	bl	8000b74 <REALTIME_Set_New_Realtime>
			return;
		}
		MENU_Data.menu_type = SETTING_REALTIME_MENU;
		MENU_Data.changed = 0;
	}
}
 8001100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			SETTING_MENU_Set_State();
 8001104:	f7ff bf20 	b.w	8000f48 <SETTING_MENU_Set_State>
		SR_MENU_Data.state += ((p_is_increase == INCREASE) ? 1 : -1);
 8001108:	2801      	cmp	r0, #1
 800110a:	bf18      	it	ne
 800110c:	20ff      	movne	r0, #255	; 0xff
 800110e:	4403      	add	r3, r0
 8001110:	b2db      	uxtb	r3, r3
		if((int8_t)SR_MENU_Data.state < 0){
 8001112:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001116:	f04f 0100 	mov.w	r1, #0
		SR_MENU_Data.state += ((p_is_increase == INCREASE) ? 1 : -1);
 800111a:	7013      	strb	r3, [r2, #0]
		if((int8_t)SR_MENU_Data.state < 0){
 800111c:	d001      	beq.n	8001122 <SR_MENU_Change_Setting_State+0x32>
			SR_MENU_Data.state = 0;
 800111e:	7011      	strb	r1, [r2, #0]
 8001120:	e7ee      	b.n	8001100 <SR_MENU_Change_Setting_State+0x10>
		MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8001122:	2202      	movs	r2, #2
 8001124:	4b02      	ldr	r3, [pc, #8]	; (8001130 <SR_MENU_Change_Setting_State+0x40>)
 8001126:	701a      	strb	r2, [r3, #0]
		MENU_Data.changed = 0;
 8001128:	7219      	strb	r1, [r3, #8]
}
 800112a:	bd08      	pop	{r3, pc}
 800112c:	2000016a 	.word	0x2000016a
 8001130:	20000154 	.word	0x20000154

08001134 <SR_MENU_Set_Value>:

void SR_MENU_Set_Value(uint8_t p_is_increase){
 8001134:	b530      	push	{r4, r5, lr}
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <SR_MENU_Set_Value+0x80>)
 8001138:	7819      	ldrb	r1, [r3, #0]
 800113a:	2905      	cmp	r1, #5
 800113c:	d828      	bhi.n	8001190 <SR_MENU_Set_Value+0x5c>
		int8_t *t_data_ptr = (int8_t *)(&SR_MENU_Data.new_realtime) + SR_MENU_Data.state;
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 800113e:	2801      	cmp	r0, #1
 8001140:	bf18      	it	ne
 8001142:	20ff      	movne	r0, #255	; 0xff
		int8_t *t_data_ptr = (int8_t *)(&SR_MENU_Data.new_realtime) + SR_MENU_Data.state;
 8001144:	1c5c      	adds	r4, r3, #1
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 8001146:	5c62      	ldrb	r2, [r4, r1]
		if(*t_data_ptr > __max_value[SR_MENU_Data.state]){
 8001148:	4d1b      	ldr	r5, [pc, #108]	; (80011b8 <SR_MENU_Set_Value+0x84>)
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 800114a:	4410      	add	r0, r2
 800114c:	b240      	sxtb	r0, r0
 800114e:	5460      	strb	r0, [r4, r1]
		if(*t_data_ptr > __max_value[SR_MENU_Data.state]){
 8001150:	781a      	ldrb	r2, [r3, #0]
 8001152:	5cad      	ldrb	r5, [r5, r2]
 8001154:	42a8      	cmp	r0, r5
 8001156:	dd12      	ble.n	800117e <SR_MENU_Set_Value+0x4a>
			*t_data_ptr = (SR_MENU_Data.state == SETTING_DATE) ? 1 : 0;
 8001158:	1ed0      	subs	r0, r2, #3
 800115a:	4242      	negs	r2, r0
 800115c:	4142      	adcs	r2, r0
 800115e:	5462      	strb	r2, [r4, r1]
		} else if(*t_data_ptr < 0){
			*t_data_ptr = __max_value[SR_MENU_Data.state];
		}
		if(SR_MENU_Data.state == SETTING_YEAR){
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	2a05      	cmp	r2, #5
 8001164:	d114      	bne.n	8001190 <SR_MENU_Set_Value+0x5c>
			uint8_t *t_date_ptr = &SR_MENU_Data.new_realtime.system_date;
			uint8_t *t_month_ptr = &SR_MENU_Data.new_realtime.system_month;
			uint8_t *t_year_ptr = &SR_MENU_Data.new_realtime.system_year;
			if(*t_month_ptr == 2){
 8001166:	795a      	ldrb	r2, [r3, #5]
 8001168:	2a02      	cmp	r2, #2
 800116a:	d10c      	bne.n	8001186 <SR_MENU_Set_Value+0x52>
				if(*t_date_ptr > ((*t_year_ptr % 4 == 0) ? 29 : 28)){
 800116c:	7999      	ldrb	r1, [r3, #6]
 800116e:	791a      	ldrb	r2, [r3, #4]
 8001170:	0789      	lsls	r1, r1, #30
 8001172:	d01a      	beq.n	80011aa <SR_MENU_Set_Value+0x76>
 8001174:	2a1c      	cmp	r2, #28
 8001176:	dd0b      	ble.n	8001190 <SR_MENU_Set_Value+0x5c>
					*t_date_ptr = (*t_year_ptr % 4 == 0) ? 29 : 28;
 8001178:	221c      	movs	r2, #28
				}
			} else if((*t_month_ptr <= 7 && *t_month_ptr % 2 == 0) || (*t_month_ptr >= 8 && *t_month_ptr % 2 == 1)){
				if(*t_date_ptr > 30){
					*t_date_ptr = 30;
 800117a:	711a      	strb	r2, [r3, #4]
 800117c:	e008      	b.n	8001190 <SR_MENU_Set_Value+0x5c>
		} else if(*t_data_ptr < 0){
 800117e:	2800      	cmp	r0, #0
			*t_data_ptr = __max_value[SR_MENU_Data.state];
 8001180:	bfb8      	it	lt
 8001182:	5465      	strblt	r5, [r4, r1]
 8001184:	e7ec      	b.n	8001160 <SR_MENU_Set_Value+0x2c>
			} else if((*t_month_ptr <= 7 && *t_month_ptr % 2 == 0) || (*t_month_ptr >= 8 && *t_month_ptr % 2 == 1)){
 8001186:	2a07      	cmp	r2, #7
 8001188:	f002 0101 	and.w	r1, r2, #1
 800118c:	d806      	bhi.n	800119c <SR_MENU_Set_Value+0x68>
 800118e:	b139      	cbz	r1, 80011a0 <SR_MENU_Set_Value+0x6c>
				}
			}
		}
	}
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8001190:	2202      	movs	r2, #2
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <SR_MENU_Set_Value+0x88>)
 8001194:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001196:	2200      	movs	r2, #0
 8001198:	721a      	strb	r2, [r3, #8]
}
 800119a:	bd30      	pop	{r4, r5, pc}
			} else if((*t_month_ptr <= 7 && *t_month_ptr % 2 == 0) || (*t_month_ptr >= 8 && *t_month_ptr % 2 == 1)){
 800119c:	2900      	cmp	r1, #0
 800119e:	d0f7      	beq.n	8001190 <SR_MENU_Set_Value+0x5c>
				if(*t_date_ptr > 30){
 80011a0:	791a      	ldrb	r2, [r3, #4]
 80011a2:	2a1e      	cmp	r2, #30
 80011a4:	d9f4      	bls.n	8001190 <SR_MENU_Set_Value+0x5c>
					*t_date_ptr = 30;
 80011a6:	221e      	movs	r2, #30
 80011a8:	e7e7      	b.n	800117a <SR_MENU_Set_Value+0x46>
				if(*t_date_ptr > ((*t_year_ptr % 4 == 0) ? 29 : 28)){
 80011aa:	2a1d      	cmp	r2, #29
 80011ac:	ddf0      	ble.n	8001190 <SR_MENU_Set_Value+0x5c>
					*t_date_ptr = (*t_year_ptr % 4 == 0) ? 29 : 28;
 80011ae:	221d      	movs	r2, #29
 80011b0:	e7e3      	b.n	800117a <SR_MENU_Set_Value+0x46>
 80011b2:	bf00      	nop
 80011b4:	2000016a 	.word	0x2000016a
 80011b8:	0800506c 	.word	0x0800506c
 80011bc:	20000154 	.word	0x20000154

080011c0 <SR_MENU_Display>:

void SR_MENU_Display(){
 80011c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(MENU_Data.is_changing_menu){
 80011c2:	4c37      	ldr	r4, [pc, #220]	; (80012a0 <SR_MENU_Display+0xe0>)
 80011c4:	7a63      	ldrb	r3, [r4, #9]
 80011c6:	b123      	cbz	r3, 80011d2 <SR_MENU_Display+0x12>
		LCD_Clear(MENU_Data.hlcd);
 80011c8:	6860      	ldr	r0, [r4, #4]
 80011ca:	f003 f87d 	bl	80042c8 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	7263      	strb	r3, [r4, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 80011d2:	2200      	movs	r2, #0
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 80011d4:	4d33      	ldr	r5, [pc, #204]	; (80012a4 <SR_MENU_Display+0xe4>)
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 80011d6:	4611      	mov	r1, r2
 80011d8:	6860      	ldr	r0, [r4, #4]
 80011da:	f003 f85d 	bl	8004298 <LCD_Set_Cursor>
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 80011de:	782b      	ldrb	r3, [r5, #0]
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	d857      	bhi.n	8001294 <SR_MENU_Display+0xd4>
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[SR_MENU_Data.state]);
 80011e4:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <SR_MENU_Display+0xe8>)
 80011e6:	4931      	ldr	r1, [pc, #196]	; (80012ac <SR_MENU_Display+0xec>)
 80011e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011ec:	6860      	ldr	r0, [r4, #4]
 80011ee:	f003 f8d1 	bl	8004394 <LCD_Write>
	} else{
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 1);
 80011f2:	2103      	movs	r1, #3
 80011f4:	2201      	movs	r2, #1
 80011f6:	6860      	ldr	r0, [r4, #4]
 80011f8:	f003 f84e 	bl	8004298 <LCD_Set_Cursor>
	char t_day_string[] = "SUN";
 80011fc:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <SR_MENU_Display+0xf0>)
	if(SR_MENU_Data.new_realtime.system_day > 0){
 80011fe:	78e9      	ldrb	r1, [r5, #3]
	char t_day_string[] = "SUN";
 8001200:	9303      	str	r3, [sp, #12]
	if(SR_MENU_Data.new_realtime.system_day > 0){
 8001202:	b131      	cbz	r1, 8001212 <SR_MENU_Display+0x52>
		strcpy(t_day_string, DAY_Str[SR_MENU_Data.new_realtime.system_day - 1]);
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <SR_MENU_Display+0xf4>)
 8001206:	3901      	subs	r1, #1
 8001208:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800120c:	a803      	add	r0, sp, #12
 800120e:	f003 fafb 	bl	8004808 <strcpy>
	}
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8001212:	79ab      	ldrb	r3, [r5, #6]
 8001214:	6860      	ldr	r0, [r4, #4]
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	796b      	ldrb	r3, [r5, #5]
 800121a:	aa03      	add	r2, sp, #12
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4926      	ldr	r1, [pc, #152]	; (80012b8 <SR_MENU_Display+0xf8>)
 8001220:	792b      	ldrb	r3, [r5, #4]
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);

	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour / 10, 2, 2);
 8001222:	260a      	movs	r6, #10
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8001224:	f003 f8b6 	bl	8004394 <LCD_Write>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour / 10, 2, 2);
 8001228:	2202      	movs	r2, #2
 800122a:	7868      	ldrb	r0, [r5, #1]
 800122c:	4611      	mov	r1, r2
 800122e:	fbb0 f0f6 	udiv	r0, r0, r6
 8001232:	f7ff fd29 	bl	8000c88 <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour % 10, 6, 2);
 8001236:	7868      	ldrb	r0, [r5, #1]
 8001238:	2202      	movs	r2, #2
 800123a:	fbb0 f3f6 	udiv	r3, r0, r6
 800123e:	fb06 0013 	mls	r0, r6, r3, r0
 8001242:	2106      	movs	r1, #6
 8001244:	b2c0      	uxtb	r0, r0
 8001246:	f7ff fd1f 	bl	8000c88 <MAIN_MENU_Display_Num>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 800124a:	2202      	movs	r2, #2
 800124c:	6860      	ldr	r0, [r4, #4]
 800124e:	2109      	movs	r1, #9
 8001250:	f003 f822 	bl	8004298 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 8001254:	6860      	ldr	r0, [r4, #4]
 8001256:	212e      	movs	r1, #46	; 0x2e
 8001258:	f003 f856 	bl	8004308 <LCD_Send_Data>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 800125c:	2203      	movs	r2, #3
 800125e:	6860      	ldr	r0, [r4, #4]
 8001260:	2109      	movs	r1, #9
 8001262:	f003 f819 	bl	8004298 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 8001266:	6860      	ldr	r0, [r4, #4]
 8001268:	212e      	movs	r1, #46	; 0x2e
 800126a:	f003 f84d 	bl	8004308 <LCD_Send_Data>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_minute / 10, 10, 2);
 800126e:	78a8      	ldrb	r0, [r5, #2]
 8001270:	4631      	mov	r1, r6
 8001272:	fbb0 f0f6 	udiv	r0, r0, r6
 8001276:	2202      	movs	r2, #2
 8001278:	f7ff fd06 	bl	8000c88 <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_minute % 10, 14, 2);
 800127c:	78a8      	ldrb	r0, [r5, #2]
 800127e:	2202      	movs	r2, #2
 8001280:	fbb0 f3f6 	udiv	r3, r0, r6
 8001284:	fb06 0013 	mls	r0, r6, r3, r0
 8001288:	210e      	movs	r1, #14
 800128a:	b2c0      	uxtb	r0, r0
 800128c:	f7ff fcfc 	bl	8000c88 <MAIN_MENU_Display_Num>
}
 8001290:	b004      	add	sp, #16
 8001292:	bd70      	pop	{r4, r5, r6, pc}
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
 8001294:	4909      	ldr	r1, [pc, #36]	; (80012bc <SR_MENU_Display+0xfc>)
 8001296:	6860      	ldr	r0, [r4, #4]
 8001298:	f003 f87c 	bl	8004394 <LCD_Write>
 800129c:	e7a9      	b.n	80011f2 <SR_MENU_Display+0x32>
 800129e:	bf00      	nop
 80012a0:	20000154 	.word	0x20000154
 80012a4:	2000016a 	.word	0x2000016a
 80012a8:	2000001c 	.word	0x2000001c
 80012ac:	08005025 	.word	0x08005025
 80012b0:	004e5553 	.word	0x004e5553
 80012b4:	20000000 	.word	0x20000000
 80012b8:	08004f7b 	.word	0x08004f7b
 80012bc:	08005037 	.word	0x08005037

080012c0 <ST_MENU_Init>:
static uint8_t __max_value[] = {23, 59, 1, 1, 1, 1, 1, 1, 1};
extern char *__setting_type_str[6];

void ST_MENU_Init(){

}
 80012c0:	4770      	bx	lr
	...

080012c4 <ST_MENU_Set_State>:

void ST_MENU_Set_State(){
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 80012c4:	2204      	movs	r2, #4
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <ST_MENU_Set_State+0x20>)
	MENU_Data.changed = 0;
	MENU_Data.is_changing_menu = 1;
	ST_MENU_Data.state = SETTING_ALARM_HOUR;
	FLASH_DATA_t t_timeline = {0, 0, 0, 1};
	ST_MENU_Data.timeline_data = t_timeline;
 80012c8:	2101      	movs	r1, #1
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 80012ca:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80012cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d0:	811a      	strh	r2, [r3, #8]
	ST_MENU_Data.state = SETTING_ALARM_HOUR;
 80012d2:	2200      	movs	r2, #0
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <ST_MENU_Set_State+0x24>)
 80012d6:	701a      	strb	r2, [r3, #0]
	ST_MENU_Data.timeline_data = t_timeline;
 80012d8:	705a      	strb	r2, [r3, #1]
 80012da:	709a      	strb	r2, [r3, #2]
 80012dc:	70da      	strb	r2, [r3, #3]
 80012de:	7119      	strb	r1, [r3, #4]
	ST_MENU_Data.current_day_state = 0;
 80012e0:	715a      	strb	r2, [r3, #5]
}
 80012e2:	4770      	bx	lr
 80012e4:	20000154 	.word	0x20000154
 80012e8:	20000171 	.word	0x20000171

080012ec <ST_MENU_Change_Setting_State>:

void ST_MENU_Change_Setting_State(uint8_t p_is_increase){
 80012ec:	4602      	mov	r2, r0
	int8_t *t_value = (int8_t *)(&ST_MENU_Data.state);
	*t_value += ((p_is_increase == INCREASE) ? 1 : -1);
 80012ee:	2a01      	cmp	r2, #1
 80012f0:	bf18      	it	ne
 80012f2:	22ff      	movne	r2, #255	; 0xff
void ST_MENU_Change_Setting_State(uint8_t p_is_increase){
 80012f4:	b508      	push	{r3, lr}
	*t_value += ((p_is_increase == INCREASE) ? 1 : -1);
 80012f6:	480e      	ldr	r0, [pc, #56]	; (8001330 <ST_MENU_Change_Setting_State+0x44>)
 80012f8:	7803      	ldrb	r3, [r0, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	b25b      	sxtb	r3, r3
	if(*t_value > CHECKING_ALARM_AGAIN){
 80012fe:	2b09      	cmp	r3, #9
	*t_value += ((p_is_increase == INCREASE) ? 1 : -1);
 8001300:	7003      	strb	r3, [r0, #0]
	if(*t_value > CHECKING_ALARM_AGAIN){
 8001302:	dd08      	ble.n	8001316 <ST_MENU_Change_Setting_State+0x2a>
		*t_value = CHECKING_ALARM_AGAIN;
 8001304:	2309      	movs	r3, #9
 8001306:	f800 3b01 	strb.w	r3, [r0], #1
		TIMELINE_Add(&ST_MENU_Data.timeline_data);
 800130a:	f7ff fba3 	bl	8000a54 <TIMELINE_Add>
		}
		ST_MENU_Data.current_day_state = 0;
		MENU_Data.menu_type = SETTING_TIMELINE_MENU;
		MENU_Data.changed = 0;
	}
}
 800130e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			TL_MENU_Set_State();
 8001312:	f000 b8bf 	b.w	8001494 <TL_MENU_Set_State>
		if(*t_value < 0){
 8001316:	2b00      	cmp	r3, #0
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	da01      	bge.n	8001322 <ST_MENU_Change_Setting_State+0x36>
			*t_value = 0;
 800131e:	7003      	strb	r3, [r0, #0]
 8001320:	e7f5      	b.n	800130e <ST_MENU_Change_Setting_State+0x22>
		MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 8001322:	2104      	movs	r1, #4
 8001324:	4a03      	ldr	r2, [pc, #12]	; (8001334 <ST_MENU_Change_Setting_State+0x48>)
		ST_MENU_Data.current_day_state = 0;
 8001326:	7143      	strb	r3, [r0, #5]
		MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 8001328:	7011      	strb	r1, [r2, #0]
		MENU_Data.changed = 0;
 800132a:	7213      	strb	r3, [r2, #8]
}
 800132c:	bd08      	pop	{r3, pc}
 800132e:	bf00      	nop
 8001330:	20000171 	.word	0x20000171
 8001334:	20000154 	.word	0x20000154

08001338 <ST_MENU_Set_Value>:

void ST_MENU_Set_Value(uint8_t p_is_increase){
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 8001338:	2204      	movs	r2, #4
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <ST_MENU_Set_Value+0x64>)
void ST_MENU_Set_Value(uint8_t p_is_increase){
 800133c:	b510      	push	{r4, lr}
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 800133e:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001340:	2200      	movs	r2, #0
 8001342:	721a      	strb	r2, [r3, #8]
	if(ST_MENU_Data.state < CHECKING_ALARM_AGAIN){
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <ST_MENU_Set_Value+0x68>)
 8001346:	781a      	ldrb	r2, [r3, #0]
 8001348:	2a08      	cmp	r2, #8
 800134a:	d823      	bhi.n	8001394 <ST_MENU_Set_Value+0x5c>
		int8_t *t_data_ptr;
		if(ST_MENU_Data.state >= SETTING_ALARM_SUNDAY){
 800134c:	2a01      	cmp	r2, #1
			t_data_ptr = (int8_t *)(&ST_MENU_Data.current_day_state);
		} else{
			t_data_ptr = (int8_t *)(&ST_MENU_Data.timeline_data) + ST_MENU_Data.state;
 800134e:	bf9a      	itte	ls
 8001350:	1c59      	addls	r1, r3, #1
 8001352:	1852      	addls	r2, r2, r1
			t_data_ptr = (int8_t *)(&ST_MENU_Data.current_day_state);
 8001354:	1d5a      	addhi	r2, r3, #5
		}
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 8001356:	2801      	cmp	r0, #1
 8001358:	bf18      	it	ne
 800135a:	20ff      	movne	r0, #255	; 0xff
 800135c:	7811      	ldrb	r1, [r2, #0]
		if(*t_data_ptr > __max_value[ST_MENU_Data.state]){
 800135e:	4c11      	ldr	r4, [pc, #68]	; (80013a4 <ST_MENU_Set_Value+0x6c>)
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 8001360:	4408      	add	r0, r1
 8001362:	b240      	sxtb	r0, r0
 8001364:	7010      	strb	r0, [r2, #0]
		if(*t_data_ptr > __max_value[ST_MENU_Data.state]){
 8001366:	7819      	ldrb	r1, [r3, #0]
 8001368:	5c61      	ldrb	r1, [r4, r1]
 800136a:	4288      	cmp	r0, r1
 800136c:	dd02      	ble.n	8001374 <ST_MENU_Set_Value+0x3c>
			*t_data_ptr = 0;
 800136e:	2100      	movs	r1, #0
		} else if(*t_data_ptr < 0){
			*t_data_ptr = __max_value[ST_MENU_Data.state];
 8001370:	7011      	strb	r1, [r2, #0]
 8001372:	e001      	b.n	8001378 <ST_MENU_Set_Value+0x40>
		} else if(*t_data_ptr < 0){
 8001374:	2800      	cmp	r0, #0
 8001376:	dbfb      	blt.n	8001370 <ST_MENU_Set_Value+0x38>
		}
		if(ST_MENU_Data.state >= SETTING_ALARM_SUNDAY){
 8001378:	7818      	ldrb	r0, [r3, #0]
 800137a:	2801      	cmp	r0, #1
 800137c:	d90a      	bls.n	8001394 <ST_MENU_Set_Value+0x5c>
			if(*t_data_ptr){
				ST_MENU_Data.timeline_data.day |= (0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 800137e:	1e84      	subs	r4, r0, #2
 8001380:	2001      	movs	r0, #1
			if(*t_data_ptr){
 8001382:	f992 2000 	ldrsb.w	r2, [r2]
				ST_MENU_Data.timeline_data.day |= (0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 8001386:	40a0      	lsls	r0, r4
 8001388:	f993 1003 	ldrsb.w	r1, [r3, #3]
 800138c:	b240      	sxtb	r0, r0
			if(*t_data_ptr){
 800138e:	b112      	cbz	r2, 8001396 <ST_MENU_Set_Value+0x5e>
				ST_MENU_Data.timeline_data.day |= (0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 8001390:	4301      	orrs	r1, r0
			} else{
				ST_MENU_Data.timeline_data.day &= ~(0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 8001392:	70d9      	strb	r1, [r3, #3]
			}
		}
	}
}
 8001394:	bd10      	pop	{r4, pc}
				ST_MENU_Data.timeline_data.day &= ~(0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 8001396:	ea21 0100 	bic.w	r1, r1, r0
 800139a:	e7fa      	b.n	8001392 <ST_MENU_Set_Value+0x5a>
 800139c:	20000154 	.word	0x20000154
 80013a0:	20000171 	.word	0x20000171
 80013a4:	080050a2 	.word	0x080050a2

080013a8 <ST_MENU_Display>:

void ST_MENU_Display(){
 80013a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(MENU_Data.is_changing_menu){
 80013aa:	4c2d      	ldr	r4, [pc, #180]	; (8001460 <ST_MENU_Display+0xb8>)
 80013ac:	7a63      	ldrb	r3, [r4, #9]
 80013ae:	b123      	cbz	r3, 80013ba <ST_MENU_Display+0x12>
		LCD_Clear(MENU_Data.hlcd);
 80013b0:	6860      	ldr	r0, [r4, #4]
 80013b2:	f002 ff89 	bl	80042c8 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	7263      	strb	r3, [r4, #9]
	}

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 1);
	LCD_Write(MENU_Data.hlcd, "Time: %02d:%02d", ST_MENU_Data.timeline_data.hour, ST_MENU_Data.timeline_data.minute);
 80013ba:	4d2a      	ldr	r5, [pc, #168]	; (8001464 <ST_MENU_Display+0xbc>)
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 1);
 80013bc:	2201      	movs	r2, #1
 80013be:	2100      	movs	r1, #0
 80013c0:	6860      	ldr	r0, [r4, #4]
 80013c2:	f002 ff69 	bl	8004298 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Time: %02d:%02d", ST_MENU_Data.timeline_data.hour, ST_MENU_Data.timeline_data.minute);
 80013c6:	78ab      	ldrb	r3, [r5, #2]
 80013c8:	786a      	ldrb	r2, [r5, #1]
 80013ca:	4927      	ldr	r1, [pc, #156]	; (8001468 <ST_MENU_Display+0xc0>)
 80013cc:	6860      	ldr	r0, [r4, #4]
 80013ce:	f002 ffe1 	bl	8004394 <LCD_Write>

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 2);
 80013d2:	2202      	movs	r2, #2
 80013d4:	2100      	movs	r1, #0
 80013d6:	6860      	ldr	r0, [r4, #4]
 80013d8:	f002 ff5e 	bl	8004298 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Day: C234567");
 80013dc:	4923      	ldr	r1, [pc, #140]	; (800146c <ST_MENU_Display+0xc4>)
 80013de:	6860      	ldr	r0, [r4, #4]
 80013e0:	f002 ffd8 	bl	8004394 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 5, 3);
 80013e4:	2203      	movs	r2, #3
 80013e6:	2105      	movs	r1, #5
 80013e8:	6860      	ldr	r0, [r4, #4]
 80013ea:	f002 ff55 	bl	8004298 <LCD_Set_Cursor>
	for(int i = 0; i < 7; i++){
 80013ee:	2600      	movs	r6, #0
		uint8_t t_day_value = ST_MENU_Data.timeline_data.day & (1 << i);
 80013f0:	2701      	movs	r7, #1
 80013f2:	78ea      	ldrb	r2, [r5, #3]
 80013f4:	fa07 f306 	lsl.w	r3, r7, r6
		if(t_day_value){
 80013f8:	421a      	tst	r2, r3
			LCD_Send_Data(MENU_Data.hlcd, 0x00);
 80013fa:	bf14      	ite	ne
 80013fc:	2100      	movne	r1, #0
		} else{
			LCD_Send_Data(MENU_Data.hlcd, 0xFE);
 80013fe:	21fe      	moveq	r1, #254	; 0xfe
			LCD_Send_Data(MENU_Data.hlcd, 0x00);
 8001400:	6860      	ldr	r0, [r4, #4]
	for(int i = 0; i < 7; i++){
 8001402:	3601      	adds	r6, #1
			LCD_Send_Data(MENU_Data.hlcd, 0xFE);
 8001404:	f002 ff80 	bl	8004308 <LCD_Send_Data>
	for(int i = 0; i < 7; i++){
 8001408:	2e07      	cmp	r6, #7
 800140a:	d1f2      	bne.n	80013f2 <ST_MENU_Display+0x4a>
		}
	}

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	6860      	ldr	r0, [r4, #4]
 8001410:	4611      	mov	r1, r2
 8001412:	f002 ff41 	bl	8004298 <LCD_Set_Cursor>
	if(ST_MENU_Data.state < SETTING_ALARM_SUNDAY){
 8001416:	782b      	ldrb	r3, [r5, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d80b      	bhi.n	8001434 <ST_MENU_Display+0x8c>
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[ST_MENU_Data.state]);
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <ST_MENU_Display+0xc8>)
 800141e:	4915      	ldr	r1, [pc, #84]	; (8001474 <ST_MENU_Display+0xcc>)
 8001420:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001424:	6860      	ldr	r0, [r4, #4]
 8001426:	f002 ffb5 	bl	8004394 <LCD_Write>
		LCD_Write(MENU_Data.hlcd, "  Setting : DAY   ");
		LCD_Cursor_Blink(MENU_Data.hlcd);
		LCD_Set_Cursor(MENU_Data.hlcd, 5 + ST_MENU_Data.state - SETTING_ALARM_SUNDAY, 2);
	} else{
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
		LCD_Cursor_No_Blink(MENU_Data.hlcd);
 800142a:	6860      	ldr	r0, [r4, #4]
	}
}
 800142c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LCD_Cursor_No_Blink(MENU_Data.hlcd);
 8001430:	f002 bf62 	b.w	80042f8 <LCD_Cursor_No_Blink>
	} else if(ST_MENU_Data.state < CHECKING_ALARM_AGAIN){
 8001434:	2b08      	cmp	r3, #8
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[ST_MENU_Data.state]);
 8001436:	6860      	ldr	r0, [r4, #4]
	} else if(ST_MENU_Data.state < CHECKING_ALARM_AGAIN){
 8001438:	d80e      	bhi.n	8001458 <ST_MENU_Display+0xb0>
		LCD_Write(MENU_Data.hlcd, "  Setting : DAY   ");
 800143a:	490f      	ldr	r1, [pc, #60]	; (8001478 <ST_MENU_Display+0xd0>)
 800143c:	f002 ffaa 	bl	8004394 <LCD_Write>
		LCD_Cursor_Blink(MENU_Data.hlcd);
 8001440:	6860      	ldr	r0, [r4, #4]
 8001442:	f002 ff51 	bl	80042e8 <LCD_Cursor_Blink>
		LCD_Set_Cursor(MENU_Data.hlcd, 5 + ST_MENU_Data.state - SETTING_ALARM_SUNDAY, 2);
 8001446:	7829      	ldrb	r1, [r5, #0]
 8001448:	6860      	ldr	r0, [r4, #4]
 800144a:	3103      	adds	r1, #3
 800144c:	2202      	movs	r2, #2
}
 800144e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LCD_Set_Cursor(MENU_Data.hlcd, 5 + ST_MENU_Data.state - SETTING_ALARM_SUNDAY, 2);
 8001452:	b2c9      	uxtb	r1, r1
 8001454:	f002 bf20 	b.w	8004298 <LCD_Set_Cursor>
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
 8001458:	4908      	ldr	r1, [pc, #32]	; (800147c <ST_MENU_Display+0xd4>)
 800145a:	f002 ff9b 	bl	8004394 <LCD_Write>
 800145e:	e7e4      	b.n	800142a <ST_MENU_Display+0x82>
 8001460:	20000154 	.word	0x20000154
 8001464:	20000171 	.word	0x20000171
 8001468:	08005072 	.word	0x08005072
 800146c:	08005082 	.word	0x08005082
 8001470:	2000001c 	.word	0x2000001c
 8001474:	08005025 	.word	0x08005025
 8001478:	0800508f 	.word	0x0800508f
 800147c:	08005037 	.word	0x08005037

08001480 <TL_MENU_Init>:
		}
	}
}

void TL_MENU_Init(){
	TL_MENU_Data.first_line = 0;
 8001480:	2200      	movs	r2, #0
 8001482:	4b03      	ldr	r3, [pc, #12]	; (8001490 <TL_MENU_Init+0x10>)
 8001484:	701a      	strb	r2, [r3, #0]
	TL_MENU_Data.numer_of_choices = 0;
 8001486:	705a      	strb	r2, [r3, #1]
	TL_MENU_Data.current_pointer = 0;
 8001488:	709a      	strb	r2, [r3, #2]
	TL_MENU_Data.woking_state = NORMAL_STATE;
 800148a:	70da      	strb	r2, [r3, #3]
	TIMELINE_Init();
 800148c:	f7ff ba6c 	b.w	8000968 <TIMELINE_Init>
 8001490:	20000177 	.word	0x20000177

08001494 <TL_MENU_Set_State>:
//		}
//	}
}

void TL_MENU_Set_State(){
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 8001494:	2203      	movs	r2, #3
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <TL_MENU_Set_State+0x24>)
	MENU_Data.changed = 0;
	MENU_Data.is_changing_menu = 1;
	TL_MENU_Data.first_line = 0;
	TL_MENU_Data.current_pointer = 0;
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 8001498:	4908      	ldr	r1, [pc, #32]	; (80014bc <TL_MENU_Set_State+0x28>)
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 800149a:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 800149c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a0:	811a      	strh	r2, [r3, #8]
	TL_MENU_Data.first_line = 0;
 80014a2:	2200      	movs	r2, #0
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 80014a4:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
	TL_MENU_Data.first_line = 0;
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <TL_MENU_Set_State+0x2c>)
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 80014aa:	3101      	adds	r1, #1
	TL_MENU_Data.first_line = 0;
 80014ac:	701a      	strb	r2, [r3, #0]
	TL_MENU_Data.current_pointer = 0;
 80014ae:	709a      	strb	r2, [r3, #2]
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 80014b0:	7059      	strb	r1, [r3, #1]
	TL_MENU_Data.woking_state = NORMAL_STATE;
 80014b2:	70da      	strb	r2, [r3, #3]
}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000154 	.word	0x20000154
 80014bc:	200000fc 	.word	0x200000fc
 80014c0:	20000177 	.word	0x20000177

080014c4 <TL_MENU_Change_Working_State>:

void TL_MENU_Change_Working_State(){
 80014c4:	b510      	push	{r4, lr}
	if(TL_MENU_Data.current_pointer == 0) return;
 80014c6:	4c1a      	ldr	r4, [pc, #104]	; (8001530 <TL_MENU_Change_Working_State+0x6c>)
 80014c8:	f994 2002 	ldrsb.w	r2, [r4, #2]
 80014cc:	b16a      	cbz	r2, 80014ea <TL_MENU_Change_Working_State+0x26>
	if(TL_MENU_Data.woking_state == NORMAL_STATE){
 80014ce:	78e3      	ldrb	r3, [r4, #3]
 80014d0:	b963      	cbnz	r3, 80014ec <TL_MENU_Change_Working_State+0x28>
		TL_MENU_Data.woking_state = CONFIG_TIMELINE_STATE;
 80014d2:	2301      	movs	r3, #1
 80014d4:	70e3      	strb	r3, [r4, #3]
		TL_MENU_Data.timeline_state = TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state;
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <TL_MENU_Change_Working_State+0x70>)
 80014d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80014dc:	78db      	ldrb	r3, [r3, #3]
 80014de:	7123      	strb	r3, [r4, #4]
		} else{
			TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state = TL_MENU_Data.timeline_state;
			TIMELINE_Store_To_Flash();
		}
	}
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 80014e0:	2203      	movs	r2, #3
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <TL_MENU_Change_Working_State+0x74>)
 80014e4:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80014e6:	2200      	movs	r2, #0
 80014e8:	721a      	strb	r2, [r3, #8]
}
 80014ea:	bd10      	pop	{r4, pc}
		TL_MENU_Data.woking_state = NORMAL_STATE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	70e3      	strb	r3, [r4, #3]
		if(TL_MENU_Data.timeline_state == DELETE_TIMELINE && !ALARM_Is_Buzzer_Running()){
 80014f0:	7923      	ldrb	r3, [r4, #4]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d112      	bne.n	800151c <TL_MENU_Change_Working_State+0x58>
 80014f6:	f7ff f909 	bl	800070c <ALARM_Is_Buzzer_Running>
 80014fa:	b978      	cbnz	r0, 800151c <TL_MENU_Change_Working_State+0x58>
			TIMELINE_Delete(TL_MENU_Data.current_pointer - 1);
 80014fc:	78a0      	ldrb	r0, [r4, #2]
 80014fe:	3801      	subs	r0, #1
 8001500:	b2c0      	uxtb	r0, r0
 8001502:	f7ff fabd 	bl	8000a80 <TIMELINE_Delete>
			TL_MENU_Data.numer_of_choices--;
 8001506:	7863      	ldrb	r3, [r4, #1]
			if(TL_MENU_Data.current_pointer > TL_MENU_Data.numer_of_choices - 1){
 8001508:	f994 1002 	ldrsb.w	r1, [r4, #2]
			TL_MENU_Data.numer_of_choices--;
 800150c:	1e5a      	subs	r2, r3, #1
 800150e:	b2d2      	uxtb	r2, r2
			if(TL_MENU_Data.current_pointer > TL_MENU_Data.numer_of_choices - 1){
 8001510:	428a      	cmp	r2, r1
			TL_MENU_Data.numer_of_choices--;
 8001512:	7062      	strb	r2, [r4, #1]
			if(TL_MENU_Data.current_pointer > TL_MENU_Data.numer_of_choices - 1){
 8001514:	dce4      	bgt.n	80014e0 <TL_MENU_Change_Working_State+0x1c>
				TL_MENU_Data.current_pointer = TL_MENU_Data.numer_of_choices - 1;
 8001516:	3b02      	subs	r3, #2
 8001518:	70a3      	strb	r3, [r4, #2]
 800151a:	e7e1      	b.n	80014e0 <TL_MENU_Change_Working_State+0x1c>
			TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state = TL_MENU_Data.timeline_state;
 800151c:	f994 2002 	ldrsb.w	r2, [r4, #2]
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <TL_MENU_Change_Working_State+0x70>)
 8001522:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001526:	7922      	ldrb	r2, [r4, #4]
 8001528:	70da      	strb	r2, [r3, #3]
			TIMELINE_Store_To_Flash();
 800152a:	f7ff fa79 	bl	8000a20 <TIMELINE_Store_To_Flash>
 800152e:	e7d7      	b.n	80014e0 <TL_MENU_Change_Working_State+0x1c>
 8001530:	20000177 	.word	0x20000177
 8001534:	200000fc 	.word	0x200000fc
 8001538:	20000154 	.word	0x20000154

0800153c <TL_MENU_Change_Pointer>:

void TL_MENU_Change_Pointer(uint8_t p_is_increase){
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 800153c:	2203      	movs	r2, #3
	MENU_Data.changed = 0;
 800153e:	2100      	movs	r1, #0
	TL_MENU_Data.current_pointer += (p_is_increase == INCREASE) ? 1 : -1;
 8001540:	2801      	cmp	r0, #1
 8001542:	bf18      	it	ne
 8001544:	20ff      	movne	r0, #255	; 0xff
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <TL_MENU_Change_Pointer+0x48>)
 8001548:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 800154a:	7219      	strb	r1, [r3, #8]
	TL_MENU_Data.current_pointer += (p_is_increase == INCREASE) ? 1 : -1;
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <TL_MENU_Change_Pointer+0x4c>)
 800154e:	789a      	ldrb	r2, [r3, #2]
 8001550:	4410      	add	r0, r2
 8001552:	b240      	sxtb	r0, r0
	if(TL_MENU_Data.current_pointer < 0){
 8001554:	4288      	cmp	r0, r1
	TL_MENU_Data.current_pointer += (p_is_increase == INCREASE) ? 1 : -1;
 8001556:	7098      	strb	r0, [r3, #2]
	if(TL_MENU_Data.current_pointer < 0){
 8001558:	da09      	bge.n	800156e <TL_MENU_Change_Pointer+0x32>
		TL_MENU_Data.current_pointer = 0;
 800155a:	7099      	strb	r1, [r3, #2]
	} else if(TL_MENU_Data.current_pointer >= TL_MENU_Data.numer_of_choices){
		TL_MENU_Data.current_pointer = TL_MENU_Data.numer_of_choices - 1;
	}

	if(TL_MENU_Data.current_pointer > TL_MENU_Data.first_line + 3){
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001562:	1cd0      	adds	r0, r2, #3
 8001564:	4281      	cmp	r1, r0
 8001566:	dd09      	ble.n	800157c <TL_MENU_Change_Pointer+0x40>
		TL_MENU_Data.first_line++;
 8001568:	3201      	adds	r2, #1
	} else if(TL_MENU_Data.current_pointer < TL_MENU_Data.first_line){
		TL_MENU_Data.first_line--;
 800156a:	701a      	strb	r2, [r3, #0]
	}
}
 800156c:	4770      	bx	lr
	} else if(TL_MENU_Data.current_pointer >= TL_MENU_Data.numer_of_choices){
 800156e:	785a      	ldrb	r2, [r3, #1]
 8001570:	4290      	cmp	r0, r2
		TL_MENU_Data.current_pointer = TL_MENU_Data.numer_of_choices - 1;
 8001572:	bfa4      	itt	ge
 8001574:	f102 32ff 	addge.w	r2, r2, #4294967295
 8001578:	709a      	strbge	r2, [r3, #2]
 800157a:	e7ef      	b.n	800155c <TL_MENU_Change_Pointer+0x20>
	} else if(TL_MENU_Data.current_pointer < TL_MENU_Data.first_line){
 800157c:	4291      	cmp	r1, r2
 800157e:	daf5      	bge.n	800156c <TL_MENU_Change_Pointer+0x30>
		TL_MENU_Data.first_line--;
 8001580:	3a01      	subs	r2, #1
 8001582:	e7f2      	b.n	800156a <TL_MENU_Change_Pointer+0x2e>
 8001584:	20000154 	.word	0x20000154
 8001588:	20000177 	.word	0x20000177

0800158c <TL_MENU_Config_Timeline>:

void TL_MENU_Config_Timeline(uint8_t p_is_increase){
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 800158c:	2203      	movs	r2, #3
	MENU_Data.changed = 0;
 800158e:	2100      	movs	r1, #0

	TL_MENU_Data.timeline_state += (p_is_increase == INCREASE) ? 1 : -1;
 8001590:	2801      	cmp	r0, #1
 8001592:	bf18      	it	ne
 8001594:	20ff      	movne	r0, #255	; 0xff
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <TL_MENU_Config_Timeline+0x2c>)
 8001598:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 800159a:	7219      	strb	r1, [r3, #8]
	TL_MENU_Data.timeline_state += (p_is_increase == INCREASE) ? 1 : -1;
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <TL_MENU_Config_Timeline+0x30>)
 800159e:	791a      	ldrb	r2, [r3, #4]
 80015a0:	4410      	add	r0, r2
 80015a2:	b2c2      	uxtb	r2, r0
	if((int8_t)TL_MENU_Data.timeline_state < 0){
 80015a4:	0600      	lsls	r0, r0, #24
 80015a6:	d502      	bpl.n	80015ae <TL_MENU_Config_Timeline+0x22>
		TL_MENU_Data.timeline_state = 2;
 80015a8:	2202      	movs	r2, #2
	TL_MENU_Data.timeline_state += (p_is_increase == INCREASE) ? 1 : -1;
 80015aa:	711a      	strb	r2, [r3, #4]
 80015ac:	4770      	bx	lr
	} else if(TL_MENU_Data.timeline_state > 2){
 80015ae:	2a02      	cmp	r2, #2
 80015b0:	d9fb      	bls.n	80015aa <TL_MENU_Config_Timeline+0x1e>
		TL_MENU_Data.timeline_state = 0;
 80015b2:	7119      	strb	r1, [r3, #4]
	}
}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000154 	.word	0x20000154
 80015bc:	20000177 	.word	0x20000177

080015c0 <TL_MENU_Display>:

void TL_MENU_Display(){
 80015c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(MENU_Data.is_changing_menu == 1){
 80015c4:	4c46      	ldr	r4, [pc, #280]	; (80016e0 <TL_MENU_Display+0x120>)
void TL_MENU_Display(){
 80015c6:	b087      	sub	sp, #28
	if(MENU_Data.is_changing_menu == 1){
 80015c8:	7a63      	ldrb	r3, [r4, #9]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d104      	bne.n	80015d8 <TL_MENU_Display+0x18>
		LCD_Clear(MENU_Data.hlcd);
 80015ce:	6860      	ldr	r0, [r4, #4]
 80015d0:	f002 fe7a 	bl	80042c8 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	7263      	strb	r3, [r4, #9]
void TL_MENU_Display(){
 80015d8:	2600      	movs	r6, #0
	}
	for(int i = 0; i < 4; i++){
		uint8_t t_index = TL_MENU_Data.first_line + i;
 80015da:	4f42      	ldr	r7, [pc, #264]	; (80016e4 <TL_MENU_Display+0x124>)
		LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
		if(t_index == 0){
			LCD_Write(MENU_Data.hlcd, " Add...             ");
		} else if(t_index - 1 < TIMELINE_Data.len){
 80015dc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80016e8 <TL_MENU_Display+0x128>
		uint8_t t_index = TL_MENU_Data.first_line + i;
 80015e0:	783d      	ldrb	r5, [r7, #0]
 80015e2:	fa5f f886 	uxtb.w	r8, r6
 80015e6:	4445      	add	r5, r8
 80015e8:	b2ed      	uxtb	r5, r5
		LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 80015ea:	4642      	mov	r2, r8
 80015ec:	2100      	movs	r1, #0
 80015ee:	6860      	ldr	r0, [r4, #4]
 80015f0:	f002 fe52 	bl	8004298 <LCD_Set_Cursor>
		if(t_index == 0){
 80015f4:	b925      	cbnz	r5, 8001600 <TL_MENU_Display+0x40>
			LCD_Write(MENU_Data.hlcd, " Add...             ");
 80015f6:	493d      	ldr	r1, [pc, #244]	; (80016ec <TL_MENU_Display+0x12c>)
 80015f8:	6860      	ldr	r0, [r4, #4]
			char day_str[8] = {};
			__create_day_string(day_str, TIMELINE_Data.flash_data[t_index - 1].day);
			LCD_Write(MENU_Data.hlcd, " %02d:%02d %7s  %s ", TIMELINE_Data.flash_data[t_index - 1].hour, TIMELINE_Data.flash_data[t_index - 1].minute,
					day_str, (TIMELINE_Data.flash_data[t_index - 1].timeline_state == TIMELINE_ON) ? " ON" : "OFF");
		} else{
			LCD_Write(MENU_Data.hlcd, "                    ");
 80015fa:	f002 fecb 	bl	8004394 <LCD_Write>
 80015fe:	e03f      	b.n	8001680 <TL_MENU_Display+0xc0>
			LCD_Write(MENU_Data.hlcd, " Add...             ");
 8001600:	6863      	ldr	r3, [r4, #4]
 8001602:	9302      	str	r3, [sp, #8]
		} else if(t_index - 1 < TIMELINE_Data.len){
 8001604:	f899 303c 	ldrb.w	r3, [r9, #60]	; 0x3c
 8001608:	42ab      	cmp	r3, r5
 800160a:	d34d      	bcc.n	80016a8 <TL_MENU_Display+0xe8>
			char day_str[8] = {};
 800160c:	2300      	movs	r3, #0
			__create_day_string(day_str, TIMELINE_Data.flash_data[t_index - 1].day);
 800160e:	1e6a      	subs	r2, r5, #1
 8001610:	0091      	lsls	r1, r2, #2
 8001612:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8001616:	7992      	ldrb	r2, [r2, #6]
		uint8_t t_day_value = day & (1 << i);
 8001618:	f04f 0e01 	mov.w	lr, #1
			__create_day_string(day_str, TIMELINE_Data.flash_data[t_index - 1].day);
 800161c:	4610      	mov	r0, r2
				str[t_num_of_day++] = 'C';
 800161e:	f04f 0a43 	mov.w	sl, #67	; 0x43
	for(int i = 0; i < 7; i++){
 8001622:	461a      	mov	r2, r3
			char day_str[8] = {};
 8001624:	e9cd 3304 	strd	r3, r3, [sp, #16]
			__create_day_string(day_str, TIMELINE_Data.flash_data[t_index - 1].day);
 8001628:	9103      	str	r1, [sp, #12]
				str[t_num_of_day++] = 'C';
 800162a:	f10d 0c10 	add.w	ip, sp, #16
		uint8_t t_day_value = day & (1 << i);
 800162e:	fa0e f102 	lsl.w	r1, lr, r2
 8001632:	4001      	ands	r1, r0
 8001634:	fa4f fb81 	sxtb.w	fp, r1
		if(t_day_value){
 8001638:	b161      	cbz	r1, 8001654 <TL_MENU_Display+0x94>
			if(t_day_value == 1){
 800163a:	f1bb 0f01 	cmp.w	fp, #1
				str[t_num_of_day++] = 'C';
 800163e:	f103 0101 	add.w	r1, r3, #1
 8001642:	b2c9      	uxtb	r1, r1
				str[t_num_of_day++] = '1' + i;
 8001644:	bf16      	itet	ne
 8001646:	f102 0b31 	addne.w	fp, r2, #49	; 0x31
				str[t_num_of_day++] = 'C';
 800164a:	f80c a003 	strbeq.w	sl, [ip, r3]
				str[t_num_of_day++] = '1' + i;
 800164e:	f80c b003 	strbne.w	fp, [ip, r3]
 8001652:	460b      	mov	r3, r1
	for(int i = 0; i < 7; i++){
 8001654:	3201      	adds	r2, #1
 8001656:	2a07      	cmp	r2, #7
 8001658:	d1e9      	bne.n	800162e <TL_MENU_Display+0x6e>
			LCD_Write(MENU_Data.hlcd, " %02d:%02d %7s  %s ", TIMELINE_Data.flash_data[t_index - 1].hour, TIMELINE_Data.flash_data[t_index - 1].minute,
 800165a:	9a03      	ldr	r2, [sp, #12]
 800165c:	4924      	ldr	r1, [pc, #144]	; (80016f0 <TL_MENU_Display+0x130>)
 800165e:	444a      	add	r2, r9
 8001660:	f892 c007 	ldrb.w	ip, [r2, #7]
 8001664:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <TL_MENU_Display+0x134>)
 8001666:	9802      	ldr	r0, [sp, #8]
 8001668:	f1bc 0f01 	cmp.w	ip, #1
 800166c:	bf18      	it	ne
 800166e:	460b      	movne	r3, r1
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	ab04      	add	r3, sp, #16
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	7953      	ldrb	r3, [r2, #5]
 8001678:	491f      	ldr	r1, [pc, #124]	; (80016f8 <TL_MENU_Display+0x138>)
 800167a:	7912      	ldrb	r2, [r2, #4]
 800167c:	f002 fe8a 	bl	8004394 <LCD_Write>
		}
		if(TL_MENU_Data.current_pointer == t_index){
 8001680:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001684:	42ab      	cmp	r3, r5
 8001686:	d109      	bne.n	800169c <TL_MENU_Display+0xdc>
			if(TL_MENU_Data.woking_state == NORMAL_STATE){
 8001688:	78f9      	ldrb	r1, [r7, #3]
				LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 800168a:	4642      	mov	r2, r8
 800168c:	6860      	ldr	r0, [r4, #4]
			if(TL_MENU_Data.woking_state == NORMAL_STATE){
 800168e:	b971      	cbnz	r1, 80016ae <TL_MENU_Display+0xee>
				LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 8001690:	f002 fe02 	bl	8004298 <LCD_Set_Cursor>
				LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 8001694:	217e      	movs	r1, #126	; 0x7e
				} else if(TL_MENU_Data.timeline_state == TURN_ON_TIMELINE){
					LCD_Write(MENU_Data.hlcd, " ON");
				} else if(TL_MENU_Data.timeline_state == DELETE_TIMELINE){
					LCD_Write(MENU_Data.hlcd, "DEL");
				}
				LCD_Send_Data(MENU_Data.hlcd, 0x7F);
 8001696:	6860      	ldr	r0, [r4, #4]
 8001698:	f002 fe36 	bl	8004308 <LCD_Send_Data>
	for(int i = 0; i < 4; i++){
 800169c:	3601      	adds	r6, #1
 800169e:	2e04      	cmp	r6, #4
 80016a0:	d19e      	bne.n	80015e0 <TL_MENU_Display+0x20>
			}
		}
	}
}
 80016a2:	b007      	add	sp, #28
 80016a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LCD_Write(MENU_Data.hlcd, "                    ");
 80016a8:	4914      	ldr	r1, [pc, #80]	; (80016fc <TL_MENU_Display+0x13c>)
 80016aa:	9802      	ldr	r0, [sp, #8]
 80016ac:	e7a5      	b.n	80015fa <TL_MENU_Display+0x3a>
				LCD_Set_Cursor(MENU_Data.hlcd, 15, i);
 80016ae:	210f      	movs	r1, #15
 80016b0:	f002 fdf2 	bl	8004298 <LCD_Set_Cursor>
				LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 80016b4:	217e      	movs	r1, #126	; 0x7e
 80016b6:	6860      	ldr	r0, [r4, #4]
 80016b8:	f002 fe26 	bl	8004308 <LCD_Send_Data>
				if(TL_MENU_Data.timeline_state == TURN_OFF_TIMELINE){
 80016bc:	793b      	ldrb	r3, [r7, #4]
 80016be:	b92b      	cbnz	r3, 80016cc <TL_MENU_Display+0x10c>
					LCD_Write(MENU_Data.hlcd, "OFF");
 80016c0:	490b      	ldr	r1, [pc, #44]	; (80016f0 <TL_MENU_Display+0x130>)
 80016c2:	6860      	ldr	r0, [r4, #4]
					LCD_Write(MENU_Data.hlcd, "DEL");
 80016c4:	f002 fe66 	bl	8004394 <LCD_Write>
				LCD_Send_Data(MENU_Data.hlcd, 0x7F);
 80016c8:	217f      	movs	r1, #127	; 0x7f
 80016ca:	e7e4      	b.n	8001696 <TL_MENU_Display+0xd6>
				} else if(TL_MENU_Data.timeline_state == TURN_ON_TIMELINE){
 80016cc:	2b01      	cmp	r3, #1
					LCD_Write(MENU_Data.hlcd, "OFF");
 80016ce:	6860      	ldr	r0, [r4, #4]
				} else if(TL_MENU_Data.timeline_state == TURN_ON_TIMELINE){
 80016d0:	d101      	bne.n	80016d6 <TL_MENU_Display+0x116>
					LCD_Write(MENU_Data.hlcd, " ON");
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <TL_MENU_Display+0x134>)
 80016d4:	e7f6      	b.n	80016c4 <TL_MENU_Display+0x104>
				} else if(TL_MENU_Data.timeline_state == DELETE_TIMELINE){
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d1f6      	bne.n	80016c8 <TL_MENU_Display+0x108>
					LCD_Write(MENU_Data.hlcd, "DEL");
 80016da:	4909      	ldr	r1, [pc, #36]	; (8001700 <TL_MENU_Display+0x140>)
 80016dc:	e7f2      	b.n	80016c4 <TL_MENU_Display+0x104>
 80016de:	bf00      	nop
 80016e0:	20000154 	.word	0x20000154
 80016e4:	20000177 	.word	0x20000177
 80016e8:	200000fc 	.word	0x200000fc
 80016ec:	080050b3 	.word	0x080050b3
 80016f0:	080050af 	.word	0x080050af
 80016f4:	080050ab 	.word	0x080050ab
 80016f8:	080050c8 	.word	0x080050c8
 80016fc:	080050dc 	.word	0x080050dc
 8001700:	080050f1 	.word	0x080050f1

08001704 <TEMP_AND_HUM_Handle>:

LCD_I2C_HandleTypeDef hlcd;
DHT_HandleTypeDef hdht;

#define CHECKING_SENSOR_TIME	2000
void TEMP_AND_HUM_Handle(){
 8001704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static uint32_t timer = 0;
	static uint8_t system_temperature = 0;
	static uint8_t system_huminity = 0;
	if(HAL_GetTick() - timer >= CHECKING_SENSOR_TIME){
 8001708:	f000 fb9a 	bl	8001e40 <HAL_GetTick>
 800170c:	4e19      	ldr	r6, [pc, #100]	; (8001774 <TEMP_AND_HUM_Handle+0x70>)
 800170e:	6833      	ldr	r3, [r6, #0]
 8001710:	1ac0      	subs	r0, r0, r3
 8001712:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8001716:	d32b      	bcc.n	8001770 <TEMP_AND_HUM_Handle+0x6c>
		HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
		DHT_Read_Value(&hdht);
 8001718:	4c17      	ldr	r4, [pc, #92]	; (8001778 <TEMP_AND_HUM_Handle+0x74>)
		HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
 800171a:	213c      	movs	r1, #60	; 0x3c
 800171c:	4817      	ldr	r0, [pc, #92]	; (800177c <TEMP_AND_HUM_Handle+0x78>)
 800171e:	f002 f8c8 	bl	80038b2 <HAL_TIM_Encoder_Stop_IT>
		DHT_Read_Value(&hdht);
 8001722:	4620      	mov	r0, r4
 8001724:	f002 fb55 	bl	8003dd2 <DHT_Read_Value>
		HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001728:	213c      	movs	r1, #60	; 0x3c
 800172a:	4814      	ldr	r0, [pc, #80]	; (800177c <TEMP_AND_HUM_Handle+0x78>)
 800172c:	f002 f852 	bl	80037d4 <HAL_TIM_Encoder_Start_IT>
		if(system_huminity != (uint8_t)hdht.huminity || system_temperature != (uint8_t)hdht.temperature){
 8001730:	6920      	ldr	r0, [r4, #16]
 8001732:	f7fe ff1f 	bl	8000574 <__aeabi_f2uiz>
 8001736:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8001780 <TEMP_AND_HUM_Handle+0x7c>
 800173a:	b2c5      	uxtb	r5, r0
 800173c:	f898 3000 	ldrb.w	r3, [r8]
 8001740:	4f10      	ldr	r7, [pc, #64]	; (8001784 <TEMP_AND_HUM_Handle+0x80>)
 8001742:	42ab      	cmp	r3, r5
 8001744:	d106      	bne.n	8001754 <TEMP_AND_HUM_Handle+0x50>
 8001746:	68e0      	ldr	r0, [r4, #12]
 8001748:	f7fe ff14 	bl	8000574 <__aeabi_f2uiz>
 800174c:	783b      	ldrb	r3, [r7, #0]
 800174e:	b2c0      	uxtb	r0, r0
 8001750:	4298      	cmp	r0, r3
 8001752:	d00a      	beq.n	800176a <TEMP_AND_HUM_Handle+0x66>
			system_huminity = hdht.huminity;
			system_temperature = hdht.temperature;
 8001754:	68e0      	ldr	r0, [r4, #12]
			system_huminity = hdht.huminity;
 8001756:	f888 5000 	strb.w	r5, [r8]
			system_temperature = hdht.temperature;
 800175a:	f7fe ff0b 	bl	8000574 <__aeabi_f2uiz>
			if(MENU_Data.menu_type == MAIN_MENU){
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <TEMP_AND_HUM_Handle+0x84>)
			system_temperature = hdht.temperature;
 8001760:	7038      	strb	r0, [r7, #0]
			if(MENU_Data.menu_type == MAIN_MENU){
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b90b      	cbnz	r3, 800176a <TEMP_AND_HUM_Handle+0x66>
				MAIN_MENU_Update_Value();
 8001766:	f7ff fb9d 	bl	8000ea4 <MAIN_MENU_Update_Value>
			}
		}

		timer = HAL_GetTick();
 800176a:	f000 fb69 	bl	8001e40 <HAL_GetTick>
 800176e:	6030      	str	r0, [r6, #0]
	}
}
 8001770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001774:	200002c8 	.word	0x200002c8
 8001778:	200001ac 	.word	0x200001ac
 800177c:	2000027c 	.word	0x2000027c
 8001780:	200002c4 	.word	0x200002c4
 8001784:	200002c5 	.word	0x200002c5
 8001788:	20000154 	.word	0x20000154

0800178c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b510      	push	{r4, lr}
 800178e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001790:	2214      	movs	r2, #20
 8001792:	2100      	movs	r1, #0
 8001794:	a80c      	add	r0, sp, #48	; 0x30
 8001796:	f002 ff43 	bl	8004620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179a:	2214      	movs	r2, #20
 800179c:	2100      	movs	r1, #0
 800179e:	eb0d 0002 	add.w	r0, sp, r2
 80017a2:	f002 ff3d 	bl	8004620 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a6:	2210      	movs	r2, #16
 80017a8:	2100      	movs	r1, #0
 80017aa:	a801      	add	r0, sp, #4
 80017ac:	f002 ff38 	bl	8004620 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017b6:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017b8:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017bc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c4:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c6:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017c8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ca:	f001 fbb3 	bl	8002f34 <HAL_RCC_OscConfig>
 80017ce:	b108      	cbz	r0, 80017d4 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d6:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017de:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e0:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017e4:	4621      	mov	r1, r4
 80017e6:	a805      	add	r0, sp, #20
 80017e8:	f001 fd7a 	bl	80032e0 <HAL_RCC_ClockConfig>
 80017ec:	b108      	cbz	r0, 80017f2 <SystemClock_Config+0x66>
 80017ee:	b672      	cpsid	i
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <SystemClock_Config+0x64>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 80017f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017f6:	2203      	movs	r2, #3
 80017f8:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80017fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001800:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001802:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001804:	f001 fe28 	bl	8003458 <HAL_RCCEx_PeriphCLKConfig>
 8001808:	b108      	cbz	r0, 800180e <SystemClock_Config+0x82>
 800180a:	b672      	cpsid	i
  while (1)
 800180c:	e7fe      	b.n	800180c <SystemClock_Config+0x80>
}
 800180e:	b014      	add	sp, #80	; 0x50
 8001810:	bd10      	pop	{r4, pc}
	...

08001814 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f04f 0810 	mov.w	r8, #16
{
 8001818:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800181c:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 800181e:	f000 faf1 	bl	8001e04 <HAL_Init>
  SystemClock_Config();
 8001822:	f7ff ffb3 	bl	800178c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	4642      	mov	r2, r8
 8001828:	2100      	movs	r1, #0
 800182a:	a809      	add	r0, sp, #36	; 0x24
 800182c:	f002 fef8 	bl	8004620 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001830:	4b9b      	ldr	r3, [pc, #620]	; (8001aa0 <main+0x28c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001834:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001838:	ea42 0208 	orr.w	r2, r2, r8
 800183c:	619a      	str	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001844:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	ea02 0208 	and.w	r2, r2, r8
 800184e:	9203      	str	r2, [sp, #12]
 8001850:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001852:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001854:	4893      	ldr	r0, [pc, #588]	; (8001aa4 <main+0x290>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001856:	f042 0220 	orr.w	r2, r2, #32
 800185a:	619a      	str	r2, [r3, #24]
 800185c:	699a      	ldr	r2, [r3, #24]
  htim2.Instance = TIM2;
 800185e:	4d92      	ldr	r5, [pc, #584]	; (8001aa8 <main+0x294>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001860:	f002 0220 	and.w	r2, r2, #32
 8001864:	9204      	str	r2, [sp, #16]
 8001866:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	699a      	ldr	r2, [r3, #24]
  htim2.Init.Period = 65535;
 800186a:	f64f 7aff 	movw	sl, #65535	; 0xffff
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	f042 0204 	orr.w	r2, r2, #4
 8001872:	619a      	str	r2, [r3, #24]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	f002 0204 	and.w	r2, r2, #4
 800187a:	9205      	str	r2, [sp, #20]
 800187c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	699a      	ldr	r2, [r3, #24]
 8001880:	f042 0208 	orr.w	r2, r2, #8
 8001884:	619a      	str	r2, [r3, #24]
 8001886:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	9306      	str	r3, [sp, #24]
 8001890:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001892:	f000 fef3 	bl	800267c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 8001896:	2200      	movs	r2, #0
 8001898:	f640 7103 	movw	r1, #3843	; 0xf03
 800189c:	4883      	ldr	r0, [pc, #524]	; (8001aac <main+0x298>)
 800189e:	f000 feed 	bl	800267c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80018a8:	4881      	ldr	r0, [pc, #516]	; (8001ab0 <main+0x29c>)
 80018aa:	f000 fee7 	bl	800267c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	487d      	ldr	r0, [pc, #500]	; (8001aa4 <main+0x290>)
 80018b0:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	e9cd 9609 	strd	r9, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	e9cd 470b 	strd	r4, r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ba:	f000 fdff 	bl	80024bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 80018be:	f640 7303 	movw	r3, #3843	; 0xf03
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	487a      	ldr	r0, [pc, #488]	; (8001aac <main+0x298>)
 80018c4:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	e9cd 470b 	strd	r4, r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f000 fdf5 	bl	80024bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	4876      	ldr	r0, [pc, #472]	; (8001ab0 <main+0x29c>)
 80018d8:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	e9cd 470b 	strd	r4, r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e2:	f000 fdeb 	bl	80024bc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	4872      	ldr	r0, [pc, #456]	; (8001ab0 <main+0x29c>)
 80018e8:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	e9cd 8409 	strd	r8, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f000 fde4 	bl	80024bc <HAL_GPIO_Init>
  TIM_Encoder_InitTypeDef sConfig = {0};
 80018f4:	4621      	mov	r1, r4
 80018f6:	221c      	movs	r2, #28
 80018f8:	a80a      	add	r0, sp, #40	; 0x28
 80018fa:	f002 fe91 	bl	8004620 <memset>
  htim2.Instance = TIM2;
 80018fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8001902:	e9c5 3400 	strd	r3, r4, [r5]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001906:	2303      	movs	r3, #3
 8001908:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC1Filter = 10;
 800190a:	230a      	movs	r3, #10
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800190c:	4628      	mov	r0, r5
 800190e:	a909      	add	r1, sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	e9cd 4407 	strd	r4, r4, [sp, #28]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001914:	e9c5 a403 	strd	sl, r4, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191a:	61ac      	str	r4, [r5, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800191c:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.IC1Filter = 10;
 800191e:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001920:	960f      	str	r6, [sp, #60]	; 0x3c
  sConfig.IC2Filter = 10;
 8001922:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001924:	f002 f91c 	bl	8003b60 <HAL_TIM_Encoder_Init>
 8001928:	b108      	cbz	r0, 800192e <main+0x11a>
 800192a:	b672      	cpsid	i
  while (1)
 800192c:	e7fe      	b.n	800192c <main+0x118>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001932:	a907      	add	r1, sp, #28
 8001934:	4628      	mov	r0, r5
 8001936:	f002 fa07 	bl	8003d48 <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	b108      	cbz	r0, 8001940 <main+0x12c>
 800193c:	b672      	cpsid	i
  while (1)
 800193e:	e7fe      	b.n	800193e <main+0x12a>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance = RTC;
 8001944:	485b      	ldr	r0, [pc, #364]	; (8001ab4 <main+0x2a0>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001946:	4c5c      	ldr	r4, [pc, #368]	; (8001ab8 <main+0x2a4>)
 8001948:	e9c0 4300 	strd	r4, r3, [r0]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800194c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001950:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001952:	f001 feb7 	bl	80036c4 <HAL_RTC_Init>
 8001956:	b108      	cbz	r0, 800195c <main+0x148>
 8001958:	b672      	cpsid	i
  while (1)
 800195a:	e7fe      	b.n	800195a <main+0x146>
  hi2c2.Instance = I2C2;
 800195c:	4c57      	ldr	r4, [pc, #348]	; (8001abc <main+0x2a8>)
  hi2c2.Init.ClockSpeed = 100000;
 800195e:	4b58      	ldr	r3, [pc, #352]	; (8001ac0 <main+0x2ac>)
 8001960:	4958      	ldr	r1, [pc, #352]	; (8001ac4 <main+0x2b0>)
  hi2c2.Init.OwnAddress1 = 0;
 8001962:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hi2c2.Init.ClockSpeed = 100000;
 8001966:	e9c4 1300 	strd	r1, r3, [r4]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800196a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800196e:	e9c4 0006 	strd	r0, r0, [r4, #24]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001972:	e9c4 3004 	strd	r3, r0, [r4, #16]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001976:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001978:	4620      	mov	r0, r4
 800197a:	f001 f85f 	bl	8002a3c <HAL_I2C_Init>
 800197e:	b108      	cbz	r0, 8001984 <main+0x170>
 8001980:	b672      	cpsid	i
  while (1)
 8001982:	e7fe      	b.n	8001982 <main+0x16e>
  hadc1.Instance = ADC1;
 8001984:	f8df b140 	ldr.w	fp, [pc, #320]	; 8001ac8 <main+0x2b4>
 8001988:	4b50      	ldr	r3, [pc, #320]	; (8001acc <main+0x2b8>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800198a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  hadc1.Instance = ADC1;
 800198e:	f8cb 3000 	str.w	r3, [fp]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001992:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001996:	900b      	str	r0, [sp, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001998:	f8cb 0008 	str.w	r0, [fp, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800199c:	f88b 000c 	strb.w	r0, [fp, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019a0:	f88b 0014 	strb.w	r0, [fp, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019a4:	f8cb 0004 	str.w	r0, [fp, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a8:	4658      	mov	r0, fp
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019aa:	f8cb 301c 	str.w	r3, [fp, #28]
  hadc1.Init.NbrOfConversion = 1;
 80019ae:	f8cb 6010 	str.w	r6, [fp, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019b2:	f000 fb79 	bl	80020a8 <HAL_ADC_Init>
 80019b6:	b108      	cbz	r0, 80019bc <main+0x1a8>
 80019b8:	b672      	cpsid	i
  while (1)
 80019ba:	e7fe      	b.n	80019ba <main+0x1a6>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80019bc:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019be:	4658      	mov	r0, fp
 80019c0:	a909      	add	r1, sp, #36	; 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019c2:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80019c6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c8:	f000 faca 	bl	8001f60 <HAL_ADC_ConfigChannel>
 80019cc:	4683      	mov	fp, r0
 80019ce:	b108      	cbz	r0, 80019d4 <main+0x1c0>
 80019d0:	b672      	cpsid	i
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <main+0x1be>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d4:	4642      	mov	r2, r8
 80019d6:	4601      	mov	r1, r0
 80019d8:	a809      	add	r0, sp, #36	; 0x24
 80019da:	f002 fe21 	bl	8004620 <memset>
  htim1.Init.Prescaler = 71;
 80019de:	2347      	movs	r3, #71	; 0x47
  htim1.Instance = TIM1;
 80019e0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8001ad0 <main+0x2bc>
  htim1.Init.Prescaler = 71;
 80019e4:	4a3b      	ldr	r2, [pc, #236]	; (8001ad4 <main+0x2c0>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019e6:	4640      	mov	r0, r8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	e9cd bb07 	strd	fp, fp, [sp, #28]
  htim1.Init.Prescaler = 71;
 80019ec:	e9c8 2300 	strd	r2, r3, [r8]
  htim1.Init.Period = 65535;
 80019f0:	e9c8 ba02 	strd	fp, sl, [r8, #8]
  htim1.Init.RepetitionCounter = 0;
 80019f4:	e9c8 bb04 	strd	fp, fp, [r8, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f8:	f8c8 b018 	str.w	fp, [r8, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019fc:	f002 f884 	bl	8003b08 <HAL_TIM_Base_Init>
 8001a00:	b108      	cbz	r0, 8001a06 <main+0x1f2>
 8001a02:	b672      	cpsid	i
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <main+0x1f0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a0a:	4640      	mov	r0, r8
 8001a0c:	a909      	add	r1, sp, #36	; 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a10:	f002 f905 	bl	8003c1e <HAL_TIM_ConfigClockSource>
 8001a14:	b108      	cbz	r0, 8001a1a <main+0x206>
 8001a16:	b672      	cpsid	i
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <main+0x204>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a1e:	a907      	add	r1, sp, #28
 8001a20:	4640      	mov	r0, r8
 8001a22:	f002 f991 	bl	8003d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001a26:	4682      	mov	sl, r0
 8001a28:	b108      	cbz	r0, 8001a2e <main+0x21a>
 8001a2a:	b672      	cpsid	i
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <main+0x218>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4649      	mov	r1, r9
 8001a32:	481c      	ldr	r0, [pc, #112]	; (8001aa4 <main+0x290>)
 8001a34:	f000 fe22 	bl	800267c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001a38:	4652      	mov	r2, sl
 8001a3a:	4631      	mov	r1, r6
 8001a3c:	481b      	ldr	r0, [pc, #108]	; (8001aac <main+0x298>)
 8001a3e:	f000 fe1d 	bl	800267c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001a42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a46:	f000 fa01 	bl	8001e4c <HAL_Delay>
  DELAY_US_Init(&htim1);
 8001a4a:	4640      	mov	r0, r8
 8001a4c:	f002 fb48 	bl	80040e0 <DELAY_US_Init>
  REALTIME_Init();
 8001a50:	f7ff f838 	bl	8000ac4 <REALTIME_Init>
  DHT_Init(&hdht, DHT11, GPIOA, GPIO_PIN_0);
 8001a54:	4633      	mov	r3, r6
 8001a56:	4651      	mov	r1, sl
 8001a58:	4a14      	ldr	r2, [pc, #80]	; (8001aac <main+0x298>)
 8001a5a:	481f      	ldr	r0, [pc, #124]	; (8001ad8 <main+0x2c4>)
 8001a5c:	f002 f9b2 	bl	8003dc4 <DHT_Init>
  LCD_Init(&hlcd, &hi2c2, 20, 4, 0x4E);
 8001a60:	234e      	movs	r3, #78	; 0x4e
 8001a62:	2214      	movs	r2, #20
 8001a64:	4621      	mov	r1, r4
 8001a66:	481d      	ldr	r0, [pc, #116]	; (8001adc <main+0x2c8>)
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	f002 fbd2 	bl	8004214 <LCD_Init>
  MENU_Init(&hlcd);
 8001a70:	481a      	ldr	r0, [pc, #104]	; (8001adc <main+0x2c8>)
 8001a72:	f7ff fa1f 	bl	8000eb4 <MENU_Init>
  ROTARY_ENCODER_Init();
 8001a76:	f7fe ff43 	bl	8000900 <ROTARY_ENCODER_Init>
  ALARM_Init(GPIOA, GPIO_PIN_1);
 8001a7a:	4639      	mov	r1, r7
 8001a7c:	480b      	ldr	r0, [pc, #44]	; (8001aac <main+0x298>)
 8001a7e:	f7fe fda1 	bl	80005c4 <ALARM_Init>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001a82:	213c      	movs	r1, #60	; 0x3c
 8001a84:	4628      	mov	r0, r5
 8001a86:	f001 fea5 	bl	80037d4 <HAL_TIM_Encoder_Start_IT>
	  REALTIME_Handle();
 8001a8a:	f7ff f845 	bl	8000b18 <REALTIME_Handle>
	  TEMP_AND_HUM_Handle();
 8001a8e:	f7ff fe39 	bl	8001704 <TEMP_AND_HUM_Handle>
	  MENU_Handle();
 8001a92:	f7ff fa27 	bl	8000ee4 <MENU_Handle>
	  ROTARY_ENCODER_Handle();
 8001a96:	f7fe ff59 	bl	800094c <ROTARY_ENCODER_Handle>
	  ALARM_Handle();
 8001a9a:	f7fe fd9d 	bl	80005d8 <ALARM_Handle>
  while (1)
 8001a9e:	e7f4      	b.n	8001a8a <main+0x276>
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	2000027c 	.word	0x2000027c
 8001aac:	40010800 	.word	0x40010800
 8001ab0:	40010c00 	.word	0x40010c00
 8001ab4:	20000220 	.word	0x20000220
 8001ab8:	40002800 	.word	0x40002800
 8001abc:	200001c0 	.word	0x200001c0
 8001ac0:	000186a0 	.word	0x000186a0
 8001ac4:	40005800 	.word	0x40005800
 8001ac8:	2000017c 	.word	0x2000017c
 8001acc:	40012400 	.word	0x40012400
 8001ad0:	20000234 	.word	0x20000234
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	200001ac 	.word	0x200001ac
 8001adc:	20000214 	.word	0x20000214

08001ae0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_MspInit+0x3c>)
{
 8001ae2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	619a      	str	r2, [r3, #24]
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	f002 0201 	and.w	r2, r2, #1
 8001af2:	9200      	str	r2, [sp, #0]
 8001af4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	69da      	ldr	r2, [r3, #28]
 8001af8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001afc:	61da      	str	r2, [r3, #28]
 8001afe:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b0a:	6853      	ldr	r3, [r2, #4]
 8001b0c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	b002      	add	sp, #8
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000

08001b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b24:	b510      	push	{r4, lr}
 8001b26:	4604      	mov	r4, r0
 8001b28:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2a:	2210      	movs	r2, #16
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	a802      	add	r0, sp, #8
 8001b30:	f002 fd76 	bl	8004620 <memset>
  if(hadc->Instance==ADC1)
 8001b34:	6822      	ldr	r2, [r4, #0]
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_ADC_MspInit+0x64>)
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d123      	bne.n	8001b84 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b3c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001b40:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	4812      	ldr	r0, [pc, #72]	; (8001b8c <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b48:	619a      	str	r2, [r3, #24]
 8001b4a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b4e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001b52:	9200      	str	r2, [sp, #0]
 8001b54:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	699a      	ldr	r2, [r3, #24]
 8001b58:	f042 0204 	orr.w	r2, r2, #4
 8001b5c:	619a      	str	r2, [r3, #24]
 8001b5e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b60:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f000 fca4 	bl	80024bc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2012      	movs	r0, #18
 8001b78:	4611      	mov	r1, r2
 8001b7a:	f000 fb27 	bl	80021cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b7e:	2012      	movs	r0, #18
 8001b80:	f000 fb56 	bl	8002230 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b84:	b006      	add	sp, #24
 8001b86:	bd10      	pop	{r4, pc}
 8001b88:	40012400 	.word	0x40012400
 8001b8c:	40010800 	.word	0x40010800

08001b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b90:	b510      	push	{r4, lr}
 8001b92:	4604      	mov	r4, r0
 8001b94:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b96:	2210      	movs	r2, #16
 8001b98:	2100      	movs	r1, #0
 8001b9a:	a802      	add	r0, sp, #8
 8001b9c:	f002 fd40 	bl	8004620 <memset>
  if(hi2c->Instance==I2C2)
 8001ba0:	6822      	ldr	r2, [r4, #0]
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_I2C_MspInit+0x58>)
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d11d      	bne.n	8001be4 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba8:	4c10      	ldr	r4, [pc, #64]	; (8001bec <HAL_I2C_MspInit+0x5c>)
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001baa:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb0:	480f      	ldr	r0, [pc, #60]	; (8001bf0 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	61a3      	str	r3, [r4, #24]
 8001bb8:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc4:	2312      	movs	r3, #18
 8001bc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	f000 fc75 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bd2:	69e3      	ldr	r3, [r4, #28]
 8001bd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bd8:	61e3      	str	r3, [r4, #28]
 8001bda:	69e3      	ldr	r3, [r4, #28]
 8001bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001be4:	b006      	add	sp, #24
 8001be6:	bd10      	pop	{r4, pc}
 8001be8:	40005800 	.word	0x40005800
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010c00 	.word	0x40010c00

08001bf4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001bf4:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RTC_MspInit+0x30>)
 8001bf8:	6802      	ldr	r2, [r0, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d10f      	bne.n	8001c1e <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001bfe:	f001 f993 	bl	8002f28 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_RTC_MspInit+0x34>)
 8001c04:	69da      	ldr	r2, [r3, #28]
 8001c06:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001c0a:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c0c:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <HAL_RTC_MspInit+0x38>)
 8001c1a:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c1e:	b003      	add	sp, #12
 8001c20:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c24:	40002800 	.word	0x40002800
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	42420000 	.word	0x42420000

08001c30 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001c30:	6802      	ldr	r2, [r0, #0]
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_TIM_Base_MspInit+0x24>)
{
 8001c34:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d10a      	bne.n	8001c50 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c3a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001c3e:	699a      	ldr	r2, [r3, #24]
 8001c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c44:	619a      	str	r2, [r3, #24]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c50:	b002      	add	sp, #8
 8001c52:	4770      	bx	lr
 8001c54:	40012c00 	.word	0x40012c00

08001c58 <HAL_TIM_Encoder_MspInit>:
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	2210      	movs	r2, #16
{
 8001c5a:	b510      	push	{r4, lr}
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	2100      	movs	r1, #0
 8001c62:	eb0d 0002 	add.w	r0, sp, r2
 8001c66:	f002 fcdb 	bl	8004620 <memset>
  if(htim_encoder->Instance==TIM2)
 8001c6a:	6823      	ldr	r3, [r4, #0]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c70:	d13d      	bne.n	8001cee <HAL_TIM_Encoder_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c72:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c76:	69da      	ldr	r2, [r3, #28]
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	481e      	ldr	r0, [pc, #120]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0x9c>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	61da      	str	r2, [r3, #28]
 8001c80:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c84:	f002 0201 	and.w	r2, r2, #1
 8001c88:	9201      	str	r2, [sp, #4]
 8001c8a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8e:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	f042 0204 	orr.w	r2, r2, #4
 8001c94:	619a      	str	r2, [r3, #24]
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	f002 0204 	and.w	r2, r2, #4
 8001c9c:	9202      	str	r2, [sp, #8]
 8001c9e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	f042 0208 	orr.w	r2, r2, #8
 8001ca6:	619a      	str	r2, [r3, #24]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	9303      	str	r3, [sp, #12]
 8001cb0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f000 fc00 	bl	80024bc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbc:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	480e      	ldr	r0, [pc, #56]	; (8001cf8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001cc0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc2:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc8:	f000 fbf8 	bl	80024bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <HAL_TIM_Encoder_MspInit+0xa4>)

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cce:	201c      	movs	r0, #28
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001cd0:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cd2:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce0:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	f000 fa72 	bl	80021cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ce8:	201c      	movs	r0, #28
 8001cea:	f000 faa1 	bl	8002230 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cee:	b008      	add	sp, #32
 8001cf0:	bd10      	pop	{r4, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40010800 	.word	0x40010800
 8001cf8:	40010c00 	.word	0x40010c00
 8001cfc:	40010000 	.word	0x40010000

08001d00 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <NMI_Handler>

08001d02 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <HardFault_Handler>

08001d04 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <MemManage_Handler>

08001d06 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <BusFault_Handler>

08001d08 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <UsageFault_Handler>

08001d0a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0a:	4770      	bx	lr

08001d0c <DebugMon_Handler>:
 8001d0c:	4770      	bx	lr

08001d0e <PendSV_Handler>:
 8001d0e:	4770      	bx	lr

08001d10 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d10:	f000 b88a 	b.w	8001e28 <HAL_IncTick>

08001d14 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d14:	4801      	ldr	r0, [pc, #4]	; (8001d1c <ADC1_2_IRQHandler+0x8>)
 8001d16:	f000 b8ad 	b.w	8001e74 <HAL_ADC_IRQHandler>
 8001d1a:	bf00      	nop
 8001d1c:	2000017c 	.word	0x2000017c

08001d20 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d20:	4801      	ldr	r0, [pc, #4]	; (8001d28 <TIM2_IRQHandler+0x8>)
 8001d22:	f001 be16 	b.w	8003952 <HAL_TIM_IRQHandler>
 8001d26:	bf00      	nop
 8001d28:	2000027c 	.word	0x2000027c

08001d2c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <_sbrk+0x30>)
{
 8001d2e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001d30:	6811      	ldr	r1, [r2, #0]
{
 8001d32:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001d34:	b909      	cbnz	r1, 8001d3a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001d36:	490a      	ldr	r1, [pc, #40]	; (8001d60 <_sbrk+0x34>)
 8001d38:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3a:	6810      	ldr	r0, [r2, #0]
 8001d3c:	4909      	ldr	r1, [pc, #36]	; (8001d64 <_sbrk+0x38>)
 8001d3e:	4c0a      	ldr	r4, [pc, #40]	; (8001d68 <_sbrk+0x3c>)
 8001d40:	4403      	add	r3, r0
 8001d42:	1b09      	subs	r1, r1, r4
 8001d44:	428b      	cmp	r3, r1
 8001d46:	d906      	bls.n	8001d56 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001d48:	f002 fc22 	bl	8004590 <__errno>
 8001d4c:	230c      	movs	r3, #12
 8001d4e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001d54:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001d56:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001d58:	e7fc      	b.n	8001d54 <_sbrk+0x28>
 8001d5a:	bf00      	nop
 8001d5c:	200002cc 	.word	0x200002cc
 8001d60:	20000328 	.word	0x20000328
 8001d64:	20005000 	.word	0x20005000
 8001d68:	00000400 	.word	0x00000400

08001d6c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	4770      	bx	lr
	...

08001d70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d72:	490d      	ldr	r1, [pc, #52]	; (8001da8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d78:	e002      	b.n	8001d80 <LoopCopyDataInit>

08001d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7e:	3304      	adds	r3, #4

08001d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d84:	d3f9      	bcc.n	8001d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d88:	4c0a      	ldr	r4, [pc, #40]	; (8001db4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d8c:	e001      	b.n	8001d92 <LoopFillZerobss>

08001d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d90:	3204      	adds	r2, #4

08001d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d94:	d3fb      	bcc.n	8001d8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d96:	f7ff ffe9 	bl	8001d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f002 fbff 	bl	800459c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d9e:	f7ff fd39 	bl	8001814 <main>
  bx lr
 8001da2:	4770      	bx	lr
  ldr r0, =_sdata
 8001da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da8:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001dac:	0800515c 	.word	0x0800515c
  ldr r2, =_sbss
 8001db0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001db4:	20000324 	.word	0x20000324

08001db8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <CAN1_RX1_IRQHandler>
	...

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_InitTick+0x3c>)
{
 8001dc0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc2:	7818      	ldrb	r0, [r3, #0]
 8001dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <HAL_InitTick+0x40>)
 8001dce:	6810      	ldr	r0, [r2, #0]
 8001dd0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dd4:	f000 fa3a 	bl	800224c <HAL_SYSTICK_Config>
 8001dd8:	4604      	mov	r4, r0
 8001dda:	b958      	cbnz	r0, 8001df4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ddc:	2d0f      	cmp	r5, #15
 8001dde:	d809      	bhi.n	8001df4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de0:	4602      	mov	r2, r0
 8001de2:	4629      	mov	r1, r5
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f000 f9f0 	bl	80021cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dec:	4620      	mov	r0, r4
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <HAL_InitTick+0x44>)
 8001df0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001df2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001df4:	2001      	movs	r0, #1
 8001df6:	e7fc      	b.n	8001df2 <HAL_InitTick+0x36>
 8001df8:	20000038 	.word	0x20000038
 8001dfc:	20000034 	.word	0x20000034
 8001e00:	2000003c 	.word	0x2000003c

08001e04 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_Init+0x20>)
{
 8001e06:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e0c:	f043 0310 	orr.w	r3, r3, #16
 8001e10:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e12:	f000 f9c9 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e16:	200f      	movs	r0, #15
 8001e18:	f7ff ffd0 	bl	8001dbc <HAL_InitTick>
  HAL_MspInit();
 8001e1c:	f7ff fe60 	bl	8001ae0 <HAL_MspInit>
}
 8001e20:	2000      	movs	r0, #0
 8001e22:	bd08      	pop	{r3, pc}
 8001e24:	40022000 	.word	0x40022000

08001e28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001e28:	4a03      	ldr	r2, [pc, #12]	; (8001e38 <HAL_IncTick+0x10>)
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <HAL_IncTick+0x14>)
 8001e2c:	6811      	ldr	r1, [r2, #0]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	440b      	add	r3, r1
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	200002d0 	.word	0x200002d0
 8001e3c:	20000038 	.word	0x20000038

08001e40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e40:	4b01      	ldr	r3, [pc, #4]	; (8001e48 <HAL_GetTick+0x8>)
 8001e42:	6818      	ldr	r0, [r3, #0]
}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	200002d0 	.word	0x200002d0

08001e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e4c:	b538      	push	{r3, r4, r5, lr}
 8001e4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff fff6 	bl	8001e40 <HAL_GetTick>
 8001e54:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e56:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001e58:	bf1e      	ittt	ne
 8001e5a:	4b04      	ldrne	r3, [pc, #16]	; (8001e6c <HAL_Delay+0x20>)
 8001e5c:	781b      	ldrbne	r3, [r3, #0]
 8001e5e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e60:	f7ff ffee 	bl	8001e40 <HAL_GetTick>
 8001e64:	1b43      	subs	r3, r0, r5
 8001e66:	42a3      	cmp	r3, r4
 8001e68:	d3fa      	bcc.n	8001e60 <HAL_Delay+0x14>
  {
  }
}
 8001e6a:	bd38      	pop	{r3, r4, r5, pc}
 8001e6c:	20000038 	.word	0x20000038

08001e70 <HAL_ADC_ConvCpltCallback>:
 8001e70:	4770      	bx	lr

08001e72 <HAL_ADC_LevelOutOfWindowCallback>:
 8001e72:	4770      	bx	lr

08001e74 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001e74:	6803      	ldr	r3, [r0, #0]
{
 8001e76:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001e78:	685a      	ldr	r2, [r3, #4]
{
 8001e7a:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001e7c:	0690      	lsls	r0, r2, #26
 8001e7e:	d527      	bpl.n	8001ed0 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	0791      	lsls	r1, r2, #30
 8001e84:	d524      	bpl.n	8001ed0 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e88:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e8a:	bf5e      	ittt	pl
 8001e8c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8001e8e:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001e92:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001e9a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001e9e:	d110      	bne.n	8001ec2 <HAL_ADC_IRQHandler+0x4e>
 8001ea0:	7b22      	ldrb	r2, [r4, #12]
 8001ea2:	b972      	cbnz	r2, 8001ec2 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	f022 0220 	bic.w	r2, r2, #32
 8001eaa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001eac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001eae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eb2:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001eb6:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb8:	bf5e      	ittt	pl
 8001eba:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8001ebc:	f043 0301 	orrpl.w	r3, r3, #1
 8001ec0:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f7ff ffd4 	bl	8001e70 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ec8:	f06f 0212 	mvn.w	r2, #18
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	0610      	lsls	r0, r2, #24
 8001ed6:	d530      	bpl.n	8001f3a <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	0751      	lsls	r1, r2, #29
 8001edc:	d52d      	bpl.n	8001f3a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ede:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ee0:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ee2:	bf5e      	ittt	pl
 8001ee4:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8001ee6:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8001eea:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8001ef2:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001ef6:	d00a      	beq.n	8001f0e <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ef8:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001efa:	0550      	lsls	r0, r2, #21
 8001efc:	d416      	bmi.n	8001f2c <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f04:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001f08:	d110      	bne.n	8001f2c <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f0a:	7b22      	ldrb	r2, [r4, #12]
 8001f0c:	b972      	cbnz	r2, 8001f2c <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f14:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f1c:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f20:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f22:	bf5e      	ittt	pl
 8001f24:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8001f26:	f043 0301 	orrpl.w	r3, r3, #1
 8001f2a:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f000 f939 	bl	80021a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f32:	f06f 020c 	mvn.w	r2, #12
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	0652      	lsls	r2, r2, #25
 8001f40:	d50d      	bpl.n	8001f5e <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	07db      	lsls	r3, r3, #31
 8001f46:	d50a      	bpl.n	8001f5e <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f4a:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f52:	f7ff ff8e 	bl	8001e72 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f56:	f06f 0201 	mvn.w	r2, #1
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001f5e:	bd10      	pop	{r4, pc}

08001f60 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001f60:	2300      	movs	r3, #0
{ 
 8001f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001f64:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f66:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8001f6a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d06c      	beq.n	800204a <HAL_ADC_ConfigChannel+0xea>
 8001f70:	2301      	movs	r3, #1
 8001f72:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f76:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f78:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8001f7a:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f7c:	6808      	ldr	r0, [r1, #0]
 8001f7e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8001f82:	d822      	bhi.n	8001fca <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f84:	261f      	movs	r6, #31
 8001f86:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8001f88:	3b05      	subs	r3, #5
 8001f8a:	409e      	lsls	r6, r3
 8001f8c:	ea25 0506 	bic.w	r5, r5, r6
 8001f90:	fa00 f303 	lsl.w	r3, r0, r3
 8001f94:	432b      	orrs	r3, r5
 8001f96:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f98:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f9a:	688b      	ldr	r3, [r1, #8]
 8001f9c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001fa0:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fa4:	d929      	bls.n	8001ffa <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fa6:	68d6      	ldr	r6, [r2, #12]
 8001fa8:	3d1e      	subs	r5, #30
 8001faa:	40a9      	lsls	r1, r5
 8001fac:	ea26 0101 	bic.w	r1, r6, r1
 8001fb0:	40ab      	lsls	r3, r5
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fb6:	f1a0 0310 	sub.w	r3, r0, #16
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d925      	bls.n	800200a <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fbe:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001fc6:	b002      	add	sp, #8
 8001fc8:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001fca:	2d0c      	cmp	r5, #12
 8001fcc:	f04f 051f 	mov.w	r5, #31
 8001fd0:	d809      	bhi.n	8001fe6 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fd2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001fd4:	3b23      	subs	r3, #35	; 0x23
 8001fd6:	409d      	lsls	r5, r3
 8001fd8:	ea26 0505 	bic.w	r5, r6, r5
 8001fdc:	fa00 f303 	lsl.w	r3, r0, r3
 8001fe0:	432b      	orrs	r3, r5
 8001fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe4:	e7d8      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001fe6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001fe8:	3b41      	subs	r3, #65	; 0x41
 8001fea:	409d      	lsls	r5, r3
 8001fec:	ea26 0505 	bic.w	r5, r6, r5
 8001ff0:	fa00 f303 	lsl.w	r3, r0, r3
 8001ff4:	432b      	orrs	r3, r5
 8001ff6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001ff8:	e7ce      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ffa:	6910      	ldr	r0, [r2, #16]
 8001ffc:	40a9      	lsls	r1, r5
 8001ffe:	ea20 0101 	bic.w	r1, r0, r1
 8002002:	40ab      	lsls	r3, r5
 8002004:	430b      	orrs	r3, r1
 8002006:	6113      	str	r3, [r2, #16]
 8002008:	e7d9      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_ADC_ConfigChannel+0xf0>)
 800200c:	429a      	cmp	r2, r3
 800200e:	d116      	bne.n	800203e <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002010:	6893      	ldr	r3, [r2, #8]
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	d4d3      	bmi.n	8001fbe <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002016:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002018:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800201a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800201e:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002020:	d1cd      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_ADC_ConfigChannel+0xf4>)
 8002024:	4a0c      	ldr	r2, [pc, #48]	; (8002058 <HAL_ADC_ConfigChannel+0xf8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fbb3 f3f2 	udiv	r3, r3, r2
 800202c:	220a      	movs	r2, #10
 800202e:	4353      	muls	r3, r2
            wait_loop_index--;
 8002030:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002032:	9b01      	ldr	r3, [sp, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0c2      	beq.n	8001fbe <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8002038:	9b01      	ldr	r3, [sp, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	e7f8      	b.n	8002030 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002040:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002042:	f043 0320 	orr.w	r3, r3, #32
 8002046:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002048:	e7ba      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 800204a:	2002      	movs	r0, #2
 800204c:	e7bb      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x66>
 800204e:	bf00      	nop
 8002050:	40012400 	.word	0x40012400
 8002054:	20000034 	.word	0x20000034
 8002058:	000f4240 	.word	0x000f4240

0800205c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800205c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800205e:	6803      	ldr	r3, [r0, #0]
{
 8002060:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	07d1      	lsls	r1, r2, #31
 8002066:	d401      	bmi.n	800206c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002068:	2000      	movs	r0, #0
}
 800206a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002074:	f7ff fee4 	bl	8001e40 <HAL_GetTick>
 8002078:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	07db      	lsls	r3, r3, #31
 8002080:	d5f2      	bpl.n	8002068 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002082:	f7ff fedd 	bl	8001e40 <HAL_GetTick>
 8002086:	1b40      	subs	r0, r0, r5
 8002088:	2802      	cmp	r0, #2
 800208a:	d9f6      	bls.n	800207a <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	07da      	lsls	r2, r3, #31
 8002092:	d5f2      	bpl.n	800207a <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002094:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8002096:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002098:	f043 0310 	orr.w	r3, r3, #16
 800209c:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80020a6:	e7e0      	b.n	800206a <ADC_ConversionStop_Disable+0xe>

080020a8 <HAL_ADC_Init>:
{
 80020a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80020aa:	4604      	mov	r4, r0
 80020ac:	2800      	cmp	r0, #0
 80020ae:	d06e      	beq.n	800218e <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80020b2:	b923      	cbnz	r3, 80020be <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80020b4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80020b6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80020ba:	f7ff fd33 	bl	8001b24 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020be:	4620      	mov	r0, r4
 80020c0:	f7ff ffcc 	bl	800205c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020c6:	f013 0310 	ands.w	r3, r3, #16
 80020ca:	d162      	bne.n	8002192 <HAL_ADC_Init+0xea>
 80020cc:	2800      	cmp	r0, #0
 80020ce:	d160      	bne.n	8002192 <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 80020d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020d2:	69e5      	ldr	r5, [r4, #28]
 80020d4:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80020d6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80020da:	f022 0202 	bic.w	r2, r2, #2
 80020de:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020e2:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020e4:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80020e6:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020e8:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020ea:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020ee:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020f2:	d037      	beq.n	8002164 <HAL_ADC_Init+0xbc>
 80020f4:	2d01      	cmp	r5, #1
 80020f6:	bf14      	ite	ne
 80020f8:	2700      	movne	r7, #0
 80020fa:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020fe:	7d26      	ldrb	r6, [r4, #20]
 8002100:	2e01      	cmp	r6, #1
 8002102:	d106      	bne.n	8002112 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002104:	bb82      	cbnz	r2, 8002168 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002106:	69a2      	ldr	r2, [r4, #24]
 8002108:	3a01      	subs	r2, #1
 800210a:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 800210e:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8002112:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002114:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002118:	6856      	ldr	r6, [r2, #4]
 800211a:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 800211e:	ea46 0607 	orr.w	r6, r6, r7
 8002122:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002124:	6897      	ldr	r7, [r2, #8]
 8002126:	4e1d      	ldr	r6, [pc, #116]	; (800219c <HAL_ADC_Init+0xf4>)
 8002128:	ea06 0607 	and.w	r6, r6, r7
 800212c:	ea46 0601 	orr.w	r6, r6, r1
 8002130:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002132:	d001      	beq.n	8002138 <HAL_ADC_Init+0x90>
 8002134:	2d01      	cmp	r5, #1
 8002136:	d102      	bne.n	800213e <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002138:	6923      	ldr	r3, [r4, #16]
 800213a:	3b01      	subs	r3, #1
 800213c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800213e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8002140:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8002144:	432b      	orrs	r3, r5
 8002146:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002148:	6892      	ldr	r2, [r2, #8]
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_ADC_Init+0xf8>)
 800214c:	4013      	ands	r3, r2
 800214e:	4299      	cmp	r1, r3
 8002150:	d113      	bne.n	800217a <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 8002152:	2300      	movs	r3, #0
 8002154:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002156:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002158:	f023 0303 	bic.w	r3, r3, #3
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002164:	462f      	mov	r7, r5
 8002166:	e7ca      	b.n	80020fe <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002168:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800216a:	f042 0220 	orr.w	r2, r2, #32
 800216e:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002170:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002178:	e7cb      	b.n	8002112 <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 800217a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800217c:	f023 0312 	bic.w	r3, r3, #18
 8002180:	f043 0310 	orr.w	r3, r3, #16
 8002184:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002186:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800218e:	2001      	movs	r0, #1
 8002190:	e7e7      	b.n	8002162 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002192:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002194:	f043 0310 	orr.w	r3, r3, #16
 8002198:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800219a:	e7f8      	b.n	800218e <HAL_ADC_Init+0xe6>
 800219c:	ffe1f7fd 	.word	0xffe1f7fd
 80021a0:	ff1f0efe 	.word	0xff1f0efe

080021a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a8:	4907      	ldr	r1, [pc, #28]	; (80021c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021aa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ac:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021b6:	0412      	lsls	r2, r2, #16
 80021b8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80021c4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ce:	b530      	push	{r4, r5, lr}
 80021d0:	68dc      	ldr	r4, [r3, #12]
 80021d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	2b04      	cmp	r3, #4
 80021de:	bf28      	it	cs
 80021e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e8:	bf98      	it	ls
 80021ea:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f0:	bf88      	it	hi
 80021f2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	ea21 0303 	bic.w	r3, r1, r3
 80021f8:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fa:	fa05 f404 	lsl.w	r4, r5, r4
 80021fe:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002202:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	bfac      	ite	ge
 800220a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	4a07      	ldrlt	r2, [pc, #28]	; (800222c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002210:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002214:	b2db      	uxtb	r3, r3
 8002216:	bfab      	itete	ge
 8002218:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002226:	bd30      	pop	{r4, r5, pc}
 8002228:	e000ed00 	.word	0xe000ed00
 800222c:	e000ed14 	.word	0xe000ed14

08002230 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002230:	2800      	cmp	r0, #0
 8002232:	db08      	blt.n	8002246 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002234:	2301      	movs	r3, #1
 8002236:	0942      	lsrs	r2, r0, #5
 8002238:	f000 001f 	and.w	r0, r0, #31
 800223c:	fa03 f000 	lsl.w	r0, r3, r0
 8002240:	4b01      	ldr	r3, [pc, #4]	; (8002248 <HAL_NVIC_EnableIRQ+0x18>)
 8002242:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002246:	4770      	bx	lr
 8002248:	e000e100 	.word	0xe000e100

0800224c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800224c:	3801      	subs	r0, #1
 800224e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002252:	d20b      	bcs.n	800226c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002254:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002258:	21f0      	movs	r1, #240	; 0xf0
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002262:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002264:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002266:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002268:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800226a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800226c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002274:	4a11      	ldr	r2, [pc, #68]	; (80022bc <FLASH_SetErrorCode+0x48>)
 8002276:	68d3      	ldr	r3, [r2, #12]
 8002278:	f013 0310 	ands.w	r3, r3, #16
 800227c:	d005      	beq.n	800228a <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800227e:	4910      	ldr	r1, [pc, #64]	; (80022c0 <FLASH_SetErrorCode+0x4c>)
 8002280:	69cb      	ldr	r3, [r1, #28]
 8002282:	f043 0302 	orr.w	r3, r3, #2
 8002286:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002288:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800228a:	68d2      	ldr	r2, [r2, #12]
 800228c:	0750      	lsls	r0, r2, #29
 800228e:	d506      	bpl.n	800229e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002290:	490b      	ldr	r1, [pc, #44]	; (80022c0 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002292:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002296:	69ca      	ldr	r2, [r1, #28]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800229e:	4a07      	ldr	r2, [pc, #28]	; (80022bc <FLASH_SetErrorCode+0x48>)
 80022a0:	69d1      	ldr	r1, [r2, #28]
 80022a2:	07c9      	lsls	r1, r1, #31
 80022a4:	d508      	bpl.n	80022b8 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80022a6:	4806      	ldr	r0, [pc, #24]	; (80022c0 <FLASH_SetErrorCode+0x4c>)
 80022a8:	69c1      	ldr	r1, [r0, #28]
 80022aa:	f041 0104 	orr.w	r1, r1, #4
 80022ae:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80022b0:	69d1      	ldr	r1, [r2, #28]
 80022b2:	f021 0101 	bic.w	r1, r1, #1
 80022b6:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80022b8:	60d3      	str	r3, [r2, #12]
}  
 80022ba:	4770      	bx	lr
 80022bc:	40022000 	.word	0x40022000
 80022c0:	200002d8 	.word	0x200002d8

080022c4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_FLASH_Unlock+0x1c>)
 80022c6:	6918      	ldr	r0, [r3, #16]
 80022c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80022cc:	d007      	beq.n	80022de <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <HAL_FLASH_Unlock+0x20>)
 80022d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80022d2:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80022d6:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80022d8:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80022da:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 80022de:	4770      	bx	lr
 80022e0:	40022000 	.word	0x40022000
 80022e4:	45670123 	.word	0x45670123

080022e8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80022e8:	4a03      	ldr	r2, [pc, #12]	; (80022f8 <HAL_FLASH_Lock+0x10>)
}
 80022ea:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80022ec:	6913      	ldr	r3, [r2, #16]
 80022ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f2:	6113      	str	r3, [r2, #16]
}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40022000 	.word	0x40022000

080022fc <FLASH_WaitForLastOperation>:
{
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff fd9e 	bl	8001e40 <HAL_GetTick>
 8002304:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002306:	4c11      	ldr	r4, [pc, #68]	; (800234c <FLASH_WaitForLastOperation+0x50>)
 8002308:	68e3      	ldr	r3, [r4, #12]
 800230a:	07d8      	lsls	r0, r3, #31
 800230c:	d412      	bmi.n	8002334 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800230e:	68e3      	ldr	r3, [r4, #12]
 8002310:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002312:	bf44      	itt	mi
 8002314:	2320      	movmi	r3, #32
 8002316:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002318:	68e3      	ldr	r3, [r4, #12]
 800231a:	06da      	lsls	r2, r3, #27
 800231c:	d406      	bmi.n	800232c <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800231e:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002320:	07db      	lsls	r3, r3, #31
 8002322:	d403      	bmi.n	800232c <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002324:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002326:	f010 0004 	ands.w	r0, r0, #4
 800232a:	d007      	beq.n	800233c <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 800232c:	f7ff ffa2 	bl	8002274 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002330:	2001      	movs	r0, #1
 8002332:	e003      	b.n	800233c <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8002334:	1c6b      	adds	r3, r5, #1
 8002336:	d0e7      	beq.n	8002308 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002338:	b90d      	cbnz	r5, 800233e <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 800233a:	2003      	movs	r0, #3
}
 800233c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800233e:	f7ff fd7f 	bl	8001e40 <HAL_GetTick>
 8002342:	1b80      	subs	r0, r0, r6
 8002344:	42a8      	cmp	r0, r5
 8002346:	d9df      	bls.n	8002308 <FLASH_WaitForLastOperation+0xc>
 8002348:	e7f7      	b.n	800233a <FLASH_WaitForLastOperation+0x3e>
 800234a:	bf00      	nop
 800234c:	40022000 	.word	0x40022000

08002350 <HAL_FLASH_Program>:
{
 8002350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8002354:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80023e8 <HAL_FLASH_Program+0x98>
{
 8002358:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 800235a:	f899 3018 	ldrb.w	r3, [r9, #24]
{
 800235e:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8002360:	2b01      	cmp	r3, #1
{
 8002362:	460f      	mov	r7, r1
 8002364:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8002366:	d03d      	beq.n	80023e4 <HAL_FLASH_Program+0x94>
 8002368:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800236a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800236e:	f889 3018 	strb.w	r3, [r9, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002372:	f7ff ffc3 	bl	80022fc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002376:	bb80      	cbnz	r0, 80023da <HAL_FLASH_Program+0x8a>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002378:	2c01      	cmp	r4, #1
 800237a:	d003      	beq.n	8002384 <HAL_FLASH_Program+0x34>
      nbiterations = 4U;
 800237c:	2c02      	cmp	r4, #2
 800237e:	bf0c      	ite	eq
 8002380:	2402      	moveq	r4, #2
 8002382:	2404      	movne	r4, #4
 8002384:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002386:	46ab      	mov	fp, r5
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002388:	f8df a060 	ldr.w	sl, [pc, #96]	; 80023ec <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800238c:	0128      	lsls	r0, r5, #4
 800238e:	f1c0 0220 	rsb	r2, r0, #32
 8002392:	f1a0 0320 	sub.w	r3, r0, #32
 8002396:	fa06 f202 	lsl.w	r2, r6, r2
 800239a:	fa28 f000 	lsr.w	r0, r8, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800239e:	f8c9 b01c 	str.w	fp, [r9, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80023a2:	4310      	orrs	r0, r2
 80023a4:	fa26 f303 	lsr.w	r3, r6, r3
 80023a8:	4318      	orrs	r0, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80023aa:	f8da 3010 	ldr.w	r3, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80023ae:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	f8ca 3010 	str.w	r3, [sl, #16]
  *(__IO uint16_t*)Address = Data;
 80023b8:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023c0:	f7ff ff9c 	bl	80022fc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80023c4:	f8da 3010 	ldr.w	r3, [sl, #16]
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 80023d0:	b918      	cbnz	r0, 80023da <HAL_FLASH_Program+0x8a>
    for (index = 0U; index < nbiterations; index++)
 80023d2:	3501      	adds	r5, #1
 80023d4:	b2eb      	uxtb	r3, r5
 80023d6:	429c      	cmp	r4, r3
 80023d8:	d8d8      	bhi.n	800238c <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 80023da:	2300      	movs	r3, #0
 80023dc:	f889 3018 	strb.w	r3, [r9, #24]
}
 80023e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80023e4:	2002      	movs	r0, #2
 80023e6:	e7fb      	b.n	80023e0 <HAL_FLASH_Program+0x90>
 80023e8:	200002d8 	.word	0x200002d8
 80023ec:	40022000 	.word	0x40022000

080023f0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023f0:	2200      	movs	r2, #0
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <FLASH_PageErase+0x1c>)
 80023f4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <FLASH_PageErase+0x20>)
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	f042 0202 	orr.w	r2, r2, #2
 80023fe:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002400:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002408:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800240a:	4770      	bx	lr
 800240c:	200002d8 	.word	0x200002d8
 8002410:	40022000 	.word	0x40022000

08002414 <HAL_FLASHEx_Erase>:
{
 8002414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8002418:	4f26      	ldr	r7, [pc, #152]	; (80024b4 <HAL_FLASHEx_Erase+0xa0>)
{
 800241a:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 800241c:	7e3b      	ldrb	r3, [r7, #24]
{
 800241e:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8002420:	2b01      	cmp	r3, #1
 8002422:	d044      	beq.n	80024ae <HAL_FLASHEx_Erase+0x9a>
 8002424:	2401      	movs	r4, #1
 8002426:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002428:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800242a:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800242e:	2b02      	cmp	r3, #2
 8002430:	d11a      	bne.n	8002468 <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002432:	f7ff ff63 	bl	80022fc <FLASH_WaitForLastOperation>
 8002436:	b120      	cbz	r0, 8002442 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002438:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800243a:	2300      	movs	r3, #0
 800243c:	763b      	strb	r3, [r7, #24]
}
 800243e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002442:	4c1d      	ldr	r4, [pc, #116]	; (80024b8 <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002444:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002446:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002448:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002452:	6923      	ldr	r3, [r4, #16]
 8002454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002458:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800245a:	f7ff ff4f 	bl	80022fc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800245e:	6923      	ldr	r3, [r4, #16]
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	6123      	str	r3, [r4, #16]
 8002466:	e7e8      	b.n	800243a <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002468:	f7ff ff48 	bl	80022fc <FLASH_WaitForLastOperation>
 800246c:	2800      	cmp	r0, #0
 800246e:	d1e3      	bne.n	8002438 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8002470:	f04f 33ff 	mov.w	r3, #4294967295
 8002474:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002478:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 800247a:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800247c:	4c0e      	ldr	r4, [pc, #56]	; (80024b8 <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800247e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8002482:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8002486:	42b3      	cmp	r3, r6
 8002488:	d9d7      	bls.n	800243a <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 800248a:	4630      	mov	r0, r6
 800248c:	f7ff ffb0 	bl	80023f0 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002490:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002494:	f7ff ff32 	bl	80022fc <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002498:	6923      	ldr	r3, [r4, #16]
 800249a:	f023 0302 	bic.w	r3, r3, #2
 800249e:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80024a0:	b110      	cbz	r0, 80024a8 <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 80024a2:	f8c8 6000 	str.w	r6, [r8]
            break;
 80024a6:	e7c8      	b.n	800243a <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 80024a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80024ac:	e7e7      	b.n	800247e <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 80024ae:	2002      	movs	r0, #2
 80024b0:	e7c5      	b.n	800243e <HAL_FLASHEx_Erase+0x2a>
 80024b2:	bf00      	nop
 80024b4:	200002d8 	.word	0x200002d8
 80024b8:	40022000 	.word	0x40022000

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024c0:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80024c2:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024c4:	4f64      	ldr	r7, [pc, #400]	; (8002658 <HAL_GPIO_Init+0x19c>)
 80024c6:	4b65      	ldr	r3, [pc, #404]	; (800265c <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 80024c8:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002660 <HAL_GPIO_Init+0x1a4>
 80024cc:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002664 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d0:	680d      	ldr	r5, [r1, #0]
 80024d2:	fa35 f406 	lsrs.w	r4, r5, r6
 80024d6:	d102      	bne.n	80024de <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80024d8:	b003      	add	sp, #12
 80024da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80024de:	f04f 0801 	mov.w	r8, #1
 80024e2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e6:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80024ea:	ea38 0505 	bics.w	r5, r8, r5
 80024ee:	d17b      	bne.n	80025e8 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 80024f0:	684d      	ldr	r5, [r1, #4]
 80024f2:	2d03      	cmp	r5, #3
 80024f4:	d807      	bhi.n	8002506 <HAL_GPIO_Init+0x4a>
 80024f6:	3d01      	subs	r5, #1
 80024f8:	2d02      	cmp	r5, #2
 80024fa:	f200 8088 	bhi.w	800260e <HAL_GPIO_Init+0x152>
 80024fe:	e8df f005 	tbb	[pc, r5]
 8002502:	9b96      	.short	0x9b96
 8002504:	a1          	.byte	0xa1
 8002505:	00          	.byte	0x00
 8002506:	2d12      	cmp	r5, #18
 8002508:	f000 8099 	beq.w	800263e <HAL_GPIO_Init+0x182>
 800250c:	d86e      	bhi.n	80025ec <HAL_GPIO_Init+0x130>
 800250e:	2d11      	cmp	r5, #17
 8002510:	f000 808f 	beq.w	8002632 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002514:	2cff      	cmp	r4, #255	; 0xff
 8002516:	bf98      	it	ls
 8002518:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800251a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800251e:	bf88      	it	hi
 8002520:	f100 0a04 	addhi.w	sl, r0, #4
 8002524:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002528:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800252c:	bf88      	it	hi
 800252e:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002530:	fa09 fb05 	lsl.w	fp, r9, r5
 8002534:	ea28 080b 	bic.w	r8, r8, fp
 8002538:	fa02 f505 	lsl.w	r5, r2, r5
 800253c:	ea48 0505 	orr.w	r5, r8, r5
 8002540:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002544:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002548:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800254c:	d04c      	beq.n	80025e8 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800254e:	69bd      	ldr	r5, [r7, #24]
 8002550:	f026 0803 	bic.w	r8, r6, #3
 8002554:	f045 0501 	orr.w	r5, r5, #1
 8002558:	61bd      	str	r5, [r7, #24]
 800255a:	69bd      	ldr	r5, [r7, #24]
 800255c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002560:	f005 0501 	and.w	r5, r5, #1
 8002564:	9501      	str	r5, [sp, #4]
 8002566:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800256a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800256e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002570:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002574:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002578:	fa09 f90b 	lsl.w	r9, r9, fp
 800257c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002580:	4d39      	ldr	r5, [pc, #228]	; (8002668 <HAL_GPIO_Init+0x1ac>)
 8002582:	42a8      	cmp	r0, r5
 8002584:	d062      	beq.n	800264c <HAL_GPIO_Init+0x190>
 8002586:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800258a:	42a8      	cmp	r0, r5
 800258c:	d060      	beq.n	8002650 <HAL_GPIO_Init+0x194>
 800258e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002592:	42a8      	cmp	r0, r5
 8002594:	d05e      	beq.n	8002654 <HAL_GPIO_Init+0x198>
 8002596:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800259a:	42a8      	cmp	r0, r5
 800259c:	bf0c      	ite	eq
 800259e:	2503      	moveq	r5, #3
 80025a0:	2504      	movne	r5, #4
 80025a2:	fa05 f50b 	lsl.w	r5, r5, fp
 80025a6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80025aa:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80025ae:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80025b4:	bf14      	ite	ne
 80025b6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025b8:	43a5      	biceq	r5, r4
 80025ba:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80025bc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025be:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80025c2:	bf14      	ite	ne
 80025c4:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025c6:	43a5      	biceq	r5, r4
 80025c8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80025ca:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025cc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80025d0:	bf14      	ite	ne
 80025d2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025d4:	43a5      	biceq	r5, r4
 80025d6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80025d8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025da:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80025de:	bf14      	ite	ne
 80025e0:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025e2:	ea25 0404 	biceq.w	r4, r5, r4
 80025e6:	60dc      	str	r4, [r3, #12]
	position++;
 80025e8:	3601      	adds	r6, #1
 80025ea:	e771      	b.n	80024d0 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80025ec:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800266c <HAL_GPIO_Init+0x1b0>
 80025f0:	454d      	cmp	r5, r9
 80025f2:	d00c      	beq.n	800260e <HAL_GPIO_Init+0x152>
 80025f4:	d817      	bhi.n	8002626 <HAL_GPIO_Init+0x16a>
 80025f6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80025fa:	454d      	cmp	r5, r9
 80025fc:	d007      	beq.n	800260e <HAL_GPIO_Init+0x152>
 80025fe:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002602:	454d      	cmp	r5, r9
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x152>
 8002606:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800260a:	454d      	cmp	r5, r9
 800260c:	d182      	bne.n	8002514 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800260e:	688a      	ldr	r2, [r1, #8]
 8002610:	b1d2      	cbz	r2, 8002648 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002612:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002614:	bf08      	it	eq
 8002616:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800261a:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800261e:	bf18      	it	ne
 8002620:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002624:	e776      	b.n	8002514 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002626:	4565      	cmp	r5, ip
 8002628:	d0f1      	beq.n	800260e <HAL_GPIO_Init+0x152>
 800262a:	4575      	cmp	r5, lr
 800262c:	e7ee      	b.n	800260c <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800262e:	68ca      	ldr	r2, [r1, #12]
          break;
 8002630:	e770      	b.n	8002514 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002632:	68ca      	ldr	r2, [r1, #12]
 8002634:	3204      	adds	r2, #4
          break;
 8002636:	e76d      	b.n	8002514 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002638:	68ca      	ldr	r2, [r1, #12]
 800263a:	3208      	adds	r2, #8
          break;
 800263c:	e76a      	b.n	8002514 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800263e:	68ca      	ldr	r2, [r1, #12]
 8002640:	320c      	adds	r2, #12
          break;
 8002642:	e767      	b.n	8002514 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002644:	2200      	movs	r2, #0
 8002646:	e765      	b.n	8002514 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002648:	2204      	movs	r2, #4
 800264a:	e763      	b.n	8002514 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800264c:	2500      	movs	r5, #0
 800264e:	e7a8      	b.n	80025a2 <HAL_GPIO_Init+0xe6>
 8002650:	2501      	movs	r5, #1
 8002652:	e7a6      	b.n	80025a2 <HAL_GPIO_Init+0xe6>
 8002654:	2502      	movs	r5, #2
 8002656:	e7a4      	b.n	80025a2 <HAL_GPIO_Init+0xe6>
 8002658:	40021000 	.word	0x40021000
 800265c:	40010400 	.word	0x40010400
 8002660:	10310000 	.word	0x10310000
 8002664:	10320000 	.word	0x10320000
 8002668:	40010800 	.word	0x40010800
 800266c:	10220000 	.word	0x10220000

08002670 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002670:	6883      	ldr	r3, [r0, #8]
 8002672:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002674:	bf14      	ite	ne
 8002676:	2001      	movne	r0, #1
 8002678:	2000      	moveq	r0, #0
 800267a:	4770      	bx	lr

0800267c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800267c:	b10a      	cbz	r2, 8002682 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800267e:	6101      	str	r1, [r0, #16]
  }
}
 8002680:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002682:	0409      	lsls	r1, r1, #16
 8002684:	e7fb      	b.n	800267e <HAL_GPIO_WritePin+0x2>

08002686 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002686:	6801      	ldr	r1, [r0, #0]
 8002688:	2200      	movs	r2, #0
 800268a:	694b      	ldr	r3, [r1, #20]
 800268c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002690:	d010      	beq.n	80026b4 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002692:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002696:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002698:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800269a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800269c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a0:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026a4:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026aa:	f043 0304 	orr.w	r3, r3, #4
 80026ae:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80026b0:	2001      	movs	r0, #1
 80026b2:	4770      	bx	lr
  }
  return HAL_OK;
 80026b4:	4618      	mov	r0, r3
}
 80026b6:	4770      	bx	lr

080026b8 <I2C_WaitOnFlagUntilTimeout>:
{
 80026b8:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80026bc:	4606      	mov	r6, r0
 80026be:	460f      	mov	r7, r1
 80026c0:	4691      	mov	r9, r2
 80026c2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80026c8:	6833      	ldr	r3, [r6, #0]
 80026ca:	f1ba 0f01 	cmp.w	sl, #1
 80026ce:	bf0c      	ite	eq
 80026d0:	695c      	ldreq	r4, [r3, #20]
 80026d2:	699c      	ldrne	r4, [r3, #24]
 80026d4:	ea27 0404 	bic.w	r4, r7, r4
 80026d8:	b2a4      	uxth	r4, r4
 80026da:	fab4 f484 	clz	r4, r4
 80026de:	0964      	lsrs	r4, r4, #5
 80026e0:	45a1      	cmp	r9, r4
 80026e2:	d001      	beq.n	80026e8 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80026e4:	2000      	movs	r0, #0
 80026e6:	e017      	b.n	8002718 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 80026e8:	1c6a      	adds	r2, r5, #1
 80026ea:	d0ee      	beq.n	80026ca <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ec:	f7ff fba8 	bl	8001e40 <HAL_GetTick>
 80026f0:	9b08      	ldr	r3, [sp, #32]
 80026f2:	1ac0      	subs	r0, r0, r3
 80026f4:	42a8      	cmp	r0, r5
 80026f6:	d801      	bhi.n	80026fc <I2C_WaitOnFlagUntilTimeout+0x44>
 80026f8:	2d00      	cmp	r5, #0
 80026fa:	d1e5      	bne.n	80026c8 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026fc:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80026fe:	2220      	movs	r2, #32
        return HAL_ERROR;
 8002700:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002702:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002704:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002708:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800270c:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800270e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002712:	f042 0220 	orr.w	r2, r2, #32
 8002716:	6432      	str	r2, [r6, #64]	; 0x40
}
 8002718:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

0800271c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800271c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002720:	4604      	mov	r4, r0
 8002722:	460f      	mov	r7, r1
 8002724:	4616      	mov	r6, r2
 8002726:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002728:	6825      	ldr	r5, [r4, #0]
 800272a:	6968      	ldr	r0, [r5, #20]
 800272c:	ea27 0000 	bic.w	r0, r7, r0
 8002730:	b280      	uxth	r0, r0
 8002732:	b1b8      	cbz	r0, 8002764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002734:	696b      	ldr	r3, [r5, #20]
 8002736:	055a      	lsls	r2, r3, #21
 8002738:	d516      	bpl.n	8002768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273a:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800273c:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002742:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002744:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002748:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800274a:	2300      	movs	r3, #0
 800274c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800274e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002752:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002756:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002758:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 800275c:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800275e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002760:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002768:	1c73      	adds	r3, r6, #1
 800276a:	d0de      	beq.n	800272a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276c:	f7ff fb68 	bl	8001e40 <HAL_GetTick>
 8002770:	eba0 0008 	sub.w	r0, r0, r8
 8002774:	42b0      	cmp	r0, r6
 8002776:	d801      	bhi.n	800277c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8002778:	2e00      	cmp	r6, #0
 800277a:	d1d5      	bne.n	8002728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800277c:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800277e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002780:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002782:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002786:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800278a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800278c:	f042 0220 	orr.w	r2, r2, #32
 8002790:	e7e4      	b.n	800275c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08002792 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002792:	b570      	push	{r4, r5, r6, lr}
 8002794:	4604      	mov	r4, r0
 8002796:	460d      	mov	r5, r1
 8002798:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800279a:	6821      	ldr	r1, [r4, #0]
 800279c:	694b      	ldr	r3, [r1, #20]
 800279e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80027a2:	d001      	beq.n	80027a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80027a4:	2000      	movs	r0, #0
 80027a6:	e010      	b.n	80027ca <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027a8:	694a      	ldr	r2, [r1, #20]
 80027aa:	06d2      	lsls	r2, r2, #27
 80027ac:	d50e      	bpl.n	80027cc <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ae:	f06f 0210 	mvn.w	r2, #16
 80027b2:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80027b4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80027b6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80027c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80027c2:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c4:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80027c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027cc:	f7ff fb38 	bl	8001e40 <HAL_GetTick>
 80027d0:	1b80      	subs	r0, r0, r6
 80027d2:	42a8      	cmp	r0, r5
 80027d4:	d801      	bhi.n	80027da <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80027d6:	2d00      	cmp	r5, #0
 80027d8:	d1df      	bne.n	800279a <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80027da:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80027dc:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80027de:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027e0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027ea:	f042 0220 	orr.w	r2, r2, #32
 80027ee:	e7e8      	b.n	80027c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080027f0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80027f0:	b570      	push	{r4, r5, r6, lr}
 80027f2:	4604      	mov	r4, r0
 80027f4:	460d      	mov	r5, r1
 80027f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	075b      	lsls	r3, r3, #29
 80027fe:	d501      	bpl.n	8002804 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002800:	2000      	movs	r0, #0
}
 8002802:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002804:	4620      	mov	r0, r4
 8002806:	f7ff ff3e 	bl	8002686 <I2C_IsAcknowledgeFailed>
 800280a:	b9a8      	cbnz	r0, 8002838 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800280c:	1c6a      	adds	r2, r5, #1
 800280e:	d0f3      	beq.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002810:	f7ff fb16 	bl	8001e40 <HAL_GetTick>
 8002814:	1b80      	subs	r0, r0, r6
 8002816:	42a8      	cmp	r0, r5
 8002818:	d801      	bhi.n	800281e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800281a:	2d00      	cmp	r5, #0
 800281c:	d1ec      	bne.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800281e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002820:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002822:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002824:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002828:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800282c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800282e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002832:	f042 0220 	orr.w	r2, r2, #32
 8002836:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002838:	2001      	movs	r0, #1
 800283a:	e7e2      	b.n	8002802 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

0800283c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	4604      	mov	r4, r0
 8002840:	460d      	mov	r5, r1
 8002842:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	d501      	bpl.n	8002850 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800284c:	2000      	movs	r0, #0
}
 800284e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002850:	4620      	mov	r0, r4
 8002852:	f7ff ff18 	bl	8002686 <I2C_IsAcknowledgeFailed>
 8002856:	b9a8      	cbnz	r0, 8002884 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002858:	1c6a      	adds	r2, r5, #1
 800285a:	d0f3      	beq.n	8002844 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285c:	f7ff faf0 	bl	8001e40 <HAL_GetTick>
 8002860:	1b80      	subs	r0, r0, r6
 8002862:	42a8      	cmp	r0, r5
 8002864:	d801      	bhi.n	800286a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002866:	2d00      	cmp	r5, #0
 8002868:	d1ec      	bne.n	8002844 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800286a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800286c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800286e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002870:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002874:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002878:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800287a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800287e:	f042 0220 	orr.w	r2, r2, #32
 8002882:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002884:	2001      	movs	r0, #1
 8002886:	e7e2      	b.n	800284e <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08002888 <I2C_RequestMemoryWrite>:
{
 8002888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800288c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800288e:	6802      	ldr	r2, [r0, #0]
{
 8002890:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002892:	6813      	ldr	r3, [r2, #0]
{
 8002894:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289a:	6013      	str	r3, [r2, #0]
{
 800289c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80028a0:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028a2:	463b      	mov	r3, r7
 80028a4:	2200      	movs	r2, #0
 80028a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028aa:	f8cd 8000 	str.w	r8, [sp]
{
 80028ae:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028b0:	f7ff ff02 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	b138      	cbz	r0, 80028c8 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	05db      	lsls	r3, r3, #23
 80028bc:	d502      	bpl.n	80028c4 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c2:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80028c4:	2003      	movs	r0, #3
 80028c6:	e00a      	b.n	80028de <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028c8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80028cc:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028ce:	463a      	mov	r2, r7
 80028d0:	4643      	mov	r3, r8
 80028d2:	4620      	mov	r0, r4
 80028d4:	4917      	ldr	r1, [pc, #92]	; (8002934 <I2C_RequestMemoryWrite+0xac>)
 80028d6:	f7ff ff21 	bl	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028da:	b118      	cbz	r0, 80028e4 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 80028dc:	2001      	movs	r0, #1
}
 80028de:	b005      	add	sp, #20
 80028e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	9003      	str	r0, [sp, #12]
 80028e8:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ea:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ec:	9203      	str	r2, [sp, #12]
 80028ee:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f0:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f2:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f8:	f7ff ffa0 	bl	800283c <I2C_WaitOnTXEFlagUntilTimeout>
 80028fc:	b140      	cbz	r0, 8002910 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002900:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	bf01      	itttt	eq
 8002904:	6822      	ldreq	r2, [r4, #0]
 8002906:	6813      	ldreq	r3, [r2, #0]
 8002908:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800290c:	6013      	streq	r3, [r2, #0]
 800290e:	e7e5      	b.n	80028dc <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002910:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002914:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002916:	d102      	bne.n	800291e <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002918:	b2ed      	uxtb	r5, r5
 800291a:	611d      	str	r5, [r3, #16]
 800291c:	e7df      	b.n	80028de <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800291e:	0a2a      	lsrs	r2, r5, #8
 8002920:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002922:	4639      	mov	r1, r7
 8002924:	4642      	mov	r2, r8
 8002926:	4620      	mov	r0, r4
 8002928:	f7ff ff88 	bl	800283c <I2C_WaitOnTXEFlagUntilTimeout>
 800292c:	2800      	cmp	r0, #0
 800292e:	d1e6      	bne.n	80028fe <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	e7f1      	b.n	8002918 <I2C_RequestMemoryWrite+0x90>
 8002934:	00010002 	.word	0x00010002

08002938 <I2C_RequestMemoryRead>:
{
 8002938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800293c:	469a      	mov	sl, r3
 800293e:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002942:	6803      	ldr	r3, [r0, #0]
{
 8002944:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002946:	681a      	ldr	r2, [r3, #0]
{
 8002948:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800294e:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002950:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002952:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295a:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800295c:	463b      	mov	r3, r7
 800295e:	2200      	movs	r2, #0
 8002960:	f8cd 8000 	str.w	r8, [sp]
{
 8002964:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002966:	f7ff fea7 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	b148      	cbz	r0, 8002982 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800296e:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002970:	05db      	lsls	r3, r3, #23
 8002972:	d502      	bpl.n	800297a <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002978:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800297a:	2003      	movs	r0, #3
}
 800297c:	b004      	add	sp, #16
 800297e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002982:	fa5f f986 	uxtb.w	r9, r6
 8002986:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800298a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800298c:	463a      	mov	r2, r7
 800298e:	4643      	mov	r3, r8
 8002990:	4620      	mov	r0, r4
 8002992:	4929      	ldr	r1, [pc, #164]	; (8002a38 <I2C_RequestMemoryRead+0x100>)
 8002994:	f7ff fec2 	bl	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002998:	b108      	cbz	r0, 800299e <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 800299a:	2001      	movs	r0, #1
 800299c:	e7ee      	b.n	800297c <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	9003      	str	r0, [sp, #12]
 80029a2:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a4:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a6:	9203      	str	r2, [sp, #12]
 80029a8:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029aa:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ac:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ae:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b0:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b2:	f7ff ff43 	bl	800283c <I2C_WaitOnTXEFlagUntilTimeout>
 80029b6:	b140      	cbz	r0, 80029ca <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029ba:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029bc:	bf01      	itttt	eq
 80029be:	6822      	ldreq	r2, [r4, #0]
 80029c0:	6813      	ldreq	r3, [r2, #0]
 80029c2:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80029c6:	6013      	streq	r3, [r2, #0]
 80029c8:	e7e7      	b.n	800299a <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029ca:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ce:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029d0:	d11a      	bne.n	8002a08 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029d2:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d4:	4642      	mov	r2, r8
 80029d6:	4639      	mov	r1, r7
 80029d8:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029da:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029dc:	f7ff ff2e 	bl	800283c <I2C_WaitOnTXEFlagUntilTimeout>
 80029e0:	4602      	mov	r2, r0
 80029e2:	2800      	cmp	r0, #0
 80029e4:	d1e8      	bne.n	80029b8 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e6:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029e8:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ea:	680b      	ldr	r3, [r1, #0]
 80029ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f0:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029f2:	463b      	mov	r3, r7
 80029f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029f8:	f8cd 8000 	str.w	r8, [sp]
 80029fc:	f7ff fe5c 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 8002a00:	6822      	ldr	r2, [r4, #0]
 8002a02:	b160      	cbz	r0, 8002a1e <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a04:	6813      	ldr	r3, [r2, #0]
 8002a06:	e7b3      	b.n	8002970 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a08:	0a2a      	lsrs	r2, r5, #8
 8002a0a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0c:	4639      	mov	r1, r7
 8002a0e:	4642      	mov	r2, r8
 8002a10:	4620      	mov	r0, r4
 8002a12:	f7ff ff13 	bl	800283c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a16:	2800      	cmp	r0, #0
 8002a18:	d1ce      	bne.n	80029b8 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a1a:	6823      	ldr	r3, [r4, #0]
 8002a1c:	e7d9      	b.n	80029d2 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a1e:	f049 0301 	orr.w	r3, r9, #1
 8002a22:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a24:	4620      	mov	r0, r4
 8002a26:	4643      	mov	r3, r8
 8002a28:	463a      	mov	r2, r7
 8002a2a:	4903      	ldr	r1, [pc, #12]	; (8002a38 <I2C_RequestMemoryRead+0x100>)
 8002a2c:	f7ff fe76 	bl	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8002a30:	3800      	subs	r0, #0
 8002a32:	bf18      	it	ne
 8002a34:	2001      	movne	r0, #1
 8002a36:	e7a1      	b.n	800297c <I2C_RequestMemoryRead+0x44>
 8002a38:	00010002 	.word	0x00010002

08002a3c <HAL_I2C_Init>:
{
 8002a3c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002a3e:	4604      	mov	r4, r0
 8002a40:	b908      	cbnz	r0, 8002a46 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002a42:	2001      	movs	r0, #1
}
 8002a44:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a4e:	b91b      	cbnz	r3, 8002a58 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002a50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002a54:	f7ff f89c 	bl	8001b90 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a58:	2324      	movs	r3, #36	; 0x24
 8002a5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a76:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a78:	f000 fcce 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a7c:	4a3f      	ldr	r2, [pc, #252]	; (8002b7c <HAL_I2C_Init+0x140>)
 8002a7e:	6863      	ldr	r3, [r4, #4]
 8002a80:	4293      	cmp	r3, r2
 8002a82:	bf94      	ite	ls
 8002a84:	4a3e      	ldrls	r2, [pc, #248]	; (8002b80 <HAL_I2C_Init+0x144>)
 8002a86:	4a3f      	ldrhi	r2, [pc, #252]	; (8002b84 <HAL_I2C_Init+0x148>)
 8002a88:	4290      	cmp	r0, r2
 8002a8a:	bf8c      	ite	hi
 8002a8c:	2200      	movhi	r2, #0
 8002a8e:	2201      	movls	r2, #1
 8002a90:	2a00      	cmp	r2, #0
 8002a92:	d1d6      	bne.n	8002a42 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a94:	4e39      	ldr	r6, [pc, #228]	; (8002b7c <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002a96:	493c      	ldr	r1, [pc, #240]	; (8002b88 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a98:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8002a9a:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a9e:	bf88      	it	hi
 8002aa0:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aa4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002aa6:	f100 30ff 	add.w	r0, r0, #4294967295
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aaa:	6855      	ldr	r5, [r2, #4]
 8002aac:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002ab0:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ab4:	bf82      	ittt	hi
 8002ab6:	4371      	mulhi	r1, r6
 8002ab8:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002abc:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ac0:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ac2:	6a15      	ldr	r5, [r2, #32]
 8002ac4:	3101      	adds	r1, #1
 8002ac6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002aca:	4329      	orrs	r1, r5
 8002acc:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ace:	69d1      	ldr	r1, [r2, #28]
 8002ad0:	4d2a      	ldr	r5, [pc, #168]	; (8002b7c <HAL_I2C_Init+0x140>)
 8002ad2:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002ad6:	42ab      	cmp	r3, r5
 8002ad8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002adc:	d832      	bhi.n	8002b44 <HAL_I2C_Init+0x108>
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ae4:	1c43      	adds	r3, r0, #1
 8002ae6:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002aea:	4203      	tst	r3, r0
 8002aec:	d042      	beq.n	8002b74 <HAL_I2C_Init+0x138>
 8002aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af2:	430b      	orrs	r3, r1
 8002af4:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002af6:	6811      	ldr	r1, [r2, #0]
 8002af8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002afc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002b00:	4303      	orrs	r3, r0
 8002b02:	430b      	orrs	r3, r1
 8002b04:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b06:	6891      	ldr	r1, [r2, #8]
 8002b08:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002b0c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002b10:	4303      	orrs	r3, r0
 8002b12:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002b16:	430b      	orrs	r3, r1
 8002b18:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b1a:	68d1      	ldr	r1, [r2, #12]
 8002b1c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002b20:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002b24:	4303      	orrs	r3, r0
 8002b26:	430b      	orrs	r3, r1
 8002b28:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002b2a:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b2c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002b34:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b36:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b3c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002b42:	e77f      	b.n	8002a44 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b44:	68a5      	ldr	r5, [r4, #8]
 8002b46:	b955      	cbnz	r5, 8002b5e <HAL_I2C_Init+0x122>
 8002b48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002b4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b50:	3301      	adds	r3, #1
 8002b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b56:	b17b      	cbz	r3, 8002b78 <HAL_I2C_Init+0x13c>
 8002b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5c:	e7c9      	b.n	8002af2 <HAL_I2C_Init+0xb6>
 8002b5e:	2519      	movs	r5, #25
 8002b60:	436b      	muls	r3, r5
 8002b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b66:	3301      	adds	r3, #1
 8002b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6c:	b123      	cbz	r3, 8002b78 <HAL_I2C_Init+0x13c>
 8002b6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b72:	e7be      	b.n	8002af2 <HAL_I2C_Init+0xb6>
 8002b74:	2304      	movs	r3, #4
 8002b76:	e7bc      	b.n	8002af2 <HAL_I2C_Init+0xb6>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e7ba      	b.n	8002af2 <HAL_I2C_Init+0xb6>
 8002b7c:	000186a0 	.word	0x000186a0
 8002b80:	001e847f 	.word	0x001e847f
 8002b84:	003d08ff 	.word	0x003d08ff
 8002b88:	000f4240 	.word	0x000f4240

08002b8c <HAL_I2C_Mem_Write>:
{
 8002b8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002b90:	4604      	mov	r4, r0
 8002b92:	4699      	mov	r9, r3
 8002b94:	460f      	mov	r7, r1
 8002b96:	4690      	mov	r8, r2
 8002b98:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8002b9a:	f7ff f951 	bl	8001e40 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002ba2:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d003      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8002ba8:	2002      	movs	r0, #2
}
 8002baa:	b003      	add	sp, #12
 8002bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb0:	9000      	str	r0, [sp, #0]
 8002bb2:	2319      	movs	r3, #25
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	493a      	ldr	r1, [pc, #232]	; (8002ca4 <HAL_I2C_Mem_Write+0x118>)
 8002bba:	f7ff fd7d 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d1f2      	bne.n	8002ba8 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8002bc2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d0ee      	beq.n	8002ba8 <HAL_I2C_Mem_Write+0x1c>
 8002bca:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bcc:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8002bce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bd2:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bd4:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bd6:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8002bd8:	bf58      	it	pl
 8002bda:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bdc:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8002bde:	bf5c      	itt	pl
 8002be0:	f043 0301 	orrpl.w	r3, r3, #1
 8002be4:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002be6:	6803      	ldr	r3, [r0, #0]
 8002be8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bec:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bee:	2321      	movs	r3, #33	; 0x21
 8002bf0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bf4:	2340      	movs	r3, #64	; 0x40
 8002bf6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c00:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8002c02:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c04:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c08:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 8002c0c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c10:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c12:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <HAL_I2C_Mem_Write+0x11c>)
 8002c14:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c16:	464b      	mov	r3, r9
 8002c18:	f7ff fe36 	bl	8002888 <I2C_RequestMemoryWrite>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d02a      	beq.n	8002c76 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8002c20:	2001      	movs	r0, #1
 8002c22:	e7c2      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c24:	f7ff fe0a 	bl	800283c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c28:	b140      	cbz	r0, 8002c3c <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c2c:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2e:	bf01      	itttt	eq
 8002c30:	6822      	ldreq	r2, [r4, #0]
 8002c32:	6813      	ldreq	r3, [r2, #0]
 8002c34:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002c38:	6013      	streq	r3, [r2, #0]
 8002c3a:	e7f1      	b.n	8002c20 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c3e:	6827      	ldr	r7, [r4, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002c46:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8002c48:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002c4a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002c4c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002c4e:	3a01      	subs	r2, #1
 8002c50:	b292      	uxth	r2, r2
 8002c52:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c54:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8002c56:	1e48      	subs	r0, r1, #1
 8002c58:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c5a:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8002c5c:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c5e:	d50a      	bpl.n	8002c76 <HAL_I2C_Mem_Write+0xea>
 8002c60:	b148      	cbz	r0, 8002c76 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c62:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8002c64:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c66:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8002c68:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002c6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002c6c:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8002c72:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002c74:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c76:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c78:	462a      	mov	r2, r5
 8002c7a:	4631      	mov	r1, r6
 8002c7c:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1d0      	bne.n	8002c24 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c82:	f7ff fdb5 	bl	80027f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d1cf      	bne.n	8002c2a <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	6822      	ldr	r2, [r4, #0]
 8002c8c:	6813      	ldr	r3, [r2, #0]
 8002c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c92:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c94:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8002c96:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8002ca2:	e782      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e>
 8002ca4:	00100002 	.word	0x00100002
 8002ca8:	ffff0000 	.word	0xffff0000

08002cac <HAL_I2C_Mem_Read>:
{
 8002cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cb0:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8002cb2:	2300      	movs	r3, #0
{
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8002cb8:	9303      	str	r3, [sp, #12]
{
 8002cba:	460d      	mov	r5, r1
 8002cbc:	4690      	mov	r8, r2
 8002cbe:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7ff f8be 	bl	8001e40 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d004      	beq.n	8002cd8 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8002cce:	2502      	movs	r5, #2
}
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	b009      	add	sp, #36	; 0x24
 8002cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd8:	9000      	str	r0, [sp, #0]
 8002cda:	2319      	movs	r3, #25
 8002cdc:	2201      	movs	r2, #1
 8002cde:	4620      	mov	r0, r4
 8002ce0:	498d      	ldr	r1, [pc, #564]	; (8002f18 <HAL_I2C_Mem_Read+0x26c>)
 8002ce2:	f7ff fce9 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 8002ce6:	2800      	cmp	r0, #0
 8002ce8:	d1f1      	bne.n	8002cce <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8002cea:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d0ed      	beq.n	8002cce <HAL_I2C_Mem_Read+0x22>
 8002cf2:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cf4:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8002cf6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cfa:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cfc:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cfe:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8002d00:	bf58      	it	pl
 8002d02:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d04:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8002d06:	bf5c      	itt	pl
 8002d08:	f043 0301 	orrpl.w	r3, r3, #1
 8002d0c:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d0e:	6803      	ldr	r3, [r0, #0]
 8002d10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d14:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d16:	2322      	movs	r3, #34	; 0x22
 8002d18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d1c:	2340      	movs	r3, #64	; 0x40
 8002d1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002d26:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d28:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8002d2a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d2c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d30:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8002d34:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d38:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d3a:	4b78      	ldr	r3, [pc, #480]	; (8002f1c <HAL_I2C_Mem_Read+0x270>)
 8002d3c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d3e:	464b      	mov	r3, r9
 8002d40:	f7ff fdfa 	bl	8002938 <I2C_RequestMemoryRead>
 8002d44:	4605      	mov	r5, r0
 8002d46:	b108      	cbz	r0, 8002d4c <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 8002d48:	2501      	movs	r5, #1
 8002d4a:	e7c1      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8002d4c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4e:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8002d50:	b9c2      	cbnz	r2, 8002d84 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d52:	9004      	str	r0, [sp, #16]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	9204      	str	r2, [sp, #16]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	9204      	str	r2, [sp, #16]
 8002d5c:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d64:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d66:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8002f20 <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d6a:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8002f24 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 8002d6e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d137      	bne.n	8002de4 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d74:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8002d76:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002d82:	e7a5      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8002d84:	2a01      	cmp	r2, #1
 8002d86:	d111      	bne.n	8002dac <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	9005      	str	r0, [sp, #20]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	9205      	str	r2, [sp, #20]
 8002d9a:	699a      	ldr	r2, [r3, #24]
 8002d9c:	9205      	str	r2, [sp, #20]
 8002d9e:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002da8:	b662      	cpsie	i
}
 8002daa:	e7dc      	b.n	8002d66 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 8002dac:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dae:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8002db0:	d10e      	bne.n	8002dd0 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002db8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	9006      	str	r0, [sp, #24]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	9206      	str	r2, [sp, #24]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	9206      	str	r2, [sp, #24]
 8002dc6:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dce:	e7ea      	b.n	8002da6 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dd4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd6:	9007      	str	r0, [sp, #28]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	9207      	str	r2, [sp, #28]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	9307      	str	r3, [sp, #28]
 8002de0:	9b07      	ldr	r3, [sp, #28]
 8002de2:	e7c0      	b.n	8002d66 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d878      	bhi.n	8002eda <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d115      	bne.n	8002e18 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dec:	4632      	mov	r2, r6
 8002dee:	4639      	mov	r1, r7
 8002df0:	4620      	mov	r0, r4
 8002df2:	f7ff fcce 	bl	8002792 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d1a6      	bne.n	8002d48 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e00:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e04:	3301      	adds	r3, #1
 8002e06:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002e08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002e0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002e16:	e7aa      	b.n	8002d6e <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8002e18:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	463b      	mov	r3, r7
 8002e20:	4641      	mov	r1, r8
 8002e22:	4620      	mov	r0, r4
 8002e24:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8002e26:	d118      	bne.n	8002e5a <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e28:	f7ff fc46 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	d18b      	bne.n	8002d48 <HAL_I2C_Mem_Read+0x9c>
 8002e30:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e40:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e44:	3301      	adds	r3, #1
 8002e46:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002e48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002e4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e56:	b662      	cpsie	i
 8002e58:	e7cf      	b.n	8002dfa <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e5a:	f7ff fc2d 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	f47f af72 	bne.w	8002d48 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e64:	6822      	ldr	r2, [r4, #0]
 8002e66:	6813      	ldr	r3, [r2, #0]
 8002e68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e6c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e6e:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e70:	f246 11a8 	movw	r1, #25000	; 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e7a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002e7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e7e:	1c53      	adds	r3, r2, #1
 8002e80:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002e82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002e84:	3b01      	subs	r3, #1
 8002e86:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002e88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e90:	f8d9 3000 	ldr.w	r3, [r9]
 8002e94:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e98:	2123      	movs	r1, #35	; 0x23
 8002e9a:	434b      	muls	r3, r1
 8002e9c:	9303      	str	r3, [sp, #12]
            count--;
 8002e9e:	9b03      	ldr	r3, [sp, #12]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	b96b      	cbnz	r3, 8002ec4 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ea8:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002eaa:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002eac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002eb6:	f042 0220 	orr.w	r2, r2, #32
 8002eba:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ebc:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8002ebe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002ec2:	e741      	b.n	8002d48 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	6959      	ldr	r1, [r3, #20]
 8002ec8:	0748      	lsls	r0, r1, #29
 8002eca:	d5e8      	bpl.n	8002e9e <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ecc:	6819      	ldr	r1, [r3, #0]
 8002ece:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002ed2:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	7053      	strb	r3, [r2, #1]
 8002ed8:	e7b3      	b.n	8002e42 <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eda:	4632      	mov	r2, r6
 8002edc:	4639      	mov	r1, r7
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f7ff fc57 	bl	8002792 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	f47f af2f 	bne.w	8002d48 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ef0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ef2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ef4:	1c53      	adds	r3, r2, #1
 8002ef6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002ef8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002efa:	3b01      	subs	r3, #1
 8002efc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002efe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	6959      	ldr	r1, [r3, #20]
 8002f0a:	0749      	lsls	r1, r1, #29
 8002f0c:	f57f af2f 	bpl.w	8002d6e <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	7053      	strb	r3, [r2, #1]
 8002f14:	e775      	b.n	8002e02 <HAL_I2C_Mem_Read+0x156>
 8002f16:	bf00      	nop
 8002f18:	00100002 	.word	0x00100002
 8002f1c:	ffff0000 	.word	0xffff0000
 8002f20:	00010004 	.word	0x00010004
 8002f24:	20000034 	.word	0x20000034

08002f28 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4b01      	ldr	r3, [pc, #4]	; (8002f30 <HAL_PWR_EnableBkUpAccess+0x8>)
 8002f2c:	621a      	str	r2, [r3, #32]
}
 8002f2e:	4770      	bx	lr
 8002f30:	420e0000 	.word	0x420e0000

08002f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f38:	4605      	mov	r5, r0
 8002f3a:	b338      	cbz	r0, 8002f8c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3c:	6803      	ldr	r3, [r0, #0]
 8002f3e:	07db      	lsls	r3, r3, #31
 8002f40:	d410      	bmi.n	8002f64 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f42:	682b      	ldr	r3, [r5, #0]
 8002f44:	079f      	lsls	r7, r3, #30
 8002f46:	d45e      	bmi.n	8003006 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	0719      	lsls	r1, r3, #28
 8002f4c:	f100 8095 	bmi.w	800307a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f50:	682b      	ldr	r3, [r5, #0]
 8002f52:	075a      	lsls	r2, r3, #29
 8002f54:	f100 80c1 	bmi.w	80030da <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f58:	69e8      	ldr	r0, [r5, #28]
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	f040 812c 	bne.w	80031b8 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002f60:	2000      	movs	r0, #0
 8002f62:	e029      	b.n	8002fb8 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f64:	4c90      	ldr	r4, [pc, #576]	; (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002f66:	6863      	ldr	r3, [r4, #4]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d007      	beq.n	8002f80 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f70:	6863      	ldr	r3, [r4, #4]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d10a      	bne.n	8002f90 <HAL_RCC_OscConfig+0x5c>
 8002f7a:	6863      	ldr	r3, [r4, #4]
 8002f7c:	03de      	lsls	r6, r3, #15
 8002f7e:	d507      	bpl.n	8002f90 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	039c      	lsls	r4, r3, #14
 8002f84:	d5dd      	bpl.n	8002f42 <HAL_RCC_OscConfig+0xe>
 8002f86:	686b      	ldr	r3, [r5, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1da      	bne.n	8002f42 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	e013      	b.n	8002fb8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f90:	686b      	ldr	r3, [r5, #4]
 8002f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f96:	d112      	bne.n	8002fbe <HAL_RCC_OscConfig+0x8a>
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002fa0:	f7fe ff4e 	bl	8001e40 <HAL_GetTick>
 8002fa4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	0398      	lsls	r0, r3, #14
 8002faa:	d4ca      	bmi.n	8002f42 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fac:	f7fe ff48 	bl	8001e40 <HAL_GetTick>
 8002fb0:	1b80      	subs	r0, r0, r6
 8002fb2:	2864      	cmp	r0, #100	; 0x64
 8002fb4:	d9f7      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8002fb6:	2003      	movs	r0, #3
}
 8002fb8:	b002      	add	sp, #8
 8002fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fbe:	b99b      	cbnz	r3, 8002fe8 <HAL_RCC_OscConfig+0xb4>
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc6:	6023      	str	r3, [r4, #0]
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002fd0:	f7fe ff36 	bl	8001e40 <HAL_GetTick>
 8002fd4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	0399      	lsls	r1, r3, #14
 8002fda:	d5b2      	bpl.n	8002f42 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7fe ff30 	bl	8001e40 <HAL_GetTick>
 8002fe0:	1b80      	subs	r0, r0, r6
 8002fe2:	2864      	cmp	r0, #100	; 0x64
 8002fe4:	d9f7      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xa2>
 8002fe6:	e7e6      	b.n	8002fb6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	d103      	bne.n	8002ff8 <HAL_RCC_OscConfig+0xc4>
 8002ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff4:	6023      	str	r3, [r4, #0]
 8002ff6:	e7cf      	b.n	8002f98 <HAL_RCC_OscConfig+0x64>
 8002ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffc:	6023      	str	r3, [r4, #0]
 8002ffe:	6823      	ldr	r3, [r4, #0]
 8003000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003004:	e7cb      	b.n	8002f9e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003006:	4c68      	ldr	r4, [pc, #416]	; (80031a8 <HAL_RCC_OscConfig+0x274>)
 8003008:	6863      	ldr	r3, [r4, #4]
 800300a:	f013 0f0c 	tst.w	r3, #12
 800300e:	d007      	beq.n	8003020 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003010:	6863      	ldr	r3, [r4, #4]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b08      	cmp	r3, #8
 8003018:	d110      	bne.n	800303c <HAL_RCC_OscConfig+0x108>
 800301a:	6863      	ldr	r3, [r4, #4]
 800301c:	03da      	lsls	r2, r3, #15
 800301e:	d40d      	bmi.n	800303c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	079b      	lsls	r3, r3, #30
 8003024:	d502      	bpl.n	800302c <HAL_RCC_OscConfig+0xf8>
 8003026:	692b      	ldr	r3, [r5, #16]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d1af      	bne.n	8002f8c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	696a      	ldr	r2, [r5, #20]
 8003030:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003034:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	e785      	b.n	8002f48 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800303c:	692a      	ldr	r2, [r5, #16]
 800303e:	4b5b      	ldr	r3, [pc, #364]	; (80031ac <HAL_RCC_OscConfig+0x278>)
 8003040:	b16a      	cbz	r2, 800305e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003046:	f7fe fefb 	bl	8001e40 <HAL_GetTick>
 800304a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	079f      	lsls	r7, r3, #30
 8003050:	d4ec      	bmi.n	800302c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003052:	f7fe fef5 	bl	8001e40 <HAL_GetTick>
 8003056:	1b80      	subs	r0, r0, r6
 8003058:	2802      	cmp	r0, #2
 800305a:	d9f7      	bls.n	800304c <HAL_RCC_OscConfig+0x118>
 800305c:	e7ab      	b.n	8002fb6 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800305e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003060:	f7fe feee 	bl	8001e40 <HAL_GetTick>
 8003064:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	0798      	lsls	r0, r3, #30
 800306a:	f57f af6d 	bpl.w	8002f48 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306e:	f7fe fee7 	bl	8001e40 <HAL_GetTick>
 8003072:	1b80      	subs	r0, r0, r6
 8003074:	2802      	cmp	r0, #2
 8003076:	d9f6      	bls.n	8003066 <HAL_RCC_OscConfig+0x132>
 8003078:	e79d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800307a:	69aa      	ldr	r2, [r5, #24]
 800307c:	4e4a      	ldr	r6, [pc, #296]	; (80031a8 <HAL_RCC_OscConfig+0x274>)
 800307e:	4b4b      	ldr	r3, [pc, #300]	; (80031ac <HAL_RCC_OscConfig+0x278>)
 8003080:	b1e2      	cbz	r2, 80030bc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8003082:	2201      	movs	r2, #1
 8003084:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003088:	f7fe feda 	bl	8001e40 <HAL_GetTick>
 800308c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003090:	079b      	lsls	r3, r3, #30
 8003092:	d50d      	bpl.n	80030b0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003094:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003098:	4b45      	ldr	r3, [pc, #276]	; (80031b0 <HAL_RCC_OscConfig+0x27c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fbb3 f3f2 	udiv	r3, r3, r2
 80030a0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80030a2:	bf00      	nop
  }
  while (Delay --);
 80030a4:	9b01      	ldr	r3, [sp, #4]
 80030a6:	1e5a      	subs	r2, r3, #1
 80030a8:	9201      	str	r2, [sp, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f9      	bne.n	80030a2 <HAL_RCC_OscConfig+0x16e>
 80030ae:	e74f      	b.n	8002f50 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b0:	f7fe fec6 	bl	8001e40 <HAL_GetTick>
 80030b4:	1b00      	subs	r0, r0, r4
 80030b6:	2802      	cmp	r0, #2
 80030b8:	d9e9      	bls.n	800308e <HAL_RCC_OscConfig+0x15a>
 80030ba:	e77c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80030bc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80030c0:	f7fe febe 	bl	8001e40 <HAL_GetTick>
 80030c4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80030c8:	079f      	lsls	r7, r3, #30
 80030ca:	f57f af41 	bpl.w	8002f50 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ce:	f7fe feb7 	bl	8001e40 <HAL_GetTick>
 80030d2:	1b00      	subs	r0, r0, r4
 80030d4:	2802      	cmp	r0, #2
 80030d6:	d9f6      	bls.n	80030c6 <HAL_RCC_OscConfig+0x192>
 80030d8:	e76d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030da:	4c33      	ldr	r4, [pc, #204]	; (80031a8 <HAL_RCC_OscConfig+0x274>)
 80030dc:	69e3      	ldr	r3, [r4, #28]
 80030de:	00d8      	lsls	r0, r3, #3
 80030e0:	d424      	bmi.n	800312c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80030e2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e4:	69e3      	ldr	r3, [r4, #28]
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ea:	61e3      	str	r3, [r4, #28]
 80030ec:	69e3      	ldr	r3, [r4, #28]
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	4e2f      	ldr	r6, [pc, #188]	; (80031b4 <HAL_RCC_OscConfig+0x280>)
 80030f8:	6833      	ldr	r3, [r6, #0]
 80030fa:	05d9      	lsls	r1, r3, #23
 80030fc:	d518      	bpl.n	8003130 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030fe:	68eb      	ldr	r3, [r5, #12]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d126      	bne.n	8003152 <HAL_RCC_OscConfig+0x21e>
 8003104:	6a23      	ldr	r3, [r4, #32]
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800310c:	f7fe fe98 	bl	8001e40 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003110:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003114:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003116:	6a23      	ldr	r3, [r4, #32]
 8003118:	079b      	lsls	r3, r3, #30
 800311a:	d53f      	bpl.n	800319c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800311c:	2f00      	cmp	r7, #0
 800311e:	f43f af1b 	beq.w	8002f58 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003122:	69e3      	ldr	r3, [r4, #28]
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003128:	61e3      	str	r3, [r4, #28]
 800312a:	e715      	b.n	8002f58 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800312c:	2700      	movs	r7, #0
 800312e:	e7e2      	b.n	80030f6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003130:	6833      	ldr	r3, [r6, #0]
 8003132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003136:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003138:	f7fe fe82 	bl	8001e40 <HAL_GetTick>
 800313c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313e:	6833      	ldr	r3, [r6, #0]
 8003140:	05da      	lsls	r2, r3, #23
 8003142:	d4dc      	bmi.n	80030fe <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003144:	f7fe fe7c 	bl	8001e40 <HAL_GetTick>
 8003148:	eba0 0008 	sub.w	r0, r0, r8
 800314c:	2864      	cmp	r0, #100	; 0x64
 800314e:	d9f6      	bls.n	800313e <HAL_RCC_OscConfig+0x20a>
 8003150:	e731      	b.n	8002fb6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003152:	b9ab      	cbnz	r3, 8003180 <HAL_RCC_OscConfig+0x24c>
 8003154:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003156:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	6223      	str	r3, [r4, #32]
 8003160:	6a23      	ldr	r3, [r4, #32]
 8003162:	f023 0304 	bic.w	r3, r3, #4
 8003166:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003168:	f7fe fe6a 	bl	8001e40 <HAL_GetTick>
 800316c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316e:	6a23      	ldr	r3, [r4, #32]
 8003170:	0798      	lsls	r0, r3, #30
 8003172:	d5d3      	bpl.n	800311c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003174:	f7fe fe64 	bl	8001e40 <HAL_GetTick>
 8003178:	1b80      	subs	r0, r0, r6
 800317a:	4540      	cmp	r0, r8
 800317c:	d9f7      	bls.n	800316e <HAL_RCC_OscConfig+0x23a>
 800317e:	e71a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003180:	2b05      	cmp	r3, #5
 8003182:	6a23      	ldr	r3, [r4, #32]
 8003184:	d103      	bne.n	800318e <HAL_RCC_OscConfig+0x25a>
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6223      	str	r3, [r4, #32]
 800318c:	e7ba      	b.n	8003104 <HAL_RCC_OscConfig+0x1d0>
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	6223      	str	r3, [r4, #32]
 8003194:	6a23      	ldr	r3, [r4, #32]
 8003196:	f023 0304 	bic.w	r3, r3, #4
 800319a:	e7b6      	b.n	800310a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319c:	f7fe fe50 	bl	8001e40 <HAL_GetTick>
 80031a0:	1b80      	subs	r0, r0, r6
 80031a2:	4540      	cmp	r0, r8
 80031a4:	d9b7      	bls.n	8003116 <HAL_RCC_OscConfig+0x1e2>
 80031a6:	e706      	b.n	8002fb6 <HAL_RCC_OscConfig+0x82>
 80031a8:	40021000 	.word	0x40021000
 80031ac:	42420000 	.word	0x42420000
 80031b0:	20000034 	.word	0x20000034
 80031b4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b8:	4c2a      	ldr	r4, [pc, #168]	; (8003264 <HAL_RCC_OscConfig+0x330>)
 80031ba:	6863      	ldr	r3, [r4, #4]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d03e      	beq.n	8003242 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c4:	2200      	movs	r2, #0
 80031c6:	4b28      	ldr	r3, [pc, #160]	; (8003268 <HAL_RCC_OscConfig+0x334>)
 80031c8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80031ca:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031cc:	d12c      	bne.n	8003228 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80031ce:	f7fe fe37 	bl	8001e40 <HAL_GetTick>
 80031d2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	0199      	lsls	r1, r3, #6
 80031d8:	d420      	bmi.n	800321c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031da:	6a2b      	ldr	r3, [r5, #32]
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e0:	d105      	bne.n	80031ee <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031e2:	6862      	ldr	r2, [r4, #4]
 80031e4:	68a9      	ldr	r1, [r5, #8]
 80031e6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80031ea:	430a      	orrs	r2, r1
 80031ec:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ee:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80031f0:	6862      	ldr	r2, [r4, #4]
 80031f2:	430b      	orrs	r3, r1
 80031f4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80031f8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80031fa:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031fc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80031fe:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_RCC_OscConfig+0x334>)
 8003200:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003202:	f7fe fe1d 	bl	8001e40 <HAL_GetTick>
 8003206:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	019a      	lsls	r2, r3, #6
 800320c:	f53f aea8 	bmi.w	8002f60 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003210:	f7fe fe16 	bl	8001e40 <HAL_GetTick>
 8003214:	1b40      	subs	r0, r0, r5
 8003216:	2802      	cmp	r0, #2
 8003218:	d9f6      	bls.n	8003208 <HAL_RCC_OscConfig+0x2d4>
 800321a:	e6cc      	b.n	8002fb6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321c:	f7fe fe10 	bl	8001e40 <HAL_GetTick>
 8003220:	1b80      	subs	r0, r0, r6
 8003222:	2802      	cmp	r0, #2
 8003224:	d9d6      	bls.n	80031d4 <HAL_RCC_OscConfig+0x2a0>
 8003226:	e6c6      	b.n	8002fb6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8003228:	f7fe fe0a 	bl	8001e40 <HAL_GetTick>
 800322c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	019b      	lsls	r3, r3, #6
 8003232:	f57f ae95 	bpl.w	8002f60 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003236:	f7fe fe03 	bl	8001e40 <HAL_GetTick>
 800323a:	1b40      	subs	r0, r0, r5
 800323c:	2802      	cmp	r0, #2
 800323e:	d9f6      	bls.n	800322e <HAL_RCC_OscConfig+0x2fa>
 8003240:	e6b9      	b.n	8002fb6 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003242:	2801      	cmp	r0, #1
 8003244:	f43f aeb8 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8003248:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324a:	6a2a      	ldr	r2, [r5, #32]
 800324c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003250:	4291      	cmp	r1, r2
 8003252:	f47f ae9b 	bne.w	8002f8c <HAL_RCC_OscConfig+0x58>
 8003256:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003258:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325c:	4293      	cmp	r3, r2
 800325e:	f43f ae7f 	beq.w	8002f60 <HAL_RCC_OscConfig+0x2c>
 8003262:	e693      	b.n	8002f8c <HAL_RCC_OscConfig+0x58>
 8003264:	40021000 	.word	0x40021000
 8003268:	42420000 	.word	0x42420000

0800326c <HAL_RCC_GetSysClockFreq>:
{
 800326c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800326e:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8003270:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003272:	ac02      	add	r4, sp, #8
 8003274:	f103 0510 	add.w	r5, r3, #16
 8003278:	4622      	mov	r2, r4
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	6859      	ldr	r1, [r3, #4]
 800327e:	3308      	adds	r3, #8
 8003280:	c203      	stmia	r2!, {r0, r1}
 8003282:	42ab      	cmp	r3, r5
 8003284:	4614      	mov	r4, r2
 8003286:	d1f7      	bne.n	8003278 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003288:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 800328c:	4911      	ldr	r1, [pc, #68]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800328e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003292:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003294:	f003 020c 	and.w	r2, r3, #12
 8003298:	2a08      	cmp	r2, #8
 800329a:	d117      	bne.n	80032cc <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800329c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80032a0:	3218      	adds	r2, #24
 80032a2:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032a4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032a6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032aa:	d50c      	bpl.n	80032c6 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032ac:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ae:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032b0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032b4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032b6:	3318      	adds	r3, #24
 80032b8:	446b      	add	r3, sp
 80032ba:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032be:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80032c2:	b007      	add	sp, #28
 80032c4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_RCC_GetSysClockFreq+0x70>)
 80032c8:	4358      	muls	r0, r3
 80032ca:	e7fa      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80032cc:	4802      	ldr	r0, [pc, #8]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80032ce:	e7f8      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x56>
 80032d0:	0800510d 	.word	0x0800510d
 80032d4:	40021000 	.word	0x40021000
 80032d8:	007a1200 	.word	0x007a1200
 80032dc:	003d0900 	.word	0x003d0900

080032e0 <HAL_RCC_ClockConfig>:
{
 80032e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80032e6:	4604      	mov	r4, r0
 80032e8:	b910      	cbnz	r0, 80032f0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80032ea:	2001      	movs	r0, #1
}
 80032ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032f0:	4a44      	ldr	r2, [pc, #272]	; (8003404 <HAL_RCC_ClockConfig+0x124>)
 80032f2:	6813      	ldr	r3, [r2, #0]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	428b      	cmp	r3, r1
 80032fa:	d328      	bcc.n	800334e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fc:	6821      	ldr	r1, [r4, #0]
 80032fe:	078e      	lsls	r6, r1, #30
 8003300:	d430      	bmi.n	8003364 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003302:	07ca      	lsls	r2, r1, #31
 8003304:	d443      	bmi.n	800338e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003306:	4a3f      	ldr	r2, [pc, #252]	; (8003404 <HAL_RCC_ClockConfig+0x124>)
 8003308:	6813      	ldr	r3, [r2, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	42ab      	cmp	r3, r5
 8003310:	d865      	bhi.n	80033de <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003312:	6822      	ldr	r2, [r4, #0]
 8003314:	4d3c      	ldr	r5, [pc, #240]	; (8003408 <HAL_RCC_ClockConfig+0x128>)
 8003316:	f012 0f04 	tst.w	r2, #4
 800331a:	d16c      	bne.n	80033f6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331c:	0713      	lsls	r3, r2, #28
 800331e:	d506      	bpl.n	800332e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003320:	686b      	ldr	r3, [r5, #4]
 8003322:	6922      	ldr	r2, [r4, #16]
 8003324:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003328:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800332c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800332e:	f7ff ff9d 	bl	800326c <HAL_RCC_GetSysClockFreq>
 8003332:	686b      	ldr	r3, [r5, #4]
 8003334:	4a35      	ldr	r2, [pc, #212]	; (800340c <HAL_RCC_ClockConfig+0x12c>)
 8003336:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	40d8      	lsrs	r0, r3
 800333e:	4b34      	ldr	r3, [pc, #208]	; (8003410 <HAL_RCC_ClockConfig+0x130>)
 8003340:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003342:	4b34      	ldr	r3, [pc, #208]	; (8003414 <HAL_RCC_ClockConfig+0x134>)
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	f7fe fd39 	bl	8001dbc <HAL_InitTick>
  return HAL_OK;
 800334a:	2000      	movs	r0, #0
 800334c:	e7ce      	b.n	80032ec <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	6813      	ldr	r3, [r2, #0]
 8003350:	f023 0307 	bic.w	r3, r3, #7
 8003354:	430b      	orrs	r3, r1
 8003356:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003358:	6813      	ldr	r3, [r2, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	428b      	cmp	r3, r1
 8003360:	d1c3      	bne.n	80032ea <HAL_RCC_ClockConfig+0xa>
 8003362:	e7cb      	b.n	80032fc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	4b28      	ldr	r3, [pc, #160]	; (8003408 <HAL_RCC_ClockConfig+0x128>)
 8003366:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800336a:	bf1e      	ittt	ne
 800336c:	685a      	ldrne	r2, [r3, #4]
 800336e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8003372:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003376:	bf42      	ittt	mi
 8003378:	685a      	ldrmi	r2, [r3, #4]
 800337a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800337e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	68a0      	ldr	r0, [r4, #8]
 8003384:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003388:	4302      	orrs	r2, r0
 800338a:	605a      	str	r2, [r3, #4]
 800338c:	e7b9      	b.n	8003302 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338e:	6862      	ldr	r2, [r4, #4]
 8003390:	4e1d      	ldr	r6, [pc, #116]	; (8003408 <HAL_RCC_ClockConfig+0x128>)
 8003392:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003394:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003396:	d11a      	bne.n	80033ce <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003398:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339c:	d0a5      	beq.n	80032ea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800339e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a4:	f023 0303 	bic.w	r3, r3, #3
 80033a8:	4313      	orrs	r3, r2
 80033aa:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80033ac:	f7fe fd48 	bl	8001e40 <HAL_GetTick>
 80033b0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b2:	6873      	ldr	r3, [r6, #4]
 80033b4:	6862      	ldr	r2, [r4, #4]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80033be:	d0a2      	beq.n	8003306 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fe fd3e 	bl	8001e40 <HAL_GetTick>
 80033c4:	1bc0      	subs	r0, r0, r7
 80033c6:	4540      	cmp	r0, r8
 80033c8:	d9f3      	bls.n	80033b2 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80033ca:	2003      	movs	r0, #3
 80033cc:	e78e      	b.n	80032ec <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ce:	2a02      	cmp	r2, #2
 80033d0:	d102      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033d6:	e7e1      	b.n	800339c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	f013 0f02 	tst.w	r3, #2
 80033dc:	e7de      	b.n	800339c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	6813      	ldr	r3, [r2, #0]
 80033e0:	f023 0307 	bic.w	r3, r3, #7
 80033e4:	432b      	orrs	r3, r5
 80033e6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e8:	6813      	ldr	r3, [r2, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	42ab      	cmp	r3, r5
 80033f0:	f47f af7b 	bne.w	80032ea <HAL_RCC_ClockConfig+0xa>
 80033f4:	e78d      	b.n	8003312 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f6:	686b      	ldr	r3, [r5, #4]
 80033f8:	68e1      	ldr	r1, [r4, #12]
 80033fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033fe:	430b      	orrs	r3, r1
 8003400:	606b      	str	r3, [r5, #4]
 8003402:	e78b      	b.n	800331c <HAL_RCC_ClockConfig+0x3c>
 8003404:	40022000 	.word	0x40022000
 8003408:	40021000 	.word	0x40021000
 800340c:	080050f5 	.word	0x080050f5
 8003410:	20000034 	.word	0x20000034
 8003414:	2000003c 	.word	0x2000003c

08003418 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <HAL_RCC_GetPCLK1Freq+0x14>)
 800341a:	4a05      	ldr	r2, [pc, #20]	; (8003430 <HAL_RCC_GetPCLK1Freq+0x18>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	4a03      	ldr	r2, [pc, #12]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003426:	6810      	ldr	r0, [r2, #0]
}
 8003428:	40d8      	lsrs	r0, r3
 800342a:	4770      	bx	lr
 800342c:	40021000 	.word	0x40021000
 8003430:	08005105 	.word	0x08005105
 8003434:	20000034 	.word	0x20000034

08003438 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <HAL_RCC_GetPCLK2Freq+0x14>)
 800343a:	4a05      	ldr	r2, [pc, #20]	; (8003450 <HAL_RCC_GetPCLK2Freq+0x18>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003442:	5cd3      	ldrb	r3, [r2, r3]
 8003444:	4a03      	ldr	r2, [pc, #12]	; (8003454 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003446:	6810      	ldr	r0, [r2, #0]
}
 8003448:	40d8      	lsrs	r0, r3
 800344a:	4770      	bx	lr
 800344c:	40021000 	.word	0x40021000
 8003450:	08005105 	.word	0x08005105
 8003454:	20000034 	.word	0x20000034

08003458 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003458:	6803      	ldr	r3, [r0, #0]
{
 800345a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800345e:	07d9      	lsls	r1, r3, #31
{
 8003460:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003462:	d520      	bpl.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003464:	4c36      	ldr	r4, [pc, #216]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003466:	69e3      	ldr	r3, [r4, #28]
 8003468:	00da      	lsls	r2, r3, #3
 800346a:	d432      	bmi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800346c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	69e3      	ldr	r3, [r4, #28]
 8003470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003474:	61e3      	str	r3, [r4, #28]
 8003476:	69e3      	ldr	r3, [r4, #28]
 8003478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	4f30      	ldr	r7, [pc, #192]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	05db      	lsls	r3, r3, #23
 8003486:	d526      	bpl.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003488:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800348a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800348e:	d136      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003490:	6a23      	ldr	r3, [r4, #32]
 8003492:	686a      	ldr	r2, [r5, #4]
 8003494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003498:	4313      	orrs	r3, r2
 800349a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800349c:	b11e      	cbz	r6, 80034a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349e:	69e3      	ldr	r3, [r4, #28]
 80034a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034a6:	6828      	ldr	r0, [r5, #0]
 80034a8:	0783      	lsls	r3, r0, #30
 80034aa:	d506      	bpl.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034ac:	4924      	ldr	r1, [pc, #144]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034ae:	68ab      	ldr	r3, [r5, #8]
 80034b0:	684a      	ldr	r2, [r1, #4]
 80034b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80034b6:	431a      	orrs	r2, r3
 80034b8:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034ba:	f010 0010 	ands.w	r0, r0, #16
 80034be:	d01b      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034c0:	4a1f      	ldr	r2, [pc, #124]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034c2:	68e9      	ldr	r1, [r5, #12]
 80034c4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034c6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6053      	str	r3, [r2, #4]
 80034d0:	e012      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 80034d2:	2600      	movs	r6, #0
 80034d4:	e7d4      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034dc:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80034de:	f7fe fcaf 	bl	8001e40 <HAL_GetTick>
 80034e2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	05d8      	lsls	r0, r3, #23
 80034e8:	d4ce      	bmi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ea:	f7fe fca9 	bl	8001e40 <HAL_GetTick>
 80034ee:	eba0 0008 	sub.w	r0, r0, r8
 80034f2:	2864      	cmp	r0, #100	; 0x64
 80034f4:	d9f6      	bls.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80034f6:	2003      	movs	r0, #3
}
 80034f8:	b002      	add	sp, #8
 80034fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034fe:	686a      	ldr	r2, [r5, #4]
 8003500:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003504:	429a      	cmp	r2, r3
 8003506:	d0c3      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003508:	2001      	movs	r0, #1
 800350a:	4a0f      	ldr	r2, [pc, #60]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800350c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800350e:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003512:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003514:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003518:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 800351c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800351e:	07d9      	lsls	r1, r3, #31
 8003520:	d5b6      	bpl.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003522:	f7fe fc8d 	bl	8001e40 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800352a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352c:	6a23      	ldr	r3, [r4, #32]
 800352e:	079a      	lsls	r2, r3, #30
 8003530:	d4ae      	bmi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003532:	f7fe fc85 	bl	8001e40 <HAL_GetTick>
 8003536:	1bc0      	subs	r0, r0, r7
 8003538:	4540      	cmp	r0, r8
 800353a:	d9f7      	bls.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800353c:	e7db      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	40007000 	.word	0x40007000
 8003548:	42420000 	.word	0x42420000

0800354c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800354c:	4602      	mov	r2, r0
 800354e:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003550:	4b33      	ldr	r3, [pc, #204]	; (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
{
 8003552:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003554:	ad02      	add	r5, sp, #8
 8003556:	f103 0610 	add.w	r6, r3, #16
 800355a:	462c      	mov	r4, r5
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	3308      	adds	r3, #8
 8003562:	c403      	stmia	r4!, {r0, r1}
 8003564:	42b3      	cmp	r3, r6
 8003566:	4625      	mov	r5, r4
 8003568:	d1f7      	bne.n	800355a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800356a:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800356e:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003570:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8003574:	d047      	beq.n	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8003576:	2a10      	cmp	r2, #16
 8003578:	d003      	beq.n	8003582 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 800357a:	2a01      	cmp	r2, #1
 800357c:	d024      	beq.n	80035c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  uint32_t temp_reg = 0U, frequency = 0U;
 800357e:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8003580:	e036      	b.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      temp_reg = RCC->CFGR;
 8003582:	4a28      	ldr	r2, [pc, #160]	; (8003624 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8003584:	6851      	ldr	r1, [r2, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003586:	6810      	ldr	r0, [r2, #0]
 8003588:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800358c:	d030      	beq.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800358e:	f3c1 4383 	ubfx	r3, r1, #18, #4
 8003592:	3318      	adds	r3, #24
 8003594:	446b      	add	r3, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003596:	03c9      	lsls	r1, r1, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003598:	f813 0c10 	ldrb.w	r0, [r3, #-16]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800359c:	bf49      	itett	mi
 800359e:	6853      	ldrmi	r3, [r2, #4]
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035a0:	4b21      	ldrpl	r3, [pc, #132]	; (8003628 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035a2:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
 80035a6:	3318      	addmi	r3, #24
 80035a8:	bf41      	itttt	mi
 80035aa:	446b      	addmi	r3, sp
 80035ac:	f813 1c14 	ldrbmi.w	r1, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80035b0:	4b1e      	ldrmi	r3, [pc, #120]	; (800362c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80035b2:	fbb3 f3f1 	udivmi	r3, r3, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035b6:	4358      	muls	r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80035b8:	6853      	ldr	r3, [r2, #4]
 80035ba:	025b      	lsls	r3, r3, #9
 80035bc:	d418      	bmi.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          frequency = (pllclk * 2) / 3;
 80035be:	2303      	movs	r3, #3
 80035c0:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80035c2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80035c6:	e013      	b.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80035c8:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80035cc:	4a15      	ldr	r2, [pc, #84]	; (8003624 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 80035ce:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80035d0:	4019      	ands	r1, r3
 80035d2:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80035d6:	d01f      	beq.n	8003618 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80035d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e0:	d108      	bne.n	80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        frequency = LSI_VALUE;
 80035e2:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80035e6:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80035e8:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 80035ec:	bf18      	it	ne
 80035ee:	4618      	movne	r0, r3
}
 80035f0:	b006      	add	sp, #24
 80035f2:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80035f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035f8:	d1c1      	bne.n	800357e <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 80035fa:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80035fc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003600:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003604:	e7f2      	b.n	80035ec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003606:	f7ff ff17 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003612:	3301      	adds	r3, #1
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	e7d4      	b.n	80035c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSE_VALUE;
 8003618:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800361c:	e7e8      	b.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800361e:	bf00      	nop
 8003620:	0800510d 	.word	0x0800510d
 8003624:	40021000 	.word	0x40021000
 8003628:	003d0900 	.word	0x003d0900
 800362c:	007a1200 	.word	0x007a1200

08003630 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003630:	b538      	push	{r3, r4, r5, lr}
 8003632:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8003634:	f7fe fc04 	bl	8001e40 <HAL_GetTick>
 8003638:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	0692      	lsls	r2, r2, #26
 8003640:	d505      	bpl.n	800364e <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 8003642:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	f042 0210 	orr.w	r2, r2, #16
 800364a:	605a      	str	r2, [r3, #4]
}
 800364c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800364e:	f7fe fbf7 	bl	8001e40 <HAL_GetTick>
 8003652:	1b40      	subs	r0, r0, r5
 8003654:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003658:	d9ef      	bls.n	800363a <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 800365a:	2003      	movs	r0, #3
 800365c:	e7f6      	b.n	800364c <RTC_EnterInitMode+0x1c>

0800365e <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800365e:	6802      	ldr	r2, [r0, #0]
{
 8003660:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003662:	6853      	ldr	r3, [r2, #4]
{
 8003664:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003666:	f023 0310 	bic.w	r3, r3, #16
 800366a:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 800366c:	f7fe fbe8 	bl	8001e40 <HAL_GetTick>
 8003670:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	069b      	lsls	r3, r3, #26
 8003678:	d501      	bpl.n	800367e <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800367a:	2000      	movs	r0, #0
}
 800367c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800367e:	f7fe fbdf 	bl	8001e40 <HAL_GetTick>
 8003682:	1b40      	subs	r0, r0, r5
 8003684:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003688:	d9f3      	bls.n	8003672 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 800368a:	2003      	movs	r0, #3
 800368c:	e7f6      	b.n	800367c <RTC_ExitInitMode+0x1e>

0800368e <HAL_RTC_WaitForSynchro>:
{
 800368e:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8003690:	4604      	mov	r4, r0
 8003692:	b1a8      	cbz	r0, 80036c0 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003694:	6802      	ldr	r2, [r0, #0]
 8003696:	6853      	ldr	r3, [r2, #4]
 8003698:	f023 0308 	bic.w	r3, r3, #8
 800369c:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800369e:	f7fe fbcf 	bl	8001e40 <HAL_GetTick>
 80036a2:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	071b      	lsls	r3, r3, #28
 80036aa:	d501      	bpl.n	80036b0 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 80036ac:	2000      	movs	r0, #0
}
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80036b0:	f7fe fbc6 	bl	8001e40 <HAL_GetTick>
 80036b4:	1b40      	subs	r0, r0, r5
 80036b6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80036ba:	d9f3      	bls.n	80036a4 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 80036bc:	2003      	movs	r0, #3
 80036be:	e7f6      	b.n	80036ae <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 80036c0:	2001      	movs	r0, #1
 80036c2:	e7f4      	b.n	80036ae <HAL_RTC_WaitForSynchro+0x20>

080036c4 <HAL_RTC_Init>:
{
 80036c4:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 80036c6:	4604      	mov	r4, r0
 80036c8:	b170      	cbz	r0, 80036e8 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80036ca:	7c43      	ldrb	r3, [r0, #17]
 80036cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036d0:	b913      	cbnz	r3, 80036d8 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80036d2:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 80036d4:	f7fe fa8e 	bl	8001bf4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036d8:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036da:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036dc:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036de:	f7ff ffd6 	bl	800368e <HAL_RTC_WaitForSynchro>
 80036e2:	b118      	cbz	r0, 80036ec <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80036e4:	2304      	movs	r3, #4
 80036e6:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80036e8:	2001      	movs	r0, #1
 80036ea:	e036      	b.n	800375a <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80036ec:	4620      	mov	r0, r4
 80036ee:	f7ff ff9f 	bl	8003630 <RTC_EnterInitMode>
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d1f6      	bne.n	80036e4 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80036f6:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80036f8:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80036fa:	6853      	ldr	r3, [r2, #4]
 80036fc:	f023 0307 	bic.w	r3, r3, #7
 8003700:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003702:	4a16      	ldr	r2, [pc, #88]	; (800375c <HAL_RTC_Init+0x98>)
 8003704:	b118      	cbz	r0, 800370e <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003706:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003708:	f021 0101 	bic.w	r1, r1, #1
 800370c:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800370e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003710:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8003714:	4303      	orrs	r3, r0
 8003716:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003718:	6860      	ldr	r0, [r4, #4]
 800371a:	1c43      	adds	r3, r0, #1
 800371c:	d105      	bne.n	800372a <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800371e:	2001      	movs	r0, #1
 8003720:	f7ff ff14 	bl	800354c <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8003724:	2800      	cmp	r0, #0
 8003726:	d0dd      	beq.n	80036e4 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8003728:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800372a:	6822      	ldr	r2, [r4, #0]
 800372c:	6893      	ldr	r3, [r2, #8]
 800372e:	f023 030f 	bic.w	r3, r3, #15
 8003732:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003736:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003738:	68d3      	ldr	r3, [r2, #12]
 800373a:	b280      	uxth	r0, r0
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	041b      	lsls	r3, r3, #16
 8003740:	4318      	orrs	r0, r3
 8003742:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003744:	4620      	mov	r0, r4
 8003746:	f7ff ff8a 	bl	800365e <RTC_ExitInitMode>
 800374a:	2301      	movs	r3, #1
 800374c:	b110      	cbz	r0, 8003754 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800374e:	2204      	movs	r2, #4
 8003750:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8003752:	e7c9      	b.n	80036e8 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003754:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003756:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8003758:	7463      	strb	r3, [r4, #17]
}
 800375a:	bd10      	pop	{r4, pc}
 800375c:	40006c00 	.word	0x40006c00

08003760 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003760:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003764:	2b01      	cmp	r3, #1
 8003766:	d11c      	bne.n	80037a2 <HAL_TIM_Base_Start+0x42>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376a:	4a0f      	ldr	r2, [pc, #60]	; (80037a8 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003770:	6803      	ldr	r3, [r0, #0]
 8003772:	4293      	cmp	r3, r2
 8003774:	d00a      	beq.n	800378c <HAL_TIM_Base_Start+0x2c>
 8003776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377a:	d007      	beq.n	800378c <HAL_TIM_Base_Start+0x2c>
 800377c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <HAL_TIM_Base_Start+0x2c>
 8003784:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003788:	4293      	cmp	r3, r2
 800378a:	d104      	bne.n	8003796 <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003792:	2a06      	cmp	r2, #6
 8003794:	d003      	beq.n	800379e <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800379e:	2000      	movs	r0, #0
}
 80037a0:	4770      	bx	lr
    return HAL_ERROR;
 80037a2:	2001      	movs	r0, #1
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40012c00 	.word	0x40012c00

080037ac <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037ac:	f241 1211 	movw	r2, #4369	; 0x1111
 80037b0:	6803      	ldr	r3, [r0, #0]
 80037b2:	6a19      	ldr	r1, [r3, #32]
 80037b4:	4211      	tst	r1, r2
 80037b6:	d108      	bne.n	80037ca <HAL_TIM_Base_Stop+0x1e>
 80037b8:	f240 4244 	movw	r2, #1092	; 0x444
 80037bc:	6a19      	ldr	r1, [r3, #32]
 80037be:	4211      	tst	r1, r2
 80037c0:	bf02      	ittt	eq
 80037c2:	681a      	ldreq	r2, [r3, #0]
 80037c4:	f022 0201 	biceq.w	r2, r2, #1
 80037c8:	601a      	streq	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 80037d0:	2000      	movs	r0, #0
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037d4:	4603      	mov	r3, r0
 80037d6:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80037d8:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80037dc:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80037e0:	f893 5042 	ldrb.w	r5, [r3, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80037e4:	f893 4043 	ldrb.w	r4, [r3, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80037e8:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80037ea:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80037ec:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80037ee:	b2e4      	uxtb	r4, r4

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80037f0:	b9e1      	cbnz	r1, 800382c <HAL_TIM_Encoder_Start_IT+0x58>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037f2:	2a01      	cmp	r2, #1
 80037f4:	d159      	bne.n	80038aa <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80037f6:	2d01      	cmp	r5, #1
 80037f8:	d159      	bne.n	80038ae <HAL_TIM_Encoder_Start_IT+0xda>
    {
      return HAL_ERROR;
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003804:	681a      	ldr	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003806:	6a11      	ldr	r1, [r2, #32]
 8003808:	f021 0101 	bic.w	r1, r1, #1
 800380c:	6211      	str	r1, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800380e:	6a11      	ldr	r1, [r2, #32]
 8003810:	f041 0101 	orr.w	r1, r1, #1
 8003814:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003816:	68d1      	ldr	r1, [r2, #12]
 8003818:	f041 0102 	orr.w	r1, r1, #2
  return HAL_OK;
 800381c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800381e:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	6013      	str	r3, [r2, #0]
}
 800382a:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 800382c:	2904      	cmp	r1, #4
 800382e:	d115      	bne.n	800385c <HAL_TIM_Encoder_Start_IT+0x88>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003830:	2801      	cmp	r0, #1
 8003832:	d13a      	bne.n	80038aa <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003834:	2c01      	cmp	r4, #1
 8003836:	d1f8      	bne.n	800382a <HAL_TIM_Encoder_Start_IT+0x56>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003838:	2202      	movs	r2, #2
 800383a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800383e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003842:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8003844:	6a11      	ldr	r1, [r2, #32]
 8003846:	f021 0110 	bic.w	r1, r1, #16
 800384a:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800384c:	6a11      	ldr	r1, [r2, #32]
 800384e:	f041 0110 	orr.w	r1, r1, #16
 8003852:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003854:	68d1      	ldr	r1, [r2, #12]
 8003856:	f041 0104 	orr.w	r1, r1, #4
 800385a:	e7df      	b.n	800381c <HAL_TIM_Encoder_Start_IT+0x48>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800385c:	2a01      	cmp	r2, #1
 800385e:	d124      	bne.n	80038aa <HAL_TIM_Encoder_Start_IT+0xd6>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003860:	2801      	cmp	r0, #1
 8003862:	d124      	bne.n	80038ae <HAL_TIM_Encoder_Start_IT+0xda>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003864:	2d01      	cmp	r5, #1
 8003866:	d1e0      	bne.n	800382a <HAL_TIM_Encoder_Start_IT+0x56>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003868:	2c01      	cmp	r4, #1
 800386a:	d1de      	bne.n	800382a <HAL_TIM_Encoder_Start_IT+0x56>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800386c:	2202      	movs	r2, #2
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800387a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800387e:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8003880:	6a11      	ldr	r1, [r2, #32]
 8003882:	f021 0101 	bic.w	r1, r1, #1
 8003886:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003888:	6a11      	ldr	r1, [r2, #32]
 800388a:	f041 0101 	orr.w	r1, r1, #1
 800388e:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 8003890:	6a11      	ldr	r1, [r2, #32]
 8003892:	f021 0110 	bic.w	r1, r1, #16
 8003896:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003898:	6a11      	ldr	r1, [r2, #32]
 800389a:	f041 0110 	orr.w	r1, r1, #16
 800389e:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038a0:	68d1      	ldr	r1, [r2, #12]
 80038a2:	f041 0102 	orr.w	r1, r1, #2
 80038a6:	60d1      	str	r1, [r2, #12]
 80038a8:	e7d4      	b.n	8003854 <HAL_TIM_Encoder_Start_IT+0x80>
      return HAL_ERROR;
 80038aa:	2001      	movs	r0, #1
 80038ac:	e7bd      	b.n	800382a <HAL_TIM_Encoder_Start_IT+0x56>
 80038ae:	4610      	mov	r0, r2
 80038b0:	e7bb      	b.n	800382a <HAL_TIM_Encoder_Start_IT+0x56>

080038b2 <HAL_TIM_Encoder_Stop_IT>:
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80038b2:	6803      	ldr	r3, [r0, #0]
{
 80038b4:	b510      	push	{r4, lr}
  TIMx->CCER &= ~tmp;
 80038b6:	6a1a      	ldr	r2, [r3, #32]
  if (Channel == TIM_CHANNEL_1)
 80038b8:	b9f9      	cbnz	r1, 80038fa <HAL_TIM_Encoder_Stop_IT+0x48>
  TIMx->CCER &= ~tmp;
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	f022 0202 	bic.w	r2, r2, #2
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80038ca:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80038cc:	f241 1211 	movw	r2, #4369	; 0x1111
 80038d0:	6a1c      	ldr	r4, [r3, #32]
 80038d2:	4214      	tst	r4, r2
 80038d4:	d108      	bne.n	80038e8 <HAL_TIM_Encoder_Stop_IT+0x36>
 80038d6:	f240 4244 	movw	r2, #1092	; 0x444
 80038da:	6a1c      	ldr	r4, [r3, #32]
 80038dc:	4214      	tst	r4, r2
 80038de:	bf02      	ittt	eq
 80038e0:	681a      	ldreq	r2, [r3, #0]
 80038e2:	f022 0201 	biceq.w	r2, r2, #1
 80038e6:	601a      	streq	r2, [r3, #0]
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80038e8:	2301      	movs	r3, #1
 80038ea:	b309      	cbz	r1, 8003930 <HAL_TIM_Encoder_Stop_IT+0x7e>
 80038ec:	2904      	cmp	r1, #4
 80038ee:	d125      	bne.n	800393c <HAL_TIM_Encoder_Stop_IT+0x8a>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80038f0:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038f4:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80038f8:	e01e      	b.n	8003938 <HAL_TIM_Encoder_Stop_IT+0x86>
  else if (Channel == TIM_CHANNEL_2)
 80038fa:	2904      	cmp	r1, #4
 80038fc:	d108      	bne.n	8003910 <HAL_TIM_Encoder_Stop_IT+0x5e>
  TIMx->CCER &= ~tmp;
 80038fe:	f022 0210 	bic.w	r2, r2, #16
 8003902:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003904:	6a1a      	ldr	r2, [r3, #32]
 8003906:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	f022 0204 	bic.w	r2, r2, #4
 800390e:	e7dc      	b.n	80038ca <HAL_TIM_Encoder_Stop_IT+0x18>
  TIMx->CCER &= ~tmp;
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003916:	6a1a      	ldr	r2, [r3, #32]
 8003918:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 800391a:	6a1a      	ldr	r2, [r3, #32]
 800391c:	f022 0210 	bic.w	r2, r2, #16
 8003920:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003922:	6a1a      	ldr	r2, [r3, #32]
 8003924:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	f022 0202 	bic.w	r2, r2, #2
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	e7eb      	b.n	8003908 <HAL_TIM_Encoder_Stop_IT+0x56>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003930:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003934:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
}
 8003938:	2000      	movs	r0, #0
 800393a:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800393c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003940:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003944:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8003948:	e7d4      	b.n	80038f4 <HAL_TIM_Encoder_Stop_IT+0x42>

0800394a <HAL_TIM_PeriodElapsedCallback>:
 800394a:	4770      	bx	lr

0800394c <HAL_TIM_OC_DelayElapsedCallback>:
 800394c:	4770      	bx	lr

0800394e <HAL_TIM_PWM_PulseFinishedCallback>:
 800394e:	4770      	bx	lr

08003950 <HAL_TIM_TriggerCallback>:
 8003950:	4770      	bx	lr

08003952 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003952:	6803      	ldr	r3, [r0, #0]
{
 8003954:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003956:	691a      	ldr	r2, [r3, #16]
{
 8003958:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800395a:	0791      	lsls	r1, r2, #30
 800395c:	d50e      	bpl.n	800397c <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	0792      	lsls	r2, r2, #30
 8003962:	d50b      	bpl.n	800397c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003964:	f06f 0202 	mvn.w	r2, #2
 8003968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800396a:	2201      	movs	r2, #1
 800396c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	079b      	lsls	r3, r3, #30
 8003972:	d077      	beq.n	8003a64 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003974:	f000 fbe6 	bl	8004144 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003978:	2300      	movs	r3, #0
 800397a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	0750      	lsls	r0, r2, #29
 8003982:	d510      	bpl.n	80039a6 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	0751      	lsls	r1, r2, #29
 8003988:	d50d      	bpl.n	80039a6 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800398a:	f06f 0204 	mvn.w	r2, #4
 800398e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003990:	2202      	movs	r2, #2
 8003992:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003994:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8003996:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003998:	f413 7f40 	tst.w	r3, #768	; 0x300
 800399c:	d068      	beq.n	8003a70 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800399e:	f000 fbd1 	bl	8004144 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	2300      	movs	r3, #0
 80039a4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	0712      	lsls	r2, r2, #28
 80039ac:	d50f      	bpl.n	80039ce <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	0710      	lsls	r0, r2, #28
 80039b2:	d50c      	bpl.n	80039ce <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039b4:	f06f 0208 	mvn.w	r2, #8
 80039b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ba:	2204      	movs	r2, #4
 80039bc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039be:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80039c0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039c2:	0799      	lsls	r1, r3, #30
 80039c4:	d05a      	beq.n	8003a7c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80039c6:	f000 fbbd 	bl	8004144 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ca:	2300      	movs	r3, #0
 80039cc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	06d2      	lsls	r2, r2, #27
 80039d4:	d510      	bpl.n	80039f8 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	06d0      	lsls	r0, r2, #27
 80039da:	d50d      	bpl.n	80039f8 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039dc:	f06f 0210 	mvn.w	r2, #16
 80039e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e2:	2208      	movs	r2, #8
 80039e4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039e6:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80039e8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ea:	f413 7f40 	tst.w	r3, #768	; 0x300
 80039ee:	d04b      	beq.n	8003a88 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80039f0:	f000 fba8 	bl	8004144 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f4:	2300      	movs	r3, #0
 80039f6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	07d1      	lsls	r1, r2, #31
 80039fe:	d508      	bpl.n	8003a12 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	07d2      	lsls	r2, r2, #31
 8003a04:	d505      	bpl.n	8003a12 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a06:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a0a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a0c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a0e:	f7ff ff9c 	bl	800394a <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	0610      	lsls	r0, r2, #24
 8003a18:	d508      	bpl.n	8003a2c <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	0611      	lsls	r1, r2, #24
 8003a1e:	d505      	bpl.n	8003a2c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a20:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003a24:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a26:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003a28:	f000 f9bd 	bl	8003da6 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	0652      	lsls	r2, r2, #25
 8003a32:	d508      	bpl.n	8003a46 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	0650      	lsls	r0, r2, #25
 8003a38:	d505      	bpl.n	8003a46 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8003a3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a40:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003a42:	f7ff ff85 	bl	8003950 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	0691      	lsls	r1, r2, #26
 8003a4c:	d522      	bpl.n	8003a94 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	0692      	lsls	r2, r2, #26
 8003a52:	d51f      	bpl.n	8003a94 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a54:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003a58:	4620      	mov	r0, r4
}
 8003a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a5e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003a60:	f000 b9a0 	b.w	8003da4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a64:	f7ff ff72 	bl	800394c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f7ff ff70 	bl	800394e <HAL_TIM_PWM_PulseFinishedCallback>
 8003a6e:	e783      	b.n	8003978 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a70:	f7ff ff6c 	bl	800394c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a74:	4620      	mov	r0, r4
 8003a76:	f7ff ff6a 	bl	800394e <HAL_TIM_PWM_PulseFinishedCallback>
 8003a7a:	e792      	b.n	80039a2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7c:	f7ff ff66 	bl	800394c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a80:	4620      	mov	r0, r4
 8003a82:	f7ff ff64 	bl	800394e <HAL_TIM_PWM_PulseFinishedCallback>
 8003a86:	e7a0      	b.n	80039ca <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a88:	f7ff ff60 	bl	800394c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f7ff ff5e 	bl	800394e <HAL_TIM_PWM_PulseFinishedCallback>
 8003a92:	e7af      	b.n	80039f4 <HAL_TIM_IRQHandler+0xa2>
}
 8003a94:	bd10      	pop	{r4, pc}
	...

08003a98 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a98:	4a1a      	ldr	r2, [pc, #104]	; (8003b04 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003a9a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a9c:	4290      	cmp	r0, r2
 8003a9e:	d00a      	beq.n	8003ab6 <TIM_Base_SetConfig+0x1e>
 8003aa0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003aa4:	d007      	beq.n	8003ab6 <TIM_Base_SetConfig+0x1e>
 8003aa6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003aaa:	4290      	cmp	r0, r2
 8003aac:	d003      	beq.n	8003ab6 <TIM_Base_SetConfig+0x1e>
 8003aae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ab2:	4290      	cmp	r0, r2
 8003ab4:	d115      	bne.n	8003ae2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8003ab6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003abc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003abe:	4a11      	ldr	r2, [pc, #68]	; (8003b04 <TIM_Base_SetConfig+0x6c>)
 8003ac0:	4290      	cmp	r0, r2
 8003ac2:	d00a      	beq.n	8003ada <TIM_Base_SetConfig+0x42>
 8003ac4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003ac8:	d007      	beq.n	8003ada <TIM_Base_SetConfig+0x42>
 8003aca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003ace:	4290      	cmp	r0, r2
 8003ad0:	d003      	beq.n	8003ada <TIM_Base_SetConfig+0x42>
 8003ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ad6:	4290      	cmp	r0, r2
 8003ad8:	d103      	bne.n	8003ae2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ada:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae2:	694a      	ldr	r2, [r1, #20]
 8003ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003aea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aec:	688b      	ldr	r3, [r1, #8]
 8003aee:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003af0:	680b      	ldr	r3, [r1, #0]
 8003af2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <TIM_Base_SetConfig+0x6c>)
 8003af6:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003af8:	bf04      	itt	eq
 8003afa:	690b      	ldreq	r3, [r1, #16]
 8003afc:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003afe:	2301      	movs	r3, #1
 8003b00:	6143      	str	r3, [r0, #20]
}
 8003b02:	4770      	bx	lr
 8003b04:	40012c00 	.word	0x40012c00

08003b08 <HAL_TIM_Base_Init>:
{
 8003b08:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	b330      	cbz	r0, 8003b5c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b16:	b91b      	cbnz	r3, 8003b20 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003b18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003b1c:	f7fe f888 	bl	8001c30 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b22:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b28:	1d21      	adds	r1, r4, #4
 8003b2a:	f7ff ffb5 	bl	8003a98 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b2e:	2301      	movs	r3, #1
  return HAL_OK;
 8003b30:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b32:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003b3a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003b3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003b42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003b52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003b56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003b5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	e7fc      	b.n	8003b5a <HAL_TIM_Base_Init+0x52>

08003b60 <HAL_TIM_Encoder_Init>:
{
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	460d      	mov	r5, r1
  if (htim == NULL)
 8003b64:	4604      	mov	r4, r0
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d04d      	beq.n	8003c06 <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b72:	b91b      	cbnz	r3, 8003b7c <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8003b74:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8003b78:	f7fe f86e 	bl	8001c58 <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b7e:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b84:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b88:	6883      	ldr	r3, [r0, #8]
 8003b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b8e:	f023 0307 	bic.w	r3, r3, #7
 8003b92:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b94:	f7ff ff80 	bl	8003a98 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003b98:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8003b9a:	682a      	ldr	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003b9c:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8003b9e:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ba0:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8003ba2:	4316      	orrs	r6, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ba4:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003baa:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003bae:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003bb2:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003bb4:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bb8:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003bba:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003bc2:	68e9      	ldr	r1, [r5, #12]
  tmpccer = htim->Instance->CCER;
 8003bc4:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bc6:	430b      	orrs	r3, r1
 8003bc8:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003bca:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bce:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003bd2:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003bd4:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003bd6:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003bda:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8003bdc:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003bde:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8003be2:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003be4:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be6:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8003be8:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8003bea:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bec:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bf4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8003c00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003c06:	2001      	movs	r0, #1
 8003c08:	e7fc      	b.n	8003c04 <HAL_TIM_Encoder_Init+0xa4>

08003c0a <TIM_ETR_SetConfig>:
{
 8003c0a:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8003c0c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c0e:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c10:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c14:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003c18:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8003c1a:	6082      	str	r2, [r0, #8]
}
 8003c1c:	bd10      	pop	{r4, pc}

08003c1e <HAL_TIM_ConfigClockSource>:
{
 8003c1e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003c20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003c24:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	f04f 0002 	mov.w	r0, #2
 8003c2c:	d027      	beq.n	8003c7e <HAL_TIM_ConfigClockSource+0x60>
 8003c2e:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003c34:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003c36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003c3a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c40:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003c44:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003c46:	680b      	ldr	r3, [r1, #0]
 8003c48:	2b60      	cmp	r3, #96	; 0x60
 8003c4a:	d04d      	beq.n	8003ce8 <HAL_TIM_ConfigClockSource+0xca>
 8003c4c:	d832      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x96>
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d062      	beq.n	8003d18 <HAL_TIM_ConfigClockSource+0xfa>
 8003c52:	d815      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x62>
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d003      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0x42>
 8003c58:	d809      	bhi.n	8003c6e <HAL_TIM_ConfigClockSource+0x50>
 8003c5a:	f033 0210 	bics.w	r2, r3, #16
 8003c5e:	d108      	bne.n	8003c72 <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8003c60:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f043 0307 	orr.w	r3, r3, #7
 8003c6c:	e020      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003c6e:	2b30      	cmp	r3, #48	; 0x30
 8003c70:	d0f6      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 8003c72:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003c74:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003c7a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003c80:	2b50      	cmp	r3, #80	; 0x50
 8003c82:	d1f6      	bne.n	8003c72 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c84:	684a      	ldr	r2, [r1, #4]
 8003c86:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003c88:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8a:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c8c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c90:	f025 0501 	bic.w	r5, r5, #1
 8003c94:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c96:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003c98:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c9e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003ca2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ca4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003ca6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cac:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003cb0:	6083      	str	r3, [r0, #8]
}
 8003cb2:	e7de      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 8003cb4:	2b70      	cmp	r3, #112	; 0x70
 8003cb6:	d00c      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0xb4>
 8003cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cbc:	d1d9      	bne.n	8003c72 <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 8003cbe:	68cb      	ldr	r3, [r1, #12]
 8003cc0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003cc4:	f7ff ffa1 	bl	8003c0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cc8:	6822      	ldr	r2, [r4, #0]
 8003cca:	6893      	ldr	r3, [r2, #8]
 8003ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cd0:	e008      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8003cd2:	68cb      	ldr	r3, [r1, #12]
 8003cd4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003cd8:	f7ff ff97 	bl	8003c0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cdc:	6822      	ldr	r2, [r4, #0]
 8003cde:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ce4:	6093      	str	r3, [r2, #8]
      break;
 8003ce6:	e7c4      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ce8:	684d      	ldr	r5, [r1, #4]
 8003cea:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cec:	6a01      	ldr	r1, [r0, #32]
 8003cee:	f021 0110 	bic.w	r1, r1, #16
 8003cf2:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf4:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003cf6:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cf8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d00:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d04:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003d08:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003d0a:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003d0c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d12:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003d16:	e7cb      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d18:	684a      	ldr	r2, [r1, #4]
 8003d1a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003d1c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1e:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d20:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d24:	f025 0501 	bic.w	r5, r5, #1
 8003d28:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2a:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003d2c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d32:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003d36:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003d38:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003d3a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d40:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003d44:	e7b4      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x92>
	...

08003d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d48:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d4a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003d4e:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	f04f 0002 	mov.w	r0, #2
 8003d56:	d022      	beq.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d58:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003d5e:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d60:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d62:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d66:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8003d68:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d6a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d6c:	4c0c      	ldr	r4, [pc, #48]	; (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003d6e:	42a3      	cmp	r3, r4
 8003d70:	d00a      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d007      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003d78:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003d7c:	42a3      	cmp	r3, r4
 8003d7e:	d003      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003d80:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003d84:	42a3      	cmp	r3, r4
 8003d86:	d104      	bne.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d88:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d8a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d8e:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d90:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d92:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003d94:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d96:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003d9a:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8003d9e:	bd30      	pop	{r4, r5, pc}
 8003da0:	40012c00 	.word	0x40012c00

08003da4 <HAL_TIMEx_CommutCallback>:
 8003da4:	4770      	bx	lr

08003da6 <HAL_TIMEx_BreakCallback>:
 8003da6:	4770      	bx	lr

08003da8 <DHT_Set_Pin_Input>:
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
}

static void DHT_Set_Pin_Input(DHT_HandleTypeDef* p_DHT){
 8003da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003daa:	2300      	movs	r3, #0
 8003dac:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8003db0:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8003db2:	8903      	ldrh	r3, [r0, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8003db4:	4669      	mov	r1, sp
 8003db6:	6840      	ldr	r0, [r0, #4]
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8003db8:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8003dba:	f7fe fb7f 	bl	80024bc <HAL_GPIO_Init>
}
 8003dbe:	b005      	add	sp, #20
 8003dc0:	f85d fb04 	ldr.w	pc, [sp], #4

08003dc4 <DHT_Init>:
}

void DHT_Init(DHT_HandleTypeDef* p_DHT, uint8_t p_sensor_type, GPIO_TypeDef* p_Port, uint16_t p_Pin){
	p_DHT->sensor_type = p_sensor_type;
	p_DHT->DHT_Port = p_Port;
	p_DHT->DHT_Pin = p_Pin;
 8003dc4:	8103      	strh	r3, [r0, #8]
	p_DHT->temperature = 0.0;
 8003dc6:	2300      	movs	r3, #0
	p_DHT->sensor_type = p_sensor_type;
 8003dc8:	7001      	strb	r1, [r0, #0]
	p_DHT->DHT_Port = p_Port;
 8003dca:	6042      	str	r2, [r0, #4]
	p_DHT->temperature = 0.0;
 8003dcc:	60c3      	str	r3, [r0, #12]
	p_DHT->huminity = 0.0;
 8003dce:	6103      	str	r3, [r0, #16]
}
 8003dd0:	4770      	bx	lr

08003dd2 <DHT_Read_Value>:

uint8_t DHT_Read_Value(DHT_HandleTypeDef* p_DHT){
 8003dd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8003dd6:	8903      	ldrh	r3, [r0, #8]
uint8_t DHT_Read_Value(DHT_HandleTypeDef* p_DHT){
 8003dd8:	b087      	sub	sp, #28
 8003dda:	4604      	mov	r4, r0
	uint8_t t_data[5] = {};
 8003ddc:	2500      	movs	r5, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dde:	2601      	movs	r6, #1
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8003de0:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2302      	movs	r3, #2
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8003de4:	6840      	ldr	r0, [r0, #4]
 8003de6:	a902      	add	r1, sp, #8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de8:	9305      	str	r3, [sp, #20]
	uint8_t t_data[5] = {};
 8003dea:	9500      	str	r5, [sp, #0]
 8003dec:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df0:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003df2:	9603      	str	r6, [sp, #12]
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8003df4:	f7fe fb62 	bl	80024bc <HAL_GPIO_Init>
	HAL_GPIO_WritePin(p_DHT->DHT_Port, p_DHT->DHT_Pin, 0);
 8003df8:	8921      	ldrh	r1, [r4, #8]
 8003dfa:	462a      	mov	r2, r5
 8003dfc:	6860      	ldr	r0, [r4, #4]
 8003dfe:	f7fe fc3d 	bl	800267c <HAL_GPIO_WritePin>
	DELAY_US_Run((p_DHT->sensor_type == DHT11) ? DHT11_STARTTIME : DHT22_STARTTIME);
 8003e02:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8003e06:	f244 6250 	movw	r2, #18000	; 0x4650
 8003e0a:	7820      	ldrb	r0, [r4, #0]
 8003e0c:	42a8      	cmp	r0, r5
 8003e0e:	bf0c      	ite	eq
 8003e10:	4610      	moveq	r0, r2
 8003e12:	4618      	movne	r0, r3
 8003e14:	f000 f96a 	bl	80040ec <DELAY_US_Run>
	HAL_GPIO_WritePin(p_DHT->DHT_Port, p_DHT->DHT_Pin, 1);
 8003e18:	8921      	ldrh	r1, [r4, #8]
 8003e1a:	4632      	mov	r2, r6
 8003e1c:	6860      	ldr	r0, [r4, #4]
 8003e1e:	f7fe fc2d 	bl	800267c <HAL_GPIO_WritePin>
	DHT_Set_Pin_Input(p_DHT);
 8003e22:	4620      	mov	r0, r4
 8003e24:	f7ff ffc0 	bl	8003da8 <DHT_Set_Pin_Input>
	DELAY_US_Run(40);
 8003e28:	2028      	movs	r0, #40	; 0x28
 8003e2a:	f000 f95f 	bl	80040ec <DELAY_US_Run>
	if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8003e2e:	8921      	ldrh	r1, [r4, #8]
 8003e30:	6860      	ldr	r0, [r4, #4]
 8003e32:	f7fe fc1d 	bl	8002670 <HAL_GPIO_ReadPin>
 8003e36:	b118      	cbz	r0, 8003e40 <DHT_Read_Value+0x6e>
	DHT_Start(p_DHT);
	if(DHT_Check_Response(p_DHT) == DHT_FAIL)
		return DHT_FAIL;
 8003e38:	2000      	movs	r0, #0
		p_DHT->temperature = t_data[2] / 1.0;
	else
		return DHT_FAIL;

	return DHT_OK;
}
 8003e3a:	b007      	add	sp, #28
 8003e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		DELAY_US_Run(80);
 8003e40:	2050      	movs	r0, #80	; 0x50
 8003e42:	f000 f953 	bl	80040ec <DELAY_US_Run>
		if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8003e46:	8921      	ldrh	r1, [r4, #8]
 8003e48:	6860      	ldr	r0, [r4, #4]
 8003e4a:	f7fe fc11 	bl	8002670 <HAL_GPIO_ReadPin>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d0f2      	beq.n	8003e38 <DHT_Read_Value+0x66>
	uint32_t timer_out = HAL_GetTick();
 8003e52:	f7fd fff5 	bl	8001e40 <HAL_GetTick>
 8003e56:	4606      	mov	r6, r0
	while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8003e58:	8921      	ldrh	r1, [r4, #8]
 8003e5a:	6860      	ldr	r0, [r4, #4]
 8003e5c:	f7fe fc08 	bl	8002670 <HAL_GPIO_ReadPin>
 8003e60:	4605      	mov	r5, r0
 8003e62:	b930      	cbnz	r0, 8003e72 <DHT_Read_Value+0xa0>
	DHT_Set_Pin_Input(p_DHT);
 8003e64:	4620      	mov	r0, r4
 8003e66:	f7ff ff9f 	bl	8003da8 <DHT_Set_Pin_Input>
	for(int i = 0; i < 5; i++){
 8003e6a:	466e      	mov	r6, sp
				*(p_data + i) &= ~(1 << (7-j));
 8003e6c:	f04f 0801 	mov.w	r8, #1
 8003e70:	e02c      	b.n	8003ecc <DHT_Read_Value+0xfa>
		if(HAL_GetTick() - timer_out > TIME_OUT){
 8003e72:	f7fd ffe5 	bl	8001e40 <HAL_GetTick>
 8003e76:	1b80      	subs	r0, r0, r6
 8003e78:	280a      	cmp	r0, #10
 8003e7a:	d9ed      	bls.n	8003e58 <DHT_Read_Value+0x86>
 8003e7c:	e7dc      	b.n	8003e38 <DHT_Read_Value+0x66>
			uint32_t timer_out = HAL_GetTick();
 8003e7e:	f7fd ffdf 	bl	8001e40 <HAL_GetTick>
 8003e82:	4681      	mov	r9, r0
			while(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8003e84:	8921      	ldrh	r1, [r4, #8]
 8003e86:	6860      	ldr	r0, [r4, #4]
 8003e88:	f7fe fbf2 	bl	8002670 <HAL_GPIO_ReadPin>
 8003e8c:	b300      	cbz	r0, 8003ed0 <DHT_Read_Value+0xfe>
			DELAY_US_Run(40);
 8003e8e:	2028      	movs	r0, #40	; 0x28
 8003e90:	f000 f92c 	bl	80040ec <DELAY_US_Run>
			if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin))
 8003e94:	8921      	ldrh	r1, [r4, #8]
 8003e96:	6860      	ldr	r0, [r4, #4]
 8003e98:	f7fe fbea 	bl	8002670 <HAL_GPIO_ReadPin>
				*(p_data + i) &= ~(1 << (7-j));
 8003e9c:	fa08 f207 	lsl.w	r2, r8, r7
 8003ea0:	f996 3000 	ldrsb.w	r3, [r6]
 8003ea4:	b252      	sxtb	r2, r2
			if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin))
 8003ea6:	b9d0      	cbnz	r0, 8003ede <DHT_Read_Value+0x10c>
				*(p_data + i) &= ~(1 << (7-j));
 8003ea8:	ea23 0302 	bic.w	r3, r3, r2
				*(p_data + i) |= (1 << (7-j));
 8003eac:	7033      	strb	r3, [r6, #0]
			timer_out = HAL_GetTick();
 8003eae:	f7fd ffc7 	bl	8001e40 <HAL_GetTick>
 8003eb2:	4681      	mov	r9, r0
			while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8003eb4:	8921      	ldrh	r1, [r4, #8]
 8003eb6:	6860      	ldr	r0, [r4, #4]
 8003eb8:	f7fe fbda 	bl	8002670 <HAL_GPIO_ReadPin>
 8003ebc:	b988      	cbnz	r0, 8003ee2 <DHT_Read_Value+0x110>
		for(int j = 0; j < 8; j++)
 8003ebe:	3f01      	subs	r7, #1
 8003ec0:	d2dd      	bcs.n	8003e7e <DHT_Read_Value+0xac>
	for(int i = 0; i < 5; i++){
 8003ec2:	3501      	adds	r5, #1
 8003ec4:	2d05      	cmp	r5, #5
 8003ec6:	f106 0601 	add.w	r6, r6, #1
 8003eca:	d011      	beq.n	8003ef0 <DHT_Read_Value+0x11e>
	DELAY_US_Run((p_DHT->sensor_type == DHT11) ? DHT11_STARTTIME : DHT22_STARTTIME);
 8003ecc:	2707      	movs	r7, #7
 8003ece:	e7d6      	b.n	8003e7e <DHT_Read_Value+0xac>
				if(HAL_GetTick() - timer_out > TIME_OUT){
 8003ed0:	f7fd ffb6 	bl	8001e40 <HAL_GetTick>
 8003ed4:	eba0 0009 	sub.w	r0, r0, r9
 8003ed8:	280a      	cmp	r0, #10
 8003eda:	d9d3      	bls.n	8003e84 <DHT_Read_Value+0xb2>
 8003edc:	e7ac      	b.n	8003e38 <DHT_Read_Value+0x66>
				*(p_data + i) |= (1 << (7-j));
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	e7e4      	b.n	8003eac <DHT_Read_Value+0xda>
				if(HAL_GetTick() - timer_out > TIME_OUT){
 8003ee2:	f7fd ffad 	bl	8001e40 <HAL_GetTick>
 8003ee6:	eba0 0009 	sub.w	r0, r0, r9
 8003eea:	280a      	cmp	r0, #10
 8003eec:	d9e2      	bls.n	8003eb4 <DHT_Read_Value+0xe2>
 8003eee:	e7a3      	b.n	8003e38 <DHT_Read_Value+0x66>
	if(((t_data[0] + t_data[1] + t_data[2] + t_data[3]) & 0xFF) != t_data[4])
 8003ef0:	f89d 0000 	ldrb.w	r0, [sp]
 8003ef4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003ef8:	f89d 5002 	ldrb.w	r5, [sp, #2]
 8003efc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003f00:	4403      	add	r3, r0
 8003f02:	442b      	add	r3, r5
 8003f04:	4413      	add	r3, r2
 8003f06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d193      	bne.n	8003e38 <DHT_Read_Value+0x66>
	if(t_data[0] < 100 && t_data[0] > 0)
 8003f10:	1e43      	subs	r3, r0, #1
 8003f12:	2b62      	cmp	r3, #98	; 0x62
 8003f14:	d890      	bhi.n	8003e38 <DHT_Read_Value+0x66>
		p_DHT->huminity = t_data[0] / 1.0;
 8003f16:	f7fc fa73 	bl	8000400 <__aeabi_i2d>
 8003f1a:	f7fc fadb 	bl	80004d4 <__aeabi_d2f>
	if(t_data[2] < 100 && t_data[2] > 0)
 8003f1e:	1e6b      	subs	r3, r5, #1
 8003f20:	2b62      	cmp	r3, #98	; 0x62
		p_DHT->huminity = t_data[0] / 1.0;
 8003f22:	6120      	str	r0, [r4, #16]
	if(t_data[2] < 100 && t_data[2] > 0)
 8003f24:	d888      	bhi.n	8003e38 <DHT_Read_Value+0x66>
		p_DHT->temperature = t_data[2] / 1.0;
 8003f26:	4628      	mov	r0, r5
 8003f28:	f7fc fa6a 	bl	8000400 <__aeabi_i2d>
 8003f2c:	f7fc fad2 	bl	80004d4 <__aeabi_d2f>
 8003f30:	60e0      	str	r0, [r4, #12]
	return DHT_OK;
 8003f32:	2001      	movs	r0, #1
 8003f34:	e781      	b.n	8003e3a <DHT_Read_Value+0x68>

08003f36 <DS3231_Init>:
static uint8_t DEC_To_BCD(uint8_t p_DEC_value){
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
}

void DS3231_Init(DS3231_HandleTypeDef *p_ds3231, I2C_HandleTypeDef *p_hi2c){
	p_ds3231->hi2c = p_hi2c;
 8003f36:	6081      	str	r1, [r0, #8]
}
 8003f38:	4770      	bx	lr

08003f3a <DS3231_Set_Time>:

void DS3231_Set_Time(DS3231_HandleTypeDef *p_ds3231, uint8_t p_hour, uint8_t p_minute, uint8_t p_second, uint8_t p_day){
 8003f3a:	b570      	push	{r4, r5, r6, lr}
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003f3c:	240a      	movs	r4, #10
 8003f3e:	fbb3 f6f4 	udiv	r6, r3, r4
 8003f42:	fb04 3316 	mls	r3, r4, r6, r3
void DS3231_Set_Time(DS3231_HandleTypeDef *p_ds3231, uint8_t p_hour, uint8_t p_minute, uint8_t p_second, uint8_t p_day){
 8003f46:	b086      	sub	sp, #24
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003f48:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	uint8_t t_i2c_buffer[4];
	t_i2c_buffer[0] = DEC_To_BCD(p_second);
 8003f4c:	f88d 3014 	strb.w	r3, [sp, #20]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003f50:	fbb2 f3f4 	udiv	r3, r2, r4
 8003f54:	fb04 2213 	mls	r2, r4, r3, r2
 8003f58:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 8003f5c:	fbb1 f3f4 	udiv	r3, r1, r4
 8003f60:	fb04 1113 	mls	r1, r4, r3, r1
void DS3231_Set_Time(DS3231_HandleTypeDef *p_ds3231, uint8_t p_hour, uint8_t p_minute, uint8_t p_second, uint8_t p_day){
 8003f64:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003f68:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
 8003f6c:	fbb5 f3f4 	udiv	r3, r5, r4
 8003f70:	fb04 5513 	mls	r5, r4, r3, r5
	t_i2c_buffer[1] = DEC_To_BCD(p_minute);
 8003f74:	f88d 2015 	strb.w	r2, [sp, #21]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003f78:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
	t_i2c_buffer[2] = DEC_To_BCD(p_hour) & (~USING_12_HOURS_TIME);
	t_i2c_buffer[3] = DEC_To_BCD(p_day);
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000);
 8003f7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f80:	2304      	movs	r3, #4
 8003f82:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f86:	ab05      	add	r3, sp, #20
 8003f88:	9300      	str	r3, [sp, #0]
	t_i2c_buffer[2] = DEC_To_BCD(p_hour) & (~USING_12_HOURS_TIME);
 8003f8a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003f8e:	f88d 1016 	strb.w	r1, [sp, #22]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000);
 8003f92:	2301      	movs	r3, #1
 8003f94:	2200      	movs	r2, #0
 8003f96:	21d0      	movs	r1, #208	; 0xd0
 8003f98:	6880      	ldr	r0, [r0, #8]
	t_i2c_buffer[3] = DEC_To_BCD(p_day);
 8003f9a:	f88d 5017 	strb.w	r5, [sp, #23]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000);
 8003f9e:	f7fe fdf5 	bl	8002b8c <HAL_I2C_Mem_Write>
}
 8003fa2:	b006      	add	sp, #24
 8003fa4:	bd70      	pop	{r4, r5, r6, pc}

08003fa6 <DS3231_Get_Time>:

uint8_t DS3231_Get_Time(DS3231_HandleTypeDef *p_ds3231){
	uint8_t t_i2c_buffer[4];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000) != HAL_OK){
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
uint8_t DS3231_Get_Time(DS3231_HandleTypeDef *p_ds3231){
 8003fac:	b510      	push	{r4, lr}
 8003fae:	b086      	sub	sp, #24
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000) != HAL_OK){
 8003fb0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003fb4:	ab05      	add	r3, sp, #20
 8003fb6:	9300      	str	r3, [sp, #0]
uint8_t DS3231_Get_Time(DS3231_HandleTypeDef *p_ds3231){
 8003fb8:	4604      	mov	r4, r0
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000) != HAL_OK){
 8003fba:	2301      	movs	r3, #1
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	21d0      	movs	r1, #208	; 0xd0
 8003fc0:	6880      	ldr	r0, [r0, #8]
 8003fc2:	f7fe fe73 	bl	8002cac <HAL_I2C_Mem_Read>
 8003fc6:	bb50      	cbnz	r0, 800401e <DS3231_Get_Time+0x78>
	}
	p_ds3231->current_second = BCD_To_DEC(t_i2c_buffer[0]);
	p_ds3231->current_minute = BCD_To_DEC(t_i2c_buffer[1]);
	p_ds3231->current_hour = BCD_To_DEC(t_i2c_buffer[2]);
	p_ds3231->current_day = BCD_To_DEC(t_i2c_buffer[3]);
	return DS3231_OK;
 8003fc8:	2001      	movs	r0, #1
	p_ds3231->current_second = BCD_To_DEC(t_i2c_buffer[0]);
 8003fca:	f89d 3014 	ldrb.w	r3, [sp, #20]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 8003fce:	091a      	lsrs	r2, r3, #4
 8003fd0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_second = BCD_To_DEC(t_i2c_buffer[0]);
 8003fdc:	70a3      	strb	r3, [r4, #2]
	p_ds3231->current_minute = BCD_To_DEC(t_i2c_buffer[1]);
 8003fde:	f89d 3015 	ldrb.w	r3, [sp, #21]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 8003fe2:	091a      	lsrs	r2, r3, #4
 8003fe4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_minute = BCD_To_DEC(t_i2c_buffer[1]);
 8003ff0:	7063      	strb	r3, [r4, #1]
	p_ds3231->current_hour = BCD_To_DEC(t_i2c_buffer[2]);
 8003ff2:	f89d 3016 	ldrb.w	r3, [sp, #22]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 8003ff6:	091a      	lsrs	r2, r3, #4
 8003ff8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_hour = BCD_To_DEC(t_i2c_buffer[2]);
 8004004:	7023      	strb	r3, [r4, #0]
	p_ds3231->current_day = BCD_To_DEC(t_i2c_buffer[3]);
 8004006:	f89d 3017 	ldrb.w	r3, [sp, #23]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 800400a:	091a      	lsrs	r2, r3, #4
 800400c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_day = BCD_To_DEC(t_i2c_buffer[3]);
 8004018:	70e3      	strb	r3, [r4, #3]
}
 800401a:	b006      	add	sp, #24
 800401c:	bd10      	pop	{r4, pc}
		return DS3231_FAIL;
 800401e:	2000      	movs	r0, #0
 8004020:	e7fb      	b.n	800401a <DS3231_Get_Time+0x74>

08004022 <DS3231_Set_Date>:

void DS3231_Set_Date(DS3231_HandleTypeDef *p_ds3231, uint8_t p_date, uint8_t p_month, uint8_t p_year){
 8004022:	b530      	push	{r4, r5, lr}
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8004024:	240a      	movs	r4, #10
 8004026:	fbb1 f5f4 	udiv	r5, r1, r4
 800402a:	fb04 1115 	mls	r1, r4, r5, r1
void DS3231_Set_Date(DS3231_HandleTypeDef *p_ds3231, uint8_t p_date, uint8_t p_month, uint8_t p_year){
 800402e:	b087      	sub	sp, #28
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8004030:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
	uint8_t t_i2c_buffer[3];
	t_i2c_buffer[0] = DEC_To_BCD(p_date);
 8004034:	f88d 1014 	strb.w	r1, [sp, #20]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8004038:	fbb2 f1f4 	udiv	r1, r2, r4
 800403c:	fb04 2211 	mls	r2, r4, r1, r2
 8004040:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
	t_i2c_buffer[1] = DEC_To_BCD(p_month);
 8004044:	f88d 2015 	strb.w	r2, [sp, #21]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8004048:	fbb3 f2f4 	udiv	r2, r3, r4
 800404c:	fb04 3312 	mls	r3, r4, r2, r3
 8004050:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
	t_i2c_buffer[2] = DEC_To_BCD(p_year);
 8004054:	f88d 3016 	strb.w	r3, [sp, #22]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000);
 8004058:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800405c:	2303      	movs	r3, #3
 800405e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004062:	ab05      	add	r3, sp, #20
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2204      	movs	r2, #4
 8004068:	2301      	movs	r3, #1
 800406a:	21d0      	movs	r1, #208	; 0xd0
 800406c:	6880      	ldr	r0, [r0, #8]
 800406e:	f7fe fd8d 	bl	8002b8c <HAL_I2C_Mem_Write>
}
 8004072:	b007      	add	sp, #28
 8004074:	bd30      	pop	{r4, r5, pc}

08004076 <DS3231_Get_Date>:

uint8_t DS3231_Get_Date(DS3231_HandleTypeDef *p_ds3231){
	uint8_t t_i2c_buffer[3];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000) != HAL_OK){
 8004076:	2303      	movs	r3, #3
 8004078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
uint8_t DS3231_Get_Date(DS3231_HandleTypeDef *p_ds3231){
 800407c:	b510      	push	{r4, lr}
 800407e:	b086      	sub	sp, #24
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000) != HAL_OK){
 8004080:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004084:	ab05      	add	r3, sp, #20
 8004086:	9300      	str	r3, [sp, #0]
uint8_t DS3231_Get_Date(DS3231_HandleTypeDef *p_ds3231){
 8004088:	4604      	mov	r4, r0
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000) != HAL_OK){
 800408a:	2301      	movs	r3, #1
 800408c:	2204      	movs	r2, #4
 800408e:	21d0      	movs	r1, #208	; 0xd0
 8004090:	6880      	ldr	r0, [r0, #8]
 8004092:	f7fe fe0b 	bl	8002cac <HAL_I2C_Mem_Read>
 8004096:	bb08      	cbnz	r0, 80040dc <DS3231_Get_Date+0x66>
		return DS3231_FAIL;
	}
	p_ds3231->current_date = BCD_To_DEC(t_i2c_buffer[0]);
	p_ds3231->current_month = BCD_To_DEC(t_i2c_buffer[1]);
	p_ds3231->current_year = BCD_To_DEC(t_i2c_buffer[2]);
	return DS3231_OK;
 8004098:	2001      	movs	r0, #1
	p_ds3231->current_date = BCD_To_DEC(t_i2c_buffer[0]);
 800409a:	f89d 3014 	ldrb.w	r3, [sp, #20]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 800409e:	091a      	lsrs	r2, r3, #4
 80040a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_date = BCD_To_DEC(t_i2c_buffer[0]);
 80040ac:	7123      	strb	r3, [r4, #4]
	p_ds3231->current_month = BCD_To_DEC(t_i2c_buffer[1]);
 80040ae:	f89d 3015 	ldrb.w	r3, [sp, #21]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 80040b2:	091a      	lsrs	r2, r3, #4
 80040b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_month = BCD_To_DEC(t_i2c_buffer[1]);
 80040c0:	7163      	strb	r3, [r4, #5]
	p_ds3231->current_year = BCD_To_DEC(t_i2c_buffer[2]);
 80040c2:	f89d 3016 	ldrb.w	r3, [sp, #22]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 80040c6:	091a      	lsrs	r2, r3, #4
 80040c8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_year = BCD_To_DEC(t_i2c_buffer[2]);
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	80e3      	strh	r3, [r4, #6]
}
 80040d8:	b006      	add	sp, #24
 80040da:	bd10      	pop	{r4, pc}
		return DS3231_FAIL;
 80040dc:	2000      	movs	r0, #0
 80040de:	e7fb      	b.n	80040d8 <DS3231_Get_Date+0x62>

080040e0 <DELAY_US_Init>:
#include "Delay_us.h"

TIM_HandleTypeDef *delay_timer;

void DELAY_US_Init(TIM_HandleTypeDef *p_htim){
	delay_timer = p_htim;
 80040e0:	4b01      	ldr	r3, [pc, #4]	; (80040e8 <DELAY_US_Init+0x8>)
 80040e2:	6018      	str	r0, [r3, #0]
}
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	200002f8 	.word	0x200002f8

080040ec <DELAY_US_Run>:

void DELAY_US_Run(uint32_t p_delay_time){
	delay_timer->Instance->CNT = 0;
 80040ec:	2200      	movs	r2, #0
void DELAY_US_Run(uint32_t p_delay_time){
 80040ee:	b538      	push	{r3, r4, r5, lr}
	delay_timer->Instance->CNT = 0;
 80040f0:	4d07      	ldr	r5, [pc, #28]	; (8004110 <DELAY_US_Run+0x24>)
void DELAY_US_Run(uint32_t p_delay_time){
 80040f2:	4604      	mov	r4, r0
	delay_timer->Instance->CNT = 0;
 80040f4:	6828      	ldr	r0, [r5, #0]
 80040f6:	6803      	ldr	r3, [r0, #0]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(delay_timer);
 80040fa:	f7ff fb31 	bl	8003760 <HAL_TIM_Base_Start>
	while(delay_timer->Instance->CNT < p_delay_time);
 80040fe:	6828      	ldr	r0, [r5, #0]
 8004100:	6802      	ldr	r2, [r0, #0]
 8004102:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004104:	42a3      	cmp	r3, r4
 8004106:	d3fc      	bcc.n	8004102 <DELAY_US_Run+0x16>
	HAL_TIM_Base_Stop(delay_timer);
}
 8004108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_Base_Stop(delay_timer);
 800410c:	f7ff bb4e 	b.w	80037ac <HAL_TIM_Base_Stop>
 8004110:	200002f8 	.word	0x200002f8

08004114 <ENCODER_Init>:
}
#endif

void ENCODER_Init(ENCODER_HandleTypeDef *p_encoder, TIM_HandleTypeDef *p_encoder_timer){
	p_encoder->encoder_timer = p_encoder_timer;
	p_encoder->current_possition = 0;
 8004114:	2300      	movs	r3, #0
	p_encoder->encoder_timer = p_encoder_timer;
 8004116:	6001      	str	r1, [r0, #0]
	p_encoder->current_possition = 0;
 8004118:	6043      	str	r3, [r0, #4]
	p_encoder->last_position = 0;
}
 800411a:	4770      	bx	lr

0800411c <ENCODER_Set_Callback_Function>:

void ENCODER_Set_Callback_Function(encoder_callback_function_t p_forward_callback_function, encoder_callback_function_t p_backward_callback_function){
	__ENCODER_Forward_Callback = p_forward_callback_function;
 800411c:	4b02      	ldr	r3, [pc, #8]	; (8004128 <ENCODER_Set_Callback_Function+0xc>)
 800411e:	6018      	str	r0, [r3, #0]
	__ENCODER_Backward_Callback = p_backward_callback_function;
 8004120:	4b02      	ldr	r3, [pc, #8]	; (800412c <ENCODER_Set_Callback_Function+0x10>)
 8004122:	6019      	str	r1, [r3, #0]
}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000300 	.word	0x20000300
 800412c:	200002fc 	.word	0x200002fc

08004130 <ENCODER_IT_Handle>:

void ENCODER_IT_Handle(ENCODER_HandleTypeDef *p_encoder){
	uint32_t t_counter = __HAL_TIM_GET_COUNTER(p_encoder->encoder_timer);
 8004130:	6803      	ldr	r3, [r0, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	p_encoder->current_possition =  (int16_t)t_counter / 4;
 8004136:	b21b      	sxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	bfb8      	it	lt
 800413c:	3303      	addlt	r3, #3
 800413e:	109b      	asrs	r3, r3, #2
 8004140:	8083      	strh	r3, [r0, #4]
}
 8004142:	4770      	bx	lr

08004144 <HAL_TIM_IC_CaptureCallback>:
	if(h_encoder.encoder_timer->Instance == htim->Instance){
 8004144:	4b04      	ldr	r3, [pc, #16]	; (8004158 <HAL_TIM_IC_CaptureCallback+0x14>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	6811      	ldr	r1, [r2, #0]
 800414a:	6802      	ldr	r2, [r0, #0]
 800414c:	4291      	cmp	r1, r2
 800414e:	d102      	bne.n	8004156 <HAL_TIM_IC_CaptureCallback+0x12>
		ENCODER_IT_Handle(&h_encoder);
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff bfed 	b.w	8004130 <ENCODER_IT_Handle>
}
 8004156:	4770      	bx	lr
 8004158:	200000dc 	.word	0x200000dc

0800415c <ENCODER_Handle>:

void ENCODER_Handle(ENCODER_HandleTypeDef *p_encoder){
	if(p_encoder->current_possition > p_encoder->last_position){
 800415c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8004160:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
void ENCODER_Handle(ENCODER_HandleTypeDef *p_encoder){
 8004164:	b510      	push	{r4, lr}
	if(p_encoder->current_possition > p_encoder->last_position){
 8004166:	429a      	cmp	r2, r3
void ENCODER_Handle(ENCODER_HandleTypeDef *p_encoder){
 8004168:	4604      	mov	r4, r0
	if(p_encoder->current_possition > p_encoder->last_position){
 800416a:	dd06      	ble.n	800417a <ENCODER_Handle+0x1e>
		if(__ENCODER_Forward_Callback != NULL){
 800416c:	4b04      	ldr	r3, [pc, #16]	; (8004180 <ENCODER_Handle+0x24>)
			__ENCODER_Forward_Callback(p_encoder);
		}
		p_encoder->last_position = p_encoder->current_possition;
	}
	if(p_encoder->current_possition < p_encoder->last_position){
		if(__ENCODER_Backward_Callback != NULL){
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	b103      	cbz	r3, 8004174 <ENCODER_Handle+0x18>
			__ENCODER_Backward_Callback(p_encoder);
 8004172:	4798      	blx	r3
		}
		p_encoder->last_position = p_encoder->current_possition;
 8004174:	88a3      	ldrh	r3, [r4, #4]
 8004176:	80e3      	strh	r3, [r4, #6]
	}
}
 8004178:	bd10      	pop	{r4, pc}
	if(p_encoder->current_possition < p_encoder->last_position){
 800417a:	dafd      	bge.n	8004178 <ENCODER_Handle+0x1c>
		if(__ENCODER_Backward_Callback != NULL){
 800417c:	4b01      	ldr	r3, [pc, #4]	; (8004184 <ENCODER_Handle+0x28>)
 800417e:	e7f6      	b.n	800416e <ENCODER_Handle+0x12>
 8004180:	20000300 	.word	0x20000300
 8004184:	200002fc 	.word	0x200002fc

08004188 <LCD_Send_Command>:
void LCD_Display_Off(LCD_I2C_HandleTypeDef *p_lcd){
	p_lcd->LCD_Display_Option &= ~LCD_DISPLAYON;
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
}

void LCD_Send_Command(LCD_I2C_HandleTypeDef *p_lcd, char cmd){
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	460d      	mov	r5, r1
#ifdef LCD_4BIT_CONTROL
	GPIOA->ODR &= ~0x0F00;
 800418c:	4e1f      	ldr	r6, [pc, #124]	; (800420c <LCD_Send_Command+0x84>)
void LCD_Send_Command(LCD_I2C_HandleTypeDef *p_lcd, char cmd){
 800418e:	4607      	mov	r7, r0
	GPIOA->ODR &= ~0x0F00;
 8004190:	68f3      	ldr	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(cmd & 0xF0) << 4);
	GPIOB->ODR &= ~0xF000;
 8004192:	4c1f      	ldr	r4, [pc, #124]	; (8004210 <LCD_Send_Command+0x88>)
	GPIOA->ODR &= ~0x0F00;
 8004194:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004198:	60f3      	str	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(cmd & 0xF0) << 4);
 800419a:	68f2      	ldr	r2, [r6, #12]
 800419c:	010b      	lsls	r3, r1, #4
 800419e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60f3      	str	r3, [r6, #12]
	GPIOB->ODR &= ~0xF000;
 80041a6:	68e3      	ldr	r3, [r4, #12]
	DELAY_US_Run(40);
	GPIOB->ODR &= ~(En << 12);
	DELAY_US_Run(40);

	GPIOA->ODR &= ~0x0F00;
	GPIOA->ODR |= ((uint16_t)(cmd & 0x0F) << 8);
 80041a8:	022d      	lsls	r5, r5, #8
	GPIOB->ODR &= ~0xF000;
 80041aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ae:	60e3      	str	r3, [r4, #12]
	GPIOB->ODR |= (SENDING_CMD_MASK | p_lcd->LCD_Backlight_Value) << 12;
 80041b0:	78c2      	ldrb	r2, [r0, #3]
 80041b2:	68e3      	ldr	r3, [r4, #12]
 80041b4:	f042 0204 	orr.w	r2, r2, #4
 80041b8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	DELAY_US_Run(40);
 80041bc:	2028      	movs	r0, #40	; 0x28
	GPIOB->ODR |= (SENDING_CMD_MASK | p_lcd->LCD_Backlight_Value) << 12;
 80041be:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 80041c0:	f7ff ff94 	bl	80040ec <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 80041c4:	68e3      	ldr	r3, [r4, #12]
	DELAY_US_Run(40);
 80041c6:	2028      	movs	r0, #40	; 0x28
	GPIOB->ODR &= ~(En << 12);
 80041c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041cc:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 80041ce:	f7ff ff8d 	bl	80040ec <DELAY_US_Run>
	GPIOA->ODR &= ~0x0F00;
 80041d2:	68f3      	ldr	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(cmd & 0x0F) << 8);
 80041d4:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
	GPIOA->ODR &= ~0x0F00;
 80041d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041dc:	60f3      	str	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(cmd & 0x0F) << 8);
 80041de:	68f3      	ldr	r3, [r6, #12]
	GPIOB->ODR &= ~0xF000;
	GPIOB->ODR |= (SENDING_CMD_MASK | p_lcd->LCD_Backlight_Value) << 12;
	DELAY_US_Run(40);
 80041e0:	2028      	movs	r0, #40	; 0x28
	GPIOA->ODR |= ((uint16_t)(cmd & 0x0F) << 8);
 80041e2:	431d      	orrs	r5, r3
 80041e4:	60f5      	str	r5, [r6, #12]
	GPIOB->ODR &= ~0xF000;
 80041e6:	68e3      	ldr	r3, [r4, #12]
 80041e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ec:	60e3      	str	r3, [r4, #12]
	GPIOB->ODR |= (SENDING_CMD_MASK | p_lcd->LCD_Backlight_Value) << 12;
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	68e3      	ldr	r3, [r4, #12]
 80041f2:	f042 0204 	orr.w	r2, r2, #4
 80041f6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80041fa:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 80041fc:	f7ff ff76 	bl	80040ec <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 8004200:	68e3      	ldr	r3, [r4, #12]
 8004202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004206:	60e3      	str	r3, [r4, #12]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En;
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value;

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
#endif
}
 8004208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800420a:	bf00      	nop
 800420c:	40010800 	.word	0x40010800
 8004210:	40010c00 	.word	0x40010c00

08004214 <LCD_Init>:
void LCD_Init(LCD_I2C_HandleTypeDef *p_lcd, I2C_HandleTypeDef *p_hi2c, uint8_t p_cols, uint8_t p_rows, uint8_t p_SLAVE_ADDRESS){
 8004214:	b510      	push	{r4, lr}
 8004216:	4604      	mov	r4, r0
 8004218:	f89d 0008 	ldrb.w	r0, [sp, #8]
	p_lcd->LCD_Rows = p_rows;
 800421c:	7063      	strb	r3, [r4, #1]
	p_lcd->SLAVE_ADDRESS = p_SLAVE_ADDRESS;
 800421e:	70a0      	strb	r0, [r4, #2]
	p_lcd->LCD_Display_Option = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8004220:	2304      	movs	r3, #4
	p_lcd->LCD_Backlight_Value = LCD_BACKLIGHT;
 8004222:	2008      	movs	r0, #8
	p_lcd->LCD_Columns = p_cols;
 8004224:	7022      	strb	r2, [r4, #0]
	p_lcd->LCD_Display_Option = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8004226:	7123      	strb	r3, [r4, #4]
	p_lcd->LCD_Backlight_Value = LCD_BACKLIGHT;
 8004228:	70e0      	strb	r0, [r4, #3]
	p_lcd->hi2c = p_hi2c;
 800422a:	60a1      	str	r1, [r4, #8]
	HAL_Delay(50);
 800422c:	2032      	movs	r0, #50	; 0x32
 800422e:	f7fd fe0d 	bl	8001e4c <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x33);
 8004232:	2133      	movs	r1, #51	; 0x33
 8004234:	4620      	mov	r0, r4
 8004236:	f7ff ffa7 	bl	8004188 <LCD_Send_Command>
	HAL_Delay(5);
 800423a:	2005      	movs	r0, #5
 800423c:	f7fd fe06 	bl	8001e4c <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x33);
 8004240:	2133      	movs	r1, #51	; 0x33
 8004242:	4620      	mov	r0, r4
 8004244:	f7ff ffa0 	bl	8004188 <LCD_Send_Command>
	HAL_Delay(5);
 8004248:	2005      	movs	r0, #5
 800424a:	f7fd fdff 	bl	8001e4c <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x32);
 800424e:	2132      	movs	r1, #50	; 0x32
 8004250:	4620      	mov	r0, r4
 8004252:	f7ff ff99 	bl	8004188 <LCD_Send_Command>
	HAL_Delay(5);
 8004256:	2005      	movs	r0, #5
 8004258:	f7fd fdf8 	bl	8001e4c <HAL_Delay>
	LCD_Send_Command(p_lcd, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 800425c:	4620      	mov	r0, r4
 800425e:	2106      	movs	r1, #6
 8004260:	f7ff ff92 	bl	8004188 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8004264:	4620      	mov	r0, r4
 8004266:	210c      	movs	r1, #12
 8004268:	f7ff ff8e 	bl	8004188 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT);
 800426c:	4620      	mov	r0, r4
 800426e:	2114      	movs	r1, #20
 8004270:	f7ff ff8a 	bl	8004188 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8004274:	4620      	mov	r0, r4
 8004276:	2128      	movs	r1, #40	; 0x28
 8004278:	f7ff ff86 	bl	8004188 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 800427c:	4620      	mov	r0, r4
 800427e:	2101      	movs	r1, #1
 8004280:	f7ff ff82 	bl	8004188 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_RETURNHOME);
 8004284:	4620      	mov	r0, r4
 8004286:	2102      	movs	r1, #2
 8004288:	f7ff ff7e 	bl	8004188 <LCD_Send_Command>
}
 800428c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(500);
 8004290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004294:	f7fd bdda 	b.w	8001e4c <HAL_Delay>

08004298 <LCD_Set_Cursor>:
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <LCD_Set_Cursor+0x2c>)
void LCD_Set_Cursor(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_col, uint8_t p_row){
 800429a:	b082      	sub	sp, #8
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 800429c:	9301      	str	r3, [sp, #4]
	if(p_row > p_lcd->LCD_Rows) p_row = p_lcd->LCD_Rows - 1;
 800429e:	7843      	ldrb	r3, [r0, #1]
 80042a0:	4293      	cmp	r3, r2
 80042a2:	bf3c      	itt	cc
 80042a4:	f103 32ff 	addcc.w	r2, r3, #4294967295
 80042a8:	b2d2      	uxtbcc	r2, r2
	LCD_Send_Command(p_lcd, LCD_SETDDRAMADDR | (p_col + t_row_Offets[p_row]));
 80042aa:	f102 0308 	add.w	r3, r2, #8
 80042ae:	eb0d 0203 	add.w	r2, sp, r3
 80042b2:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 80042b6:	4419      	add	r1, r3
 80042b8:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80042bc:	b2c9      	uxtb	r1, r1
}
 80042be:	b002      	add	sp, #8
	LCD_Send_Command(p_lcd, LCD_SETDDRAMADDR | (p_col + t_row_Offets[p_row]));
 80042c0:	f7ff bf62 	b.w	8004188 <LCD_Send_Command>
 80042c4:	54144000 	.word	0x54144000

080042c8 <LCD_Clear>:
void LCD_Clear(LCD_I2C_HandleTypeDef *p_lcd){
 80042c8:	b510      	push	{r4, lr}
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 80042ca:	2101      	movs	r1, #1
void LCD_Clear(LCD_I2C_HandleTypeDef *p_lcd){
 80042cc:	4604      	mov	r4, r0
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 80042ce:	f7ff ff5b 	bl	8004188 <LCD_Send_Command>
	DELAY_US_Run(1600);
 80042d2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80042d6:	f7ff ff09 	bl	80040ec <DELAY_US_Run>
	LCD_Set_Cursor(p_lcd, 0, 0);
 80042da:	2200      	movs	r2, #0
 80042dc:	4620      	mov	r0, r4
}
 80042de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_Set_Cursor(p_lcd, 0, 0);
 80042e2:	4611      	mov	r1, r2
 80042e4:	f7ff bfd8 	b.w	8004298 <LCD_Set_Cursor>

080042e8 <LCD_Cursor_Blink>:
	p_lcd->LCD_Display_Option |= LCD_BLINKON;
 80042e8:	7901      	ldrb	r1, [r0, #4]
 80042ea:	f041 0201 	orr.w	r2, r1, #1
 80042ee:	7102      	strb	r2, [r0, #4]
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
 80042f0:	f041 0109 	orr.w	r1, r1, #9
 80042f4:	f7ff bf48 	b.w	8004188 <LCD_Send_Command>

080042f8 <LCD_Cursor_No_Blink>:
	p_lcd->LCD_Display_Option &= ~LCD_BLINKON;
 80042f8:	7901      	ldrb	r1, [r0, #4]
 80042fa:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80042fe:	7101      	strb	r1, [r0, #4]
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
 8004300:	f041 0108 	orr.w	r1, r1, #8
 8004304:	f7ff bf40 	b.w	8004188 <LCD_Send_Command>

08004308 <LCD_Send_Data>:

void LCD_Send_Data(LCD_I2C_HandleTypeDef *p_lcd, char data){
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	460d      	mov	r5, r1
#ifdef LCD_4BIT_CONTROL
	GPIOA->ODR &= ~0x0F00;
 800430c:	4e1f      	ldr	r6, [pc, #124]	; (800438c <LCD_Send_Data+0x84>)
void LCD_Send_Data(LCD_I2C_HandleTypeDef *p_lcd, char data){
 800430e:	4607      	mov	r7, r0
	GPIOA->ODR &= ~0x0F00;
 8004310:	68f3      	ldr	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(data & 0xF0) << 4);
	GPIOB->ODR &= ~0xF000;
 8004312:	4c1f      	ldr	r4, [pc, #124]	; (8004390 <LCD_Send_Data+0x88>)
	GPIOA->ODR &= ~0x0F00;
 8004314:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004318:	60f3      	str	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(data & 0xF0) << 4);
 800431a:	68f2      	ldr	r2, [r6, #12]
 800431c:	010b      	lsls	r3, r1, #4
 800431e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004322:	4313      	orrs	r3, r2
 8004324:	60f3      	str	r3, [r6, #12]
	GPIOB->ODR &= ~0xF000;
 8004326:	68e3      	ldr	r3, [r4, #12]
	DELAY_US_Run(40);
	GPIOB->ODR &= ~(En << 12);
	DELAY_US_Run(40);

	GPIOA->ODR &= ~0x0F00;
	GPIOA->ODR |= ((uint16_t)(data & 0x0F) << 8);
 8004328:	022d      	lsls	r5, r5, #8
	GPIOB->ODR &= ~0xF000;
 800432a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800432e:	60e3      	str	r3, [r4, #12]
	GPIOB->ODR |= (SENDING_DATA_MASK | p_lcd->LCD_Backlight_Value) << 12;
 8004330:	78c2      	ldrb	r2, [r0, #3]
 8004332:	68e3      	ldr	r3, [r4, #12]
 8004334:	f042 0205 	orr.w	r2, r2, #5
 8004338:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	DELAY_US_Run(40);
 800433c:	2028      	movs	r0, #40	; 0x28
	GPIOB->ODR |= (SENDING_DATA_MASK | p_lcd->LCD_Backlight_Value) << 12;
 800433e:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 8004340:	f7ff fed4 	bl	80040ec <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 8004344:	68e3      	ldr	r3, [r4, #12]
	DELAY_US_Run(40);
 8004346:	2028      	movs	r0, #40	; 0x28
	GPIOB->ODR &= ~(En << 12);
 8004348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800434c:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 800434e:	f7ff fecd 	bl	80040ec <DELAY_US_Run>
	GPIOA->ODR &= ~0x0F00;
 8004352:	68f3      	ldr	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(data & 0x0F) << 8);
 8004354:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
	GPIOA->ODR &= ~0x0F00;
 8004358:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800435c:	60f3      	str	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(data & 0x0F) << 8);
 800435e:	68f3      	ldr	r3, [r6, #12]
	GPIOB->ODR &= ~0xF000;
	GPIOB->ODR |= (SENDING_DATA_MASK | p_lcd->LCD_Backlight_Value) << 12;
	DELAY_US_Run(40);
 8004360:	2028      	movs	r0, #40	; 0x28
	GPIOA->ODR |= ((uint16_t)(data & 0x0F) << 8);
 8004362:	431d      	orrs	r5, r3
 8004364:	60f5      	str	r5, [r6, #12]
	GPIOB->ODR &= ~0xF000;
 8004366:	68e3      	ldr	r3, [r4, #12]
 8004368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800436c:	60e3      	str	r3, [r4, #12]
	GPIOB->ODR |= (SENDING_DATA_MASK | p_lcd->LCD_Backlight_Value) << 12;
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	68e3      	ldr	r3, [r4, #12]
 8004372:	f042 0205 	orr.w	r2, r2, #5
 8004376:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800437a:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 800437c:	f7ff feb6 	bl	80040ec <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 8004380:	68e3      	ldr	r3, [r4, #12]
 8004382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004386:	60e3      	str	r3, [r4, #12]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En | Rs;
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value | Rs;

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
#endif
}
 8004388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800438a:	bf00      	nop
 800438c:	40010800 	.word	0x40010800
 8004390:	40010c00 	.word	0x40010c00

08004394 <LCD_Write>:
void LCD_Write(LCD_I2C_HandleTypeDef *p_lcd, const char *p_str, ...){
 8004394:	b40e      	push	{r1, r2, r3}
 8004396:	b5f0      	push	{r4, r5, r6, r7, lr}
	char t_stringArray[21] = {};
 8004398:	2400      	movs	r4, #0
void LCD_Write(LCD_I2C_HandleTypeDef *p_lcd, const char *p_str, ...){
 800439a:	b088      	sub	sp, #32
 800439c:	ae0d      	add	r6, sp, #52	; 0x34
 800439e:	f856 7b04 	ldr.w	r7, [r6], #4
	char t_stringArray[21] = {};
 80043a2:	2211      	movs	r2, #17
 80043a4:	4621      	mov	r1, r4
void LCD_Write(LCD_I2C_HandleTypeDef *p_lcd, const char *p_str, ...){
 80043a6:	4605      	mov	r5, r0
	char t_stringArray[21] = {};
 80043a8:	a803      	add	r0, sp, #12
 80043aa:	9402      	str	r4, [sp, #8]
 80043ac:	f000 f938 	bl	8004620 <memset>
	vsprintf(t_stringArray, p_str, t_args);
 80043b0:	4632      	mov	r2, r6
 80043b2:	4639      	mov	r1, r7
 80043b4:	a802      	add	r0, sp, #8
	va_start(t_args, p_str);
 80043b6:	9601      	str	r6, [sp, #4]
	vsprintf(t_stringArray, p_str, t_args);
 80043b8:	f000 fa44 	bl	8004844 <vsiprintf>
	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 80043bc:	ae02      	add	r6, sp, #8
 80043be:	a802      	add	r0, sp, #8
 80043c0:	f7fb fec4 	bl	800014c <strlen>
 80043c4:	42a0      	cmp	r0, r4
 80043c6:	d902      	bls.n	80043ce <LCD_Write+0x3a>
 80043c8:	782b      	ldrb	r3, [r5, #0]
 80043ca:	42a3      	cmp	r3, r4
 80043cc:	dc04      	bgt.n	80043d8 <LCD_Write+0x44>
}
 80043ce:	b008      	add	sp, #32
 80043d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80043d4:	b003      	add	sp, #12
 80043d6:	4770      	bx	lr
		LCD_Send_Data(p_lcd, t_stringArray[i]);
 80043d8:	4628      	mov	r0, r5
 80043da:	f816 1b01 	ldrb.w	r1, [r6], #1
 80043de:	f7ff ff93 	bl	8004308 <LCD_Send_Data>
	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 80043e2:	3401      	adds	r4, #1
 80043e4:	e7eb      	b.n	80043be <LCD_Write+0x2a>

080043e6 <LCD_Create_Char>:
	p_location <<= 3;
 80043e6:	00c9      	lsls	r1, r1, #3
 80043e8:	f001 0138 	and.w	r1, r1, #56	; 0x38
void LCD_Create_Char(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_location, uint8_t p_charMap[]){
 80043ec:	b570      	push	{r4, r5, r6, lr}
	LCD_Send_Command(p_lcd, LCD_SETCGRAMADDR | p_location);
 80043ee:	f041 0140 	orr.w	r1, r1, #64	; 0x40
void LCD_Create_Char(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_location, uint8_t p_charMap[]){
 80043f2:	4614      	mov	r4, r2
 80043f4:	4606      	mov	r6, r0
	LCD_Send_Command(p_lcd, LCD_SETCGRAMADDR | p_location);
 80043f6:	f7ff fec7 	bl	8004188 <LCD_Send_Command>
	for(int i = 0; i < 8; i++) LCD_Send_Data(p_lcd, p_charMap[i]);
 80043fa:	1e65      	subs	r5, r4, #1
 80043fc:	3407      	adds	r4, #7
 80043fe:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004402:	4630      	mov	r0, r6
 8004404:	f7ff ff80 	bl	8004308 <LCD_Send_Data>
 8004408:	42a5      	cmp	r5, r4
 800440a:	d1f8      	bne.n	80043fe <LCD_Create_Char+0x18>
}
 800440c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004410 <BUTTON_Handle>:
button_callback_function_t __BUTTON_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Releasing_Callback = NULL;
button_callback_function_t __BUTTON_Short_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Long_Pressing_Callback = NULL;

void BUTTON_Handle(BUTTON_HandleTypedef *ButtonX){
 8004410:	b510      	push	{r4, lr}
 8004412:	4604      	mov	r4, r0
	uint8_t state = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 8004414:	8a81      	ldrh	r1, [r0, #20]
 8004416:	6900      	ldr	r0, [r0, #16]
 8004418:	f7fe f92a 	bl	8002670 <HAL_GPIO_ReadPin>
	if(state != ButtonX->BTN_Filter){
 800441c:	78a3      	ldrb	r3, [r4, #2]
 800441e:	4283      	cmp	r3, r0
 8004420:	d005      	beq.n	800442e <BUTTON_Handle+0x1e>
		ButtonX->BTN_Filter = state;
		ButtonX->is_debouncing = 1;
 8004422:	2301      	movs	r3, #1
		ButtonX->BTN_Filter = state;
 8004424:	70a0      	strb	r0, [r4, #2]
		ButtonX->is_debouncing = 1;
 8004426:	70e3      	strb	r3, [r4, #3]
		ButtonX->time_debounce = HAL_GetTick();
 8004428:	f7fd fd0a 	bl	8001e40 <HAL_GetTick>
 800442c:	60a0      	str	r0, [r4, #8]
	}

	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->time_debounce >= 15)){
 800442e:	78e3      	ldrb	r3, [r4, #3]
 8004430:	b14b      	cbz	r3, 8004446 <BUTTON_Handle+0x36>
 8004432:	f7fd fd05 	bl	8001e40 <HAL_GetTick>
 8004436:	68a3      	ldr	r3, [r4, #8]
 8004438:	1ac0      	subs	r0, r0, r3
 800443a:	280e      	cmp	r0, #14
		ButtonX->BTN_Current = ButtonX->BTN_Filter;
 800443c:	bf81      	itttt	hi
 800443e:	78a3      	ldrbhi	r3, [r4, #2]
 8004440:	7023      	strbhi	r3, [r4, #0]
		ButtonX->is_debouncing = 0;
 8004442:	2300      	movhi	r3, #0
 8004444:	70e3      	strbhi	r3, [r4, #3]
	}

	if(ButtonX->BTN_Current != ButtonX->BTN_Last){
 8004446:	7823      	ldrb	r3, [r4, #0]
 8004448:	7862      	ldrb	r2, [r4, #1]
 800444a:	429a      	cmp	r2, r3
 800444c:	d00c      	beq.n	8004468 <BUTTON_Handle+0x58>
		if(ButtonX->BTN_Current == 0){
 800444e:	b9e3      	cbnz	r3, 800448a <BUTTON_Handle+0x7a>
			if(__BUTTON_Pressing_Callback != NULL){
 8004450:	4b18      	ldr	r3, [pc, #96]	; (80044b4 <BUTTON_Handle+0xa4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	b10b      	cbz	r3, 800445a <BUTTON_Handle+0x4a>
				__BUTTON_Pressing_Callback(ButtonX);
 8004456:	4620      	mov	r0, r4
 8004458:	4798      	blx	r3
			}
			ButtonX->is_press = 1;
 800445a:	2301      	movs	r3, #1
 800445c:	7123      	strb	r3, [r4, #4]
			ButtonX->time_start_press = HAL_GetTick();
 800445e:	f7fd fcef 	bl	8001e40 <HAL_GetTick>
 8004462:	60e0      	str	r0, [r4, #12]
			}
			if(__BUTTON_Releasing_Callback != NULL){
				__BUTTON_Releasing_Callback(ButtonX);
			}
		}
		ButtonX->BTN_Last = ButtonX->BTN_Current;
 8004464:	7823      	ldrb	r3, [r4, #0]
 8004466:	7063      	strb	r3, [r4, #1]
	}

	if(ButtonX->is_press && (HAL_GetTick() - ButtonX->time_start_press >= TIME_FOR_LONG_PRESSING)){
 8004468:	7923      	ldrb	r3, [r4, #4]
 800446a:	b16b      	cbz	r3, 8004488 <BUTTON_Handle+0x78>
 800446c:	f7fd fce8 	bl	8001e40 <HAL_GetTick>
 8004470:	68e3      	ldr	r3, [r4, #12]
 8004472:	1ac0      	subs	r0, r0, r3
 8004474:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8004478:	d306      	bcc.n	8004488 <BUTTON_Handle+0x78>
		if(__BUTTON_Long_Pressing_Callback != NULL){
 800447a:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <BUTTON_Handle+0xa8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	b10b      	cbz	r3, 8004484 <BUTTON_Handle+0x74>
			__BUTTON_Long_Pressing_Callback(ButtonX);
 8004480:	4620      	mov	r0, r4
 8004482:	4798      	blx	r3
		}
		ButtonX->is_press = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	7123      	strb	r3, [r4, #4]
	}
}
 8004488:	bd10      	pop	{r4, pc}
			ButtonX->is_press = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	7123      	strb	r3, [r4, #4]
			if(HAL_GetTick() - ButtonX->time_start_press <= 1000){
 800448e:	f7fd fcd7 	bl	8001e40 <HAL_GetTick>
 8004492:	68e3      	ldr	r3, [r4, #12]
 8004494:	1ac0      	subs	r0, r0, r3
 8004496:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800449a:	d804      	bhi.n	80044a6 <BUTTON_Handle+0x96>
				if(__BUTTON_Short_Pressing_Callback != NULL){
 800449c:	4b07      	ldr	r3, [pc, #28]	; (80044bc <BUTTON_Handle+0xac>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	b10b      	cbz	r3, 80044a6 <BUTTON_Handle+0x96>
					__BUTTON_Short_Pressing_Callback(ButtonX);
 80044a2:	4620      	mov	r0, r4
 80044a4:	4798      	blx	r3
			if(__BUTTON_Releasing_Callback != NULL){
 80044a6:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <BUTTON_Handle+0xb0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0da      	beq.n	8004464 <BUTTON_Handle+0x54>
				__BUTTON_Releasing_Callback(ButtonX);
 80044ae:	4620      	mov	r0, r4
 80044b0:	4798      	blx	r3
 80044b2:	e7d7      	b.n	8004464 <BUTTON_Handle+0x54>
 80044b4:	20000308 	.word	0x20000308
 80044b8:	20000304 	.word	0x20000304
 80044bc:	20000310 	.word	0x20000310
 80044c0:	2000030c 	.word	0x2000030c

080044c4 <BUTTON_Init>:

void BUTTON_Init(BUTTON_HandleTypedef *ButtonX, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
	ButtonX->GPIOx = GPIOx;
	ButtonX->GPIO_Pin = GPIO_Pin;
	ButtonX->BTN_Current = 1;
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <BUTTON_Init+0x10>)
	ButtonX->GPIOx = GPIOx;
 80044c6:	6101      	str	r1, [r0, #16]
	ButtonX->BTN_Current = 1;
 80044c8:	6003      	str	r3, [r0, #0]
	ButtonX->BTN_Last = 1;
	ButtonX->BTN_Filter = 1;
	ButtonX->is_debouncing = 0;
	ButtonX->is_press = 0;
 80044ca:	2300      	movs	r3, #0
	ButtonX->GPIO_Pin = GPIO_Pin;
 80044cc:	8282      	strh	r2, [r0, #20]
	ButtonX->is_press = 0;
 80044ce:	7103      	strb	r3, [r0, #4]
}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	00010101 	.word	0x00010101

080044d8 <BUTTON_Set_Callback_Function>:

void BUTTON_Set_Callback_Function(button_callback_function_t p_pressing_callback_function,
								button_callback_function_t p_releasing_callback_function,
								button_callback_function_t p_short_pressing_callback_function,
								button_callback_function_t p_long_pressing_callback_function){
 80044d8:	b510      	push	{r4, lr}
	__BUTTON_Pressing_Callback = p_pressing_callback_function;
 80044da:	4c04      	ldr	r4, [pc, #16]	; (80044ec <BUTTON_Set_Callback_Function+0x14>)
 80044dc:	6020      	str	r0, [r4, #0]
	__BUTTON_Releasing_Callback = p_releasing_callback_function;
 80044de:	4804      	ldr	r0, [pc, #16]	; (80044f0 <BUTTON_Set_Callback_Function+0x18>)
 80044e0:	6001      	str	r1, [r0, #0]
	__BUTTON_Short_Pressing_Callback = p_short_pressing_callback_function;
 80044e2:	4904      	ldr	r1, [pc, #16]	; (80044f4 <BUTTON_Set_Callback_Function+0x1c>)
 80044e4:	600a      	str	r2, [r1, #0]
	__BUTTON_Long_Pressing_Callback = p_long_pressing_callback_function;
 80044e6:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <BUTTON_Set_Callback_Function+0x20>)
 80044e8:	6013      	str	r3, [r2, #0]
}
 80044ea:	bd10      	pop	{r4, pc}
 80044ec:	20000308 	.word	0x20000308
 80044f0:	2000030c 	.word	0x2000030c
 80044f4:	20000310 	.word	0x20000310
 80044f8:	20000304 	.word	0x20000304

080044fc <FLASH_Erase>:
#include "flash.h"

void FLASH_Erase(uint32_t p_page){
 80044fc:	b510      	push	{r4, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	4604      	mov	r4, r0
	HAL_FLASH_Unlock();
 8004502:	f7fd fedf 	bl	80022c4 <HAL_FLASH_Unlock>
	eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
#endif

#ifdef __STM32F1xx_HAL_H
	eraseInit.Banks = 1;
 8004506:	2301      	movs	r3, #1
 8004508:	9303      	str	r3, [sp, #12]
	eraseInit.NbPages = 1;
 800450a:	9305      	str	r3, [sp, #20]
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800450c:	2300      	movs	r3, #0
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 800450e:	f504 3400 	add.w	r4, r4, #131072	; 0x20000
	eraseInit.NbPages = 1;
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
#endif

	HAL_FLASHEx_Erase(&eraseInit, &t_PageError);
 8004512:	a901      	add	r1, sp, #4
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 8004514:	02a4      	lsls	r4, r4, #10
	HAL_FLASHEx_Erase(&eraseInit, &t_PageError);
 8004516:	a802      	add	r0, sp, #8
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8004518:	9302      	str	r3, [sp, #8]
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 800451a:	9404      	str	r4, [sp, #16]
	HAL_FLASHEx_Erase(&eraseInit, &t_PageError);
 800451c:	f7fd ff7a 	bl	8002414 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8004520:	f7fd fee2 	bl	80022e8 <HAL_FLASH_Lock>
//	while(FLASH->CR & FLASH_SR_BSY);
//	FLASH->CR &= ~FLASH_CR_PER;
//	FLASH->CR &= ~FLASH_CR_STRT;
//
//	FLASH->CR |= FLASH_CR_LOCK;
}
 8004524:	b006      	add	sp, #24
 8004526:	bd10      	pop	{r4, pc}

08004528 <FLASH_Write>:

void FLASH_Write(uint32_t p_page, uint8_t *p_data, uint16_t p_len){
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	4605      	mov	r5, r0
 800452c:	460c      	mov	r4, r1
	FLASH_Erase(63);
 800452e:	203f      	movs	r0, #63	; 0x3f
#ifdef __STM32F4xx_HAL_H
	uint32_t t_add = SECTOR_7_ADD;
#endif
#ifdef __STM32F1xx_HAL_H
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 8004530:	f505 3500 	add.w	r5, r5, #131072	; 0x20000
void FLASH_Write(uint32_t p_page, uint8_t *p_data, uint16_t p_len){
 8004534:	4616      	mov	r6, r2
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 8004536:	02af      	lsls	r7, r5, #10
	FLASH_Erase(63);
 8004538:	f7ff ffe0 	bl	80044fc <FLASH_Erase>
#endif
#ifdef __STM32F0xx_HAL_H
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
#endif
	HAL_FLASH_Unlock();
	for(int i = 0; i < p_len; i += 2){
 800453c:	2500      	movs	r5, #0
	HAL_FLASH_Unlock();
 800453e:	f7fd fec1 	bl	80022c4 <HAL_FLASH_Unlock>
	for(int i = 0; i < p_len; i += 2){
 8004542:	3401      	adds	r4, #1
 8004544:	42ae      	cmp	r6, r5
 8004546:	dc03      	bgt.n	8004550 <FLASH_Write+0x28>
//	}
//	FLASH->CR |= FLASH_CR_PG;
//	for(int i = 0; i < p_len; i += 2){
//		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, t_add + i, p_data[i] | (uint16_t)((i+1 >= p_len) ? 0xFF : p_data[i+1]) << 8);
//	}
}
 8004548:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_FLASH_Lock();
 800454c:	f7fd becc 	b.w	80022e8 <HAL_FLASH_Lock>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, t_add + i, p_data[i] | ((uint16_t)((i+1 >= p_len) ? 0xFF : p_data[i+1]) << 8));
 8004550:	1c6b      	adds	r3, r5, #1
 8004552:	429e      	cmp	r6, r3
 8004554:	bfd4      	ite	le
 8004556:	f44f 437f 	movle.w	r3, #65280	; 0xff00
 800455a:	7823      	ldrbgt	r3, [r4, #0]
 800455c:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8004560:	bfc8      	it	gt
 8004562:	021b      	lslgt	r3, r3, #8
 8004564:	1979      	adds	r1, r7, r5
 8004566:	431a      	orrs	r2, r3
 8004568:	2001      	movs	r0, #1
 800456a:	2300      	movs	r3, #0
 800456c:	f7fd fef0 	bl	8002350 <HAL_FLASH_Program>
	for(int i = 0; i < p_len; i += 2){
 8004570:	3502      	adds	r5, #2
 8004572:	3402      	adds	r4, #2
 8004574:	e7e6      	b.n	8004544 <FLASH_Write+0x1c>

08004576 <FLASH_Read>:

void FLASH_Read(uint32_t add, uint8_t *p_data, uint16_t p_len){
	for(int i = 0; i < p_len; i += 2){
 8004576:	2300      	movs	r3, #0
void FLASH_Read(uint32_t add, uint8_t *p_data, uint16_t p_len){
 8004578:	b530      	push	{r4, r5, lr}
		uint16_t t_data = *(volatile uint16_t *)(add + i);
		p_data[i] = t_data;
		p_data[i+1] = t_data >> 8;
 800457a:	1c4d      	adds	r5, r1, #1
	for(int i = 0; i < p_len; i += 2){
 800457c:	429a      	cmp	r2, r3
 800457e:	dc00      	bgt.n	8004582 <FLASH_Read+0xc>
	}
}
 8004580:	bd30      	pop	{r4, r5, pc}
		uint16_t t_data = *(volatile uint16_t *)(add + i);
 8004582:	5ac4      	ldrh	r4, [r0, r3]
 8004584:	b2a4      	uxth	r4, r4
		p_data[i] = t_data;
 8004586:	54cc      	strb	r4, [r1, r3]
		p_data[i+1] = t_data >> 8;
 8004588:	0a24      	lsrs	r4, r4, #8
 800458a:	54ec      	strb	r4, [r5, r3]
	for(int i = 0; i < p_len; i += 2){
 800458c:	3302      	adds	r3, #2
 800458e:	e7f5      	b.n	800457c <FLASH_Read+0x6>

08004590 <__errno>:
 8004590:	4b01      	ldr	r3, [pc, #4]	; (8004598 <__errno+0x8>)
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000040 	.word	0x20000040

0800459c <__libc_init_array>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	2600      	movs	r6, #0
 80045a0:	4d0c      	ldr	r5, [pc, #48]	; (80045d4 <__libc_init_array+0x38>)
 80045a2:	4c0d      	ldr	r4, [pc, #52]	; (80045d8 <__libc_init_array+0x3c>)
 80045a4:	1b64      	subs	r4, r4, r5
 80045a6:	10a4      	asrs	r4, r4, #2
 80045a8:	42a6      	cmp	r6, r4
 80045aa:	d109      	bne.n	80045c0 <__libc_init_array+0x24>
 80045ac:	f000 fcb4 	bl	8004f18 <_init>
 80045b0:	2600      	movs	r6, #0
 80045b2:	4d0a      	ldr	r5, [pc, #40]	; (80045dc <__libc_init_array+0x40>)
 80045b4:	4c0a      	ldr	r4, [pc, #40]	; (80045e0 <__libc_init_array+0x44>)
 80045b6:	1b64      	subs	r4, r4, r5
 80045b8:	10a4      	asrs	r4, r4, #2
 80045ba:	42a6      	cmp	r6, r4
 80045bc:	d105      	bne.n	80045ca <__libc_init_array+0x2e>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c4:	4798      	blx	r3
 80045c6:	3601      	adds	r6, #1
 80045c8:	e7ee      	b.n	80045a8 <__libc_init_array+0xc>
 80045ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ce:	4798      	blx	r3
 80045d0:	3601      	adds	r6, #1
 80045d2:	e7f2      	b.n	80045ba <__libc_init_array+0x1e>
 80045d4:	08005154 	.word	0x08005154
 80045d8:	08005154 	.word	0x08005154
 80045dc:	08005154 	.word	0x08005154
 80045e0:	08005158 	.word	0x08005158

080045e4 <malloc>:
 80045e4:	4b02      	ldr	r3, [pc, #8]	; (80045f0 <malloc+0xc>)
 80045e6:	4601      	mov	r1, r0
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	f000 b889 	b.w	8004700 <_malloc_r>
 80045ee:	bf00      	nop
 80045f0:	20000040 	.word	0x20000040

080045f4 <free>:
 80045f4:	4b02      	ldr	r3, [pc, #8]	; (8004600 <free+0xc>)
 80045f6:	4601      	mov	r1, r0
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	f000 b819 	b.w	8004630 <_free_r>
 80045fe:	bf00      	nop
 8004600:	20000040 	.word	0x20000040

08004604 <memcpy>:
 8004604:	440a      	add	r2, r1
 8004606:	4291      	cmp	r1, r2
 8004608:	f100 33ff 	add.w	r3, r0, #4294967295
 800460c:	d100      	bne.n	8004610 <memcpy+0xc>
 800460e:	4770      	bx	lr
 8004610:	b510      	push	{r4, lr}
 8004612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004616:	4291      	cmp	r1, r2
 8004618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800461c:	d1f9      	bne.n	8004612 <memcpy+0xe>
 800461e:	bd10      	pop	{r4, pc}

08004620 <memset>:
 8004620:	4603      	mov	r3, r0
 8004622:	4402      	add	r2, r0
 8004624:	4293      	cmp	r3, r2
 8004626:	d100      	bne.n	800462a <memset+0xa>
 8004628:	4770      	bx	lr
 800462a:	f803 1b01 	strb.w	r1, [r3], #1
 800462e:	e7f9      	b.n	8004624 <memset+0x4>

08004630 <_free_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4605      	mov	r5, r0
 8004634:	2900      	cmp	r1, #0
 8004636:	d040      	beq.n	80046ba <_free_r+0x8a>
 8004638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800463c:	1f0c      	subs	r4, r1, #4
 800463e:	2b00      	cmp	r3, #0
 8004640:	bfb8      	it	lt
 8004642:	18e4      	addlt	r4, r4, r3
 8004644:	f000 f908 	bl	8004858 <__malloc_lock>
 8004648:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <_free_r+0x8c>)
 800464a:	6813      	ldr	r3, [r2, #0]
 800464c:	b933      	cbnz	r3, 800465c <_free_r+0x2c>
 800464e:	6063      	str	r3, [r4, #4]
 8004650:	6014      	str	r4, [r2, #0]
 8004652:	4628      	mov	r0, r5
 8004654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004658:	f000 b904 	b.w	8004864 <__malloc_unlock>
 800465c:	42a3      	cmp	r3, r4
 800465e:	d908      	bls.n	8004672 <_free_r+0x42>
 8004660:	6820      	ldr	r0, [r4, #0]
 8004662:	1821      	adds	r1, r4, r0
 8004664:	428b      	cmp	r3, r1
 8004666:	bf01      	itttt	eq
 8004668:	6819      	ldreq	r1, [r3, #0]
 800466a:	685b      	ldreq	r3, [r3, #4]
 800466c:	1809      	addeq	r1, r1, r0
 800466e:	6021      	streq	r1, [r4, #0]
 8004670:	e7ed      	b.n	800464e <_free_r+0x1e>
 8004672:	461a      	mov	r2, r3
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	b10b      	cbz	r3, 800467c <_free_r+0x4c>
 8004678:	42a3      	cmp	r3, r4
 800467a:	d9fa      	bls.n	8004672 <_free_r+0x42>
 800467c:	6811      	ldr	r1, [r2, #0]
 800467e:	1850      	adds	r0, r2, r1
 8004680:	42a0      	cmp	r0, r4
 8004682:	d10b      	bne.n	800469c <_free_r+0x6c>
 8004684:	6820      	ldr	r0, [r4, #0]
 8004686:	4401      	add	r1, r0
 8004688:	1850      	adds	r0, r2, r1
 800468a:	4283      	cmp	r3, r0
 800468c:	6011      	str	r1, [r2, #0]
 800468e:	d1e0      	bne.n	8004652 <_free_r+0x22>
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	4401      	add	r1, r0
 8004696:	6011      	str	r1, [r2, #0]
 8004698:	6053      	str	r3, [r2, #4]
 800469a:	e7da      	b.n	8004652 <_free_r+0x22>
 800469c:	d902      	bls.n	80046a4 <_free_r+0x74>
 800469e:	230c      	movs	r3, #12
 80046a0:	602b      	str	r3, [r5, #0]
 80046a2:	e7d6      	b.n	8004652 <_free_r+0x22>
 80046a4:	6820      	ldr	r0, [r4, #0]
 80046a6:	1821      	adds	r1, r4, r0
 80046a8:	428b      	cmp	r3, r1
 80046aa:	bf01      	itttt	eq
 80046ac:	6819      	ldreq	r1, [r3, #0]
 80046ae:	685b      	ldreq	r3, [r3, #4]
 80046b0:	1809      	addeq	r1, r1, r0
 80046b2:	6021      	streq	r1, [r4, #0]
 80046b4:	6063      	str	r3, [r4, #4]
 80046b6:	6054      	str	r4, [r2, #4]
 80046b8:	e7cb      	b.n	8004652 <_free_r+0x22>
 80046ba:	bd38      	pop	{r3, r4, r5, pc}
 80046bc:	20000314 	.word	0x20000314

080046c0 <sbrk_aligned>:
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	4e0e      	ldr	r6, [pc, #56]	; (80046fc <sbrk_aligned+0x3c>)
 80046c4:	460c      	mov	r4, r1
 80046c6:	6831      	ldr	r1, [r6, #0]
 80046c8:	4605      	mov	r5, r0
 80046ca:	b911      	cbnz	r1, 80046d2 <sbrk_aligned+0x12>
 80046cc:	f000 f88c 	bl	80047e8 <_sbrk_r>
 80046d0:	6030      	str	r0, [r6, #0]
 80046d2:	4621      	mov	r1, r4
 80046d4:	4628      	mov	r0, r5
 80046d6:	f000 f887 	bl	80047e8 <_sbrk_r>
 80046da:	1c43      	adds	r3, r0, #1
 80046dc:	d00a      	beq.n	80046f4 <sbrk_aligned+0x34>
 80046de:	1cc4      	adds	r4, r0, #3
 80046e0:	f024 0403 	bic.w	r4, r4, #3
 80046e4:	42a0      	cmp	r0, r4
 80046e6:	d007      	beq.n	80046f8 <sbrk_aligned+0x38>
 80046e8:	1a21      	subs	r1, r4, r0
 80046ea:	4628      	mov	r0, r5
 80046ec:	f000 f87c 	bl	80047e8 <_sbrk_r>
 80046f0:	3001      	adds	r0, #1
 80046f2:	d101      	bne.n	80046f8 <sbrk_aligned+0x38>
 80046f4:	f04f 34ff 	mov.w	r4, #4294967295
 80046f8:	4620      	mov	r0, r4
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	20000318 	.word	0x20000318

08004700 <_malloc_r>:
 8004700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004704:	1ccd      	adds	r5, r1, #3
 8004706:	f025 0503 	bic.w	r5, r5, #3
 800470a:	3508      	adds	r5, #8
 800470c:	2d0c      	cmp	r5, #12
 800470e:	bf38      	it	cc
 8004710:	250c      	movcc	r5, #12
 8004712:	2d00      	cmp	r5, #0
 8004714:	4607      	mov	r7, r0
 8004716:	db01      	blt.n	800471c <_malloc_r+0x1c>
 8004718:	42a9      	cmp	r1, r5
 800471a:	d905      	bls.n	8004728 <_malloc_r+0x28>
 800471c:	230c      	movs	r3, #12
 800471e:	2600      	movs	r6, #0
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	4630      	mov	r0, r6
 8004724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004728:	4e2e      	ldr	r6, [pc, #184]	; (80047e4 <_malloc_r+0xe4>)
 800472a:	f000 f895 	bl	8004858 <__malloc_lock>
 800472e:	6833      	ldr	r3, [r6, #0]
 8004730:	461c      	mov	r4, r3
 8004732:	bb34      	cbnz	r4, 8004782 <_malloc_r+0x82>
 8004734:	4629      	mov	r1, r5
 8004736:	4638      	mov	r0, r7
 8004738:	f7ff ffc2 	bl	80046c0 <sbrk_aligned>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	4604      	mov	r4, r0
 8004740:	d14d      	bne.n	80047de <_malloc_r+0xde>
 8004742:	6834      	ldr	r4, [r6, #0]
 8004744:	4626      	mov	r6, r4
 8004746:	2e00      	cmp	r6, #0
 8004748:	d140      	bne.n	80047cc <_malloc_r+0xcc>
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	4631      	mov	r1, r6
 800474e:	4638      	mov	r0, r7
 8004750:	eb04 0803 	add.w	r8, r4, r3
 8004754:	f000 f848 	bl	80047e8 <_sbrk_r>
 8004758:	4580      	cmp	r8, r0
 800475a:	d13a      	bne.n	80047d2 <_malloc_r+0xd2>
 800475c:	6821      	ldr	r1, [r4, #0]
 800475e:	3503      	adds	r5, #3
 8004760:	1a6d      	subs	r5, r5, r1
 8004762:	f025 0503 	bic.w	r5, r5, #3
 8004766:	3508      	adds	r5, #8
 8004768:	2d0c      	cmp	r5, #12
 800476a:	bf38      	it	cc
 800476c:	250c      	movcc	r5, #12
 800476e:	4638      	mov	r0, r7
 8004770:	4629      	mov	r1, r5
 8004772:	f7ff ffa5 	bl	80046c0 <sbrk_aligned>
 8004776:	3001      	adds	r0, #1
 8004778:	d02b      	beq.n	80047d2 <_malloc_r+0xd2>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	442b      	add	r3, r5
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	e00e      	b.n	80047a0 <_malloc_r+0xa0>
 8004782:	6822      	ldr	r2, [r4, #0]
 8004784:	1b52      	subs	r2, r2, r5
 8004786:	d41e      	bmi.n	80047c6 <_malloc_r+0xc6>
 8004788:	2a0b      	cmp	r2, #11
 800478a:	d916      	bls.n	80047ba <_malloc_r+0xba>
 800478c:	1961      	adds	r1, r4, r5
 800478e:	42a3      	cmp	r3, r4
 8004790:	6025      	str	r5, [r4, #0]
 8004792:	bf18      	it	ne
 8004794:	6059      	strne	r1, [r3, #4]
 8004796:	6863      	ldr	r3, [r4, #4]
 8004798:	bf08      	it	eq
 800479a:	6031      	streq	r1, [r6, #0]
 800479c:	5162      	str	r2, [r4, r5]
 800479e:	604b      	str	r3, [r1, #4]
 80047a0:	4638      	mov	r0, r7
 80047a2:	f104 060b 	add.w	r6, r4, #11
 80047a6:	f000 f85d 	bl	8004864 <__malloc_unlock>
 80047aa:	f026 0607 	bic.w	r6, r6, #7
 80047ae:	1d23      	adds	r3, r4, #4
 80047b0:	1af2      	subs	r2, r6, r3
 80047b2:	d0b6      	beq.n	8004722 <_malloc_r+0x22>
 80047b4:	1b9b      	subs	r3, r3, r6
 80047b6:	50a3      	str	r3, [r4, r2]
 80047b8:	e7b3      	b.n	8004722 <_malloc_r+0x22>
 80047ba:	6862      	ldr	r2, [r4, #4]
 80047bc:	42a3      	cmp	r3, r4
 80047be:	bf0c      	ite	eq
 80047c0:	6032      	streq	r2, [r6, #0]
 80047c2:	605a      	strne	r2, [r3, #4]
 80047c4:	e7ec      	b.n	80047a0 <_malloc_r+0xa0>
 80047c6:	4623      	mov	r3, r4
 80047c8:	6864      	ldr	r4, [r4, #4]
 80047ca:	e7b2      	b.n	8004732 <_malloc_r+0x32>
 80047cc:	4634      	mov	r4, r6
 80047ce:	6876      	ldr	r6, [r6, #4]
 80047d0:	e7b9      	b.n	8004746 <_malloc_r+0x46>
 80047d2:	230c      	movs	r3, #12
 80047d4:	4638      	mov	r0, r7
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	f000 f844 	bl	8004864 <__malloc_unlock>
 80047dc:	e7a1      	b.n	8004722 <_malloc_r+0x22>
 80047de:	6025      	str	r5, [r4, #0]
 80047e0:	e7de      	b.n	80047a0 <_malloc_r+0xa0>
 80047e2:	bf00      	nop
 80047e4:	20000314 	.word	0x20000314

080047e8 <_sbrk_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	2300      	movs	r3, #0
 80047ec:	4d05      	ldr	r5, [pc, #20]	; (8004804 <_sbrk_r+0x1c>)
 80047ee:	4604      	mov	r4, r0
 80047f0:	4608      	mov	r0, r1
 80047f2:	602b      	str	r3, [r5, #0]
 80047f4:	f7fd fa9a 	bl	8001d2c <_sbrk>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d102      	bne.n	8004802 <_sbrk_r+0x1a>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	b103      	cbz	r3, 8004802 <_sbrk_r+0x1a>
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	2000031c 	.word	0x2000031c

08004808 <strcpy>:
 8004808:	4603      	mov	r3, r0
 800480a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800480e:	f803 2b01 	strb.w	r2, [r3], #1
 8004812:	2a00      	cmp	r2, #0
 8004814:	d1f9      	bne.n	800480a <strcpy+0x2>
 8004816:	4770      	bx	lr

08004818 <_vsiprintf_r>:
 8004818:	b500      	push	{lr}
 800481a:	b09b      	sub	sp, #108	; 0x6c
 800481c:	9100      	str	r1, [sp, #0]
 800481e:	9104      	str	r1, [sp, #16]
 8004820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004824:	9105      	str	r1, [sp, #20]
 8004826:	9102      	str	r1, [sp, #8]
 8004828:	4905      	ldr	r1, [pc, #20]	; (8004840 <_vsiprintf_r+0x28>)
 800482a:	9103      	str	r1, [sp, #12]
 800482c:	4669      	mov	r1, sp
 800482e:	f000 f87b 	bl	8004928 <_svfiprintf_r>
 8004832:	2200      	movs	r2, #0
 8004834:	9b00      	ldr	r3, [sp, #0]
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	b01b      	add	sp, #108	; 0x6c
 800483a:	f85d fb04 	ldr.w	pc, [sp], #4
 800483e:	bf00      	nop
 8004840:	ffff0208 	.word	0xffff0208

08004844 <vsiprintf>:
 8004844:	4613      	mov	r3, r2
 8004846:	460a      	mov	r2, r1
 8004848:	4601      	mov	r1, r0
 800484a:	4802      	ldr	r0, [pc, #8]	; (8004854 <vsiprintf+0x10>)
 800484c:	6800      	ldr	r0, [r0, #0]
 800484e:	f7ff bfe3 	b.w	8004818 <_vsiprintf_r>
 8004852:	bf00      	nop
 8004854:	20000040 	.word	0x20000040

08004858 <__malloc_lock>:
 8004858:	4801      	ldr	r0, [pc, #4]	; (8004860 <__malloc_lock+0x8>)
 800485a:	f000 bafb 	b.w	8004e54 <__retarget_lock_acquire_recursive>
 800485e:	bf00      	nop
 8004860:	20000320 	.word	0x20000320

08004864 <__malloc_unlock>:
 8004864:	4801      	ldr	r0, [pc, #4]	; (800486c <__malloc_unlock+0x8>)
 8004866:	f000 baf6 	b.w	8004e56 <__retarget_lock_release_recursive>
 800486a:	bf00      	nop
 800486c:	20000320 	.word	0x20000320

08004870 <__ssputs_r>:
 8004870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004874:	688e      	ldr	r6, [r1, #8]
 8004876:	4682      	mov	sl, r0
 8004878:	429e      	cmp	r6, r3
 800487a:	460c      	mov	r4, r1
 800487c:	4690      	mov	r8, r2
 800487e:	461f      	mov	r7, r3
 8004880:	d838      	bhi.n	80048f4 <__ssputs_r+0x84>
 8004882:	898a      	ldrh	r2, [r1, #12]
 8004884:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004888:	d032      	beq.n	80048f0 <__ssputs_r+0x80>
 800488a:	6825      	ldr	r5, [r4, #0]
 800488c:	6909      	ldr	r1, [r1, #16]
 800488e:	3301      	adds	r3, #1
 8004890:	eba5 0901 	sub.w	r9, r5, r1
 8004894:	6965      	ldr	r5, [r4, #20]
 8004896:	444b      	add	r3, r9
 8004898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800489c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048a0:	106d      	asrs	r5, r5, #1
 80048a2:	429d      	cmp	r5, r3
 80048a4:	bf38      	it	cc
 80048a6:	461d      	movcc	r5, r3
 80048a8:	0553      	lsls	r3, r2, #21
 80048aa:	d531      	bpl.n	8004910 <__ssputs_r+0xa0>
 80048ac:	4629      	mov	r1, r5
 80048ae:	f7ff ff27 	bl	8004700 <_malloc_r>
 80048b2:	4606      	mov	r6, r0
 80048b4:	b950      	cbnz	r0, 80048cc <__ssputs_r+0x5c>
 80048b6:	230c      	movs	r3, #12
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	f8ca 3000 	str.w	r3, [sl]
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048c6:	81a3      	strh	r3, [r4, #12]
 80048c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048cc:	464a      	mov	r2, r9
 80048ce:	6921      	ldr	r1, [r4, #16]
 80048d0:	f7ff fe98 	bl	8004604 <memcpy>
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048de:	81a3      	strh	r3, [r4, #12]
 80048e0:	6126      	str	r6, [r4, #16]
 80048e2:	444e      	add	r6, r9
 80048e4:	6026      	str	r6, [r4, #0]
 80048e6:	463e      	mov	r6, r7
 80048e8:	6165      	str	r5, [r4, #20]
 80048ea:	eba5 0509 	sub.w	r5, r5, r9
 80048ee:	60a5      	str	r5, [r4, #8]
 80048f0:	42be      	cmp	r6, r7
 80048f2:	d900      	bls.n	80048f6 <__ssputs_r+0x86>
 80048f4:	463e      	mov	r6, r7
 80048f6:	4632      	mov	r2, r6
 80048f8:	4641      	mov	r1, r8
 80048fa:	6820      	ldr	r0, [r4, #0]
 80048fc:	f000 faba 	bl	8004e74 <memmove>
 8004900:	68a3      	ldr	r3, [r4, #8]
 8004902:	2000      	movs	r0, #0
 8004904:	1b9b      	subs	r3, r3, r6
 8004906:	60a3      	str	r3, [r4, #8]
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	4433      	add	r3, r6
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	e7db      	b.n	80048c8 <__ssputs_r+0x58>
 8004910:	462a      	mov	r2, r5
 8004912:	f000 fac9 	bl	8004ea8 <_realloc_r>
 8004916:	4606      	mov	r6, r0
 8004918:	2800      	cmp	r0, #0
 800491a:	d1e1      	bne.n	80048e0 <__ssputs_r+0x70>
 800491c:	4650      	mov	r0, sl
 800491e:	6921      	ldr	r1, [r4, #16]
 8004920:	f7ff fe86 	bl	8004630 <_free_r>
 8004924:	e7c7      	b.n	80048b6 <__ssputs_r+0x46>
	...

08004928 <_svfiprintf_r>:
 8004928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492c:	4698      	mov	r8, r3
 800492e:	898b      	ldrh	r3, [r1, #12]
 8004930:	4607      	mov	r7, r0
 8004932:	061b      	lsls	r3, r3, #24
 8004934:	460d      	mov	r5, r1
 8004936:	4614      	mov	r4, r2
 8004938:	b09d      	sub	sp, #116	; 0x74
 800493a:	d50e      	bpl.n	800495a <_svfiprintf_r+0x32>
 800493c:	690b      	ldr	r3, [r1, #16]
 800493e:	b963      	cbnz	r3, 800495a <_svfiprintf_r+0x32>
 8004940:	2140      	movs	r1, #64	; 0x40
 8004942:	f7ff fedd 	bl	8004700 <_malloc_r>
 8004946:	6028      	str	r0, [r5, #0]
 8004948:	6128      	str	r0, [r5, #16]
 800494a:	b920      	cbnz	r0, 8004956 <_svfiprintf_r+0x2e>
 800494c:	230c      	movs	r3, #12
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	f04f 30ff 	mov.w	r0, #4294967295
 8004954:	e0d1      	b.n	8004afa <_svfiprintf_r+0x1d2>
 8004956:	2340      	movs	r3, #64	; 0x40
 8004958:	616b      	str	r3, [r5, #20]
 800495a:	2300      	movs	r3, #0
 800495c:	9309      	str	r3, [sp, #36]	; 0x24
 800495e:	2320      	movs	r3, #32
 8004960:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004964:	2330      	movs	r3, #48	; 0x30
 8004966:	f04f 0901 	mov.w	r9, #1
 800496a:	f8cd 800c 	str.w	r8, [sp, #12]
 800496e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004b14 <_svfiprintf_r+0x1ec>
 8004972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004976:	4623      	mov	r3, r4
 8004978:	469a      	mov	sl, r3
 800497a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800497e:	b10a      	cbz	r2, 8004984 <_svfiprintf_r+0x5c>
 8004980:	2a25      	cmp	r2, #37	; 0x25
 8004982:	d1f9      	bne.n	8004978 <_svfiprintf_r+0x50>
 8004984:	ebba 0b04 	subs.w	fp, sl, r4
 8004988:	d00b      	beq.n	80049a2 <_svfiprintf_r+0x7a>
 800498a:	465b      	mov	r3, fp
 800498c:	4622      	mov	r2, r4
 800498e:	4629      	mov	r1, r5
 8004990:	4638      	mov	r0, r7
 8004992:	f7ff ff6d 	bl	8004870 <__ssputs_r>
 8004996:	3001      	adds	r0, #1
 8004998:	f000 80aa 	beq.w	8004af0 <_svfiprintf_r+0x1c8>
 800499c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800499e:	445a      	add	r2, fp
 80049a0:	9209      	str	r2, [sp, #36]	; 0x24
 80049a2:	f89a 3000 	ldrb.w	r3, [sl]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 80a2 	beq.w	8004af0 <_svfiprintf_r+0x1c8>
 80049ac:	2300      	movs	r3, #0
 80049ae:	f04f 32ff 	mov.w	r2, #4294967295
 80049b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049b6:	f10a 0a01 	add.w	sl, sl, #1
 80049ba:	9304      	str	r3, [sp, #16]
 80049bc:	9307      	str	r3, [sp, #28]
 80049be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049c2:	931a      	str	r3, [sp, #104]	; 0x68
 80049c4:	4654      	mov	r4, sl
 80049c6:	2205      	movs	r2, #5
 80049c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049cc:	4851      	ldr	r0, [pc, #324]	; (8004b14 <_svfiprintf_r+0x1ec>)
 80049ce:	f000 fa43 	bl	8004e58 <memchr>
 80049d2:	9a04      	ldr	r2, [sp, #16]
 80049d4:	b9d8      	cbnz	r0, 8004a0e <_svfiprintf_r+0xe6>
 80049d6:	06d0      	lsls	r0, r2, #27
 80049d8:	bf44      	itt	mi
 80049da:	2320      	movmi	r3, #32
 80049dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049e0:	0711      	lsls	r1, r2, #28
 80049e2:	bf44      	itt	mi
 80049e4:	232b      	movmi	r3, #43	; 0x2b
 80049e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049ea:	f89a 3000 	ldrb.w	r3, [sl]
 80049ee:	2b2a      	cmp	r3, #42	; 0x2a
 80049f0:	d015      	beq.n	8004a1e <_svfiprintf_r+0xf6>
 80049f2:	4654      	mov	r4, sl
 80049f4:	2000      	movs	r0, #0
 80049f6:	f04f 0c0a 	mov.w	ip, #10
 80049fa:	9a07      	ldr	r2, [sp, #28]
 80049fc:	4621      	mov	r1, r4
 80049fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a02:	3b30      	subs	r3, #48	; 0x30
 8004a04:	2b09      	cmp	r3, #9
 8004a06:	d94e      	bls.n	8004aa6 <_svfiprintf_r+0x17e>
 8004a08:	b1b0      	cbz	r0, 8004a38 <_svfiprintf_r+0x110>
 8004a0a:	9207      	str	r2, [sp, #28]
 8004a0c:	e014      	b.n	8004a38 <_svfiprintf_r+0x110>
 8004a0e:	eba0 0308 	sub.w	r3, r0, r8
 8004a12:	fa09 f303 	lsl.w	r3, r9, r3
 8004a16:	4313      	orrs	r3, r2
 8004a18:	46a2      	mov	sl, r4
 8004a1a:	9304      	str	r3, [sp, #16]
 8004a1c:	e7d2      	b.n	80049c4 <_svfiprintf_r+0x9c>
 8004a1e:	9b03      	ldr	r3, [sp, #12]
 8004a20:	1d19      	adds	r1, r3, #4
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	9103      	str	r1, [sp, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bfbb      	ittet	lt
 8004a2a:	425b      	neglt	r3, r3
 8004a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a30:	9307      	strge	r3, [sp, #28]
 8004a32:	9307      	strlt	r3, [sp, #28]
 8004a34:	bfb8      	it	lt
 8004a36:	9204      	strlt	r2, [sp, #16]
 8004a38:	7823      	ldrb	r3, [r4, #0]
 8004a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a3c:	d10c      	bne.n	8004a58 <_svfiprintf_r+0x130>
 8004a3e:	7863      	ldrb	r3, [r4, #1]
 8004a40:	2b2a      	cmp	r3, #42	; 0x2a
 8004a42:	d135      	bne.n	8004ab0 <_svfiprintf_r+0x188>
 8004a44:	9b03      	ldr	r3, [sp, #12]
 8004a46:	3402      	adds	r4, #2
 8004a48:	1d1a      	adds	r2, r3, #4
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	9203      	str	r2, [sp, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bfb8      	it	lt
 8004a52:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a56:	9305      	str	r3, [sp, #20]
 8004a58:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004b18 <_svfiprintf_r+0x1f0>
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	4650      	mov	r0, sl
 8004a60:	7821      	ldrb	r1, [r4, #0]
 8004a62:	f000 f9f9 	bl	8004e58 <memchr>
 8004a66:	b140      	cbz	r0, 8004a7a <_svfiprintf_r+0x152>
 8004a68:	2340      	movs	r3, #64	; 0x40
 8004a6a:	eba0 000a 	sub.w	r0, r0, sl
 8004a6e:	fa03 f000 	lsl.w	r0, r3, r0
 8004a72:	9b04      	ldr	r3, [sp, #16]
 8004a74:	3401      	adds	r4, #1
 8004a76:	4303      	orrs	r3, r0
 8004a78:	9304      	str	r3, [sp, #16]
 8004a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a7e:	2206      	movs	r2, #6
 8004a80:	4826      	ldr	r0, [pc, #152]	; (8004b1c <_svfiprintf_r+0x1f4>)
 8004a82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a86:	f000 f9e7 	bl	8004e58 <memchr>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d038      	beq.n	8004b00 <_svfiprintf_r+0x1d8>
 8004a8e:	4b24      	ldr	r3, [pc, #144]	; (8004b20 <_svfiprintf_r+0x1f8>)
 8004a90:	bb1b      	cbnz	r3, 8004ada <_svfiprintf_r+0x1b2>
 8004a92:	9b03      	ldr	r3, [sp, #12]
 8004a94:	3307      	adds	r3, #7
 8004a96:	f023 0307 	bic.w	r3, r3, #7
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	9303      	str	r3, [sp, #12]
 8004a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aa0:	4433      	add	r3, r6
 8004aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8004aa4:	e767      	b.n	8004976 <_svfiprintf_r+0x4e>
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004aae:	e7a5      	b.n	80049fc <_svfiprintf_r+0xd4>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f04f 0c0a 	mov.w	ip, #10
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	3401      	adds	r4, #1
 8004aba:	9305      	str	r3, [sp, #20]
 8004abc:	4620      	mov	r0, r4
 8004abe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ac2:	3a30      	subs	r2, #48	; 0x30
 8004ac4:	2a09      	cmp	r2, #9
 8004ac6:	d903      	bls.n	8004ad0 <_svfiprintf_r+0x1a8>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0c5      	beq.n	8004a58 <_svfiprintf_r+0x130>
 8004acc:	9105      	str	r1, [sp, #20]
 8004ace:	e7c3      	b.n	8004a58 <_svfiprintf_r+0x130>
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ad8:	e7f0      	b.n	8004abc <_svfiprintf_r+0x194>
 8004ada:	ab03      	add	r3, sp, #12
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	462a      	mov	r2, r5
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <_svfiprintf_r+0x1fc>)
 8004ae4:	a904      	add	r1, sp, #16
 8004ae6:	f3af 8000 	nop.w
 8004aea:	1c42      	adds	r2, r0, #1
 8004aec:	4606      	mov	r6, r0
 8004aee:	d1d6      	bne.n	8004a9e <_svfiprintf_r+0x176>
 8004af0:	89ab      	ldrh	r3, [r5, #12]
 8004af2:	065b      	lsls	r3, r3, #25
 8004af4:	f53f af2c 	bmi.w	8004950 <_svfiprintf_r+0x28>
 8004af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004afa:	b01d      	add	sp, #116	; 0x74
 8004afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b00:	ab03      	add	r3, sp, #12
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	462a      	mov	r2, r5
 8004b06:	4638      	mov	r0, r7
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <_svfiprintf_r+0x1fc>)
 8004b0a:	a904      	add	r1, sp, #16
 8004b0c:	f000 f87c 	bl	8004c08 <_printf_i>
 8004b10:	e7eb      	b.n	8004aea <_svfiprintf_r+0x1c2>
 8004b12:	bf00      	nop
 8004b14:	0800511e 	.word	0x0800511e
 8004b18:	08005124 	.word	0x08005124
 8004b1c:	08005128 	.word	0x08005128
 8004b20:	00000000 	.word	0x00000000
 8004b24:	08004871 	.word	0x08004871

08004b28 <_printf_common>:
 8004b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b2c:	4616      	mov	r6, r2
 8004b2e:	4699      	mov	r9, r3
 8004b30:	688a      	ldr	r2, [r1, #8]
 8004b32:	690b      	ldr	r3, [r1, #16]
 8004b34:	4607      	mov	r7, r0
 8004b36:	4293      	cmp	r3, r2
 8004b38:	bfb8      	it	lt
 8004b3a:	4613      	movlt	r3, r2
 8004b3c:	6033      	str	r3, [r6, #0]
 8004b3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b42:	460c      	mov	r4, r1
 8004b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b48:	b10a      	cbz	r2, 8004b4e <_printf_common+0x26>
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	6033      	str	r3, [r6, #0]
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	0699      	lsls	r1, r3, #26
 8004b52:	bf42      	ittt	mi
 8004b54:	6833      	ldrmi	r3, [r6, #0]
 8004b56:	3302      	addmi	r3, #2
 8004b58:	6033      	strmi	r3, [r6, #0]
 8004b5a:	6825      	ldr	r5, [r4, #0]
 8004b5c:	f015 0506 	ands.w	r5, r5, #6
 8004b60:	d106      	bne.n	8004b70 <_printf_common+0x48>
 8004b62:	f104 0a19 	add.w	sl, r4, #25
 8004b66:	68e3      	ldr	r3, [r4, #12]
 8004b68:	6832      	ldr	r2, [r6, #0]
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	42ab      	cmp	r3, r5
 8004b6e:	dc28      	bgt.n	8004bc2 <_printf_common+0x9a>
 8004b70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b74:	1e13      	subs	r3, r2, #0
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	bf18      	it	ne
 8004b7a:	2301      	movne	r3, #1
 8004b7c:	0692      	lsls	r2, r2, #26
 8004b7e:	d42d      	bmi.n	8004bdc <_printf_common+0xb4>
 8004b80:	4649      	mov	r1, r9
 8004b82:	4638      	mov	r0, r7
 8004b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b88:	47c0      	blx	r8
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	d020      	beq.n	8004bd0 <_printf_common+0xa8>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	68e5      	ldr	r5, [r4, #12]
 8004b92:	f003 0306 	and.w	r3, r3, #6
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	bf18      	it	ne
 8004b9a:	2500      	movne	r5, #0
 8004b9c:	6832      	ldr	r2, [r6, #0]
 8004b9e:	f04f 0600 	mov.w	r6, #0
 8004ba2:	68a3      	ldr	r3, [r4, #8]
 8004ba4:	bf08      	it	eq
 8004ba6:	1aad      	subeq	r5, r5, r2
 8004ba8:	6922      	ldr	r2, [r4, #16]
 8004baa:	bf08      	it	eq
 8004bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	bfc4      	itt	gt
 8004bb4:	1a9b      	subgt	r3, r3, r2
 8004bb6:	18ed      	addgt	r5, r5, r3
 8004bb8:	341a      	adds	r4, #26
 8004bba:	42b5      	cmp	r5, r6
 8004bbc:	d11a      	bne.n	8004bf4 <_printf_common+0xcc>
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	e008      	b.n	8004bd4 <_printf_common+0xac>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4652      	mov	r2, sl
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	4638      	mov	r0, r7
 8004bca:	47c0      	blx	r8
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d103      	bne.n	8004bd8 <_printf_common+0xb0>
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd8:	3501      	adds	r5, #1
 8004bda:	e7c4      	b.n	8004b66 <_printf_common+0x3e>
 8004bdc:	2030      	movs	r0, #48	; 0x30
 8004bde:	18e1      	adds	r1, r4, r3
 8004be0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bea:	4422      	add	r2, r4
 8004bec:	3302      	adds	r3, #2
 8004bee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bf2:	e7c5      	b.n	8004b80 <_printf_common+0x58>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	47c0      	blx	r8
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d0e6      	beq.n	8004bd0 <_printf_common+0xa8>
 8004c02:	3601      	adds	r6, #1
 8004c04:	e7d9      	b.n	8004bba <_printf_common+0x92>
	...

08004c08 <_printf_i>:
 8004c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c0c:	7e0f      	ldrb	r7, [r1, #24]
 8004c0e:	4691      	mov	r9, r2
 8004c10:	2f78      	cmp	r7, #120	; 0x78
 8004c12:	4680      	mov	r8, r0
 8004c14:	460c      	mov	r4, r1
 8004c16:	469a      	mov	sl, r3
 8004c18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c1e:	d807      	bhi.n	8004c30 <_printf_i+0x28>
 8004c20:	2f62      	cmp	r7, #98	; 0x62
 8004c22:	d80a      	bhi.n	8004c3a <_printf_i+0x32>
 8004c24:	2f00      	cmp	r7, #0
 8004c26:	f000 80d9 	beq.w	8004ddc <_printf_i+0x1d4>
 8004c2a:	2f58      	cmp	r7, #88	; 0x58
 8004c2c:	f000 80a4 	beq.w	8004d78 <_printf_i+0x170>
 8004c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c38:	e03a      	b.n	8004cb0 <_printf_i+0xa8>
 8004c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c3e:	2b15      	cmp	r3, #21
 8004c40:	d8f6      	bhi.n	8004c30 <_printf_i+0x28>
 8004c42:	a101      	add	r1, pc, #4	; (adr r1, 8004c48 <_printf_i+0x40>)
 8004c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c48:	08004ca1 	.word	0x08004ca1
 8004c4c:	08004cb5 	.word	0x08004cb5
 8004c50:	08004c31 	.word	0x08004c31
 8004c54:	08004c31 	.word	0x08004c31
 8004c58:	08004c31 	.word	0x08004c31
 8004c5c:	08004c31 	.word	0x08004c31
 8004c60:	08004cb5 	.word	0x08004cb5
 8004c64:	08004c31 	.word	0x08004c31
 8004c68:	08004c31 	.word	0x08004c31
 8004c6c:	08004c31 	.word	0x08004c31
 8004c70:	08004c31 	.word	0x08004c31
 8004c74:	08004dc3 	.word	0x08004dc3
 8004c78:	08004ce5 	.word	0x08004ce5
 8004c7c:	08004da5 	.word	0x08004da5
 8004c80:	08004c31 	.word	0x08004c31
 8004c84:	08004c31 	.word	0x08004c31
 8004c88:	08004de5 	.word	0x08004de5
 8004c8c:	08004c31 	.word	0x08004c31
 8004c90:	08004ce5 	.word	0x08004ce5
 8004c94:	08004c31 	.word	0x08004c31
 8004c98:	08004c31 	.word	0x08004c31
 8004c9c:	08004dad 	.word	0x08004dad
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	1d1a      	adds	r2, r3, #4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	602a      	str	r2, [r5, #0]
 8004ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0a4      	b.n	8004dfe <_printf_i+0x1f6>
 8004cb4:	6820      	ldr	r0, [r4, #0]
 8004cb6:	6829      	ldr	r1, [r5, #0]
 8004cb8:	0606      	lsls	r6, r0, #24
 8004cba:	f101 0304 	add.w	r3, r1, #4
 8004cbe:	d50a      	bpl.n	8004cd6 <_printf_i+0xce>
 8004cc0:	680e      	ldr	r6, [r1, #0]
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	2e00      	cmp	r6, #0
 8004cc6:	da03      	bge.n	8004cd0 <_printf_i+0xc8>
 8004cc8:	232d      	movs	r3, #45	; 0x2d
 8004cca:	4276      	negs	r6, r6
 8004ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd0:	230a      	movs	r3, #10
 8004cd2:	485e      	ldr	r0, [pc, #376]	; (8004e4c <_printf_i+0x244>)
 8004cd4:	e019      	b.n	8004d0a <_printf_i+0x102>
 8004cd6:	680e      	ldr	r6, [r1, #0]
 8004cd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cdc:	602b      	str	r3, [r5, #0]
 8004cde:	bf18      	it	ne
 8004ce0:	b236      	sxthne	r6, r6
 8004ce2:	e7ef      	b.n	8004cc4 <_printf_i+0xbc>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	6820      	ldr	r0, [r4, #0]
 8004ce8:	1d19      	adds	r1, r3, #4
 8004cea:	6029      	str	r1, [r5, #0]
 8004cec:	0601      	lsls	r1, r0, #24
 8004cee:	d501      	bpl.n	8004cf4 <_printf_i+0xec>
 8004cf0:	681e      	ldr	r6, [r3, #0]
 8004cf2:	e002      	b.n	8004cfa <_printf_i+0xf2>
 8004cf4:	0646      	lsls	r6, r0, #25
 8004cf6:	d5fb      	bpl.n	8004cf0 <_printf_i+0xe8>
 8004cf8:	881e      	ldrh	r6, [r3, #0]
 8004cfa:	2f6f      	cmp	r7, #111	; 0x6f
 8004cfc:	bf0c      	ite	eq
 8004cfe:	2308      	moveq	r3, #8
 8004d00:	230a      	movne	r3, #10
 8004d02:	4852      	ldr	r0, [pc, #328]	; (8004e4c <_printf_i+0x244>)
 8004d04:	2100      	movs	r1, #0
 8004d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d0a:	6865      	ldr	r5, [r4, #4]
 8004d0c:	2d00      	cmp	r5, #0
 8004d0e:	bfa8      	it	ge
 8004d10:	6821      	ldrge	r1, [r4, #0]
 8004d12:	60a5      	str	r5, [r4, #8]
 8004d14:	bfa4      	itt	ge
 8004d16:	f021 0104 	bicge.w	r1, r1, #4
 8004d1a:	6021      	strge	r1, [r4, #0]
 8004d1c:	b90e      	cbnz	r6, 8004d22 <_printf_i+0x11a>
 8004d1e:	2d00      	cmp	r5, #0
 8004d20:	d04d      	beq.n	8004dbe <_printf_i+0x1b6>
 8004d22:	4615      	mov	r5, r2
 8004d24:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d28:	fb03 6711 	mls	r7, r3, r1, r6
 8004d2c:	5dc7      	ldrb	r7, [r0, r7]
 8004d2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d32:	4637      	mov	r7, r6
 8004d34:	42bb      	cmp	r3, r7
 8004d36:	460e      	mov	r6, r1
 8004d38:	d9f4      	bls.n	8004d24 <_printf_i+0x11c>
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d10b      	bne.n	8004d56 <_printf_i+0x14e>
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	07de      	lsls	r6, r3, #31
 8004d42:	d508      	bpl.n	8004d56 <_printf_i+0x14e>
 8004d44:	6923      	ldr	r3, [r4, #16]
 8004d46:	6861      	ldr	r1, [r4, #4]
 8004d48:	4299      	cmp	r1, r3
 8004d4a:	bfde      	ittt	le
 8004d4c:	2330      	movle	r3, #48	; 0x30
 8004d4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d56:	1b52      	subs	r2, r2, r5
 8004d58:	6122      	str	r2, [r4, #16]
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	4640      	mov	r0, r8
 8004d60:	f8cd a000 	str.w	sl, [sp]
 8004d64:	aa03      	add	r2, sp, #12
 8004d66:	f7ff fedf 	bl	8004b28 <_printf_common>
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	d14c      	bne.n	8004e08 <_printf_i+0x200>
 8004d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d72:	b004      	add	sp, #16
 8004d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d78:	4834      	ldr	r0, [pc, #208]	; (8004e4c <_printf_i+0x244>)
 8004d7a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d7e:	6829      	ldr	r1, [r5, #0]
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d86:	6029      	str	r1, [r5, #0]
 8004d88:	061d      	lsls	r5, r3, #24
 8004d8a:	d514      	bpl.n	8004db6 <_printf_i+0x1ae>
 8004d8c:	07df      	lsls	r7, r3, #31
 8004d8e:	bf44      	itt	mi
 8004d90:	f043 0320 	orrmi.w	r3, r3, #32
 8004d94:	6023      	strmi	r3, [r4, #0]
 8004d96:	b91e      	cbnz	r6, 8004da0 <_printf_i+0x198>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	f023 0320 	bic.w	r3, r3, #32
 8004d9e:	6023      	str	r3, [r4, #0]
 8004da0:	2310      	movs	r3, #16
 8004da2:	e7af      	b.n	8004d04 <_printf_i+0xfc>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	f043 0320 	orr.w	r3, r3, #32
 8004daa:	6023      	str	r3, [r4, #0]
 8004dac:	2378      	movs	r3, #120	; 0x78
 8004dae:	4828      	ldr	r0, [pc, #160]	; (8004e50 <_printf_i+0x248>)
 8004db0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004db4:	e7e3      	b.n	8004d7e <_printf_i+0x176>
 8004db6:	0659      	lsls	r1, r3, #25
 8004db8:	bf48      	it	mi
 8004dba:	b2b6      	uxthmi	r6, r6
 8004dbc:	e7e6      	b.n	8004d8c <_printf_i+0x184>
 8004dbe:	4615      	mov	r5, r2
 8004dc0:	e7bb      	b.n	8004d3a <_printf_i+0x132>
 8004dc2:	682b      	ldr	r3, [r5, #0]
 8004dc4:	6826      	ldr	r6, [r4, #0]
 8004dc6:	1d18      	adds	r0, r3, #4
 8004dc8:	6961      	ldr	r1, [r4, #20]
 8004dca:	6028      	str	r0, [r5, #0]
 8004dcc:	0635      	lsls	r5, r6, #24
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	d501      	bpl.n	8004dd6 <_printf_i+0x1ce>
 8004dd2:	6019      	str	r1, [r3, #0]
 8004dd4:	e002      	b.n	8004ddc <_printf_i+0x1d4>
 8004dd6:	0670      	lsls	r0, r6, #25
 8004dd8:	d5fb      	bpl.n	8004dd2 <_printf_i+0x1ca>
 8004dda:	8019      	strh	r1, [r3, #0]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4615      	mov	r5, r2
 8004de0:	6123      	str	r3, [r4, #16]
 8004de2:	e7ba      	b.n	8004d5a <_printf_i+0x152>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	2100      	movs	r1, #0
 8004de8:	1d1a      	adds	r2, r3, #4
 8004dea:	602a      	str	r2, [r5, #0]
 8004dec:	681d      	ldr	r5, [r3, #0]
 8004dee:	6862      	ldr	r2, [r4, #4]
 8004df0:	4628      	mov	r0, r5
 8004df2:	f000 f831 	bl	8004e58 <memchr>
 8004df6:	b108      	cbz	r0, 8004dfc <_printf_i+0x1f4>
 8004df8:	1b40      	subs	r0, r0, r5
 8004dfa:	6060      	str	r0, [r4, #4]
 8004dfc:	6863      	ldr	r3, [r4, #4]
 8004dfe:	6123      	str	r3, [r4, #16]
 8004e00:	2300      	movs	r3, #0
 8004e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e06:	e7a8      	b.n	8004d5a <_printf_i+0x152>
 8004e08:	462a      	mov	r2, r5
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	4640      	mov	r0, r8
 8004e0e:	6923      	ldr	r3, [r4, #16]
 8004e10:	47d0      	blx	sl
 8004e12:	3001      	adds	r0, #1
 8004e14:	d0ab      	beq.n	8004d6e <_printf_i+0x166>
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	079b      	lsls	r3, r3, #30
 8004e1a:	d413      	bmi.n	8004e44 <_printf_i+0x23c>
 8004e1c:	68e0      	ldr	r0, [r4, #12]
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	4298      	cmp	r0, r3
 8004e22:	bfb8      	it	lt
 8004e24:	4618      	movlt	r0, r3
 8004e26:	e7a4      	b.n	8004d72 <_printf_i+0x16a>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	4632      	mov	r2, r6
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	4640      	mov	r0, r8
 8004e30:	47d0      	blx	sl
 8004e32:	3001      	adds	r0, #1
 8004e34:	d09b      	beq.n	8004d6e <_printf_i+0x166>
 8004e36:	3501      	adds	r5, #1
 8004e38:	68e3      	ldr	r3, [r4, #12]
 8004e3a:	9903      	ldr	r1, [sp, #12]
 8004e3c:	1a5b      	subs	r3, r3, r1
 8004e3e:	42ab      	cmp	r3, r5
 8004e40:	dcf2      	bgt.n	8004e28 <_printf_i+0x220>
 8004e42:	e7eb      	b.n	8004e1c <_printf_i+0x214>
 8004e44:	2500      	movs	r5, #0
 8004e46:	f104 0619 	add.w	r6, r4, #25
 8004e4a:	e7f5      	b.n	8004e38 <_printf_i+0x230>
 8004e4c:	0800512f 	.word	0x0800512f
 8004e50:	08005140 	.word	0x08005140

08004e54 <__retarget_lock_acquire_recursive>:
 8004e54:	4770      	bx	lr

08004e56 <__retarget_lock_release_recursive>:
 8004e56:	4770      	bx	lr

08004e58 <memchr>:
 8004e58:	4603      	mov	r3, r0
 8004e5a:	b510      	push	{r4, lr}
 8004e5c:	b2c9      	uxtb	r1, r1
 8004e5e:	4402      	add	r2, r0
 8004e60:	4293      	cmp	r3, r2
 8004e62:	4618      	mov	r0, r3
 8004e64:	d101      	bne.n	8004e6a <memchr+0x12>
 8004e66:	2000      	movs	r0, #0
 8004e68:	e003      	b.n	8004e72 <memchr+0x1a>
 8004e6a:	7804      	ldrb	r4, [r0, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	428c      	cmp	r4, r1
 8004e70:	d1f6      	bne.n	8004e60 <memchr+0x8>
 8004e72:	bd10      	pop	{r4, pc}

08004e74 <memmove>:
 8004e74:	4288      	cmp	r0, r1
 8004e76:	b510      	push	{r4, lr}
 8004e78:	eb01 0402 	add.w	r4, r1, r2
 8004e7c:	d902      	bls.n	8004e84 <memmove+0x10>
 8004e7e:	4284      	cmp	r4, r0
 8004e80:	4623      	mov	r3, r4
 8004e82:	d807      	bhi.n	8004e94 <memmove+0x20>
 8004e84:	1e43      	subs	r3, r0, #1
 8004e86:	42a1      	cmp	r1, r4
 8004e88:	d008      	beq.n	8004e9c <memmove+0x28>
 8004e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e92:	e7f8      	b.n	8004e86 <memmove+0x12>
 8004e94:	4601      	mov	r1, r0
 8004e96:	4402      	add	r2, r0
 8004e98:	428a      	cmp	r2, r1
 8004e9a:	d100      	bne.n	8004e9e <memmove+0x2a>
 8004e9c:	bd10      	pop	{r4, pc}
 8004e9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ea6:	e7f7      	b.n	8004e98 <memmove+0x24>

08004ea8 <_realloc_r>:
 8004ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eac:	4680      	mov	r8, r0
 8004eae:	4614      	mov	r4, r2
 8004eb0:	460e      	mov	r6, r1
 8004eb2:	b921      	cbnz	r1, 8004ebe <_realloc_r+0x16>
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eba:	f7ff bc21 	b.w	8004700 <_malloc_r>
 8004ebe:	b92a      	cbnz	r2, 8004ecc <_realloc_r+0x24>
 8004ec0:	f7ff fbb6 	bl	8004630 <_free_r>
 8004ec4:	4625      	mov	r5, r4
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ecc:	f000 f81b 	bl	8004f06 <_malloc_usable_size_r>
 8004ed0:	4284      	cmp	r4, r0
 8004ed2:	4607      	mov	r7, r0
 8004ed4:	d802      	bhi.n	8004edc <_realloc_r+0x34>
 8004ed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004eda:	d812      	bhi.n	8004f02 <_realloc_r+0x5a>
 8004edc:	4621      	mov	r1, r4
 8004ede:	4640      	mov	r0, r8
 8004ee0:	f7ff fc0e 	bl	8004700 <_malloc_r>
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d0ed      	beq.n	8004ec6 <_realloc_r+0x1e>
 8004eea:	42bc      	cmp	r4, r7
 8004eec:	4622      	mov	r2, r4
 8004eee:	4631      	mov	r1, r6
 8004ef0:	bf28      	it	cs
 8004ef2:	463a      	movcs	r2, r7
 8004ef4:	f7ff fb86 	bl	8004604 <memcpy>
 8004ef8:	4631      	mov	r1, r6
 8004efa:	4640      	mov	r0, r8
 8004efc:	f7ff fb98 	bl	8004630 <_free_r>
 8004f00:	e7e1      	b.n	8004ec6 <_realloc_r+0x1e>
 8004f02:	4635      	mov	r5, r6
 8004f04:	e7df      	b.n	8004ec6 <_realloc_r+0x1e>

08004f06 <_malloc_usable_size_r>:
 8004f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f0a:	1f18      	subs	r0, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bfbc      	itt	lt
 8004f10:	580b      	ldrlt	r3, [r1, r0]
 8004f12:	18c0      	addlt	r0, r0, r3
 8004f14:	4770      	bx	lr
	...

08004f18 <_init>:
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1a:	bf00      	nop
 8004f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1e:	bc08      	pop	{r3}
 8004f20:	469e      	mov	lr, r3
 8004f22:	4770      	bx	lr

08004f24 <_fini>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr
