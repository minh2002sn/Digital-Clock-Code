
Digital_Clock_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080073b8  080073b8  000173b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007544  08007544  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  08007544  08007544  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007544  08007544  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800754c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000100  08007648  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08007648  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001638f  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003daa  00000000  00000000  000364b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0003a260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003b640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b388  00000000  00000000  0003c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab3f  00000000  00000000  00057c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e9ed  00000000  00000000  00072747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101134  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055ac  00000000  00000000  00101184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000100 	.word	0x20000100
 8000128:	00000000 	.word	0x00000000
 800012c:	080073a0 	.word	0x080073a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000104 	.word	0x20000104
 8000148:	080073a0 	.word	0x080073a0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_d2f>:
 80004d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004dc:	bf24      	itt	cs
 80004de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004e6:	d90d      	bls.n	8000504 <__aeabi_d2f+0x30>
 80004e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004fc:	bf08      	it	eq
 80004fe:	f020 0001 	biceq.w	r0, r0, #1
 8000502:	4770      	bx	lr
 8000504:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000508:	d121      	bne.n	800054e <__aeabi_d2f+0x7a>
 800050a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800050e:	bfbc      	itt	lt
 8000510:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000514:	4770      	bxlt	lr
 8000516:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800051a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800051e:	f1c2 0218 	rsb	r2, r2, #24
 8000522:	f1c2 0c20 	rsb	ip, r2, #32
 8000526:	fa10 f30c 	lsls.w	r3, r0, ip
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	bf18      	it	ne
 8000530:	f040 0001 	orrne.w	r0, r0, #1
 8000534:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000538:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800053c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000540:	ea40 000c 	orr.w	r0, r0, ip
 8000544:	fa23 f302 	lsr.w	r3, r3, r2
 8000548:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800054c:	e7cc      	b.n	80004e8 <__aeabi_d2f+0x14>
 800054e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000552:	d107      	bne.n	8000564 <__aeabi_d2f+0x90>
 8000554:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000558:	bf1e      	ittt	ne
 800055a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800055e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000562:	4770      	bxne	lr
 8000564:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000568:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800056c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__aeabi_f2uiz>:
 8000574:	0042      	lsls	r2, r0, #1
 8000576:	d20e      	bcs.n	8000596 <__aeabi_f2uiz+0x22>
 8000578:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800057c:	d30b      	bcc.n	8000596 <__aeabi_f2uiz+0x22>
 800057e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000582:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000586:	d409      	bmi.n	800059c <__aeabi_f2uiz+0x28>
 8000588:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800058c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000590:	fa23 f002 	lsr.w	r0, r3, r2
 8000594:	4770      	bx	lr
 8000596:	f04f 0000 	mov.w	r0, #0
 800059a:	4770      	bx	lr
 800059c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005a0:	d101      	bne.n	80005a6 <__aeabi_f2uiz+0x32>
 80005a2:	0242      	lsls	r2, r0, #9
 80005a4:	d102      	bne.n	80005ac <__aeabi_f2uiz+0x38>
 80005a6:	f04f 30ff 	mov.w	r0, #4294967295
 80005aa:	4770      	bx	lr
 80005ac:	f04f 0000 	mov.w	r0, #0
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MAIN_MENU_Init>:
		{0xFF, 0x02, 0xFF, 0xFF, 0x01, 0xFF},	// 8
		{0xFF, 0x02, 0xFF, 0x01, 0x01, 0xFF},	// 9
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00},	// Nothing
};

void MAIN_MENU_Init(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
	uint8_t num_char_0[] = {
 80005ba:	4a26      	ldr	r2, [pc, #152]	; (8000654 <MAIN_MENU_Init+0xa0>)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c4:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000,
			0b00000,
			0b00000,
			0b00000,
	};
	LCD_Create_Char(MENU_Data.hlcd, 0, num_char_0);
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MAIN_MENU_Init+0xa4>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	f107 0220 	add.w	r2, r7, #32
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 fffa 	bl	80065cc <LCD_Create_Char>

	uint8_t num_char_1[] = {
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <MAIN_MENU_Init+0xa8>)
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e2:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000,
			0b00000,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 1, num_char_1);
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MAIN_MENU_Init+0xa4>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	f107 0218 	add.w	r2, r7, #24
 80005ee:	2101      	movs	r1, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f005 ffeb 	bl	80065cc <LCD_Create_Char>

	uint8_t num_char_2[] = {
 80005f6:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <MAIN_MENU_Init+0xac>)
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000600:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000,
			0b00000,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 2, num_char_2);
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MAIN_MENU_Init+0xa4>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	f107 0210 	add.w	r2, r7, #16
 800060c:	2102      	movs	r1, #2
 800060e:	4618      	mov	r0, r3
 8000610:	f005 ffdc 	bl	80065cc <LCD_Create_Char>

	uint8_t thermometro[8] = {
 8000614:	4a13      	ldr	r2, [pc, #76]	; (8000664 <MAIN_MENU_Init+0xb0>)
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01110,
			0b11111,
			0b11111,
			0b01110
	};
	LCD_Create_Char(MENU_Data.hlcd, 3, thermometro);
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MAIN_MENU_Init+0xa4>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	2103      	movs	r1, #3
 800062c:	4618      	mov	r0, r3
 800062e:	f005 ffcd 	bl	80065cc <LCD_Create_Char>

	uint8_t igrasia[8] = {
 8000632:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <MAIN_MENU_Init+0xb4>)
 8000634:	463b      	mov	r3, r7
 8000636:	e892 0003 	ldmia.w	r2, {r0, r1}
 800063a:	e883 0003 	stmia.w	r3, {r0, r1}
			0b10001,
			0b10001,
			0b10001,
			0b01110,
	};
	LCD_Create_Char(MENU_Data.hlcd, 4, igrasia);
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MAIN_MENU_Init+0xa4>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	463a      	mov	r2, r7
 8000644:	2104      	movs	r1, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f005 ffc0 	bl	80065cc <LCD_Create_Char>

}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	; 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	080073b8 	.word	0x080073b8
 8000658:	2000011c 	.word	0x2000011c
 800065c:	080073c0 	.word	0x080073c0
 8000660:	080073c8 	.word	0x080073c8
 8000664:	080073d0 	.word	0x080073d0
 8000668:	080073d8 	.word	0x080073d8

0800066c <MAIN_MENU_Display_Num>:

void MAIN_MENU_Display_Num(uint8_t p_number, uint8_t p_col, uint8_t p_row){
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
 8000676:	460b      	mov	r3, r1
 8000678:	71bb      	strb	r3, [r7, #6]
 800067a:	4613      	mov	r3, r2
 800067c:	717b      	strb	r3, [r7, #5]
	if(p_row > 2) return;
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	2b02      	cmp	r3, #2
 8000682:	d841      	bhi.n	8000708 <MAIN_MENU_Display_Num+0x9c>

	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row);
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <MAIN_MENU_Display_Num+0xa4>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	797a      	ldrb	r2, [r7, #5]
 800068a:	79b9      	ldrb	r1, [r7, #6]
 800068c:	4618      	mov	r0, r3
 800068e:	f005 ff73 	bl	8006578 <LCD_Set_Cursor>
	for(int i = 0; i < 3; i++){
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	e011      	b.n	80006bc <MAIN_MENU_Display_Num+0x50>
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i]);
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MAIN_MENU_Display_Num+0xa4>)
 800069a:	6858      	ldr	r0, [r3, #4]
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	491d      	ldr	r1, [pc, #116]	; (8000714 <MAIN_MENU_Display_Num+0xa8>)
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	18ca      	adds	r2, r1, r3
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	f005 fff2 	bl	800669a <LCD_Send_Data>
	for(int i = 0; i < 3; i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	ddea      	ble.n	8000698 <MAIN_MENU_Display_Num+0x2c>
	}

	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row + 1);
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MAIN_MENU_Display_Num+0xa4>)
 80006c4:	6858      	ldr	r0, [r3, #4]
 80006c6:	797b      	ldrb	r3, [r7, #5]
 80006c8:	3301      	adds	r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	4619      	mov	r1, r3
 80006d0:	f005 ff52 	bl	8006578 <LCD_Set_Cursor>
	for(int i = 0; i < 3; i++){
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	e012      	b.n	8000700 <MAIN_MENU_Display_Num+0x94>
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i+3]);
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <MAIN_MENU_Display_Num+0xa4>)
 80006dc:	6858      	ldr	r0, [r3, #4]
 80006de:	79fa      	ldrb	r2, [r7, #7]
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	1cd9      	adds	r1, r3, #3
 80006e4:	4c0b      	ldr	r4, [pc, #44]	; (8000714 <MAIN_MENU_Display_Num+0xa8>)
 80006e6:	4613      	mov	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4413      	add	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4423      	add	r3, r4
 80006f0:	440b      	add	r3, r1
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	f005 ffd0 	bl	800669a <LCD_Send_Data>
	for(int i = 0; i < 3; i++){
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b02      	cmp	r3, #2
 8000704:	dde9      	ble.n	80006da <MAIN_MENU_Display_Num+0x6e>
 8000706:	e000      	b.n	800070a <MAIN_MENU_Display_Num+0x9e>
	if(p_row > 2) return;
 8000708:	bf00      	nop
	}

}
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	bd90      	pop	{r4, r7, pc}
 8000710:	2000011c 	.word	0x2000011c
 8000714:	2000001c 	.word	0x2000001c

08000718 <MAIN_MENU_Display>:

void MAIN_MENU_Display(){
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b085      	sub	sp, #20
 800071c:	af02      	add	r7, sp, #8
	if(MENU_Data.is_changing_menu){
 800071e:	4b5e      	ldr	r3, [pc, #376]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000720:	7a5b      	ldrb	r3, [r3, #9]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d007      	beq.n	8000736 <MAIN_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 8000726:	4b5c      	ldr	r3, [pc, #368]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	4618      	mov	r0, r3
 800072c:	f005 ff10 	bl	8006550 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8000730:	4b59      	ldr	r3, [pc, #356]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000732:	2200      	movs	r2, #0
 8000734:	725a      	strb	r2, [r3, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 0);
 8000736:	4b58      	ldr	r3, [pc, #352]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	2200      	movs	r2, #0
 800073c:	2103      	movs	r1, #3
 800073e:	4618      	mov	r0, r3
 8000740:	f005 ff1a 	bl	8006578 <LCD_Set_Cursor>
	char t_day_string[] = "SUN";
 8000744:	4b55      	ldr	r3, [pc, #340]	; (800089c <MAIN_MENU_Display+0x184>)
 8000746:	607b      	str	r3, [r7, #4]
	if(REALTIME_Data.system_day > 0){
 8000748:	4b55      	ldr	r3, [pc, #340]	; (80008a0 <MAIN_MENU_Display+0x188>)
 800074a:	789b      	ldrb	r3, [r3, #2]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00a      	beq.n	8000766 <MAIN_MENU_Display+0x4e>
		strcpy(t_day_string, DAY_Str[REALTIME_Data.system_day - 1]);
 8000750:	4b53      	ldr	r3, [pc, #332]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000752:	789b      	ldrb	r3, [r3, #2]
 8000754:	3b01      	subs	r3, #1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4a52      	ldr	r2, [pc, #328]	; (80008a4 <MAIN_MENU_Display+0x18c>)
 800075a:	441a      	add	r2, r3
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f006 fa87 	bl	8006c74 <strcpy>
	}
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000766:	4b4c      	ldr	r3, [pc, #304]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000768:	6858      	ldr	r0, [r3, #4]
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
 800076a:	4b4d      	ldr	r3, [pc, #308]	; (80008a0 <MAIN_MENU_Display+0x188>)
 800076c:	78db      	ldrb	r3, [r3, #3]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 800076e:	461c      	mov	r4, r3
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
 8000770:	4b4b      	ldr	r3, [pc, #300]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000772:	791b      	ldrb	r3, [r3, #4]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000774:	4619      	mov	r1, r3
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
 8000776:	4b4a      	ldr	r3, [pc, #296]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000778:	795b      	ldrb	r3, [r3, #5]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 800077a:	1d3a      	adds	r2, r7, #4
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	9100      	str	r1, [sp, #0]
 8000780:	4623      	mov	r3, r4
 8000782:	4949      	ldr	r1, [pc, #292]	; (80008a8 <MAIN_MENU_Display+0x190>)
 8000784:	f005 fea6 	bl	80064d4 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 1);
 8000788:	4b43      	ldr	r3, [pc, #268]	; (8000898 <MAIN_MENU_Display+0x180>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	2103      	movs	r1, #3
 8000790:	4618      	mov	r0, r3
 8000792:	f005 fef1 	bl	8006578 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, 3);
 8000796:	4b40      	ldr	r3, [pc, #256]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	2103      	movs	r1, #3
 800079c:	4618      	mov	r0, r3
 800079e:	f005 ff7c 	bl	800669a <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02dC      ", (uint8_t)hdht.temperature);
 80007a2:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <MAIN_MENU_Display+0x180>)
 80007a4:	685c      	ldr	r4, [r3, #4]
 80007a6:	4b41      	ldr	r3, [pc, #260]	; (80008ac <MAIN_MENU_Display+0x194>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fee2 	bl	8000574 <__aeabi_f2uiz>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	493e      	ldr	r1, [pc, #248]	; (80008b0 <MAIN_MENU_Display+0x198>)
 80007b8:	4620      	mov	r0, r4
 80007ba:	f005 fe8b 	bl	80064d4 <LCD_Write>
	LCD_Send_Data(MENU_Data.hlcd, 4);
 80007be:	4b36      	ldr	r3, [pc, #216]	; (8000898 <MAIN_MENU_Display+0x180>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	2104      	movs	r1, #4
 80007c4:	4618      	mov	r0, r3
 80007c6:	f005 ff68 	bl	800669a <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02d%%", (uint8_t)hdht.huminity);
 80007ca:	4b33      	ldr	r3, [pc, #204]	; (8000898 <MAIN_MENU_Display+0x180>)
 80007cc:	685c      	ldr	r4, [r3, #4]
 80007ce:	4b37      	ldr	r3, [pc, #220]	; (80008ac <MAIN_MENU_Display+0x194>)
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fece 	bl	8000574 <__aeabi_f2uiz>
 80007d8:	4603      	mov	r3, r0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	461a      	mov	r2, r3
 80007de:	4935      	ldr	r1, [pc, #212]	; (80008b4 <MAIN_MENU_Display+0x19c>)
 80007e0:	4620      	mov	r0, r4
 80007e2:	f005 fe77 	bl	80064d4 <LCD_Write>

	MAIN_MENU_Display_Num(REALTIME_Data.system_hour / 10, 2, 2);
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MAIN_MENU_Display+0x188>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4a33      	ldr	r2, [pc, #204]	; (80008b8 <MAIN_MENU_Display+0x1a0>)
 80007ec:	fba2 2303 	umull	r2, r3, r2, r3
 80007f0:	08db      	lsrs	r3, r3, #3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2202      	movs	r2, #2
 80007f6:	2102      	movs	r1, #2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff37 	bl	800066c <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(REALTIME_Data.system_hour % 10, 6, 2);
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <MAIN_MENU_Display+0x1a0>)
 8000804:	fba3 1302 	umull	r1, r3, r3, r2
 8000808:	08d9      	lsrs	r1, r3, #3
 800080a:	460b      	mov	r3, r1
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	440b      	add	r3, r1
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2202      	movs	r2, #2
 8000818:	2106      	movs	r1, #6
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff26 	bl	800066c <MAIN_MENU_Display_Num>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	2202      	movs	r2, #2
 8000826:	2109      	movs	r1, #9
 8000828:	4618      	mov	r0, r3
 800082a:	f005 fea5 	bl	8006578 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MAIN_MENU_Display+0x180>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	212e      	movs	r1, #46	; 0x2e
 8000834:	4618      	mov	r0, r3
 8000836:	f005 ff30 	bl	800669a <LCD_Send_Data>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MAIN_MENU_Display+0x180>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2203      	movs	r2, #3
 8000840:	2109      	movs	r1, #9
 8000842:	4618      	mov	r0, r3
 8000844:	f005 fe98 	bl	8006578 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MAIN_MENU_Display+0x180>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	212e      	movs	r1, #46	; 0x2e
 800084e:	4618      	mov	r0, r3
 8000850:	f005 ff23 	bl	800669a <LCD_Send_Data>
	MAIN_MENU_Display_Num(REALTIME_Data.system_minute / 10, 10, 2);
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MAIN_MENU_Display+0x188>)
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <MAIN_MENU_Display+0x1a0>)
 800085a:	fba2 2303 	umull	r2, r3, r2, r3
 800085e:	08db      	lsrs	r3, r3, #3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2202      	movs	r2, #2
 8000864:	210a      	movs	r1, #10
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff00 	bl	800066c <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(REALTIME_Data.system_minute % 10, 14, 2);
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MAIN_MENU_Display+0x188>)
 800086e:	785a      	ldrb	r2, [r3, #1]
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MAIN_MENU_Display+0x1a0>)
 8000872:	fba3 1302 	umull	r1, r3, r3, r2
 8000876:	08d9      	lsrs	r1, r3, #3
 8000878:	460b      	mov	r3, r1
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	440b      	add	r3, r1
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2202      	movs	r2, #2
 8000886:	210e      	movs	r1, #14
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff feef 	bl	800066c <MAIN_MENU_Display_Num>
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bd90      	pop	{r4, r7, pc}
 8000896:	bf00      	nop
 8000898:	2000011c 	.word	0x2000011c
 800089c:	004e5553 	.word	0x004e5553
 80008a0:	200002e4 	.word	0x200002e4
 80008a4:	20000000 	.word	0x20000000
 80008a8:	080073e0 	.word	0x080073e0
 80008ac:	20000478 	.word	0x20000478
 80008b0:	080073f4 	.word	0x080073f4
 80008b4:	08007400 	.word	0x08007400
 80008b8:	cccccccd 	.word	0xcccccccd

080008bc <MAIN_MENU_Set_State>:

void MAIN_MENU_Set_State(){
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = MAIN_MENU;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MAIN_MENU_Set_State+0x20>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <MAIN_MENU_Set_State+0x20>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <MAIN_MENU_Set_State+0x20>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	725a      	strb	r2, [r3, #9]
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	2000011c 	.word	0x2000011c

080008e0 <MAIN_MENU_Update_Value>:

void MAIN_MENU_Update_Value(){
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = MAIN_MENU;
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <MAIN_MENU_Update_Value+0x18>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80008ea:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <MAIN_MENU_Update_Value+0x18>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	721a      	strb	r2, [r3, #8]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	2000011c 	.word	0x2000011c

080008fc <MENU_Init>:

#include "Main_Menu.h"

MENU_DATA_t MENU_Data;

void MENU_Init(LCD_I2C_HandleTypeDef *p_hlcd){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	MENU_Data.hlcd = p_hlcd;
 8000904:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <MENU_Init+0x38>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6053      	str	r3, [r2, #4]
	MENU_Data.changed = 0;
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MENU_Init+0x38>)
 800090c:	2200      	movs	r2, #0
 800090e:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MENU_Init+0x38>)
 8000912:	2201      	movs	r2, #1
 8000914:	725a      	strb	r2, [r3, #9]
	MENU_Data.menu_type = MAIN_MENU;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MENU_Init+0x38>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
	MAIN_MENU_Init();
 800091c:	f7ff fe4a 	bl	80005b4 <MAIN_MENU_Init>
	SR_MENU_Init();
 8000920:	f000 f834 	bl	800098c <SR_MENU_Init>
	TL_MENU_Init();
 8000924:	f000 fc04 	bl	8001130 <TL_MENU_Init>
	ST_MENU_Init();
 8000928:	f000 fa04 	bl	8000d34 <ST_MENU_Init>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2000011c 	.word	0x2000011c

08000938 <MENU_Handle>:
//		timer = HAL_GetTick();
//		count ++;
//	}
//}

void MENU_Handle(){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	if(!MENU_Data.changed){
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MENU_Handle+0x50>)
 800093e:	7a1b      	ldrb	r3, [r3, #8]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d11f      	bne.n	8000984 <MENU_Handle+0x4c>
		switch(MENU_Data.menu_type){
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MENU_Handle+0x50>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b03      	cmp	r3, #3
 800094a:	d817      	bhi.n	800097c <MENU_Handle+0x44>
 800094c:	a201      	add	r2, pc, #4	; (adr r2, 8000954 <MENU_Handle+0x1c>)
 800094e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000952:	bf00      	nop
 8000954:	08000965 	.word	0x08000965
 8000958:	0800096b 	.word	0x0800096b
 800095c:	08000971 	.word	0x08000971
 8000960:	08000977 	.word	0x08000977
			case MAIN_MENU:
				MAIN_MENU_Display();
 8000964:	f7ff fed8 	bl	8000718 <MAIN_MENU_Display>
				break;
 8000968:	e009      	b.n	800097e <MENU_Handle+0x46>
			case SETTING_REALTIME_MENU:
				SR_MENU_Display();
 800096a:	f000 f923 	bl	8000bb4 <SR_MENU_Display>
				break;
 800096e:	e006      	b.n	800097e <MENU_Handle+0x46>
			case TIMELINE_LIST_MENU:
				TL_MENU_Display();
 8000970:	f000 fcc4 	bl	80012fc <TL_MENU_Display>
				break;
 8000974:	e003      	b.n	800097e <MENU_Handle+0x46>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Display();
 8000976:	f000 fac3 	bl	8000f00 <ST_MENU_Display>
				break;
 800097a:	e000      	b.n	800097e <MENU_Handle+0x46>
			default:
				break;
 800097c:	bf00      	nop
		}
		MENU_Data.changed = 1;
 800097e:	4b02      	ldr	r3, [pc, #8]	; (8000988 <MENU_Handle+0x50>)
 8000980:	2201      	movs	r2, #1
 8000982:	721a      	strb	r2, [r3, #8]
	}
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000011c 	.word	0x2000011c

0800098c <SR_MENU_Init>:
		"Year",
};

extern char DAY_Str[7][4];

void SR_MENU_Init(){
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
	SR_MENU_Data.state = SETTING_HOUR;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <SR_MENU_Init+0x2c>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
	REALTIME_DATA_HandleTypeDef t_realtime = {0, 0, 0, 0, 0, 0};
 8000998:	463b      	mov	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	809a      	strh	r2, [r3, #4]
	SR_MENU_Data.new_realtime = t_realtime;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <SR_MENU_Init+0x2c>)
 80009a2:	3301      	adds	r3, #1
 80009a4:	463a      	mov	r2, r7
 80009a6:	6810      	ldr	r0, [r2, #0]
 80009a8:	6018      	str	r0, [r3, #0]
 80009aa:	8892      	ldrh	r2, [r2, #4]
 80009ac:	809a      	strh	r2, [r3, #4]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000128 	.word	0x20000128

080009bc <SR_MENU_Set_State>:

void SR_MENU_Set_State(){
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
	SR_MENU_Data.state = SETTING_HOUR;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <SR_MENU_Set_State+0x40>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
	REALTIME_DATA_HandleTypeDef t_realtime = {0, 0, 0, 0, 0, 0};
 80009c8:	463b      	mov	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	809a      	strh	r2, [r3, #4]
	SR_MENU_Data.new_realtime = t_realtime;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <SR_MENU_Set_State+0x40>)
 80009d2:	3301      	adds	r3, #1
 80009d4:	463a      	mov	r2, r7
 80009d6:	6810      	ldr	r0, [r2, #0]
 80009d8:	6018      	str	r0, [r3, #0]
 80009da:	8892      	ldrh	r2, [r2, #4]
 80009dc:	809a      	strh	r2, [r3, #4]
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <SR_MENU_Set_State+0x44>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <SR_MENU_Set_State+0x44>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <SR_MENU_Set_State+0x44>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	725a      	strb	r2, [r3, #9]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000128 	.word	0x20000128
 8000a00:	2000011c 	.word	0x2000011c

08000a04 <SR_MENU_Change_Setting_State>:

void SR_MENU_Change_Setting_State(uint8_t p_is_increase){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	if(SR_MENU_Data.state == CHECKING_AGAIN){
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <SR_MENU_Change_Setting_State+0x60>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b06      	cmp	r3, #6
 8000a14:	d105      	bne.n	8000a22 <SR_MENU_Change_Setting_State+0x1e>
		REALTIME_Set_New_Realtime(&SR_MENU_Data.new_realtime);
 8000a16:	4814      	ldr	r0, [pc, #80]	; (8000a68 <SR_MENU_Change_Setting_State+0x64>)
 8000a18:	f000 ff72 	bl	8001900 <REALTIME_Set_New_Realtime>
		MAIN_MENU_Set_State();
 8000a1c:	f7ff ff4e 	bl	80008bc <MAIN_MENU_Set_State>
			MAIN_MENU_Set_State();
		}
		MENU_Data.menu_type = SETTING_REALTIME_MENU;
		MENU_Data.changed = 0;
	}
}
 8000a20:	e01b      	b.n	8000a5a <SR_MENU_Change_Setting_State+0x56>
		SR_MENU_Data.state += ((p_is_increase == INCREASE) ? 1 : -1);
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <SR_MENU_Change_Setting_State+0x60>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	2a01      	cmp	r2, #1
 8000a2a:	d101      	bne.n	8000a30 <SR_MENU_Change_Setting_State+0x2c>
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	e000      	b.n	8000a32 <SR_MENU_Change_Setting_State+0x2e>
 8000a30:	22ff      	movs	r2, #255	; 0xff
 8000a32:	4413      	add	r3, r2
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <SR_MENU_Change_Setting_State+0x60>)
 8000a38:	701a      	strb	r2, [r3, #0]
		if((int8_t)SR_MENU_Data.state < 0){
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <SR_MENU_Change_Setting_State+0x60>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	da04      	bge.n	8000a4e <SR_MENU_Change_Setting_State+0x4a>
			SR_MENU_Data.state = 0;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <SR_MENU_Change_Setting_State+0x60>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
			MAIN_MENU_Set_State();
 8000a4a:	f7ff ff37 	bl	80008bc <MAIN_MENU_Set_State>
		MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <SR_MENU_Change_Setting_State+0x68>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
		MENU_Data.changed = 0;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SR_MENU_Change_Setting_State+0x68>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	721a      	strb	r2, [r3, #8]
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000128 	.word	0x20000128
 8000a68:	20000129 	.word	0x20000129
 8000a6c:	2000011c 	.word	0x2000011c

08000a70 <SR_MENU_Set_Value>:

void SR_MENU_Set_Value(uint8_t p_is_increase){
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 8000a7a:	4b47      	ldr	r3, [pc, #284]	; (8000b98 <SR_MENU_Set_Value+0x128>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b05      	cmp	r3, #5
 8000a80:	d87e      	bhi.n	8000b80 <SR_MENU_Set_Value+0x110>
		int8_t *t_data_ptr = (int8_t *)(&SR_MENU_Data.new_realtime) + SR_MENU_Data.state;
 8000a82:	4b45      	ldr	r3, [pc, #276]	; (8000b98 <SR_MENU_Set_Value+0x128>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b44      	ldr	r3, [pc, #272]	; (8000b9c <SR_MENU_Set_Value+0x12c>)
 8000a8a:	4413      	add	r3, r2
 8000a8c:	617b      	str	r3, [r7, #20]
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f993 3000 	ldrsb.w	r3, [r3]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	79fa      	ldrb	r2, [r7, #7]
 8000a98:	2a01      	cmp	r2, #1
 8000a9a:	d101      	bne.n	8000aa0 <SR_MENU_Set_Value+0x30>
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	e000      	b.n	8000aa2 <SR_MENU_Set_Value+0x32>
 8000aa0:	22ff      	movs	r2, #255	; 0xff
 8000aa2:	4413      	add	r3, r2
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	b25a      	sxtb	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	701a      	strb	r2, [r3, #0]
		if(*t_data_ptr > __max_value[SR_MENU_Data.state]){
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f993 3000 	ldrsb.w	r3, [r3]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <SR_MENU_Set_Value+0x128>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4b39      	ldr	r3, [pc, #228]	; (8000ba0 <SR_MENU_Set_Value+0x130>)
 8000abc:	5c5b      	ldrb	r3, [r3, r1]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	dd0a      	ble.n	8000ad8 <SR_MENU_Set_Value+0x68>
			*t_data_ptr = (SR_MENU_Data.state == SETTING_DATE) ? 1 : 0;
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <SR_MENU_Set_Value+0x128>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	bf0c      	ite	eq
 8000aca:	2301      	moveq	r3, #1
 8000acc:	2300      	movne	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	b25a      	sxtb	r2, r3
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	e00c      	b.n	8000af2 <SR_MENU_Set_Value+0x82>
		} else if(*t_data_ptr < 0){
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f993 3000 	ldrsb.w	r3, [r3]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	da07      	bge.n	8000af2 <SR_MENU_Set_Value+0x82>
			*t_data_ptr = __max_value[SR_MENU_Data.state];
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <SR_MENU_Set_Value+0x128>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <SR_MENU_Set_Value+0x130>)
 8000aea:	5c9b      	ldrb	r3, [r3, r2]
 8000aec:	b25a      	sxtb	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	701a      	strb	r2, [r3, #0]
		}
		if(SR_MENU_Data.state == SETTING_YEAR){
 8000af2:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <SR_MENU_Set_Value+0x128>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b05      	cmp	r3, #5
 8000af8:	d142      	bne.n	8000b80 <SR_MENU_Set_Value+0x110>
			uint8_t *t_date_ptr = &SR_MENU_Data.new_realtime.system_date;
 8000afa:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <SR_MENU_Set_Value+0x134>)
 8000afc:	613b      	str	r3, [r7, #16]
			uint8_t *t_month_ptr = &SR_MENU_Data.new_realtime.system_month;
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <SR_MENU_Set_Value+0x138>)
 8000b00:	60fb      	str	r3, [r7, #12]
			uint8_t *t_year_ptr = &SR_MENU_Data.new_realtime.system_year;
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <SR_MENU_Set_Value+0x13c>)
 8000b04:	60bb      	str	r3, [r7, #8]
			if(*t_month_ptr == 2){
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d11b      	bne.n	8000b46 <SR_MENU_Set_Value+0xd6>
				if(*t_date_ptr > ((*t_year_ptr % 4 == 0) ? 29 : 28)){
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <SR_MENU_Set_Value+0xb6>
 8000b22:	231d      	movs	r3, #29
 8000b24:	e000      	b.n	8000b28 <SR_MENU_Set_Value+0xb8>
 8000b26:	231c      	movs	r3, #28
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	da29      	bge.n	8000b80 <SR_MENU_Set_Value+0x110>
					*t_date_ptr = (*t_year_ptr % 4 == 0) ? 29 : 28;
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <SR_MENU_Set_Value+0xce>
 8000b3a:	221d      	movs	r2, #29
 8000b3c:	e000      	b.n	8000b40 <SR_MENU_Set_Value+0xd0>
 8000b3e:	221c      	movs	r2, #28
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	701a      	strb	r2, [r3, #0]
 8000b44:	e01c      	b.n	8000b80 <SR_MENU_Set_Value+0x110>
				}
			} else if((*t_month_ptr <= 7 && *t_month_ptr % 2 == 0) || (*t_month_ptr >= 8 && *t_month_ptr % 2 == 1)){
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b07      	cmp	r3, #7
 8000b4c:	d806      	bhi.n	8000b5c <SR_MENU_Set_Value+0xec>
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d00a      	beq.n	8000b72 <SR_MENU_Set_Value+0x102>
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b07      	cmp	r3, #7
 8000b62:	d90d      	bls.n	8000b80 <SR_MENU_Set_Value+0x110>
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d006      	beq.n	8000b80 <SR_MENU_Set_Value+0x110>
				if(*t_date_ptr > 30){
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b1e      	cmp	r3, #30
 8000b78:	d902      	bls.n	8000b80 <SR_MENU_Set_Value+0x110>
					*t_date_ptr = 30;
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	221e      	movs	r2, #30
 8000b7e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <SR_MENU_Set_Value+0x140>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <SR_MENU_Set_Value+0x140>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	721a      	strb	r2, [r3, #8]
}
 8000b8c:	bf00      	nop
 8000b8e:	371c      	adds	r7, #28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000128 	.word	0x20000128
 8000b9c:	20000129 	.word	0x20000129
 8000ba0:	20000060 	.word	0x20000060
 8000ba4:	2000012c 	.word	0x2000012c
 8000ba8:	2000012d 	.word	0x2000012d
 8000bac:	2000012e 	.word	0x2000012e
 8000bb0:	2000011c 	.word	0x2000011c

08000bb4 <SR_MENU_Display>:

void SR_MENU_Display(){
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af02      	add	r7, sp, #8
	if(MENU_Data.is_changing_menu){
 8000bba:	4b55      	ldr	r3, [pc, #340]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000bbc:	7a5b      	ldrb	r3, [r3, #9]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <SR_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 8000bc2:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f005 fcc2 	bl	8006550 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8000bcc:	4b50      	ldr	r3, [pc, #320]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	725a      	strb	r2, [r3, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 8000bd2:	4b4f      	ldr	r3, [pc, #316]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f005 fccc 	bl	8006578 <LCD_Set_Cursor>
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 8000be0:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <SR_MENU_Display+0x160>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b05      	cmp	r3, #5
 8000be6:	d80c      	bhi.n	8000c02 <SR_MENU_Display+0x4e>
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[SR_MENU_Data.state]);
 8000be8:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	4a49      	ldr	r2, [pc, #292]	; (8000d14 <SR_MENU_Display+0x160>)
 8000bee:	7812      	ldrb	r2, [r2, #0]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4a49      	ldr	r2, [pc, #292]	; (8000d18 <SR_MENU_Display+0x164>)
 8000bf4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000bf8:	4948      	ldr	r1, [pc, #288]	; (8000d1c <SR_MENU_Display+0x168>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f005 fc6a 	bl	80064d4 <LCD_Write>
 8000c00:	e005      	b.n	8000c0e <SR_MENU_Display+0x5a>
	} else{
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
 8000c02:	4b43      	ldr	r3, [pc, #268]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	4946      	ldr	r1, [pc, #280]	; (8000d20 <SR_MENU_Display+0x16c>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f005 fc63 	bl	80064d4 <LCD_Write>
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 1);
 8000c0e:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2201      	movs	r2, #1
 8000c14:	2103      	movs	r1, #3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f005 fcae 	bl	8006578 <LCD_Set_Cursor>
	char t_day_string[] = "SUN";
 8000c1c:	4b41      	ldr	r3, [pc, #260]	; (8000d24 <SR_MENU_Display+0x170>)
 8000c1e:	607b      	str	r3, [r7, #4]
	if(SR_MENU_Data.new_realtime.system_day > 0){
 8000c20:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <SR_MENU_Display+0x160>)
 8000c22:	78db      	ldrb	r3, [r3, #3]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d00a      	beq.n	8000c3e <SR_MENU_Display+0x8a>
		strcpy(t_day_string, DAY_Str[SR_MENU_Data.new_realtime.system_day - 1]);
 8000c28:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <SR_MENU_Display+0x160>)
 8000c2a:	78db      	ldrb	r3, [r3, #3]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4a3d      	ldr	r2, [pc, #244]	; (8000d28 <SR_MENU_Display+0x174>)
 8000c32:	441a      	add	r2, r3
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f006 f81b 	bl	8006c74 <strcpy>
	}
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000c3e:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000c40:	6858      	ldr	r0, [r3, #4]
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);
 8000c42:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <SR_MENU_Display+0x160>)
 8000c44:	791b      	ldrb	r3, [r3, #4]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000c46:	461c      	mov	r4, r3
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);
 8000c48:	4b32      	ldr	r3, [pc, #200]	; (8000d14 <SR_MENU_Display+0x160>)
 8000c4a:	795b      	ldrb	r3, [r3, #5]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000c4c:	4619      	mov	r1, r3
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <SR_MENU_Display+0x160>)
 8000c50:	799b      	ldrb	r3, [r3, #6]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8000c52:	1d3a      	adds	r2, r7, #4
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	9100      	str	r1, [sp, #0]
 8000c58:	4623      	mov	r3, r4
 8000c5a:	4934      	ldr	r1, [pc, #208]	; (8000d2c <SR_MENU_Display+0x178>)
 8000c5c:	f005 fc3a 	bl	80064d4 <LCD_Write>

	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour / 10, 2, 2);
 8000c60:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <SR_MENU_Display+0x160>)
 8000c62:	785b      	ldrb	r3, [r3, #1]
 8000c64:	4a32      	ldr	r2, [pc, #200]	; (8000d30 <SR_MENU_Display+0x17c>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	08db      	lsrs	r3, r3, #3
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2202      	movs	r2, #2
 8000c70:	2102      	movs	r1, #2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fcfa 	bl	800066c <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour % 10, 6, 2);
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <SR_MENU_Display+0x160>)
 8000c7a:	785a      	ldrb	r2, [r3, #1]
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	; (8000d30 <SR_MENU_Display+0x17c>)
 8000c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c82:	08d9      	lsrs	r1, r3, #3
 8000c84:	460b      	mov	r3, r1
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	440b      	add	r3, r1
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2202      	movs	r2, #2
 8000c92:	2106      	movs	r1, #6
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fce9 	bl	800066c <MAIN_MENU_Display_Num>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	2109      	movs	r1, #9
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f005 fc68 	bl	8006578 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	212e      	movs	r1, #46	; 0x2e
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f005 fcf3 	bl	800669a <LCD_Send_Data>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2203      	movs	r2, #3
 8000cba:	2109      	movs	r1, #9
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f005 fc5b 	bl	8006578 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <SR_MENU_Display+0x15c>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	212e      	movs	r1, #46	; 0x2e
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f005 fce6 	bl	800669a <LCD_Send_Data>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_minute / 10, 10, 2);
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <SR_MENU_Display+0x160>)
 8000cd0:	789b      	ldrb	r3, [r3, #2]
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <SR_MENU_Display+0x17c>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	08db      	lsrs	r3, r3, #3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2202      	movs	r2, #2
 8000cde:	210a      	movs	r1, #10
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fcc3 	bl	800066c <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_minute % 10, 14, 2);
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <SR_MENU_Display+0x160>)
 8000ce8:	789a      	ldrb	r2, [r3, #2]
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <SR_MENU_Display+0x17c>)
 8000cec:	fba3 1302 	umull	r1, r3, r3, r2
 8000cf0:	08d9      	lsrs	r1, r3, #3
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2202      	movs	r2, #2
 8000d00:	210e      	movs	r1, #14
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fcb2 	bl	800066c <MAIN_MENU_Display_Num>
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	2000011c 	.word	0x2000011c
 8000d14:	20000128 	.word	0x20000128
 8000d18:	20000068 	.word	0x20000068
 8000d1c:	08007434 	.word	0x08007434
 8000d20:	08007448 	.word	0x08007448
 8000d24:	004e5553 	.word	0x004e5553
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	08007460 	.word	0x08007460
 8000d30:	cccccccd 	.word	0xcccccccd

08000d34 <ST_MENU_Init>:
ST_MENU_Data_HandleTypeDef ST_MENU_Data;

static uint8_t __max_value[] = {23, 59, 1, 1, 1, 1, 1, 1, 1};
extern char *__setting_type_str[6];

void ST_MENU_Init(){
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <ST_MENU_Set_State>:

void ST_MENU_Set_State(){
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <ST_MENU_Set_State+0x48>)
 8000d48:	2203      	movs	r2, #3
 8000d4a:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <ST_MENU_Set_State+0x48>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <ST_MENU_Set_State+0x48>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	725a      	strb	r2, [r3, #9]
	ST_MENU_Data.state = SETTING_ALARM_HOUR;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <ST_MENU_Set_State+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
	FLASH_DATA_t t_timeline = {0, 0, 0, 1};
 8000d5e:	2300      	movs	r3, #0
 8000d60:	713b      	strb	r3, [r7, #4]
 8000d62:	2300      	movs	r3, #0
 8000d64:	717b      	strb	r3, [r7, #5]
 8000d66:	2300      	movs	r3, #0
 8000d68:	71bb      	strb	r3, [r7, #6]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	71fb      	strb	r3, [r7, #7]
	ST_MENU_Data.timeline_data = t_timeline;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <ST_MENU_Set_State+0x4c>)
 8000d70:	3301      	adds	r3, #1
 8000d72:	1d3a      	adds	r2, r7, #4
 8000d74:	6810      	ldr	r0, [r2, #0]
 8000d76:	6018      	str	r0, [r3, #0]
	ST_MENU_Data.current_day_state = 0;
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <ST_MENU_Set_State+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	715a      	strb	r2, [r3, #5]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	2000011c 	.word	0x2000011c
 8000d8c:	20000130 	.word	0x20000130

08000d90 <ST_MENU_Change_Setting_State>:

void ST_MENU_Change_Setting_State(uint8_t p_is_increase){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	if(ST_MENU_Data.state == CHECKING_ALARM_AGAIN){
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <ST_MENU_Change_Setting_State+0x64>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b09      	cmp	r3, #9
 8000da0:	d103      	bne.n	8000daa <ST_MENU_Change_Setting_State+0x1a>
		TIMELINE_Add(&ST_MENU_Data.timeline_data);
 8000da2:	4815      	ldr	r0, [pc, #84]	; (8000df8 <ST_MENU_Change_Setting_State+0x68>)
 8000da4:	f000 fc56 	bl	8001654 <TIMELINE_Add>
			TL_MENU_Set_State();
		}
		MENU_Data.menu_type = SETTING_TIMELINE_MENU;
		MENU_Data.changed = 0;
	}
}
 8000da8:	e020      	b.n	8000dec <ST_MENU_Change_Setting_State+0x5c>
		int8_t *t_value = (int8_t *)(&ST_MENU_Data.state);
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <ST_MENU_Change_Setting_State+0x64>)
 8000dac:	60fb      	str	r3, [r7, #12]
		*t_value += ((p_is_increase == INCREASE) ? 1 : -1);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f993 3000 	ldrsb.w	r3, [r3]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	79fa      	ldrb	r2, [r7, #7]
 8000db8:	2a01      	cmp	r2, #1
 8000dba:	d101      	bne.n	8000dc0 <ST_MENU_Change_Setting_State+0x30>
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	e000      	b.n	8000dc2 <ST_MENU_Change_Setting_State+0x32>
 8000dc0:	22ff      	movs	r2, #255	; 0xff
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	b25a      	sxtb	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	701a      	strb	r2, [r3, #0]
		if(*t_value < 0){
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f993 3000 	ldrsb.w	r3, [r3]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	da04      	bge.n	8000de0 <ST_MENU_Change_Setting_State+0x50>
			*t_value = 0;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
			TL_MENU_Set_State();
 8000ddc:	f000 f9d6 	bl	800118c <TL_MENU_Set_State>
		MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <ST_MENU_Change_Setting_State+0x6c>)
 8000de2:	2203      	movs	r2, #3
 8000de4:	701a      	strb	r2, [r3, #0]
		MENU_Data.changed = 0;
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <ST_MENU_Change_Setting_State+0x6c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	721a      	strb	r2, [r3, #8]
}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000130 	.word	0x20000130
 8000df8:	20000131 	.word	0x20000131
 8000dfc:	2000011c 	.word	0x2000011c

08000e00 <ST_MENU_Set_Value>:

void ST_MENU_Set_Value(uint8_t p_is_increase){
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	if(ST_MENU_Data.state < CHECKING_ALARM_AGAIN){
 8000e0a:	4b38      	ldr	r3, [pc, #224]	; (8000eec <ST_MENU_Set_Value+0xec>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d861      	bhi.n	8000ed6 <ST_MENU_Set_Value+0xd6>
		int8_t *t_data_ptr;
		if(ST_MENU_Data.state >= SETTING_ALARM_SUNDAY){
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <ST_MENU_Set_Value+0xec>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d902      	bls.n	8000e20 <ST_MENU_Set_Value+0x20>
			t_data_ptr = (int8_t *)(&ST_MENU_Data.current_day_state);
 8000e1a:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <ST_MENU_Set_Value+0xf0>)
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	e005      	b.n	8000e2c <ST_MENU_Set_Value+0x2c>
		} else{
			t_data_ptr = (int8_t *)(&ST_MENU_Data.timeline_data) + ST_MENU_Data.state;
 8000e20:	4b32      	ldr	r3, [pc, #200]	; (8000eec <ST_MENU_Set_Value+0xec>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <ST_MENU_Set_Value+0xf4>)
 8000e28:	4413      	add	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
		}
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	79fa      	ldrb	r2, [r7, #7]
 8000e36:	2a01      	cmp	r2, #1
 8000e38:	d101      	bne.n	8000e3e <ST_MENU_Set_Value+0x3e>
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	e000      	b.n	8000e40 <ST_MENU_Set_Value+0x40>
 8000e3e:	22ff      	movs	r2, #255	; 0xff
 8000e40:	4413      	add	r3, r2
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	b25a      	sxtb	r2, r3
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	701a      	strb	r2, [r3, #0]
		if(*t_data_ptr > __max_value[ST_MENU_Data.state]){
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <ST_MENU_Set_Value+0xec>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	4619      	mov	r1, r3
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <ST_MENU_Set_Value+0xf8>)
 8000e5a:	5c5b      	ldrb	r3, [r3, r1]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dd03      	ble.n	8000e68 <ST_MENU_Set_Value+0x68>
			*t_data_ptr = 0;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	e00c      	b.n	8000e82 <ST_MENU_Set_Value+0x82>
		} else if(*t_data_ptr < 0){
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	da07      	bge.n	8000e82 <ST_MENU_Set_Value+0x82>
			*t_data_ptr = __max_value[ST_MENU_Data.state];
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <ST_MENU_Set_Value+0xec>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <ST_MENU_Set_Value+0xf8>)
 8000e7a:	5c9b      	ldrb	r3, [r3, r2]
 8000e7c:	b25a      	sxtb	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	701a      	strb	r2, [r3, #0]
		}
		if(ST_MENU_Data.state >= SETTING_ALARM_SUNDAY){
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <ST_MENU_Set_Value+0xec>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d925      	bls.n	8000ed6 <ST_MENU_Set_Value+0xd6>
			if(*t_data_ptr){
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00f      	beq.n	8000eb4 <ST_MENU_Set_Value+0xb4>
				ST_MENU_Data.timeline_data.day |= (0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <ST_MENU_Set_Value+0xec>)
 8000e96:	78db      	ldrb	r3, [r3, #3]
 8000e98:	b25a      	sxtb	r2, r3
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <ST_MENU_Set_Value+0xec>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <ST_MENU_Set_Value+0xec>)
 8000eb0:	70da      	strb	r2, [r3, #3]
 8000eb2:	e010      	b.n	8000ed6 <ST_MENU_Set_Value+0xd6>
			} else{
				ST_MENU_Data.timeline_data.day &= ~(0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <ST_MENU_Set_Value+0xec>)
 8000eb6:	78db      	ldrb	r3, [r3, #3]
 8000eb8:	b25a      	sxtb	r2, r3
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <ST_MENU_Set_Value+0xec>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	4013      	ands	r3, r2
 8000ece:	b25b      	sxtb	r3, r3
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <ST_MENU_Set_Value+0xec>)
 8000ed4:	70da      	strb	r2, [r3, #3]
			}
		}
	}
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <ST_MENU_Set_Value+0xfc>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <ST_MENU_Set_Value+0xfc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	721a      	strb	r2, [r3, #8]
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	20000130 	.word	0x20000130
 8000ef0:	20000135 	.word	0x20000135
 8000ef4:	20000131 	.word	0x20000131
 8000ef8:	20000080 	.word	0x20000080
 8000efc:	2000011c 	.word	0x2000011c

08000f00 <ST_MENU_Display>:

void ST_MENU_Display(){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
	if(MENU_Data.is_changing_menu){
 8000f06:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <ST_MENU_Display+0xe8>)
 8000f08:	7a5b      	ldrb	r3, [r3, #9]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d007      	beq.n	8000f1e <ST_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 8000f0e:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <ST_MENU_Display+0xe8>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f005 fb1c 	bl	8006550 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8000f18:	4b33      	ldr	r3, [pc, #204]	; (8000fe8 <ST_MENU_Display+0xe8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	725a      	strb	r2, [r3, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 8000f1e:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <ST_MENU_Display+0xe8>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f005 fb26 	bl	8006578 <LCD_Set_Cursor>
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 8000f2c:	4b2f      	ldr	r3, [pc, #188]	; (8000fec <ST_MENU_Display+0xec>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d80c      	bhi.n	8000f4e <ST_MENU_Display+0x4e>
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[SR_MENU_Data.state]);
 8000f34:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <ST_MENU_Display+0xe8>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	4a2c      	ldr	r2, [pc, #176]	; (8000fec <ST_MENU_Display+0xec>)
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4a2c      	ldr	r2, [pc, #176]	; (8000ff0 <ST_MENU_Display+0xf0>)
 8000f40:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000f44:	492b      	ldr	r1, [pc, #172]	; (8000ff4 <ST_MENU_Display+0xf4>)
 8000f46:	4618      	mov	r0, r3
 8000f48:	f005 fac4 	bl	80064d4 <LCD_Write>
 8000f4c:	e005      	b.n	8000f5a <ST_MENU_Display+0x5a>
	} else{
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <ST_MENU_Display+0xe8>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	4929      	ldr	r1, [pc, #164]	; (8000ff8 <ST_MENU_Display+0xf8>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	f005 fabd 	bl	80064d4 <LCD_Write>
	}

	LCD_Write(MENU_Data.hlcd, "Time: %02d:%02d", ST_MENU_Data.timeline_data.hour, ST_MENU_Data.timeline_data.minute);
 8000f5a:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <ST_MENU_Display+0xe8>)
 8000f5c:	6858      	ldr	r0, [r3, #4]
 8000f5e:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <ST_MENU_Display+0xfc>)
 8000f60:	785b      	ldrb	r3, [r3, #1]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <ST_MENU_Display+0xfc>)
 8000f66:	789b      	ldrb	r3, [r3, #2]
 8000f68:	4925      	ldr	r1, [pc, #148]	; (8001000 <ST_MENU_Display+0x100>)
 8000f6a:	f005 fab3 	bl	80064d4 <LCD_Write>

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 1);
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <ST_MENU_Display+0xe8>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 fafe 	bl	8006578 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Day: C234567");
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <ST_MENU_Display+0xe8>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	4920      	ldr	r1, [pc, #128]	; (8001004 <ST_MENU_Display+0x104>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	f005 faa6 	bl	80064d4 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 5, 2);
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <ST_MENU_Display+0xe8>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	2105      	movs	r1, #5
 8000f90:	4618      	mov	r0, r3
 8000f92:	f005 faf1 	bl	8006578 <LCD_Set_Cursor>
	for(int i = 0; i < 7; i++){
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	e01d      	b.n	8000fd8 <ST_MENU_Display+0xd8>
		uint8_t t_day_value = ST_MENU_Data.timeline_data.day & (1 << i);
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <ST_MENU_Display+0xfc>)
 8000f9e:	78db      	ldrb	r3, [r3, #3]
 8000fa0:	b25a      	sxtb	r2, r3
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	4013      	ands	r3, r2
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	70fb      	strb	r3, [r7, #3]
		if(t_day_value){
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d006      	beq.n	8000fc6 <ST_MENU_Display+0xc6>
			LCD_Send_Data(MENU_Data.hlcd, 0x00);
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <ST_MENU_Display+0xe8>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f005 fb6b 	bl	800669a <LCD_Send_Data>
 8000fc4:	e005      	b.n	8000fd2 <ST_MENU_Display+0xd2>
		} else{
			LCD_Send_Data(MENU_Data.hlcd, 0xFE);
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <ST_MENU_Display+0xe8>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	21fe      	movs	r1, #254	; 0xfe
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f005 fb64 	bl	800669a <LCD_Send_Data>
	for(int i = 0; i < 7; i++){
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	ddde      	ble.n	8000f9c <ST_MENU_Display+0x9c>
		}
	}
}
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2000011c 	.word	0x2000011c
 8000fec:	20000128 	.word	0x20000128
 8000ff0:	20000068 	.word	0x20000068
 8000ff4:	08007474 	.word	0x08007474
 8000ff8:	08007488 	.word	0x08007488
 8000ffc:	20000130 	.word	0x20000130
 8001000:	080074a0 	.word	0x080074a0
 8001004:	080074b0 	.word	0x080074b0

08001008 <__create_day_string>:
#include "Timeline_List_Menu.h"
#include "Menu.h"

TIME_LIST_MENU_DATA_HandleTypeDef TL_MENU_Data;

static void __create_day_string(char str[], uint8_t day){
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < 7; i++){
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e020      	b.n	800105c <__create_day_string+0x54>
		uint8_t t_day_value = day & (1 << i);
 800101a:	2201      	movs	r2, #1
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	b25a      	sxtb	r2, r3
 8001024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001028:	4013      	ands	r3, r2
 800102a:	b25b      	sxtb	r3, r3
 800102c:	72fb      	strb	r3, [r7, #11]
		if(t_day_value){
 800102e:	7afb      	ldrb	r3, [r7, #11]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d010      	beq.n	8001056 <__create_day_string+0x4e>
			if(t_day_value == 1){
 8001034:	7afb      	ldrb	r3, [r7, #11]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d105      	bne.n	8001046 <__create_day_string+0x3e>
				str[i] = 'C';
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	2243      	movs	r2, #67	; 0x43
 8001042:	701a      	strb	r2, [r3, #0]
 8001044:	e007      	b.n	8001056 <__create_day_string+0x4e>
			} else{
				str[i] = '1' + i;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	440b      	add	r3, r1
 8001050:	3231      	adds	r2, #49	; 0x31
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 7; i++){
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3301      	adds	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b06      	cmp	r3, #6
 8001060:	dddb      	ble.n	800101a <__create_day_string+0x12>
			}
		}
	}
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
	...

08001070 <__update_time_list>:

static void __update_time_list(){
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b087      	sub	sp, #28
 8001074:	af02      	add	r7, sp, #8
	strcpy(TL_MENU_Data.list_str[0], " Add...");
 8001076:	4a26      	ldr	r2, [pc, #152]	; (8001110 <__update_time_list+0xa0>)
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <__update_time_list+0xa4>)
 800107a:	cb03      	ldmia	r3!, {r0, r1}
 800107c:	6010      	str	r0, [r2, #0]
 800107e:	6051      	str	r1, [r2, #4]
	for(int i = 1; i <= TL_MENU_Data.numer_of_choices; i++){
 8001080:	2301      	movs	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e037      	b.n	80010f6 <__update_time_list+0x86>
		char day_str[8] = {};
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
		__create_day_string(day_str, TIMELINE_Data.flash_data[i].day);
 800108e:	4a22      	ldr	r2, [pc, #136]	; (8001118 <__update_time_list+0xa8>)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	799a      	ldrb	r2, [r3, #6]
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ffb3 	bl	8001008 <__create_day_string>
		sprintf(TL_MENU_Data.list_str[i], " %02d:%02d %7s %s ", TIMELINE_Data.flash_data[i].hour, TIMELINE_Data.flash_data[i].minute,
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	00da      	lsls	r2, r3, #3
 80010ac:	1ad2      	subs	r2, r2, r3
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <__update_time_list+0xac>)
 80010b0:	4413      	add	r3, r2
 80010b2:	1c58      	adds	r0, r3, #1
 80010b4:	4a18      	ldr	r2, [pc, #96]	; (8001118 <__update_time_list+0xa8>)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	791b      	ldrb	r3, [r3, #4]
 80010be:	4619      	mov	r1, r3
 80010c0:	4a15      	ldr	r2, [pc, #84]	; (8001118 <__update_time_list+0xa8>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	795b      	ldrb	r3, [r3, #5]
 80010ca:	461c      	mov	r4, r3
				"", (TIMELINE_Data.flash_data[i].timeline_state == TIMELINE_ON) ? "ON" : "OFF");
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <__update_time_list+0xa8>)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	79db      	ldrb	r3, [r3, #7]
		sprintf(TL_MENU_Data.list_str[i], " %02d:%02d %7s %s ", TIMELINE_Data.flash_data[i].hour, TIMELINE_Data.flash_data[i].minute,
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d101      	bne.n	80010de <__update_time_list+0x6e>
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <__update_time_list+0xb0>)
 80010dc:	e000      	b.n	80010e0 <__update_time_list+0x70>
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <__update_time_list+0xb4>)
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <__update_time_list+0xb8>)
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	4623      	mov	r3, r4
 80010e8:	460a      	mov	r2, r1
 80010ea:	4910      	ldr	r1, [pc, #64]	; (800112c <__update_time_list+0xbc>)
 80010ec:	f005 fda2 	bl	8006c34 <siprintf>
	for(int i = 1; i <= TL_MENU_Data.numer_of_choices; i++){
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	3301      	adds	r3, #1
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <__update_time_list+0xac>)
 80010f8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80010fc:	461a      	mov	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4293      	cmp	r3, r2
 8001102:	ddc0      	ble.n	8001086 <__update_time_list+0x16>
	}
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop
 8001110:	20000139 	.word	0x20000139
 8001114:	080074c0 	.word	0x080074c0
 8001118:	20000298 	.word	0x20000298
 800111c:	20000138 	.word	0x20000138
 8001120:	080074c8 	.word	0x080074c8
 8001124:	080074cc 	.word	0x080074cc
 8001128:	080074e4 	.word	0x080074e4
 800112c:	080074d0 	.word	0x080074d0

08001130 <TL_MENU_Init>:

void TL_MENU_Init(){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
	TL_MENU_Data.first_line = 0;
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <TL_MENU_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
	TIMELINE_Init();
 800113c:	f000 fa36 	bl	80015ac <TIMELINE_Init>
	for(int i = 0; i < NUMBER_OF_CHOICE; i++){
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	e018      	b.n	8001178 <TL_MENU_Init+0x48>
		for(int j = 0; j < 21; j++){
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	e00f      	b.n	800116c <TL_MENU_Init+0x3c>
			TL_MENU_Data.list_str[i][j] = 0;
 800114c:	490e      	ldr	r1, [pc, #56]	; (8001188 <TL_MENU_Init+0x58>)
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	00da      	lsls	r2, r3, #3
 8001158:	1ad2      	subs	r2, r2, r3
 800115a:	440a      	add	r2, r1
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	4413      	add	r3, r2
 8001160:	3301      	adds	r3, #1
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 21; j++){
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2b14      	cmp	r3, #20
 8001170:	ddec      	ble.n	800114c <TL_MENU_Init+0x1c>
	for(int i = 0; i < NUMBER_OF_CHOICE; i++){
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3301      	adds	r3, #1
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b0e      	cmp	r3, #14
 800117c:	dde3      	ble.n	8001146 <TL_MENU_Init+0x16>
		}
	}
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000138 	.word	0x20000138

0800118c <TL_MENU_Set_State>:

void TL_MENU_Set_State(){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <TL_MENU_Set_State+0x3c>)
 8001192:	2202      	movs	r2, #2
 8001194:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <TL_MENU_Set_State+0x3c>)
 8001198:	2200      	movs	r2, #0
 800119a:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <TL_MENU_Set_State+0x3c>)
 800119e:	2201      	movs	r2, #1
 80011a0:	725a      	strb	r2, [r3, #9]
	TL_MENU_Data.first_line = 0;
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <TL_MENU_Set_State+0x40>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	TL_MENU_Data.current_pointer = 0;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <TL_MENU_Set_State+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <TL_MENU_Set_State+0x44>)
 80011b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011b6:	3301      	adds	r3, #1
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <TL_MENU_Set_State+0x40>)
 80011bc:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	__update_time_list();
 80011c0:	f7ff ff56 	bl	8001070 <__update_time_list>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000011c 	.word	0x2000011c
 80011cc:	20000138 	.word	0x20000138
 80011d0:	20000298 	.word	0x20000298

080011d4 <TL_MENU_Change_Pointer>:

void TL_MENU_Change_Pointer(uint8_t p_is_increase){
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <TL_MENU_Change_Pointer+0xb4>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <TL_MENU_Change_Pointer+0xb4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	721a      	strb	r2, [r3, #8]
	TL_MENU_Data.current_pointer += (p_is_increase == INCREASE) ? 1 : -1;
 80011ea:	4b28      	ldr	r3, [pc, #160]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 80011ec:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	79fa      	ldrb	r2, [r7, #7]
 80011f4:	2a01      	cmp	r2, #1
 80011f6:	d101      	bne.n	80011fc <TL_MENU_Change_Pointer+0x28>
 80011f8:	2201      	movs	r2, #1
 80011fa:	e000      	b.n	80011fe <TL_MENU_Change_Pointer+0x2a>
 80011fc:	22ff      	movs	r2, #255	; 0xff
 80011fe:	4413      	add	r3, r2
 8001200:	b2db      	uxtb	r3, r3
 8001202:	b25a      	sxtb	r2, r3
 8001204:	4b21      	ldr	r3, [pc, #132]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 8001206:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	if(TL_MENU_Data.current_pointer < 0){
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 800120c:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 8001210:	2b00      	cmp	r3, #0
 8001212:	da04      	bge.n	800121e <TL_MENU_Change_Pointer+0x4a>
		TL_MENU_Data.current_pointer = 0;
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
 800121c:	e00f      	b.n	800123e <TL_MENU_Change_Pointer+0x6a>
	} else if(TL_MENU_Data.current_pointer > TL_MENU_Data.numer_of_choices){
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 8001220:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 8001224:	461a      	mov	r2, r3
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 8001228:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800122c:	429a      	cmp	r2, r3
 800122e:	dd06      	ble.n	800123e <TL_MENU_Change_Pointer+0x6a>
		TL_MENU_Data.current_pointer = TL_MENU_Data.numer_of_choices;
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 8001232:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001236:	b25a      	sxtb	r2, r3
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 800123a:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}

	if(TL_MENU_Data.current_pointer > TL_MENU_Data.first_line + 3){
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 8001240:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 8001244:	461a      	mov	r2, r3
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	3303      	adds	r3, #3
 800124c:	429a      	cmp	r2, r3
 800124e:	dd06      	ble.n	800125e <TL_MENU_Change_Pointer+0x8a>
		TL_MENU_Data.first_line++;
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 800125a:	701a      	strb	r2, [r3, #0]
	} else if(TL_MENU_Data.current_pointer < TL_MENU_Data.first_line - 3){
		TL_MENU_Data.first_line--;
	}
}
 800125c:	e00e      	b.n	800127c <TL_MENU_Change_Pointer+0xa8>
	} else if(TL_MENU_Data.current_pointer < TL_MENU_Data.first_line - 3){
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 8001260:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 8001264:	461a      	mov	r2, r3
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	3b03      	subs	r3, #3
 800126c:	429a      	cmp	r2, r3
 800126e:	da05      	bge.n	800127c <TL_MENU_Change_Pointer+0xa8>
		TL_MENU_Data.first_line--;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3b01      	subs	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <TL_MENU_Change_Pointer+0xb8>)
 800127a:	701a      	strb	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	2000011c 	.word	0x2000011c
 800128c:	20000138 	.word	0x20000138

08001290 <TL_MENU_Change_Timeline_State>:

void TL_MENU_Change_Timeline_State(){
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <TL_MENU_Change_Timeline_State+0x60>)
 8001296:	2202      	movs	r2, #2
 8001298:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <TL_MENU_Change_Timeline_State+0x60>)
 800129c:	2200      	movs	r2, #0
 800129e:	721a      	strb	r2, [r3, #8]
	if(TL_MENU_Data.current_pointer == 0) return;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <TL_MENU_Change_Timeline_State+0x64>)
 80012a2:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d01d      	beq.n	80012e6 <TL_MENU_Change_Timeline_State+0x56>
	if(TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state == TIMELINE_ON)
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <TL_MENU_Change_Timeline_State+0x64>)
 80012ac:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <TL_MENU_Change_Timeline_State+0x68>)
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	79db      	ldrb	r3, [r3, #7]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d109      	bne.n	80012d2 <TL_MENU_Change_Timeline_State+0x42>
		TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state = TIMELINE_OFF;
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <TL_MENU_Change_Timeline_State+0x64>)
 80012c0:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 80012c4:	3b01      	subs	r3, #1
 80012c6:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <TL_MENU_Change_Timeline_State+0x68>)
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	71da      	strb	r2, [r3, #7]
 80012d0:	e00a      	b.n	80012e8 <TL_MENU_Change_Timeline_State+0x58>
	else
		TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state = TIMELINE_ON;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <TL_MENU_Change_Timeline_State+0x64>)
 80012d4:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 80012d8:	3b01      	subs	r3, #1
 80012da:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <TL_MENU_Change_Timeline_State+0x68>)
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	2201      	movs	r2, #1
 80012e2:	71da      	strb	r2, [r3, #7]
 80012e4:	e000      	b.n	80012e8 <TL_MENU_Change_Timeline_State+0x58>
	if(TL_MENU_Data.current_pointer == 0) return;
 80012e6:	bf00      	nop
}
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	2000011c 	.word	0x2000011c
 80012f4:	20000138 	.word	0x20000138
 80012f8:	20000298 	.word	0x20000298

080012fc <TL_MENU_Display>:

void TL_MENU_Display(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	if(MENU_Data.is_changing_menu == 1){
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <TL_MENU_Display+0xa0>)
 8001304:	7a5b      	ldrb	r3, [r3, #9]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d107      	bne.n	800131a <TL_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <TL_MENU_Display+0xa0>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	f005 f91e 	bl	8006550 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <TL_MENU_Display+0xa0>)
 8001316:	2200      	movs	r2, #0
 8001318:	725a      	strb	r2, [r3, #9]
	}
	for(int i = 0; i < 4; i++){
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	e035      	b.n	800138c <TL_MENU_Display+0x90>
		LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <TL_MENU_Display+0xa0>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f005 f924 	bl	8006578 <LCD_Set_Cursor>
		LCD_Write(MENU_Data.hlcd, TL_MENU_Data.list_str[TL_MENU_Data.first_line + i]);
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <TL_MENU_Display+0xa0>)
 8001332:	6858      	ldr	r0, [r3, #4]
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <TL_MENU_Display+0xa4>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	441a      	add	r2, r3
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	00da      	lsls	r2, r3, #3
 8001346:	1ad2      	subs	r2, r2, r3
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <TL_MENU_Display+0xa4>)
 800134a:	4413      	add	r3, r2
 800134c:	3301      	adds	r3, #1
 800134e:	4619      	mov	r1, r3
 8001350:	f005 f8c0 	bl	80064d4 <LCD_Write>
		if(TL_MENU_Data.current_pointer == TL_MENU_Data.first_line + i){
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <TL_MENU_Display+0xa4>)
 8001356:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 800135a:	461a      	mov	r2, r3
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <TL_MENU_Display+0xa4>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	440b      	add	r3, r1
 8001366:	429a      	cmp	r2, r3
 8001368:	d10d      	bne.n	8001386 <TL_MENU_Display+0x8a>
			LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <TL_MENU_Display+0xa0>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f005 f8ff 	bl	8006578 <LCD_Set_Cursor>
			LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <TL_MENU_Display+0xa0>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	217e      	movs	r1, #126	; 0x7e
 8001380:	4618      	mov	r0, r3
 8001382:	f005 f98a 	bl	800669a <LCD_Send_Data>
	for(int i = 0; i < 4; i++){
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3301      	adds	r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b03      	cmp	r3, #3
 8001390:	ddc6      	ble.n	8001320 <TL_MENU_Display+0x24>
		}
	}
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000011c 	.word	0x2000011c
 80013a0:	20000138 	.word	0x20000138

080013a4 <BTN_Short_Pressing_Callback>:

BUTTON_HandleTypedef h_encoder_button;
ENCODER_HandleTypeDef h_encoder;
extern TIM_HandleTypeDef htim2;

void BTN_Short_Pressing_Callback(BUTTON_HandleTypedef *p_ButtonX){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	if(p_ButtonX == &h_encoder_button){
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a18      	ldr	r2, [pc, #96]	; (8001410 <BTN_Short_Pressing_Callback+0x6c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d125      	bne.n	8001400 <BTN_Short_Pressing_Callback+0x5c>
		switch(MENU_Data.menu_type){
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <BTN_Short_Pressing_Callback+0x70>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d823      	bhi.n	8001404 <BTN_Short_Pressing_Callback+0x60>
 80013bc:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <BTN_Short_Pressing_Callback+0x20>)
 80013be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c2:	bf00      	nop
 80013c4:	080013d5 	.word	0x080013d5
 80013c8:	080013db 	.word	0x080013db
 80013cc:	080013e3 	.word	0x080013e3
 80013d0:	080013f9 	.word	0x080013f9
			case MAIN_MENU:
				TL_MENU_Set_State();
 80013d4:	f7ff feda 	bl	800118c <TL_MENU_Set_State>
				break;
 80013d8:	e015      	b.n	8001406 <BTN_Short_Pressing_Callback+0x62>
			case SETTING_REALTIME_MENU:
				SR_MENU_Change_Setting_State(INCREASE);
 80013da:	2001      	movs	r0, #1
 80013dc:	f7ff fb12 	bl	8000a04 <SR_MENU_Change_Setting_State>
				break;
 80013e0:	e011      	b.n	8001406 <BTN_Short_Pressing_Callback+0x62>
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.current_pointer == 0){
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <BTN_Short_Pressing_Callback+0x74>)
 80013e4:	f993 313d 	ldrsb.w	r3, [r3, #317]	; 0x13d
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <BTN_Short_Pressing_Callback+0x4e>
					ST_MENU_Set_State();
 80013ec:	f7ff fca8 	bl	8000d40 <ST_MENU_Set_State>
				} else{
					TL_MENU_Change_Timeline_State();
				}
				break;
 80013f0:	e009      	b.n	8001406 <BTN_Short_Pressing_Callback+0x62>
					TL_MENU_Change_Timeline_State();
 80013f2:	f7ff ff4d 	bl	8001290 <TL_MENU_Change_Timeline_State>
				break;
 80013f6:	e006      	b.n	8001406 <BTN_Short_Pressing_Callback+0x62>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Change_Setting_State(INCREASE);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff fcc9 	bl	8000d90 <ST_MENU_Change_Setting_State>
				break;
 80013fe:	e002      	b.n	8001406 <BTN_Short_Pressing_Callback+0x62>
			default:
				break;
		}
	}
 8001400:	bf00      	nop
 8001402:	e000      	b.n	8001406 <BTN_Short_Pressing_Callback+0x62>
				break;
 8001404:	bf00      	nop
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000278 	.word	0x20000278
 8001414:	2000011c 	.word	0x2000011c
 8001418:	20000138 	.word	0x20000138

0800141c <BTN_Long_Pressing_Callback>:

void BTN_Long_Pressing_Callback(BUTTON_HandleTypedef *p_ButtonX){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	if(p_ButtonX == &h_encoder_button){
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a14      	ldr	r2, [pc, #80]	; (8001478 <BTN_Long_Pressing_Callback+0x5c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d11d      	bne.n	8001468 <BTN_Long_Pressing_Callback+0x4c>
		switch(MENU_Data.menu_type){
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <BTN_Long_Pressing_Callback+0x60>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b03      	cmp	r3, #3
 8001432:	d81b      	bhi.n	800146c <BTN_Long_Pressing_Callback+0x50>
 8001434:	a201      	add	r2, pc, #4	; (adr r2, 800143c <BTN_Long_Pressing_Callback+0x20>)
 8001436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143a:	bf00      	nop
 800143c:	0800144d 	.word	0x0800144d
 8001440:	08001453 	.word	0x08001453
 8001444:	0800145b 	.word	0x0800145b
 8001448:	08001461 	.word	0x08001461
			case MAIN_MENU:
				SR_MENU_Set_State();
 800144c:	f7ff fab6 	bl	80009bc <SR_MENU_Set_State>
				break;
 8001450:	e00d      	b.n	800146e <BTN_Long_Pressing_Callback+0x52>
			case SETTING_REALTIME_MENU:
				SR_MENU_Change_Setting_State(DECREASE);
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff fad6 	bl	8000a04 <SR_MENU_Change_Setting_State>
				break;
 8001458:	e009      	b.n	800146e <BTN_Long_Pressing_Callback+0x52>
			case TIMELINE_LIST_MENU:
				MAIN_MENU_Display();
 800145a:	f7ff f95d 	bl	8000718 <MAIN_MENU_Display>
				break;
 800145e:	e006      	b.n	800146e <BTN_Long_Pressing_Callback+0x52>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Change_Setting_State(DECREASE);
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff fc95 	bl	8000d90 <ST_MENU_Change_Setting_State>
				break;
 8001466:	e002      	b.n	800146e <BTN_Long_Pressing_Callback+0x52>
			default:
				break;
		}
	}
 8001468:	bf00      	nop
 800146a:	e000      	b.n	800146e <BTN_Long_Pressing_Callback+0x52>
				break;
 800146c:	bf00      	nop
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000278 	.word	0x20000278
 800147c:	2000011c 	.word	0x2000011c

08001480 <ENCODER_Forward_Callback>:

void ENCODER_Forward_Callback(ENCODER_HandleTypeDef *p_encoder){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	if(p_encoder == &h_encoder){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <ENCODER_Forward_Callback+0x58>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d11b      	bne.n	80014c8 <ENCODER_Forward_Callback+0x48>
		switch(MENU_Data.menu_type){
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <ENCODER_Forward_Callback+0x5c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d819      	bhi.n	80014cc <ENCODER_Forward_Callback+0x4c>
 8001498:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <ENCODER_Forward_Callback+0x20>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	080014cd 	.word	0x080014cd
 80014a4:	080014b1 	.word	0x080014b1
 80014a8:	080014b9 	.word	0x080014b9
 80014ac:	080014c1 	.word	0x080014c1
			case MAIN_MENU:

				break;
			case SETTING_REALTIME_MENU:
				SR_MENU_Set_Value(INCREASE);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f7ff fadd 	bl	8000a70 <SR_MENU_Set_Value>
				break;
 80014b6:	e00a      	b.n	80014ce <ENCODER_Forward_Callback+0x4e>
			case TIMELINE_LIST_MENU:
				TL_MENU_Change_Pointer(INCREASE);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff fe8b 	bl	80011d4 <TL_MENU_Change_Pointer>
				break;
 80014be:	e006      	b.n	80014ce <ENCODER_Forward_Callback+0x4e>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Set_Value(INCREASE);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff fc9d 	bl	8000e00 <ST_MENU_Set_Value>
				break;
 80014c6:	e002      	b.n	80014ce <ENCODER_Forward_Callback+0x4e>
			default:
				break;
		}
	}
 80014c8:	bf00      	nop
 80014ca:	e000      	b.n	80014ce <ENCODER_Forward_Callback+0x4e>
				break;
 80014cc:	bf00      	nop
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000290 	.word	0x20000290
 80014dc:	2000011c 	.word	0x2000011c

080014e0 <ENCODER_Backward_Callback>:

void ENCODER_Backward_Callback(ENCODER_HandleTypeDef *p_encoder){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	if(p_encoder == &h_encoder){
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a13      	ldr	r2, [pc, #76]	; (8001538 <ENCODER_Backward_Callback+0x58>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d11b      	bne.n	8001528 <ENCODER_Backward_Callback+0x48>
		switch(MENU_Data.menu_type){
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <ENCODER_Backward_Callback+0x5c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d819      	bhi.n	800152c <ENCODER_Backward_Callback+0x4c>
 80014f8:	a201      	add	r2, pc, #4	; (adr r2, 8001500 <ENCODER_Backward_Callback+0x20>)
 80014fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fe:	bf00      	nop
 8001500:	0800152d 	.word	0x0800152d
 8001504:	08001511 	.word	0x08001511
 8001508:	08001519 	.word	0x08001519
 800150c:	08001521 	.word	0x08001521
			case MAIN_MENU:

				break;
			case SETTING_REALTIME_MENU:
				SR_MENU_Set_Value(DECREASE);
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff faad 	bl	8000a70 <SR_MENU_Set_Value>
				break;
 8001516:	e00a      	b.n	800152e <ENCODER_Backward_Callback+0x4e>
			case TIMELINE_LIST_MENU:
				TL_MENU_Change_Pointer(DECREASE);
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff fe5b 	bl	80011d4 <TL_MENU_Change_Pointer>
				break;
 800151e:	e006      	b.n	800152e <ENCODER_Backward_Callback+0x4e>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Set_Value(DECREASE);
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff fc6d 	bl	8000e00 <ST_MENU_Set_Value>
				break;
 8001526:	e002      	b.n	800152e <ENCODER_Backward_Callback+0x4e>
			default:
				break;
		}
	}
 8001528:	bf00      	nop
 800152a:	e000      	b.n	800152e <ENCODER_Backward_Callback+0x4e>
				break;
 800152c:	bf00      	nop
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000290 	.word	0x20000290
 800153c:	2000011c 	.word	0x2000011c

08001540 <ROTARY_ENCODER_Init>:

void ROTARY_ENCODER_Init(){
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	BUTTON_Init(&h_encoder_button, GPIOA, GPIO_PIN_1);
 8001544:	2202      	movs	r2, #2
 8001546:	490a      	ldr	r1, [pc, #40]	; (8001570 <ROTARY_ENCODER_Init+0x30>)
 8001548:	480a      	ldr	r0, [pc, #40]	; (8001574 <ROTARY_ENCODER_Init+0x34>)
 800154a:	f005 f979 	bl	8006840 <BUTTON_Init>
	BUTTON_Set_Callback_Function(NULL, NULL, BTN_Short_Pressing_Callback, BTN_Long_Pressing_Callback);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <ROTARY_ENCODER_Init+0x38>)
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <ROTARY_ENCODER_Init+0x3c>)
 8001552:	2100      	movs	r1, #0
 8001554:	2000      	movs	r0, #0
 8001556:	f005 f995 	bl	8006884 <BUTTON_Set_Callback_Function>
	ENCODER_Init(&h_encoder, &htim2);
 800155a:	4909      	ldr	r1, [pc, #36]	; (8001580 <ROTARY_ENCODER_Init+0x40>)
 800155c:	4809      	ldr	r0, [pc, #36]	; (8001584 <ROTARY_ENCODER_Init+0x44>)
 800155e:	f004 fed7 	bl	8006310 <ENCODER_Init>
	ENCODER_Set_Callback_Function(ENCODER_Forward_Callback, ENCODER_Backward_Callback);
 8001562:	4909      	ldr	r1, [pc, #36]	; (8001588 <ROTARY_ENCODER_Init+0x48>)
 8001564:	4809      	ldr	r0, [pc, #36]	; (800158c <ROTARY_ENCODER_Init+0x4c>)
 8001566:	f004 fee7 	bl	8006338 <ENCODER_Set_Callback_Function>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40010800 	.word	0x40010800
 8001574:	20000278 	.word	0x20000278
 8001578:	0800141d 	.word	0x0800141d
 800157c:	080013a5 	.word	0x080013a5
 8001580:	20000398 	.word	0x20000398
 8001584:	20000290 	.word	0x20000290
 8001588:	080014e1 	.word	0x080014e1
 800158c:	08001481 	.word	0x08001481

08001590 <ROTARY_ENCODER_Handle>:

void ROTARY_ENCODER_Handle(){
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	BUTTON_Handle(&h_encoder_button);
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <ROTARY_ENCODER_Handle+0x14>)
 8001596:	f005 f8c1 	bl	800671c <BUTTON_Handle>
	ENCODER_Handle(&h_encoder);
 800159a:	4803      	ldr	r0, [pc, #12]	; (80015a8 <ROTARY_ENCODER_Handle+0x18>)
 800159c:	f004 fef8 	bl	8006390 <ENCODER_Handle>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000278 	.word	0x20000278
 80015a8:	20000290 	.word	0x20000290

080015ac <TIMELINE_Init>:
//			HAL_UART_Transmit(&huart2, (uint8_t *)Tx_Buffer, strlen(Tx_Buffer), 1000);
//		}
//	}
}

void TIMELINE_Init(){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
#ifdef __STM32F0xx_HAL_H
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63;
#endif
#ifdef __STM32F1xx_HAL_H
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63;
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <TIMELINE_Init+0x9c>)
 80015b4:	4a25      	ldr	r2, [pc, #148]	; (800164c <TIMELINE_Init+0xa0>)
 80015b6:	601a      	str	r2, [r3, #0]
#endif
#ifdef __STM32F4xx_HAL_H
	TIMELINE_Data.add = SECTOR_7_ADD;
#endif

	TIMELINE_Data.len = 0;
 80015b8:	4b23      	ldr	r3, [pc, #140]	; (8001648 <TIMELINE_Init+0x9c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	for(int i = 0; i < MAX_OPTIONS; i++){
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	e038      	b.n	8001638 <TIMELINE_Init+0x8c>
		uint8_t t_data[DATA_FRAME_SIZE_BYTE];
		FLASH_Read(TIMELINE_Data.add + i*DATA_FRAME_SIZE_BYTE, t_data, DATA_FRAME_SIZE_BYTE);
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <TIMELINE_Init+0x9c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	4639      	mov	r1, r7
 80015d2:	2204      	movs	r2, #4
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 f9d4 	bl	8006982 <FLASH_Read>
		if(((uint24_t *)t_data)->value == 0xFFFFFF){
 80015da:	463b      	mov	r3, r7
 80015dc:	781a      	ldrb	r2, [r3, #0]
 80015de:	7859      	ldrb	r1, [r3, #1]
 80015e0:	0209      	lsls	r1, r1, #8
 80015e2:	430a      	orrs	r2, r1
 80015e4:	789b      	ldrb	r3, [r3, #2]
 80015e6:	041b      	lsls	r3, r3, #16
 80015e8:	4313      	orrs	r3, r2
 80015ea:	461a      	mov	r2, r3
 80015ec:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d10d      	bne.n	8001610 <TIMELINE_Init+0x64>
			((uint24_t *)(TIMELINE_Data.flash_data + i))->value = 0xFFFFFF;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4a15      	ldr	r2, [pc, #84]	; (8001650 <TIMELINE_Init+0xa4>)
 80015fa:	4413      	add	r3, r2
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	701a      	strb	r2, [r3, #0]
 8001602:	f04f 32ff 	mov.w	r2, #4294967295
 8001606:	705a      	strb	r2, [r3, #1]
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	709a      	strb	r2, [r3, #2]
 800160e:	e010      	b.n	8001632 <TIMELINE_Init+0x86>
		} else{
			TIMELINE_Data.flash_data[i] = *((FLASH_DATA_t *)t_data);
 8001610:	4639      	mov	r1, r7
 8001612:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <TIMELINE_Init+0x9c>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	3304      	adds	r3, #4
 800161c:	460a      	mov	r2, r1
 800161e:	6810      	ldr	r0, [r2, #0]
 8001620:	6018      	str	r0, [r3, #0]
			TIMELINE_Data.len++;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <TIMELINE_Init+0x9c>)
 8001624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001628:	3301      	adds	r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <TIMELINE_Init+0x9c>)
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	for(int i = 0; i < MAX_OPTIONS; i++){
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3301      	adds	r3, #1
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b0d      	cmp	r3, #13
 800163c:	ddc3      	ble.n	80015c6 <TIMELINE_Init+0x1a>
		}
	}
}
 800163e:	bf00      	nop
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000298 	.word	0x20000298
 800164c:	0800fc00 	.word	0x0800fc00
 8001650:	2000029c 	.word	0x2000029c

08001654 <TIMELINE_Add>:

void TIMELINE_Add(FLASH_DATA_t *p_new_timeline){
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	if(TIMELINE_Data.len < MAX_OPTIONS){
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <TIMELINE_Add+0x48>)
 800165e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001662:	2b0d      	cmp	r3, #13
 8001664:	d815      	bhi.n	8001692 <TIMELINE_Add+0x3e>
		TIMELINE_Data.flash_data[TIMELINE_Data.len] = *p_new_timeline;
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <TIMELINE_Add+0x48>)
 8001668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800166c:	4a0b      	ldr	r2, [pc, #44]	; (800169c <TIMELINE_Add+0x48>)
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	3304      	adds	r3, #4
 8001676:	6810      	ldr	r0, [r2, #0]
 8001678:	6018      	str	r0, [r3, #0]
		TIMELINE_Data.len++;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <TIMELINE_Add+0x48>)
 800167c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001680:	3301      	adds	r3, #1
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <TIMELINE_Add+0x48>)
 8001686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		TIMELINE_Sort();
 800168a:	f000 f809 	bl	80016a0 <TIMELINE_Sort>
		TIMELINE_Store_To_Flash();
 800168e:	f000 f86d 	bl	800176c <TIMELINE_Store_To_Flash>
	}
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000298 	.word	0x20000298

080016a0 <TIMELINE_Sort>:
		TIMELINE_Data.len--;
		TIMELINE_Store_To_Flash();
	}
}

void TIMELINE_Sort(){
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < TIMELINE_Data.len; i++){
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e050      	b.n	800174e <TIMELINE_Sort+0xae>
		for(int j = i + 1; j < TIMELINE_Data.len; j++){
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3301      	adds	r3, #1
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	e042      	b.n	800173a <TIMELINE_Sort+0x9a>
			uint16_t t_data_i = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 80016b4:	4a2c      	ldr	r2, [pc, #176]	; (8001768 <TIMELINE_Sort+0xc8>)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	791b      	ldrb	r3, [r3, #4]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4927      	ldr	r1, [pc, #156]	; (8001768 <TIMELINE_Sort+0xc8>)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	795b      	ldrb	r3, [r3, #5]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	80fb      	strh	r3, [r7, #6]
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 80016da:	4a23      	ldr	r2, [pc, #140]	; (8001768 <TIMELINE_Sort+0xc8>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	791b      	ldrb	r3, [r3, #4]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	0112      	lsls	r2, r2, #4
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	491d      	ldr	r1, [pc, #116]	; (8001768 <TIMELINE_Sort+0xc8>)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	795b      	ldrb	r3, [r3, #5]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	80bb      	strh	r3, [r7, #4]
			if(t_data_i > t_data_j){
 8001700:	88fa      	ldrh	r2, [r7, #6]
 8001702:	88bb      	ldrh	r3, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	d915      	bls.n	8001734 <TIMELINE_Sort+0x94>
				FLASH_DATA_t t_temp;
				t_temp = TIMELINE_Data.flash_data[i];
 8001708:	4a17      	ldr	r2, [pc, #92]	; (8001768 <TIMELINE_Sort+0xc8>)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	603b      	str	r3, [r7, #0]
				TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[j];
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <TIMELINE_Sort+0xc8>)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	4912      	ldr	r1, [pc, #72]	; (8001768 <TIMELINE_Sort+0xc8>)
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	0092      	lsls	r2, r2, #2
 8001722:	440a      	add	r2, r1
 8001724:	6852      	ldr	r2, [r2, #4]
 8001726:	605a      	str	r2, [r3, #4]
				TIMELINE_Data.flash_data[j] = t_temp;
 8001728:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <TIMELINE_Sort+0xc8>)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	605a      	str	r2, [r3, #4]
		for(int j = i + 1; j < TIMELINE_Data.len; j++){
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	3301      	adds	r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <TIMELINE_Sort+0xc8>)
 800173c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001740:	461a      	mov	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	4293      	cmp	r3, r2
 8001746:	dbb5      	blt.n	80016b4 <TIMELINE_Sort+0x14>
	for(int i = 0; i < TIMELINE_Data.len; i++){
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3301      	adds	r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <TIMELINE_Sort+0xc8>)
 8001750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001754:	461a      	mov	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4293      	cmp	r3, r2
 800175a:	dba7      	blt.n	80016ac <TIMELINE_Sort+0xc>
			}
		}
	}
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	20000298 	.word	0x20000298

0800176c <TIMELINE_Store_To_Flash>:

void TIMELINE_Store_To_Flash(){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	FLASH_DATA_t *t_flash_data;
	t_flash_data = (FLASH_DATA_t *)malloc(TIMELINE_Data.len * DATA_FRAME_SIZE_BIT);
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <TIMELINE_Store_To_Flash+0x70>)
 8001774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001778:	015b      	lsls	r3, r3, #5
 800177a:	4618      	mov	r0, r3
 800177c:	f005 f956 	bl	8006a2c <malloc>
 8001780:	4603      	mov	r3, r0
 8001782:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < TIMELINE_Data.len; i++){
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	e00e      	b.n	80017a8 <TIMELINE_Store_To_Flash+0x3c>
		*(t_flash_data + i) = *(TIMELINE_Data.flash_data + i);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <TIMELINE_Store_To_Flash+0x74>)
 8001790:	1899      	adds	r1, r3, r2
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4413      	add	r3, r2
 800179a:	461a      	mov	r2, r3
 800179c:	460b      	mov	r3, r1
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < TIMELINE_Data.len; i++){
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3301      	adds	r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <TIMELINE_Store_To_Flash+0x70>)
 80017aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ae:	461a      	mov	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4293      	cmp	r3, r2
 80017b4:	dbe9      	blt.n	800178a <TIMELINE_Store_To_Flash+0x1e>
	}
	FLASH_Write(63, (uint8_t *)t_flash_data, TIMELINE_Data.len * DATA_FRAME_SIZE_BYTE);
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <TIMELINE_Store_To_Flash+0x70>)
 80017b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017bc:	b29b      	uxth	r3, r3
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	6839      	ldr	r1, [r7, #0]
 80017c6:	203f      	movs	r0, #63	; 0x3f
 80017c8:	f005 f89b 	bl	8006902 <FLASH_Write>
	free(t_flash_data);
 80017cc:	6838      	ldr	r0, [r7, #0]
 80017ce:	f005 f935 	bl	8006a3c <free>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000298 	.word	0x20000298
 80017e0:	2000029c 	.word	0x2000029c

080017e4 <REALTIME_Init>:
DS3231_HandleTypeDef hds3231;
REALTIME_DATA_HandleTypeDef REALTIME_Data;

static uint32_t timer = 0;

void REALTIME_Init(){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	DS3231_Init(&hds3231, &hi2c2);
 80017e8:	491e      	ldr	r1, [pc, #120]	; (8001864 <REALTIME_Init+0x80>)
 80017ea:	481f      	ldr	r0, [pc, #124]	; (8001868 <REALTIME_Init+0x84>)
 80017ec:	f004 fc60 	bl	80060b0 <DS3231_Init>
	REALTIME_Data.system_day = 1;
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <REALTIME_Init+0x88>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = 0;
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <REALTIME_Init+0x88>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = 0;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <REALTIME_Init+0x88>)
 80017fe:	2200      	movs	r2, #0
 8001800:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = 1;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <REALTIME_Init+0x88>)
 8001804:	2201      	movs	r2, #1
 8001806:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = 1;
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <REALTIME_Init+0x88>)
 800180a:	2201      	movs	r2, #1
 800180c:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = 0;
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <REALTIME_Init+0x88>)
 8001810:	2200      	movs	r2, #0
 8001812:	715a      	strb	r2, [r3, #5]

//	DS3231_Set_Time(&hds3231, 19, 54, 0, 6);
//	DS3231_Set_Date(&hds3231, 2, 9, 22);

	if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8001814:	4814      	ldr	r0, [pc, #80]	; (8001868 <REALTIME_Init+0x84>)
 8001816:	f004 fc93 	bl	8006140 <DS3231_Get_Time>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d01f      	beq.n	8001860 <REALTIME_Init+0x7c>
 8001820:	4811      	ldr	r0, [pc, #68]	; (8001868 <REALTIME_Init+0x84>)
 8001822:	f004 fcfc 	bl	800621e <DS3231_Get_Date>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d019      	beq.n	8001860 <REALTIME_Init+0x7c>
		return;
	}

	REALTIME_Data.system_day = hds3231.current_day;
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <REALTIME_Init+0x84>)
 800182e:	78da      	ldrb	r2, [r3, #3]
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <REALTIME_Init+0x88>)
 8001832:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = hds3231.current_hour;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <REALTIME_Init+0x84>)
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <REALTIME_Init+0x88>)
 800183a:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = hds3231.current_minute;
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <REALTIME_Init+0x84>)
 800183e:	785a      	ldrb	r2, [r3, #1]
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <REALTIME_Init+0x88>)
 8001842:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = hds3231.current_date;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <REALTIME_Init+0x84>)
 8001846:	791a      	ldrb	r2, [r3, #4]
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <REALTIME_Init+0x88>)
 800184a:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = hds3231.current_month;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <REALTIME_Init+0x84>)
 800184e:	795a      	ldrb	r2, [r3, #5]
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <REALTIME_Init+0x88>)
 8001852:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = hds3231.current_year;
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <REALTIME_Init+0x84>)
 8001856:	88db      	ldrh	r3, [r3, #6]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <REALTIME_Init+0x88>)
 800185c:	715a      	strb	r2, [r3, #5]
 800185e:	e000      	b.n	8001862 <REALTIME_Init+0x7e>
		return;
 8001860:	bf00      	nop
}
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000344 	.word	0x20000344
 8001868:	200002d8 	.word	0x200002d8
 800186c:	200002e4 	.word	0x200002e4

08001870 <REALTIME_Handle>:

void REALTIME_Handle(){
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - timer > CHECKING_REAL_TIME_CYCLE){
 8001874:	f000 fd74 	bl	8002360 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <REALTIME_Handle+0x80>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f241 3288 	movw	r2, #5000	; 0x1388
 8001884:	4293      	cmp	r3, r2
 8001886:	d932      	bls.n	80018ee <REALTIME_Handle+0x7e>
		if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8001888:	481a      	ldr	r0, [pc, #104]	; (80018f4 <REALTIME_Handle+0x84>)
 800188a:	f004 fc59 	bl	8006140 <DS3231_Get_Time>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d02b      	beq.n	80018ec <REALTIME_Handle+0x7c>
 8001894:	4817      	ldr	r0, [pc, #92]	; (80018f4 <REALTIME_Handle+0x84>)
 8001896:	f004 fcc2 	bl	800621e <DS3231_Get_Date>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d025      	beq.n	80018ec <REALTIME_Handle+0x7c>
			return;
		}

		if(REALTIME_Data.system_minute != hds3231.current_minute){
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <REALTIME_Handle+0x88>)
 80018a2:	785a      	ldrb	r2, [r3, #1]
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <REALTIME_Handle+0x84>)
 80018a6:	785b      	ldrb	r3, [r3, #1]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d005      	beq.n	80018b8 <REALTIME_Handle+0x48>
			if(MENU_Data.menu_type == MAIN_MENU){
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <REALTIME_Handle+0x8c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <REALTIME_Handle+0x48>
				MAIN_MENU_Update_Value();
 80018b4:	f7ff f814 	bl	80008e0 <MAIN_MENU_Update_Value>
			}
		}

		REALTIME_Data.system_day = hds3231.current_day;
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <REALTIME_Handle+0x84>)
 80018ba:	78da      	ldrb	r2, [r3, #3]
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <REALTIME_Handle+0x88>)
 80018be:	709a      	strb	r2, [r3, #2]
		REALTIME_Data.system_hour = hds3231.current_hour;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <REALTIME_Handle+0x84>)
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <REALTIME_Handle+0x88>)
 80018c6:	701a      	strb	r2, [r3, #0]
		REALTIME_Data.system_minute = hds3231.current_minute;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <REALTIME_Handle+0x84>)
 80018ca:	785a      	ldrb	r2, [r3, #1]
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <REALTIME_Handle+0x88>)
 80018ce:	705a      	strb	r2, [r3, #1]
		REALTIME_Data.system_date = hds3231.current_date;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <REALTIME_Handle+0x84>)
 80018d2:	791a      	ldrb	r2, [r3, #4]
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <REALTIME_Handle+0x88>)
 80018d6:	70da      	strb	r2, [r3, #3]
		REALTIME_Data.system_month = hds3231.current_month;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <REALTIME_Handle+0x84>)
 80018da:	795a      	ldrb	r2, [r3, #5]
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <REALTIME_Handle+0x88>)
 80018de:	711a      	strb	r2, [r3, #4]
		REALTIME_Data.system_year = hds3231.current_year;
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <REALTIME_Handle+0x84>)
 80018e2:	88db      	ldrh	r3, [r3, #6]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <REALTIME_Handle+0x88>)
 80018e8:	715a      	strb	r2, [r3, #5]
 80018ea:	e000      	b.n	80018ee <REALTIME_Handle+0x7e>
			return;
 80018ec:	bf00      	nop
	}
}
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200002ec 	.word	0x200002ec
 80018f4:	200002d8 	.word	0x200002d8
 80018f8:	200002e4 	.word	0x200002e4
 80018fc:	2000011c 	.word	0x2000011c

08001900 <REALTIME_Set_New_Realtime>:

void REALTIME_Set_New_Realtime(REALTIME_DATA_HandleTypeDef *p_new_realtime){
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af02      	add	r7, sp, #8
 8001906:	6078      	str	r0, [r7, #4]
	DS3231_Set_Time(&hds3231, p_new_realtime->system_hour, p_new_realtime->system_minute, 0, p_new_realtime->system_day);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7819      	ldrb	r1, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	785a      	ldrb	r2, [r3, #1]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	789b      	ldrb	r3, [r3, #2]
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2300      	movs	r3, #0
 8001918:	4813      	ldr	r0, [pc, #76]	; (8001968 <REALTIME_Set_New_Realtime+0x68>)
 800191a:	f004 fbd6 	bl	80060ca <DS3231_Set_Time>
	DS3231_Set_Date(&hds3231, p_new_realtime->system_date, p_new_realtime->system_month, p_new_realtime->system_year);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	78d9      	ldrb	r1, [r3, #3]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	791a      	ldrb	r2, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	795b      	ldrb	r3, [r3, #5]
 800192a:	480f      	ldr	r0, [pc, #60]	; (8001968 <REALTIME_Set_New_Realtime+0x68>)
 800192c:	f004 fc45 	bl	80061ba <DS3231_Set_Date>

	REALTIME_Data.system_day = p_new_realtime->system_day;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	789a      	ldrb	r2, [r3, #2]
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <REALTIME_Set_New_Realtime+0x6c>)
 8001936:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = p_new_realtime->system_hour;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <REALTIME_Set_New_Realtime+0x6c>)
 800193e:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = p_new_realtime->system_minute;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	785a      	ldrb	r2, [r3, #1]
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <REALTIME_Set_New_Realtime+0x6c>)
 8001946:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = p_new_realtime->system_date;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	78da      	ldrb	r2, [r3, #3]
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <REALTIME_Set_New_Realtime+0x6c>)
 800194e:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = p_new_realtime->system_month;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	791a      	ldrb	r2, [r3, #4]
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <REALTIME_Set_New_Realtime+0x6c>)
 8001956:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = p_new_realtime->system_year;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	795a      	ldrb	r2, [r3, #5]
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <REALTIME_Set_New_Realtime+0x6c>)
 800195e:	715a      	strb	r2, [r3, #5]
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200002d8 	.word	0x200002d8
 800196c:	200002e4 	.word	0x200002e4

08001970 <TEMP_AND_HUM_Handle>:

LCD_I2C_HandleTypeDef hlcd;
DHT_HandleTypeDef hdht;

#define CHECKING_SENSOR_TIME	2000
void TEMP_AND_HUM_Handle(){
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	static uint32_t timer = 0;
	static uint8_t system_temperature = 0;
	static uint8_t system_huminity = 0;
	if(HAL_GetTick() - timer >= CHECKING_SENSOR_TIME){
 8001974:	f000 fcf4 	bl	8002360 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <TEMP_AND_HUM_Handle+0x88>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001984:	d335      	bcc.n	80019f2 <TEMP_AND_HUM_Handle+0x82>
		DHT_Read_Value(&hdht);
 8001986:	481d      	ldr	r0, [pc, #116]	; (80019fc <TEMP_AND_HUM_Handle+0x8c>)
 8001988:	f004 faf9 	bl	8005f7e <DHT_Read_Value>
		if(system_huminity != (uint8_t)hdht.huminity || system_temperature != (uint8_t)hdht.temperature){
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <TEMP_AND_HUM_Handle+0x8c>)
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fdef 	bl	8000574 <__aeabi_f2uiz>
 8001996:	4603      	mov	r3, r0
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <TEMP_AND_HUM_Handle+0x90>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d10a      	bne.n	80019b8 <TEMP_AND_HUM_Handle+0x48>
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <TEMP_AND_HUM_Handle+0x8c>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fde4 	bl	8000574 <__aeabi_f2uiz>
 80019ac:	4603      	mov	r3, r0
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <TEMP_AND_HUM_Handle+0x94>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d017      	beq.n	80019e8 <TEMP_AND_HUM_Handle+0x78>
			system_huminity = hdht.huminity;
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <TEMP_AND_HUM_Handle+0x8c>)
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdd9 	bl	8000574 <__aeabi_f2uiz>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <TEMP_AND_HUM_Handle+0x90>)
 80019c8:	701a      	strb	r2, [r3, #0]
			system_temperature = hdht.temperature;
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <TEMP_AND_HUM_Handle+0x8c>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fdd0 	bl	8000574 <__aeabi_f2uiz>
 80019d4:	4603      	mov	r3, r0
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <TEMP_AND_HUM_Handle+0x94>)
 80019da:	701a      	strb	r2, [r3, #0]
			if(MENU_Data.menu_type == MAIN_MENU){
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <TEMP_AND_HUM_Handle+0x98>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <TEMP_AND_HUM_Handle+0x78>
				MAIN_MENU_Update_Value();
 80019e4:	f7fe ff7c 	bl	80008e0 <MAIN_MENU_Update_Value>
			}
		}

		timer = HAL_GetTick();
 80019e8:	f000 fcba 	bl	8002360 <HAL_GetTick>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4a02      	ldr	r2, [pc, #8]	; (80019f8 <TEMP_AND_HUM_Handle+0x88>)
 80019f0:	6013      	str	r3, [r2, #0]
	}
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000048c 	.word	0x2000048c
 80019fc:	20000478 	.word	0x20000478
 8001a00:	20000490 	.word	0x20000490
 8001a04:	20000491 	.word	0x20000491
 8001a08:	2000011c 	.word	0x2000011c

08001a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a12:	f000 fc4d 	bl	80022b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a16:	f000 f84d 	bl	8001ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a1a:	f000 f9b5 	bl	8001d88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a1e:	f000 f88b 	bl	8001b38 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001a22:	f000 f987 	bl	8001d34 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001a26:	f000 f8b5 	bl	8001b94 <MX_I2C2_Init>
  MX_TIM4_Init();
 8001a2a:	f000 f935 	bl	8001c98 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001a2e:	f000 f8df 	bl	8001bf0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 8001a32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a36:	f000 fc9d 	bl	8002374 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a40:	4815      	ldr	r0, [pc, #84]	; (8001a98 <main+0x8c>)
 8001a42:	f001 fa14 	bl	8002e6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001a46:	2201      	movs	r2, #1
 8001a48:	2104      	movs	r1, #4
 8001a4a:	4814      	ldr	r0, [pc, #80]	; (8001a9c <main+0x90>)
 8001a4c:	f001 fa0f 	bl	8002e6e <HAL_GPIO_WritePin>

  REALTIME_Init();
 8001a50:	f7ff fec8 	bl	80017e4 <REALTIME_Init>
  DHT_Init(&hdht, &htim4, DHT11, GPIOA, GPIO_PIN_0);
 8001a54:	2301      	movs	r3, #1
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <main+0x90>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4910      	ldr	r1, [pc, #64]	; (8001aa0 <main+0x94>)
 8001a5e:	4811      	ldr	r0, [pc, #68]	; (8001aa4 <main+0x98>)
 8001a60:	f004 fa6d 	bl	8005f3e <DHT_Init>
  LCD_Init(&hlcd, &hi2c1, 20, 4, 0x4E);
 8001a64:	234e      	movs	r3, #78	; 0x4e
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2304      	movs	r3, #4
 8001a6a:	2214      	movs	r2, #20
 8001a6c:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <main+0x9c>)
 8001a6e:	480f      	ldr	r0, [pc, #60]	; (8001aac <main+0xa0>)
 8001a70:	f004 fcc4 	bl	80063fc <LCD_Init>
  MENU_Init(&hlcd);
 8001a74:	480d      	ldr	r0, [pc, #52]	; (8001aac <main+0xa0>)
 8001a76:	f7fe ff41 	bl	80008fc <MENU_Init>
  ROTARY_ENCODER_Init();
 8001a7a:	f7ff fd61 	bl	8001540 <ROTARY_ENCODER_Init>

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001a7e:	213c      	movs	r1, #60	; 0x3c
 8001a80:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <main+0xa4>)
 8001a82:	f003 f909 	bl	8004c98 <HAL_TIM_Encoder_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  REALTIME_Handle();
 8001a86:	f7ff fef3 	bl	8001870 <REALTIME_Handle>

	  TEMP_AND_HUM_Handle();
 8001a8a:	f7ff ff71 	bl	8001970 <TEMP_AND_HUM_Handle>

	  MENU_Handle();
 8001a8e:	f7fe ff53 	bl	8000938 <MENU_Handle>

	  ROTARY_ENCODER_Handle();
 8001a92:	f7ff fd7d 	bl	8001590 <ROTARY_ENCODER_Handle>
	  REALTIME_Handle();
 8001a96:	e7f6      	b.n	8001a86 <main+0x7a>
 8001a98:	40011000 	.word	0x40011000
 8001a9c:	40010800 	.word	0x40010800
 8001aa0:	200003e0 	.word	0x200003e0
 8001aa4:	20000478 	.word	0x20000478
 8001aa8:	200002f0 	.word	0x200002f0
 8001aac:	2000046c 	.word	0x2000046c
 8001ab0:	20000398 	.word	0x20000398

08001ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b090      	sub	sp, #64	; 0x40
 8001ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	2228      	movs	r2, #40	; 0x28
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f004 ffc2 	bl	8006a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ada:	2301      	movs	r3, #1
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ade:	2310      	movs	r3, #16
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001aea:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af0:	f107 0318 	add.w	r3, r7, #24
 8001af4:	4618      	mov	r0, r3
 8001af6:	f002 fb53 	bl	80041a0 <HAL_RCC_OscConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001b00:	f000 f9ae 	bl	8001e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b04:	230f      	movs	r3, #15
 8001b06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f002 fdc0 	bl	80046a4 <HAL_RCC_ClockConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001b2a:	f000 f999 	bl	8001e60 <Error_Handler>
  }
}
 8001b2e:	bf00      	nop
 8001b30:	3740      	adds	r7, #64	; 0x40
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <MX_I2C1_Init+0x54>)
 8001b40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b44:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <MX_I2C1_Init+0x58>)
 8001b46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b76:	f001 f993 	bl	8002ea0 <HAL_I2C_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b80:	f000 f96e 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200002f0 	.word	0x200002f0
 8001b8c:	40005400 	.word	0x40005400
 8001b90:	000186a0 	.word	0x000186a0

08001b94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <MX_I2C2_Init+0x50>)
 8001b9a:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <MX_I2C2_Init+0x54>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_I2C2_Init+0x50>)
 8001ba0:	4a12      	ldr	r2, [pc, #72]	; (8001bec <MX_I2C2_Init+0x58>)
 8001ba2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <MX_I2C2_Init+0x50>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <MX_I2C2_Init+0x50>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_I2C2_Init+0x50>)
 8001bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <MX_I2C2_Init+0x50>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_I2C2_Init+0x50>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <MX_I2C2_Init+0x50>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_I2C2_Init+0x50>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bd0:	4804      	ldr	r0, [pc, #16]	; (8001be4 <MX_I2C2_Init+0x50>)
 8001bd2:	f001 f965 	bl	8002ea0 <HAL_I2C_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bdc:	f000 f940 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000344 	.word	0x20000344
 8001be8:	40005800 	.word	0x40005800
 8001bec:	000186a0 	.word	0x000186a0

08001bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	2224      	movs	r2, #36	; 0x24
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f004 ff24 	bl	8006a4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_TIM2_Init+0xa4>)
 8001c0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_TIM2_Init+0xa4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MX_TIM2_Init+0xa4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_TIM2_Init+0xa4>)
 8001c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_TIM2_Init+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <MX_TIM2_Init+0xa4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c34:	2303      	movs	r3, #3
 8001c36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c44:	230a      	movs	r3, #10
 8001c46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001c54:	230a      	movs	r3, #10
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480d      	ldr	r0, [pc, #52]	; (8001c94 <MX_TIM2_Init+0xa4>)
 8001c60:	f002 ff78 	bl	8004b54 <HAL_TIM_Encoder_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c6a:	f000 f8f9 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <MX_TIM2_Init+0xa4>)
 8001c7c:	f003 fbc6 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c86:	f000 f8eb 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	3730      	adds	r7, #48	; 0x30
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000398 	.word	0x20000398

08001c98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cac:	463b      	mov	r3, r7
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <MX_TIM4_Init+0x94>)
 8001cb6:	4a1e      	ldr	r2, [pc, #120]	; (8001d30 <MX_TIM4_Init+0x98>)
 8001cb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <MX_TIM4_Init+0x94>)
 8001cbc:	223f      	movs	r2, #63	; 0x3f
 8001cbe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <MX_TIM4_Init+0x94>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <MX_TIM4_Init+0x94>)
 8001cc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ccc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MX_TIM4_Init+0x94>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <MX_TIM4_Init+0x94>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cda:	4814      	ldr	r0, [pc, #80]	; (8001d2c <MX_TIM4_Init+0x94>)
 8001cdc:	f002 fe7a 	bl	80049d4 <HAL_TIM_Base_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001ce6:	f000 f8bb 	bl	8001e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cf0:	f107 0308 	add.w	r3, r7, #8
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480d      	ldr	r0, [pc, #52]	; (8001d2c <MX_TIM4_Init+0x94>)
 8001cf8:	f003 f984 	bl	8005004 <HAL_TIM_ConfigClockSource>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001d02:	f000 f8ad 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d0e:	463b      	mov	r3, r7
 8001d10:	4619      	mov	r1, r3
 8001d12:	4806      	ldr	r0, [pc, #24]	; (8001d2c <MX_TIM4_Init+0x94>)
 8001d14:	f003 fb7a 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001d1e:	f000 f89f 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200003e0 	.word	0x200003e0
 8001d30:	40000800 	.word	0x40000800

08001d34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <MX_USART1_UART_Init+0x50>)
 8001d3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d6c:	f003 fbbe 	bl	80054ec <HAL_UART_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d76:	f000 f873 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000428 	.word	0x20000428
 8001d84:	40013800 	.word	0x40013800

08001d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <MX_GPIO_Init+0xcc>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	4a2c      	ldr	r2, [pc, #176]	; (8001e54 <MX_GPIO_Init+0xcc>)
 8001da2:	f043 0310 	orr.w	r3, r3, #16
 8001da6:	6193      	str	r3, [r2, #24]
 8001da8:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <MX_GPIO_Init+0xcc>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <MX_GPIO_Init+0xcc>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4a26      	ldr	r2, [pc, #152]	; (8001e54 <MX_GPIO_Init+0xcc>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	6193      	str	r3, [r2, #24]
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <MX_GPIO_Init+0xcc>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <MX_GPIO_Init+0xcc>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a20      	ldr	r2, [pc, #128]	; (8001e54 <MX_GPIO_Init+0xcc>)
 8001dd2:	f043 0308 	orr.w	r3, r3, #8
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <MX_GPIO_Init+0xcc>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dea:	481b      	ldr	r0, [pc, #108]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001dec:	f001 f83f 	bl	8002e6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2105      	movs	r1, #5
 8001df4:	4819      	ldr	r0, [pc, #100]	; (8001e5c <MX_GPIO_Init+0xd4>)
 8001df6:	f001 f83a 	bl	8002e6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	4619      	mov	r1, r3
 8001e12:	4811      	ldr	r0, [pc, #68]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001e14:	f000 fe90 	bl	8002b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001e18:	2305      	movs	r3, #5
 8001e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480b      	ldr	r0, [pc, #44]	; (8001e5c <MX_GPIO_Init+0xd4>)
 8001e30:	f000 fe82 	bl	8002b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e34:	2302      	movs	r3, #2
 8001e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	4619      	mov	r1, r3
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <MX_GPIO_Init+0xd4>)
 8001e48:	f000 fe76 	bl	8002b38 <HAL_GPIO_Init>

}
 8001e4c:	bf00      	nop
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40011000 	.word	0x40011000
 8001e5c:	40010800 	.word	0x40010800

08001e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
}
 8001e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <Error_Handler+0x8>
	...

08001e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6193      	str	r3, [r2, #24]
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e94:	61d3      	str	r3, [r2, #28]
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_MspInit+0x60>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_MspInit+0x60>)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40010000 	.word	0x40010000

08001ed0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0318 	add.w	r3, r7, #24
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2b      	ldr	r2, [pc, #172]	; (8001f98 <HAL_I2C_MspInit+0xc8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d124      	bne.n	8001f3a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef0:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <HAL_I2C_MspInit+0xcc>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <HAL_I2C_MspInit+0xcc>)
 8001ef6:	f043 0308 	orr.w	r3, r3, #8
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <HAL_I2C_MspInit+0xcc>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f08:	23c0      	movs	r3, #192	; 0xc0
 8001f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f0c:	2312      	movs	r3, #18
 8001f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f14:	f107 0318 	add.w	r3, r7, #24
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4821      	ldr	r0, [pc, #132]	; (8001fa0 <HAL_I2C_MspInit+0xd0>)
 8001f1c:	f000 fe0c 	bl	8002b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_I2C_MspInit+0xcc>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_I2C_MspInit+0xcc>)
 8001f26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f2a:	61d3      	str	r3, [r2, #28]
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_I2C_MspInit+0xcc>)
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f38:	e029      	b.n	8001f8e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <HAL_I2C_MspInit+0xd4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d124      	bne.n	8001f8e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_I2C_MspInit+0xcc>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <HAL_I2C_MspInit+0xcc>)
 8001f4a:	f043 0308 	orr.w	r3, r3, #8
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_I2C_MspInit+0xcc>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f62:	2312      	movs	r3, #18
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6a:	f107 0318 	add.w	r3, r7, #24
 8001f6e:	4619      	mov	r1, r3
 8001f70:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <HAL_I2C_MspInit+0xd0>)
 8001f72:	f000 fde1 	bl	8002b38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_I2C_MspInit+0xcc>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <HAL_I2C_MspInit+0xcc>)
 8001f7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f80:	61d3      	str	r3, [r2, #28]
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_I2C_MspInit+0xcc>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
}
 8001f8e:	bf00      	nop
 8001f90:	3728      	adds	r7, #40	; 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40005400 	.word	0x40005400
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010c00 	.word	0x40010c00
 8001fa4:	40005800 	.word	0x40005800

08001fa8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc6:	d156      	bne.n	8002076 <HAL_TIM_Encoder_MspInit+0xce>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	4a2c      	ldr	r2, [pc, #176]	; (8002080 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	61d3      	str	r3, [r2, #28]
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	4b27      	ldr	r3, [pc, #156]	; (8002080 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a26      	ldr	r2, [pc, #152]	; (8002080 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	4a20      	ldr	r2, [pc, #128]	; (8002080 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001ffe:	f043 0308 	orr.w	r3, r3, #8
 8002002:	6193      	str	r3, [r2, #24]
 8002004:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002010:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	4817      	ldr	r0, [pc, #92]	; (8002084 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002026:	f000 fd87 	bl	8002b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800202a:	2308      	movs	r3, #8
 800202c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4812      	ldr	r0, [pc, #72]	; (8002088 <HAL_TIM_Encoder_MspInit+0xe0>)
 800203e:	f000 fd7b 	bl	8002b38 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_TIM_Encoder_MspInit+0xe4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_TIM_Encoder_MspInit+0xe4>)
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	201c      	movs	r0, #28
 800206c:	f000 fa7d 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002070:	201c      	movs	r0, #28
 8002072:	f000 fa96 	bl	80025a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002076:	bf00      	nop
 8002078:	3728      	adds	r7, #40	; 0x28
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	40010800 	.word	0x40010800
 8002088:	40010c00 	.word	0x40010c00
 800208c:	40010000 	.word	0x40010000

08002090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_TIM_Base_MspInit+0x34>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10b      	bne.n	80020ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_TIM_Base_MspInit+0x38>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <HAL_TIM_Base_MspInit+0x38>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	61d3      	str	r3, [r2, #28]
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_TIM_Base_MspInit+0x38>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	40000800 	.word	0x40000800
 80020c8:	40021000 	.word	0x40021000

080020cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a20      	ldr	r2, [pc, #128]	; (8002168 <HAL_UART_MspInit+0x9c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d139      	bne.n	8002160 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020ec:	4b1f      	ldr	r3, [pc, #124]	; (800216c <HAL_UART_MspInit+0xa0>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a1e      	ldr	r2, [pc, #120]	; (800216c <HAL_UART_MspInit+0xa0>)
 80020f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b1c      	ldr	r3, [pc, #112]	; (800216c <HAL_UART_MspInit+0xa0>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_UART_MspInit+0xa0>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a18      	ldr	r2, [pc, #96]	; (800216c <HAL_UART_MspInit+0xa0>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_UART_MspInit+0xa0>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800211c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002120:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212a:	f107 0310 	add.w	r3, r7, #16
 800212e:	4619      	mov	r1, r3
 8002130:	480f      	ldr	r0, [pc, #60]	; (8002170 <HAL_UART_MspInit+0xa4>)
 8002132:	f000 fd01 	bl	8002b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800213a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	4619      	mov	r1, r3
 800214a:	4809      	ldr	r0, [pc, #36]	; (8002170 <HAL_UART_MspInit+0xa4>)
 800214c:	f000 fcf4 	bl	8002b38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002150:	2200      	movs	r2, #0
 8002152:	2100      	movs	r1, #0
 8002154:	2025      	movs	r0, #37	; 0x25
 8002156:	f000 fa08 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800215a:	2025      	movs	r0, #37	; 0x25
 800215c:	f000 fa21 	bl	80025a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002160:	bf00      	nop
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40013800 	.word	0x40013800
 800216c:	40021000 	.word	0x40021000
 8002170:	40010800 	.word	0x40010800

08002174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <NMI_Handler+0x4>

0800217a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <HardFault_Handler+0x4>

08002180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <MemManage_Handler+0x4>

08002186 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218a:	e7fe      	b.n	800218a <BusFault_Handler+0x4>

0800218c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <UsageFault_Handler+0x4>

08002192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ba:	f000 f8bf 	bl	800233c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <TIM2_IRQHandler+0x10>)
 80021ca:	f002 fe13 	bl	8004df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000398 	.word	0x20000398

080021d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <USART1_IRQHandler+0x10>)
 80021de:	f003 f9d3 	bl	8005588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000428 	.word	0x20000428

080021ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <_sbrk+0x5c>)
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <_sbrk+0x60>)
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <_sbrk+0x64>)
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <_sbrk+0x68>)
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	429a      	cmp	r2, r3
 800221a:	d207      	bcs.n	800222c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800221c:	f004 fbdc 	bl	80069d8 <__errno>
 8002220:	4603      	mov	r3, r0
 8002222:	220c      	movs	r2, #12
 8002224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	e009      	b.n	8002240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <_sbrk+0x64>)
 800223c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20005000 	.word	0x20005000
 800224c:	00000400 	.word	0x00000400
 8002250:	20000494 	.word	0x20000494
 8002254:	200004f0 	.word	0x200004f0

08002258 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002266:	490d      	ldr	r1, [pc, #52]	; (800229c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800227c:	4c0a      	ldr	r4, [pc, #40]	; (80022a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800228a:	f7ff ffe5 	bl	8002258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800228e:	f004 fba9 	bl	80069e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002292:	f7ff fbbb 	bl	8001a0c <main>
  bx lr
 8002296:	4770      	bx	lr
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80022a0:	0800754c 	.word	0x0800754c
  ldr r2, =_sbss
 80022a4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80022a8:	200004ec 	.word	0x200004ec

080022ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC1_2_IRQHandler>
	...

080022b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_Init+0x28>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <HAL_Init+0x28>)
 80022ba:	f043 0310 	orr.w	r3, r3, #16
 80022be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c0:	2003      	movs	r0, #3
 80022c2:	f000 f947 	bl	8002554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c6:	200f      	movs	r0, #15
 80022c8:	f000 f808 	bl	80022dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022cc:	f7ff fdce 	bl	8001e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40022000 	.word	0x40022000

080022dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_InitTick+0x54>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_InitTick+0x58>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	4619      	mov	r1, r3
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f95f 	bl	80025be <HAL_SYSTICK_Config>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e00e      	b.n	8002328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b0f      	cmp	r3, #15
 800230e:	d80a      	bhi.n	8002326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002310:	2200      	movs	r2, #0
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	f04f 30ff 	mov.w	r0, #4294967295
 8002318:	f000 f927 	bl	800256a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800231c:	4a06      	ldr	r2, [pc, #24]	; (8002338 <HAL_InitTick+0x5c>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	2000008c 	.word	0x2000008c
 8002334:	20000094 	.word	0x20000094
 8002338:	20000090 	.word	0x20000090

0800233c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_IncTick+0x1c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_IncTick+0x20>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4413      	add	r3, r2
 800234c:	4a03      	ldr	r2, [pc, #12]	; (800235c <HAL_IncTick+0x20>)
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	20000094 	.word	0x20000094
 800235c:	20000498 	.word	0x20000498

08002360 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b02      	ldr	r3, [pc, #8]	; (8002370 <HAL_GetTick+0x10>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	20000498 	.word	0x20000498

08002374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7ff fff0 	bl	8002360 <HAL_GetTick>
 8002380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d005      	beq.n	800239a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_Delay+0x44>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4413      	add	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800239a:	bf00      	nop
 800239c:	f7ff ffe0 	bl	8002360 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d8f7      	bhi.n	800239c <HAL_Delay+0x28>
  {
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000094 	.word	0x20000094

080023bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d8:	4013      	ands	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ee:	4a04      	ldr	r2, [pc, #16]	; (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	60d3      	str	r3, [r2, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <__NVIC_GetPriorityGrouping+0x18>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	f003 0307 	and.w	r3, r3, #7
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	2b00      	cmp	r3, #0
 8002430:	db0b      	blt.n	800244a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4906      	ldr	r1, [pc, #24]	; (8002454 <__NVIC_EnableIRQ+0x34>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2001      	movs	r0, #1
 8002442:	fa00 f202 	lsl.w	r2, r0, r2
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002520:	d301      	bcc.n	8002526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002522:	2301      	movs	r3, #1
 8002524:	e00f      	b.n	8002546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002526:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <SysTick_Config+0x40>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252e:	210f      	movs	r1, #15
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	f7ff ff90 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <SysTick_Config+0x40>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <SysTick_Config+0x40>)
 8002540:	2207      	movs	r2, #7
 8002542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	e000e010 	.word	0xe000e010

08002554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff2d 	bl	80023bc <__NVIC_SetPriorityGrouping>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800257c:	f7ff ff42 	bl	8002404 <__NVIC_GetPriorityGrouping>
 8002580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	6978      	ldr	r0, [r7, #20]
 8002588:	f7ff ff90 	bl	80024ac <NVIC_EncodePriority>
 800258c:	4602      	mov	r2, r0
 800258e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff5f 	bl	8002458 <__NVIC_SetPriority>
}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff35 	bl	8002420 <__NVIC_EnableIRQ>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ffa2 	bl	8002510 <SysTick_Config>
 80025cc:	4603      	mov	r3, r0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d008      	beq.n	80025fe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2204      	movs	r2, #4
 80025f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e020      	b.n	8002640 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 020e 	bic.w	r2, r2, #14
 800260c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0201 	bic.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	2101      	movs	r1, #1
 8002628:	fa01 f202 	lsl.w	r2, r1, r2
 800262c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
	...

0800264c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800265e:	2b02      	cmp	r3, #2
 8002660:	d005      	beq.n	800266e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2204      	movs	r2, #4
 8002666:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	e051      	b.n	8002712 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 020e 	bic.w	r2, r2, #14
 800267c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0201 	bic.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a22      	ldr	r2, [pc, #136]	; (800271c <HAL_DMA_Abort_IT+0xd0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d029      	beq.n	80026ec <HAL_DMA_Abort_IT+0xa0>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a20      	ldr	r2, [pc, #128]	; (8002720 <HAL_DMA_Abort_IT+0xd4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d022      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x9c>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <HAL_DMA_Abort_IT+0xd8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d01a      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x96>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <HAL_DMA_Abort_IT+0xdc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d012      	beq.n	80026dc <HAL_DMA_Abort_IT+0x90>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1c      	ldr	r2, [pc, #112]	; (800272c <HAL_DMA_Abort_IT+0xe0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00a      	beq.n	80026d6 <HAL_DMA_Abort_IT+0x8a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1a      	ldr	r2, [pc, #104]	; (8002730 <HAL_DMA_Abort_IT+0xe4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d102      	bne.n	80026d0 <HAL_DMA_Abort_IT+0x84>
 80026ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026ce:	e00e      	b.n	80026ee <HAL_DMA_Abort_IT+0xa2>
 80026d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026d4:	e00b      	b.n	80026ee <HAL_DMA_Abort_IT+0xa2>
 80026d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026da:	e008      	b.n	80026ee <HAL_DMA_Abort_IT+0xa2>
 80026dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e0:	e005      	b.n	80026ee <HAL_DMA_Abort_IT+0xa2>
 80026e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e6:	e002      	b.n	80026ee <HAL_DMA_Abort_IT+0xa2>
 80026e8:	2310      	movs	r3, #16
 80026ea:	e000      	b.n	80026ee <HAL_DMA_Abort_IT+0xa2>
 80026ec:	2301      	movs	r3, #1
 80026ee:	4a11      	ldr	r2, [pc, #68]	; (8002734 <HAL_DMA_Abort_IT+0xe8>)
 80026f0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	4798      	blx	r3
    } 
  }
  return status;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40020008 	.word	0x40020008
 8002720:	4002001c 	.word	0x4002001c
 8002724:	40020030 	.word	0x40020030
 8002728:	40020044 	.word	0x40020044
 800272c:	40020058 	.word	0x40020058
 8002730:	4002006c 	.word	0x4002006c
 8002734:	40020000 	.word	0x40020000

08002738 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002752:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <HAL_FLASH_Program+0xd8>)
 8002754:	7e1b      	ldrb	r3, [r3, #24]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_FLASH_Program+0x26>
 800275a:	2302      	movs	r3, #2
 800275c:	e054      	b.n	8002808 <HAL_FLASH_Program+0xd0>
 800275e:	4b2c      	ldr	r3, [pc, #176]	; (8002810 <HAL_FLASH_Program+0xd8>)
 8002760:	2201      	movs	r2, #1
 8002762:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002764:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002768:	f000 f8a8 	bl	80028bc <FLASH_WaitForLastOperation>
 800276c:	4603      	mov	r3, r0
 800276e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002770:	7dfb      	ldrb	r3, [r7, #23]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d144      	bne.n	8002800 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d102      	bne.n	8002782 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800277c:	2301      	movs	r3, #1
 800277e:	757b      	strb	r3, [r7, #21]
 8002780:	e007      	b.n	8002792 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d102      	bne.n	800278e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002788:	2302      	movs	r3, #2
 800278a:	757b      	strb	r3, [r7, #21]
 800278c:	e001      	b.n	8002792 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800278e:	2304      	movs	r3, #4
 8002790:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002792:	2300      	movs	r3, #0
 8002794:	75bb      	strb	r3, [r7, #22]
 8002796:	e02d      	b.n	80027f4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002798:	7dbb      	ldrb	r3, [r7, #22]
 800279a:	005a      	lsls	r2, r3, #1
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	eb02 0c03 	add.w	ip, r2, r3
 80027a2:	7dbb      	ldrb	r3, [r7, #22]
 80027a4:	0119      	lsls	r1, r3, #4
 80027a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027aa:	f1c1 0620 	rsb	r6, r1, #32
 80027ae:	f1a1 0020 	sub.w	r0, r1, #32
 80027b2:	fa22 f401 	lsr.w	r4, r2, r1
 80027b6:	fa03 f606 	lsl.w	r6, r3, r6
 80027ba:	4334      	orrs	r4, r6
 80027bc:	fa23 f000 	lsr.w	r0, r3, r0
 80027c0:	4304      	orrs	r4, r0
 80027c2:	fa23 f501 	lsr.w	r5, r3, r1
 80027c6:	b2a3      	uxth	r3, r4
 80027c8:	4619      	mov	r1, r3
 80027ca:	4660      	mov	r0, ip
 80027cc:	f000 f85a 	bl	8002884 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027d4:	f000 f872 	bl	80028bc <FLASH_WaitForLastOperation>
 80027d8:	4603      	mov	r3, r0
 80027da:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_FLASH_Program+0xdc>)
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <HAL_FLASH_Program+0xdc>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d107      	bne.n	80027fe <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80027ee:	7dbb      	ldrb	r3, [r7, #22]
 80027f0:	3301      	adds	r3, #1
 80027f2:	75bb      	strb	r3, [r7, #22]
 80027f4:	7dba      	ldrb	r2, [r7, #22]
 80027f6:	7d7b      	ldrb	r3, [r7, #21]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d3cd      	bcc.n	8002798 <HAL_FLASH_Program+0x60>
 80027fc:	e000      	b.n	8002800 <HAL_FLASH_Program+0xc8>
      {
        break;
 80027fe:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_FLASH_Program+0xd8>)
 8002802:	2200      	movs	r2, #0
 8002804:	761a      	strb	r2, [r3, #24]

  return status;
 8002806:	7dfb      	ldrb	r3, [r7, #23]
}
 8002808:	4618      	mov	r0, r3
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002810:	200004a0 	.word	0x200004a0
 8002814:	40022000 	.word	0x40022000

08002818 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <HAL_FLASH_Unlock+0x40>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00d      	beq.n	800284a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_FLASH_Unlock+0x40>)
 8002830:	4a0a      	ldr	r2, [pc, #40]	; (800285c <HAL_FLASH_Unlock+0x44>)
 8002832:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_FLASH_Unlock+0x40>)
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <HAL_FLASH_Unlock+0x48>)
 8002838:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_FLASH_Unlock+0x40>)
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800284a:	79fb      	ldrb	r3, [r7, #7]
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40022000 	.word	0x40022000
 800285c:	45670123 	.word	0x45670123
 8002860:	cdef89ab 	.word	0xcdef89ab

08002864 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_FLASH_Lock+0x1c>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <HAL_FLASH_Lock+0x1c>)
 800286e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002872:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40022000 	.word	0x40022000

08002884 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <FLASH_Program_HalfWord+0x30>)
 8002892:	2200      	movs	r2, #0
 8002894:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <FLASH_Program_HalfWord+0x34>)
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <FLASH_Program_HalfWord+0x34>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	887a      	ldrh	r2, [r7, #2]
 80028a6:	801a      	strh	r2, [r3, #0]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	200004a0 	.word	0x200004a0
 80028b8:	40022000 	.word	0x40022000

080028bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff fd4c 	bl	8002360 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80028ca:	e010      	b.n	80028ee <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d00c      	beq.n	80028ee <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <FLASH_WaitForLastOperation+0x2e>
 80028da:	f7ff fd41 	bl	8002360 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d201      	bcs.n	80028ee <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e025      	b.n	800293a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <FLASH_WaitForLastOperation+0x88>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1e8      	bne.n	80028cc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <FLASH_WaitForLastOperation+0x88>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <FLASH_WaitForLastOperation+0x88>)
 8002908:	2220      	movs	r2, #32
 800290a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <FLASH_WaitForLastOperation+0x88>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10b      	bne.n	8002930 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <FLASH_WaitForLastOperation+0x88>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <FLASH_WaitForLastOperation+0x88>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002930:	f000 f80a 	bl	8002948 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40022000 	.word	0x40022000

08002948 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002952:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <FLASH_SetErrorCode+0x98>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800295e:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <FLASH_SetErrorCode+0x9c>)
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f043 0302 	orr.w	r3, r3, #2
 8002966:	4a1f      	ldr	r2, [pc, #124]	; (80029e4 <FLASH_SetErrorCode+0x9c>)
 8002968:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f043 0310 	orr.w	r3, r3, #16
 8002970:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002972:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <FLASH_SetErrorCode+0x98>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800297e:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <FLASH_SetErrorCode+0x9c>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <FLASH_SetErrorCode+0x9c>)
 8002988:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f043 0304 	orr.w	r3, r3, #4
 8002990:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <FLASH_SetErrorCode+0x98>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <FLASH_SetErrorCode+0x9c>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <FLASH_SetErrorCode+0x9c>)
 80029a8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80029aa:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <FLASH_SetErrorCode+0x98>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <FLASH_SetErrorCode+0x98>)
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f240 1201 	movw	r2, #257	; 0x101
 80029bc:	4293      	cmp	r3, r2
 80029be:	d106      	bne.n	80029ce <FLASH_SetErrorCode+0x86>
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <FLASH_SetErrorCode+0x98>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <FLASH_SetErrorCode+0x98>)
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	61d3      	str	r3, [r2, #28]
}  
 80029cc:	e002      	b.n	80029d4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80029ce:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <FLASH_SetErrorCode+0x98>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	60d3      	str	r3, [r2, #12]
}  
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40022000 	.word	0x40022000
 80029e4:	200004a0 	.word	0x200004a0

080029e8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80029fa:	4b2f      	ldr	r3, [pc, #188]	; (8002ab8 <HAL_FLASHEx_Erase+0xd0>)
 80029fc:	7e1b      	ldrb	r3, [r3, #24]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_FLASHEx_Erase+0x1e>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e053      	b.n	8002aae <HAL_FLASHEx_Erase+0xc6>
 8002a06:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <HAL_FLASHEx_Erase+0xd0>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d116      	bne.n	8002a42 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002a14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a18:	f7ff ff50 	bl	80028bc <FLASH_WaitForLastOperation>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d141      	bne.n	8002aa6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002a22:	2001      	movs	r0, #1
 8002a24:	f000 f84c 	bl	8002ac0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a2c:	f7ff ff46 	bl	80028bc <FLASH_WaitForLastOperation>
 8002a30:	4603      	mov	r3, r0
 8002a32:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <HAL_FLASHEx_Erase+0xd4>)
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	4a20      	ldr	r2, [pc, #128]	; (8002abc <HAL_FLASHEx_Erase+0xd4>)
 8002a3a:	f023 0304 	bic.w	r3, r3, #4
 8002a3e:	6113      	str	r3, [r2, #16]
 8002a40:	e031      	b.n	8002aa6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002a42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a46:	f7ff ff39 	bl	80028bc <FLASH_WaitForLastOperation>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d12a      	bne.n	8002aa6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f04f 32ff 	mov.w	r2, #4294967295
 8002a56:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	e019      	b.n	8002a94 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002a60:	68b8      	ldr	r0, [r7, #8]
 8002a62:	f000 f849 	bl	8002af8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a66:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a6a:	f7ff ff27 	bl	80028bc <FLASH_WaitForLastOperation>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002a72:	4b12      	ldr	r3, [pc, #72]	; (8002abc <HAL_FLASHEx_Erase+0xd4>)
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	4a11      	ldr	r2, [pc, #68]	; (8002abc <HAL_FLASHEx_Erase+0xd4>)
 8002a78:	f023 0302 	bic.w	r3, r3, #2
 8002a7c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	601a      	str	r2, [r3, #0]
            break;
 8002a8a:	e00c      	b.n	8002aa6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a92:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	029a      	lsls	r2, r3, #10
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d3dc      	bcc.n	8002a60 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002aa6:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <HAL_FLASHEx_Erase+0xd0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	761a      	strb	r2, [r3, #24]

  return status;
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200004a0 	.word	0x200004a0
 8002abc:	40022000 	.word	0x40022000

08002ac0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <FLASH_MassErase+0x30>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <FLASH_MassErase+0x34>)
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	4a08      	ldr	r2, [pc, #32]	; (8002af4 <FLASH_MassErase+0x34>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <FLASH_MassErase+0x34>)
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	4a05      	ldr	r2, [pc, #20]	; (8002af4 <FLASH_MassErase+0x34>)
 8002ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	200004a0 	.word	0x200004a0
 8002af4:	40022000 	.word	0x40022000

08002af8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <FLASH_PageErase+0x38>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <FLASH_PageErase+0x3c>)
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <FLASH_PageErase+0x3c>)
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002b12:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <FLASH_PageErase+0x3c>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <FLASH_PageErase+0x3c>)
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <FLASH_PageErase+0x3c>)
 8002b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b22:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	200004a0 	.word	0x200004a0
 8002b34:	40022000 	.word	0x40022000

08002b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b08b      	sub	sp, #44	; 0x2c
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b4a:	e169      	b.n	8002e20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f040 8158 	bne.w	8002e1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4a9a      	ldr	r2, [pc, #616]	; (8002dd8 <HAL_GPIO_Init+0x2a0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d05e      	beq.n	8002c32 <HAL_GPIO_Init+0xfa>
 8002b74:	4a98      	ldr	r2, [pc, #608]	; (8002dd8 <HAL_GPIO_Init+0x2a0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d875      	bhi.n	8002c66 <HAL_GPIO_Init+0x12e>
 8002b7a:	4a98      	ldr	r2, [pc, #608]	; (8002ddc <HAL_GPIO_Init+0x2a4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d058      	beq.n	8002c32 <HAL_GPIO_Init+0xfa>
 8002b80:	4a96      	ldr	r2, [pc, #600]	; (8002ddc <HAL_GPIO_Init+0x2a4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d86f      	bhi.n	8002c66 <HAL_GPIO_Init+0x12e>
 8002b86:	4a96      	ldr	r2, [pc, #600]	; (8002de0 <HAL_GPIO_Init+0x2a8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d052      	beq.n	8002c32 <HAL_GPIO_Init+0xfa>
 8002b8c:	4a94      	ldr	r2, [pc, #592]	; (8002de0 <HAL_GPIO_Init+0x2a8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d869      	bhi.n	8002c66 <HAL_GPIO_Init+0x12e>
 8002b92:	4a94      	ldr	r2, [pc, #592]	; (8002de4 <HAL_GPIO_Init+0x2ac>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d04c      	beq.n	8002c32 <HAL_GPIO_Init+0xfa>
 8002b98:	4a92      	ldr	r2, [pc, #584]	; (8002de4 <HAL_GPIO_Init+0x2ac>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d863      	bhi.n	8002c66 <HAL_GPIO_Init+0x12e>
 8002b9e:	4a92      	ldr	r2, [pc, #584]	; (8002de8 <HAL_GPIO_Init+0x2b0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d046      	beq.n	8002c32 <HAL_GPIO_Init+0xfa>
 8002ba4:	4a90      	ldr	r2, [pc, #576]	; (8002de8 <HAL_GPIO_Init+0x2b0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d85d      	bhi.n	8002c66 <HAL_GPIO_Init+0x12e>
 8002baa:	2b12      	cmp	r3, #18
 8002bac:	d82a      	bhi.n	8002c04 <HAL_GPIO_Init+0xcc>
 8002bae:	2b12      	cmp	r3, #18
 8002bb0:	d859      	bhi.n	8002c66 <HAL_GPIO_Init+0x12e>
 8002bb2:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <HAL_GPIO_Init+0x80>)
 8002bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb8:	08002c33 	.word	0x08002c33
 8002bbc:	08002c0d 	.word	0x08002c0d
 8002bc0:	08002c1f 	.word	0x08002c1f
 8002bc4:	08002c61 	.word	0x08002c61
 8002bc8:	08002c67 	.word	0x08002c67
 8002bcc:	08002c67 	.word	0x08002c67
 8002bd0:	08002c67 	.word	0x08002c67
 8002bd4:	08002c67 	.word	0x08002c67
 8002bd8:	08002c67 	.word	0x08002c67
 8002bdc:	08002c67 	.word	0x08002c67
 8002be0:	08002c67 	.word	0x08002c67
 8002be4:	08002c67 	.word	0x08002c67
 8002be8:	08002c67 	.word	0x08002c67
 8002bec:	08002c67 	.word	0x08002c67
 8002bf0:	08002c67 	.word	0x08002c67
 8002bf4:	08002c67 	.word	0x08002c67
 8002bf8:	08002c67 	.word	0x08002c67
 8002bfc:	08002c15 	.word	0x08002c15
 8002c00:	08002c29 	.word	0x08002c29
 8002c04:	4a79      	ldr	r2, [pc, #484]	; (8002dec <HAL_GPIO_Init+0x2b4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c0a:	e02c      	b.n	8002c66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	623b      	str	r3, [r7, #32]
          break;
 8002c12:	e029      	b.n	8002c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	623b      	str	r3, [r7, #32]
          break;
 8002c1c:	e024      	b.n	8002c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	3308      	adds	r3, #8
 8002c24:	623b      	str	r3, [r7, #32]
          break;
 8002c26:	e01f      	b.n	8002c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	623b      	str	r3, [r7, #32]
          break;
 8002c30:	e01a      	b.n	8002c68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	623b      	str	r3, [r7, #32]
          break;
 8002c3e:	e013      	b.n	8002c68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c48:	2308      	movs	r3, #8
 8002c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	611a      	str	r2, [r3, #16]
          break;
 8002c52:	e009      	b.n	8002c68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c54:	2308      	movs	r3, #8
 8002c56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	615a      	str	r2, [r3, #20]
          break;
 8002c5e:	e003      	b.n	8002c68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c60:	2300      	movs	r3, #0
 8002c62:	623b      	str	r3, [r7, #32]
          break;
 8002c64:	e000      	b.n	8002c68 <HAL_GPIO_Init+0x130>
          break;
 8002c66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2bff      	cmp	r3, #255	; 0xff
 8002c6c:	d801      	bhi.n	8002c72 <HAL_GPIO_Init+0x13a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	e001      	b.n	8002c76 <HAL_GPIO_Init+0x13e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3304      	adds	r3, #4
 8002c76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2bff      	cmp	r3, #255	; 0xff
 8002c7c:	d802      	bhi.n	8002c84 <HAL_GPIO_Init+0x14c>
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	e002      	b.n	8002c8a <HAL_GPIO_Init+0x152>
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	3b08      	subs	r3, #8
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	210f      	movs	r1, #15
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	6a39      	ldr	r1, [r7, #32]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80b1 	beq.w	8002e1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cb8:	4b4d      	ldr	r3, [pc, #308]	; (8002df0 <HAL_GPIO_Init+0x2b8>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	4a4c      	ldr	r2, [pc, #304]	; (8002df0 <HAL_GPIO_Init+0x2b8>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6193      	str	r3, [r2, #24]
 8002cc4:	4b4a      	ldr	r3, [pc, #296]	; (8002df0 <HAL_GPIO_Init+0x2b8>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cd0:	4a48      	ldr	r2, [pc, #288]	; (8002df4 <HAL_GPIO_Init+0x2bc>)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a40      	ldr	r2, [pc, #256]	; (8002df8 <HAL_GPIO_Init+0x2c0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d013      	beq.n	8002d24 <HAL_GPIO_Init+0x1ec>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3f      	ldr	r2, [pc, #252]	; (8002dfc <HAL_GPIO_Init+0x2c4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00d      	beq.n	8002d20 <HAL_GPIO_Init+0x1e8>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3e      	ldr	r2, [pc, #248]	; (8002e00 <HAL_GPIO_Init+0x2c8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d007      	beq.n	8002d1c <HAL_GPIO_Init+0x1e4>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a3d      	ldr	r2, [pc, #244]	; (8002e04 <HAL_GPIO_Init+0x2cc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d101      	bne.n	8002d18 <HAL_GPIO_Init+0x1e0>
 8002d14:	2303      	movs	r3, #3
 8002d16:	e006      	b.n	8002d26 <HAL_GPIO_Init+0x1ee>
 8002d18:	2304      	movs	r3, #4
 8002d1a:	e004      	b.n	8002d26 <HAL_GPIO_Init+0x1ee>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e002      	b.n	8002d26 <HAL_GPIO_Init+0x1ee>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <HAL_GPIO_Init+0x1ee>
 8002d24:	2300      	movs	r3, #0
 8002d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d28:	f002 0203 	and.w	r2, r2, #3
 8002d2c:	0092      	lsls	r2, r2, #2
 8002d2e:	4093      	lsls	r3, r2
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d36:	492f      	ldr	r1, [pc, #188]	; (8002df4 <HAL_GPIO_Init+0x2bc>)
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	089b      	lsrs	r3, r3, #2
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d006      	beq.n	8002d5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	492c      	ldr	r1, [pc, #176]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
 8002d5c:	e006      	b.n	8002d6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d5e:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	4928      	ldr	r1, [pc, #160]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d006      	beq.n	8002d86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d78:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	4922      	ldr	r1, [pc, #136]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
 8002d84:	e006      	b.n	8002d94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	491e      	ldr	r1, [pc, #120]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d006      	beq.n	8002dae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	4918      	ldr	r1, [pc, #96]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	608b      	str	r3, [r1, #8]
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002dae:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	4914      	ldr	r1, [pc, #80]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d021      	beq.n	8002e0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	490e      	ldr	r1, [pc, #56]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60cb      	str	r3, [r1, #12]
 8002dd4:	e021      	b.n	8002e1a <HAL_GPIO_Init+0x2e2>
 8002dd6:	bf00      	nop
 8002dd8:	10320000 	.word	0x10320000
 8002ddc:	10310000 	.word	0x10310000
 8002de0:	10220000 	.word	0x10220000
 8002de4:	10210000 	.word	0x10210000
 8002de8:	10120000 	.word	0x10120000
 8002dec:	10110000 	.word	0x10110000
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40010800 	.word	0x40010800
 8002dfc:	40010c00 	.word	0x40010c00
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40011400 	.word	0x40011400
 8002e08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_GPIO_Init+0x304>)
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	4909      	ldr	r1, [pc, #36]	; (8002e3c <HAL_GPIO_Init+0x304>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f47f ae8e 	bne.w	8002b4c <HAL_GPIO_Init+0x14>
  }
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	372c      	adds	r7, #44	; 0x2c
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40010400 	.word	0x40010400

08002e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	887b      	ldrh	r3, [r7, #2]
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
 8002e5c:	e001      	b.n	8002e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	807b      	strh	r3, [r7, #2]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e7e:	787b      	ldrb	r3, [r7, #1]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e84:	887a      	ldrh	r2, [r7, #2]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e8a:	e003      	b.n	8002e94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e8c:	887b      	ldrh	r3, [r7, #2]
 8002e8e:	041a      	lsls	r2, r3, #16
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	611a      	str	r2, [r3, #16]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e12b      	b.n	800310a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff f802 	bl	8001ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f04:	f001 fd20 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
 8002f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4a81      	ldr	r2, [pc, #516]	; (8003114 <HAL_I2C_Init+0x274>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d807      	bhi.n	8002f24 <HAL_I2C_Init+0x84>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4a80      	ldr	r2, [pc, #512]	; (8003118 <HAL_I2C_Init+0x278>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	bf94      	ite	ls
 8002f1c:	2301      	movls	r3, #1
 8002f1e:	2300      	movhi	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e006      	b.n	8002f32 <HAL_I2C_Init+0x92>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a7d      	ldr	r2, [pc, #500]	; (800311c <HAL_I2C_Init+0x27c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	bf94      	ite	ls
 8002f2c:	2301      	movls	r3, #1
 8002f2e:	2300      	movhi	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0e7      	b.n	800310a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4a78      	ldr	r2, [pc, #480]	; (8003120 <HAL_I2C_Init+0x280>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	0c9b      	lsrs	r3, r3, #18
 8002f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a6a      	ldr	r2, [pc, #424]	; (8003114 <HAL_I2C_Init+0x274>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d802      	bhi.n	8002f74 <HAL_I2C_Init+0xd4>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	3301      	adds	r3, #1
 8002f72:	e009      	b.n	8002f88 <HAL_I2C_Init+0xe8>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	4a69      	ldr	r2, [pc, #420]	; (8003124 <HAL_I2C_Init+0x284>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	3301      	adds	r3, #1
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	495c      	ldr	r1, [pc, #368]	; (8003114 <HAL_I2C_Init+0x274>)
 8002fa4:	428b      	cmp	r3, r1
 8002fa6:	d819      	bhi.n	8002fdc <HAL_I2C_Init+0x13c>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e59      	subs	r1, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb6:	1c59      	adds	r1, r3, #1
 8002fb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fbc:	400b      	ands	r3, r1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_I2C_Init+0x138>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1e59      	subs	r1, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd6:	e051      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8002fd8:	2304      	movs	r3, #4
 8002fda:	e04f      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d111      	bne.n	8003008 <HAL_I2C_Init+0x168>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1e58      	subs	r0, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	440b      	add	r3, r1
 8002ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e012      	b.n	800302e <HAL_I2C_Init+0x18e>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1e58      	subs	r0, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	0099      	lsls	r1, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	fbb0 f3f3 	udiv	r3, r0, r3
 800301e:	3301      	adds	r3, #1
 8003020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_Init+0x196>
 8003032:	2301      	movs	r3, #1
 8003034:	e022      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10e      	bne.n	800305c <HAL_I2C_Init+0x1bc>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1e58      	subs	r0, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6859      	ldr	r1, [r3, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	440b      	add	r3, r1
 800304c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003050:	3301      	adds	r3, #1
 8003052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305a:	e00f      	b.n	800307c <HAL_I2C_Init+0x1dc>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1e58      	subs	r0, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	0099      	lsls	r1, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003072:	3301      	adds	r3, #1
 8003074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	6809      	ldr	r1, [r1, #0]
 8003080:	4313      	orrs	r3, r2
 8003082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6911      	ldr	r1, [r2, #16]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68d2      	ldr	r2, [r2, #12]
 80030b6:	4311      	orrs	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	430b      	orrs	r3, r1
 80030be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	000186a0 	.word	0x000186a0
 8003118:	001e847f 	.word	0x001e847f
 800311c:	003d08ff 	.word	0x003d08ff
 8003120:	431bde83 	.word	0x431bde83
 8003124:	10624dd3 	.word	0x10624dd3

08003128 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	461a      	mov	r2, r3
 8003134:	460b      	mov	r3, r1
 8003136:	817b      	strh	r3, [r7, #10]
 8003138:	4613      	mov	r3, r2
 800313a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800313c:	f7ff f910 	bl	8002360 <HAL_GetTick>
 8003140:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b20      	cmp	r3, #32
 800314c:	f040 80e0 	bne.w	8003310 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2319      	movs	r3, #25
 8003156:	2201      	movs	r2, #1
 8003158:	4970      	ldr	r1, [pc, #448]	; (800331c <HAL_I2C_Master_Transmit+0x1f4>)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fe44 	bl	8003de8 <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003166:	2302      	movs	r3, #2
 8003168:	e0d3      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_I2C_Master_Transmit+0x50>
 8003174:	2302      	movs	r3, #2
 8003176:	e0cc      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d007      	beq.n	800319e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0201 	orr.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2221      	movs	r2, #33	; 0x21
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2210      	movs	r2, #16
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	893a      	ldrh	r2, [r7, #8]
 80031ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a50      	ldr	r2, [pc, #320]	; (8003320 <HAL_I2C_Master_Transmit+0x1f8>)
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031e0:	8979      	ldrh	r1, [r7, #10]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fbfe 	bl	80039e8 <I2C_MasterRequestWrite>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e08d      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800320c:	e066      	b.n	80032dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	6a39      	ldr	r1, [r7, #32]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 febe 	bl	8003f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00d      	beq.n	800323a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	2b04      	cmp	r3, #4
 8003224:	d107      	bne.n	8003236 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003234:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e06b      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	781a      	ldrb	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b04      	cmp	r3, #4
 8003276:	d11b      	bne.n	80032b0 <HAL_I2C_Master_Transmit+0x188>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	2b00      	cmp	r3, #0
 800327e:	d017      	beq.n	80032b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	6a39      	ldr	r1, [r7, #32]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 feae 	bl	8004016 <I2C_WaitOnBTFFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00d      	beq.n	80032dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d107      	bne.n	80032d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e01a      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d194      	bne.n	800320e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e000      	b.n	8003312 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	00100002 	.word	0x00100002
 8003320:	ffff0000 	.word	0xffff0000

08003324 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	4608      	mov	r0, r1
 800332e:	4611      	mov	r1, r2
 8003330:	461a      	mov	r2, r3
 8003332:	4603      	mov	r3, r0
 8003334:	817b      	strh	r3, [r7, #10]
 8003336:	460b      	mov	r3, r1
 8003338:	813b      	strh	r3, [r7, #8]
 800333a:	4613      	mov	r3, r2
 800333c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800333e:	f7ff f80f 	bl	8002360 <HAL_GetTick>
 8003342:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b20      	cmp	r3, #32
 800334e:	f040 80d9 	bne.w	8003504 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2319      	movs	r3, #25
 8003358:	2201      	movs	r2, #1
 800335a:	496d      	ldr	r1, [pc, #436]	; (8003510 <HAL_I2C_Mem_Write+0x1ec>)
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 fd43 	bl	8003de8 <I2C_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
 800336a:	e0cc      	b.n	8003506 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_I2C_Mem_Write+0x56>
 8003376:	2302      	movs	r3, #2
 8003378:	e0c5      	b.n	8003506 <HAL_I2C_Mem_Write+0x1e2>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b01      	cmp	r3, #1
 800338e:	d007      	beq.n	80033a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2221      	movs	r2, #33	; 0x21
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2240      	movs	r2, #64	; 0x40
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a3a      	ldr	r2, [r7, #32]
 80033ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4a4d      	ldr	r2, [pc, #308]	; (8003514 <HAL_I2C_Mem_Write+0x1f0>)
 80033e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033e2:	88f8      	ldrh	r0, [r7, #6]
 80033e4:	893a      	ldrh	r2, [r7, #8]
 80033e6:	8979      	ldrh	r1, [r7, #10]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	4603      	mov	r3, r0
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fb7a 	bl	8003aec <I2C_RequestMemoryWrite>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d052      	beq.n	80034a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e081      	b.n	8003506 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 fdc4 	bl	8003f94 <I2C_WaitOnTXEFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2b04      	cmp	r3, #4
 8003418:	d107      	bne.n	800342a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003428:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e06b      	b.n	8003506 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b04      	cmp	r3, #4
 800346a:	d11b      	bne.n	80034a4 <HAL_I2C_Mem_Write+0x180>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d017      	beq.n	80034a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	781a      	ldrb	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1aa      	bne.n	8003402 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fdb0 	bl	8004016 <I2C_WaitOnBTFFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00d      	beq.n	80034d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d107      	bne.n	80034d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e016      	b.n	8003506 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	00100002 	.word	0x00100002
 8003514:	ffff0000 	.word	0xffff0000

08003518 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08c      	sub	sp, #48	; 0x30
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	4608      	mov	r0, r1
 8003522:	4611      	mov	r1, r2
 8003524:	461a      	mov	r2, r3
 8003526:	4603      	mov	r3, r0
 8003528:	817b      	strh	r3, [r7, #10]
 800352a:	460b      	mov	r3, r1
 800352c:	813b      	strh	r3, [r7, #8]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003536:	f7fe ff13 	bl	8002360 <HAL_GetTick>
 800353a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b20      	cmp	r3, #32
 8003546:	f040 8244 	bne.w	80039d2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2319      	movs	r3, #25
 8003550:	2201      	movs	r2, #1
 8003552:	4982      	ldr	r1, [pc, #520]	; (800375c <HAL_I2C_Mem_Read+0x244>)
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 fc47 	bl	8003de8 <I2C_WaitOnFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003560:	2302      	movs	r3, #2
 8003562:	e237      	b.n	80039d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_I2C_Mem_Read+0x5a>
 800356e:	2302      	movs	r3, #2
 8003570:	e230      	b.n	80039d4 <HAL_I2C_Mem_Read+0x4bc>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b01      	cmp	r3, #1
 8003586:	d007      	beq.n	8003598 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2222      	movs	r2, #34	; 0x22
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2240      	movs	r2, #64	; 0x40
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4a62      	ldr	r2, [pc, #392]	; (8003760 <HAL_I2C_Mem_Read+0x248>)
 80035d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035da:	88f8      	ldrh	r0, [r7, #6]
 80035dc:	893a      	ldrh	r2, [r7, #8]
 80035de:	8979      	ldrh	r1, [r7, #10]
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	4603      	mov	r3, r0
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 fb14 	bl	8003c18 <I2C_RequestMemoryRead>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e1ec      	b.n	80039d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d113      	bne.n	800362a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e1c0      	b.n	80039ac <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362e:	2b01      	cmp	r3, #1
 8003630:	d11e      	bne.n	8003670 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003640:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003642:	b672      	cpsid	i
}
 8003644:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800366c:	b662      	cpsie	i
}
 800366e:	e035      	b.n	80036dc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	2b02      	cmp	r3, #2
 8003676:	d11e      	bne.n	80036b6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003686:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003688:	b672      	cpsid	i
}
 800368a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036b2:	b662      	cpsie	i
}
 80036b4:	e012      	b.n	80036dc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036c4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80036dc:	e166      	b.n	80039ac <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	f200 811f 	bhi.w	8003926 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d123      	bne.n	8003738 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fccf 	bl	8004098 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e167      	b.n	80039d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003736:	e139      	b.n	80039ac <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373c:	2b02      	cmp	r3, #2
 800373e:	d152      	bne.n	80037e6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003746:	2200      	movs	r2, #0
 8003748:	4906      	ldr	r1, [pc, #24]	; (8003764 <HAL_I2C_Mem_Read+0x24c>)
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 fb4c 	bl	8003de8 <I2C_WaitOnFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e13c      	b.n	80039d4 <HAL_I2C_Mem_Read+0x4bc>
 800375a:	bf00      	nop
 800375c:	00100002 	.word	0x00100002
 8003760:	ffff0000 	.word	0xffff0000
 8003764:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003768:	b672      	cpsid	i
}
 800376a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037ae:	b662      	cpsie	i
}
 80037b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037e4:	e0e2      	b.n	80039ac <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ec:	2200      	movs	r2, #0
 80037ee:	497b      	ldr	r1, [pc, #492]	; (80039dc <HAL_I2C_Mem_Read+0x4c4>)
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 faf9 	bl	8003de8 <I2C_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0e9      	b.n	80039d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003810:	b672      	cpsid	i
}
 8003812:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003846:	4b66      	ldr	r3, [pc, #408]	; (80039e0 <HAL_I2C_Mem_Read+0x4c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	08db      	lsrs	r3, r3, #3
 800384c:	4a65      	ldr	r2, [pc, #404]	; (80039e4 <HAL_I2C_Mem_Read+0x4cc>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	0a1a      	lsrs	r2, r3, #8
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	00da      	lsls	r2, r3, #3
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	3b01      	subs	r3, #1
 8003864:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d118      	bne.n	800389e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f043 0220 	orr.w	r2, r3, #32
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800388e:	b662      	cpsie	i
}
 8003890:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e09a      	b.n	80039d4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d1d9      	bne.n	8003860 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80038ee:	b662      	cpsie	i
}
 80038f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003924:	e042      	b.n	80039ac <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003928:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fbb4 	bl	8004098 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e04c      	b.n	80039d4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b04      	cmp	r3, #4
 8003978:	d118      	bne.n	80039ac <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f47f ae94 	bne.w	80036de <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e000      	b.n	80039d4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80039d2:	2302      	movs	r3, #2
  }
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3728      	adds	r7, #40	; 0x28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	00010004 	.word	0x00010004
 80039e0:	2000008c 	.word	0x2000008c
 80039e4:	14f8b589 	.word	0x14f8b589

080039e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	460b      	mov	r3, r1
 80039f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d006      	beq.n	8003a12 <I2C_MasterRequestWrite+0x2a>
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d003      	beq.n	8003a12 <I2C_MasterRequestWrite+0x2a>
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a10:	d108      	bne.n	8003a24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	e00b      	b.n	8003a3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	2b12      	cmp	r3, #18
 8003a2a:	d107      	bne.n	8003a3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f9cd 	bl	8003de8 <I2C_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a62:	d103      	bne.n	8003a6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e035      	b.n	8003adc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a78:	d108      	bne.n	8003a8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a7a:	897b      	ldrh	r3, [r7, #10]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a88:	611a      	str	r2, [r3, #16]
 8003a8a:	e01b      	b.n	8003ac4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a8c:	897b      	ldrh	r3, [r7, #10]
 8003a8e:	11db      	asrs	r3, r3, #7
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f003 0306 	and.w	r3, r3, #6
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f063 030f 	orn	r3, r3, #15
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	490e      	ldr	r1, [pc, #56]	; (8003ae4 <I2C_MasterRequestWrite+0xfc>)
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f9f3 	bl	8003e96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e010      	b.n	8003adc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003aba:	897b      	ldrh	r3, [r7, #10]
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4907      	ldr	r1, [pc, #28]	; (8003ae8 <I2C_MasterRequestWrite+0x100>)
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f9e3 	bl	8003e96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	00010008 	.word	0x00010008
 8003ae8:	00010002 	.word	0x00010002

08003aec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	4608      	mov	r0, r1
 8003af6:	4611      	mov	r1, r2
 8003af8:	461a      	mov	r2, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	817b      	strh	r3, [r7, #10]
 8003afe:	460b      	mov	r3, r1
 8003b00:	813b      	strh	r3, [r7, #8]
 8003b02:	4613      	mov	r3, r2
 8003b04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f960 	bl	8003de8 <I2C_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3c:	d103      	bne.n	8003b46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e05f      	b.n	8003c0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b4a:	897b      	ldrh	r3, [r7, #10]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	6a3a      	ldr	r2, [r7, #32]
 8003b5e:	492d      	ldr	r1, [pc, #180]	; (8003c14 <I2C_RequestMemoryWrite+0x128>)
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f998 	bl	8003e96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e04c      	b.n	8003c0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	6a39      	ldr	r1, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fa02 	bl	8003f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d107      	bne.n	8003bae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e02b      	b.n	8003c0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d105      	bne.n	8003bc4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb8:	893b      	ldrh	r3, [r7, #8]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	611a      	str	r2, [r3, #16]
 8003bc2:	e021      	b.n	8003c08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bc4:	893b      	ldrh	r3, [r7, #8]
 8003bc6:	0a1b      	lsrs	r3, r3, #8
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	6a39      	ldr	r1, [r7, #32]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f9dc 	bl	8003f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00d      	beq.n	8003bfe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d107      	bne.n	8003bfa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e005      	b.n	8003c0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bfe:	893b      	ldrh	r3, [r7, #8]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	00010002 	.word	0x00010002

08003c18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	4608      	mov	r0, r1
 8003c22:	4611      	mov	r1, r2
 8003c24:	461a      	mov	r2, r3
 8003c26:	4603      	mov	r3, r0
 8003c28:	817b      	strh	r3, [r7, #10]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	813b      	strh	r3, [r7, #8]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f8c2 	bl	8003de8 <I2C_WaitOnFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c78:	d103      	bne.n	8003c82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0aa      	b.n	8003ddc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c86:	897b      	ldrh	r3, [r7, #10]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	6a3a      	ldr	r2, [r7, #32]
 8003c9a:	4952      	ldr	r1, [pc, #328]	; (8003de4 <I2C_RequestMemoryRead+0x1cc>)
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f8fa 	bl	8003e96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e097      	b.n	8003ddc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc4:	6a39      	ldr	r1, [r7, #32]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f964 	bl	8003f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d107      	bne.n	8003cea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e076      	b.n	8003ddc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d105      	bne.n	8003d00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf4:	893b      	ldrh	r3, [r7, #8]
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	611a      	str	r2, [r3, #16]
 8003cfe:	e021      	b.n	8003d44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d00:	893b      	ldrh	r3, [r7, #8]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d10:	6a39      	ldr	r1, [r7, #32]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f93e 	bl	8003f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00d      	beq.n	8003d3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d107      	bne.n	8003d36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e050      	b.n	8003ddc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d3a:	893b      	ldrh	r3, [r7, #8]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d46:	6a39      	ldr	r1, [r7, #32]
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f923 	bl	8003f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00d      	beq.n	8003d70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d107      	bne.n	8003d6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e035      	b.n	8003ddc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f82b 	bl	8003de8 <I2C_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00d      	beq.n	8003db4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da6:	d103      	bne.n	8003db0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e013      	b.n	8003ddc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003db4:	897b      	ldrh	r3, [r7, #10]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	6a3a      	ldr	r2, [r7, #32]
 8003dc8:	4906      	ldr	r1, [pc, #24]	; (8003de4 <I2C_RequestMemoryRead+0x1cc>)
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f863 	bl	8003e96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	00010002 	.word	0x00010002

08003de8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003df8:	e025      	b.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d021      	beq.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e02:	f7fe faad 	bl	8002360 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d302      	bcc.n	8003e18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d116      	bne.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f043 0220 	orr.w	r2, r3, #32
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e023      	b.n	8003e8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d10d      	bne.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	43da      	mvns	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	e00c      	b.n	8003e86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	43da      	mvns	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4013      	ands	r3, r2
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bf0c      	ite	eq
 8003e7e:	2301      	moveq	r3, #1
 8003e80:	2300      	movne	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d0b6      	beq.n	8003dfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ea4:	e051      	b.n	8003f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb4:	d123      	bne.n	8003efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ece:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f043 0204 	orr.w	r2, r3, #4
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e046      	b.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d021      	beq.n	8003f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f06:	f7fe fa2b 	bl	8002360 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d116      	bne.n	8003f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f043 0220 	orr.w	r2, r3, #32
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e020      	b.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	0c1b      	lsrs	r3, r3, #16
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d10c      	bne.n	8003f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	43da      	mvns	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bf14      	ite	ne
 8003f66:	2301      	movne	r3, #1
 8003f68:	2300      	moveq	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	e00b      	b.n	8003f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	43da      	mvns	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bf14      	ite	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d18d      	bne.n	8003ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fa0:	e02d      	b.n	8003ffe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f8ce 	bl	8004144 <I2C_IsAcknowledgeFailed>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e02d      	b.n	800400e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d021      	beq.n	8003ffe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fba:	f7fe f9d1 	bl	8002360 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d302      	bcc.n	8003fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d116      	bne.n	8003ffe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f043 0220 	orr.w	r2, r3, #32
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e007      	b.n	800400e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004008:	2b80      	cmp	r3, #128	; 0x80
 800400a:	d1ca      	bne.n	8003fa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004022:	e02d      	b.n	8004080 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f88d 	bl	8004144 <I2C_IsAcknowledgeFailed>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e02d      	b.n	8004090 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403a:	d021      	beq.n	8004080 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403c:	f7fe f990 	bl	8002360 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	429a      	cmp	r2, r3
 800404a:	d302      	bcc.n	8004052 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d116      	bne.n	8004080 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	f043 0220 	orr.w	r2, r3, #32
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e007      	b.n	8004090 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b04      	cmp	r3, #4
 800408c:	d1ca      	bne.n	8004024 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040a4:	e042      	b.n	800412c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d119      	bne.n	80040e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0210 	mvn.w	r2, #16
 80040bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e029      	b.n	800413c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e8:	f7fe f93a 	bl	8002360 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d302      	bcc.n	80040fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d116      	bne.n	800412c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	f043 0220 	orr.w	r2, r3, #32
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e007      	b.n	800413c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004136:	2b40      	cmp	r3, #64	; 0x40
 8004138:	d1b5      	bne.n	80040a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415a:	d11b      	bne.n	8004194 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004164:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	f043 0204 	orr.w	r2, r3, #4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e272      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8087 	beq.w	80042ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041c0:	4b92      	ldr	r3, [pc, #584]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d00c      	beq.n	80041e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041cc:	4b8f      	ldr	r3, [pc, #572]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d112      	bne.n	80041fe <HAL_RCC_OscConfig+0x5e>
 80041d8:	4b8c      	ldr	r3, [pc, #560]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e4:	d10b      	bne.n	80041fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e6:	4b89      	ldr	r3, [pc, #548]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d06c      	beq.n	80042cc <HAL_RCC_OscConfig+0x12c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d168      	bne.n	80042cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e24c      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004206:	d106      	bne.n	8004216 <HAL_RCC_OscConfig+0x76>
 8004208:	4b80      	ldr	r3, [pc, #512]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a7f      	ldr	r2, [pc, #508]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 800420e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	e02e      	b.n	8004274 <HAL_RCC_OscConfig+0xd4>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0x98>
 800421e:	4b7b      	ldr	r3, [pc, #492]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a7a      	ldr	r2, [pc, #488]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4b78      	ldr	r3, [pc, #480]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a77      	ldr	r2, [pc, #476]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004230:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e01d      	b.n	8004274 <HAL_RCC_OscConfig+0xd4>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0xbc>
 8004242:	4b72      	ldr	r3, [pc, #456]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a71      	ldr	r2, [pc, #452]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	4b6f      	ldr	r3, [pc, #444]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a6e      	ldr	r2, [pc, #440]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0xd4>
 800425c:	4b6b      	ldr	r3, [pc, #428]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a6a      	ldr	r2, [pc, #424]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4b68      	ldr	r3, [pc, #416]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a67      	ldr	r2, [pc, #412]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 800426e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004272:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d013      	beq.n	80042a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fe f870 	bl	8002360 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004284:	f7fe f86c 	bl	8002360 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e200      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b5d      	ldr	r3, [pc, #372]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0xe4>
 80042a2:	e014      	b.n	80042ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a4:	f7fe f85c 	bl	8002360 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ac:	f7fe f858 	bl	8002360 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	; 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e1ec      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	4b53      	ldr	r3, [pc, #332]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f0      	bne.n	80042ac <HAL_RCC_OscConfig+0x10c>
 80042ca:	e000      	b.n	80042ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d063      	beq.n	80043a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042da:	4b4c      	ldr	r3, [pc, #304]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042e6:	4b49      	ldr	r3, [pc, #292]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d11c      	bne.n	800432c <HAL_RCC_OscConfig+0x18c>
 80042f2:	4b46      	ldr	r3, [pc, #280]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d116      	bne.n	800432c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fe:	4b43      	ldr	r3, [pc, #268]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_RCC_OscConfig+0x176>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d001      	beq.n	8004316 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e1c0      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004316:	4b3d      	ldr	r3, [pc, #244]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4939      	ldr	r1, [pc, #228]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432a:	e03a      	b.n	80043a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004334:	4b36      	ldr	r3, [pc, #216]	; (8004410 <HAL_RCC_OscConfig+0x270>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433a:	f7fe f811 	bl	8002360 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004342:	f7fe f80d 	bl	8002360 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e1a1      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	4b2d      	ldr	r3, [pc, #180]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004360:	4b2a      	ldr	r3, [pc, #168]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4927      	ldr	r1, [pc, #156]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]
 8004374:	e015      	b.n	80043a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004376:	4b26      	ldr	r3, [pc, #152]	; (8004410 <HAL_RCC_OscConfig+0x270>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fd fff0 	bl	8002360 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004384:	f7fd ffec 	bl	8002360 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e180      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	4b1d      	ldr	r3, [pc, #116]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d03a      	beq.n	8004424 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d019      	beq.n	80043ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b6:	4b17      	ldr	r3, [pc, #92]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043bc:	f7fd ffd0 	bl	8002360 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c4:	f7fd ffcc 	bl	8002360 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e160      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	4b0d      	ldr	r3, [pc, #52]	; (800440c <HAL_RCC_OscConfig+0x26c>)
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043e2:	2001      	movs	r0, #1
 80043e4:	f000 fad8 	bl	8004998 <RCC_Delay>
 80043e8:	e01c      	b.n	8004424 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <HAL_RCC_OscConfig+0x274>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f0:	f7fd ffb6 	bl	8002360 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f6:	e00f      	b.n	8004418 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f8:	f7fd ffb2 	bl	8002360 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d908      	bls.n	8004418 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e146      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000
 8004410:	42420000 	.word	0x42420000
 8004414:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	4b92      	ldr	r3, [pc, #584]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e9      	bne.n	80043f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80a6 	beq.w	800457e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004436:	4b8b      	ldr	r3, [pc, #556]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10d      	bne.n	800445e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	4b88      	ldr	r3, [pc, #544]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	4a87      	ldr	r2, [pc, #540]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444c:	61d3      	str	r3, [r2, #28]
 800444e:	4b85      	ldr	r3, [pc, #532]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004456:	60bb      	str	r3, [r7, #8]
 8004458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445a:	2301      	movs	r3, #1
 800445c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445e:	4b82      	ldr	r3, [pc, #520]	; (8004668 <HAL_RCC_OscConfig+0x4c8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d118      	bne.n	800449c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446a:	4b7f      	ldr	r3, [pc, #508]	; (8004668 <HAL_RCC_OscConfig+0x4c8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a7e      	ldr	r2, [pc, #504]	; (8004668 <HAL_RCC_OscConfig+0x4c8>)
 8004470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004476:	f7fd ff73 	bl	8002360 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447e:	f7fd ff6f 	bl	8002360 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b64      	cmp	r3, #100	; 0x64
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e103      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004490:	4b75      	ldr	r3, [pc, #468]	; (8004668 <HAL_RCC_OscConfig+0x4c8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d106      	bne.n	80044b2 <HAL_RCC_OscConfig+0x312>
 80044a4:	4b6f      	ldr	r3, [pc, #444]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4a6e      	ldr	r2, [pc, #440]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	6213      	str	r3, [r2, #32]
 80044b0:	e02d      	b.n	800450e <HAL_RCC_OscConfig+0x36e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x334>
 80044ba:	4b6a      	ldr	r3, [pc, #424]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	4a69      	ldr	r2, [pc, #420]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	6213      	str	r3, [r2, #32]
 80044c6:	4b67      	ldr	r3, [pc, #412]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	4a66      	ldr	r2, [pc, #408]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044cc:	f023 0304 	bic.w	r3, r3, #4
 80044d0:	6213      	str	r3, [r2, #32]
 80044d2:	e01c      	b.n	800450e <HAL_RCC_OscConfig+0x36e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b05      	cmp	r3, #5
 80044da:	d10c      	bne.n	80044f6 <HAL_RCC_OscConfig+0x356>
 80044dc:	4b61      	ldr	r3, [pc, #388]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4a60      	ldr	r2, [pc, #384]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044e2:	f043 0304 	orr.w	r3, r3, #4
 80044e6:	6213      	str	r3, [r2, #32]
 80044e8:	4b5e      	ldr	r3, [pc, #376]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	4a5d      	ldr	r2, [pc, #372]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6213      	str	r3, [r2, #32]
 80044f4:	e00b      	b.n	800450e <HAL_RCC_OscConfig+0x36e>
 80044f6:	4b5b      	ldr	r3, [pc, #364]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	4a5a      	ldr	r2, [pc, #360]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	6213      	str	r3, [r2, #32]
 8004502:	4b58      	ldr	r3, [pc, #352]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	4a57      	ldr	r2, [pc, #348]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004508:	f023 0304 	bic.w	r3, r3, #4
 800450c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d015      	beq.n	8004542 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004516:	f7fd ff23 	bl	8002360 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451c:	e00a      	b.n	8004534 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f7fd ff1f 	bl	8002360 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	; 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e0b1      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	4b4b      	ldr	r3, [pc, #300]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ee      	beq.n	800451e <HAL_RCC_OscConfig+0x37e>
 8004540:	e014      	b.n	800456c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004542:	f7fd ff0d 	bl	8002360 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004548:	e00a      	b.n	8004560 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7fd ff09 	bl	8002360 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	; 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e09b      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004560:	4b40      	ldr	r3, [pc, #256]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1ee      	bne.n	800454a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d105      	bne.n	800457e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004572:	4b3c      	ldr	r3, [pc, #240]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	4a3b      	ldr	r2, [pc, #236]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800457c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8087 	beq.w	8004696 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004588:	4b36      	ldr	r3, [pc, #216]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 030c 	and.w	r3, r3, #12
 8004590:	2b08      	cmp	r3, #8
 8004592:	d061      	beq.n	8004658 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d146      	bne.n	800462a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459c:	4b33      	ldr	r3, [pc, #204]	; (800466c <HAL_RCC_OscConfig+0x4cc>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7fd fedd 	bl	8002360 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045aa:	f7fd fed9 	bl	8002360 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e06d      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045bc:	4b29      	ldr	r3, [pc, #164]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f0      	bne.n	80045aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d0:	d108      	bne.n	80045e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045d2:	4b24      	ldr	r3, [pc, #144]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	4921      	ldr	r1, [pc, #132]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e4:	4b1f      	ldr	r3, [pc, #124]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a19      	ldr	r1, [r3, #32]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	430b      	orrs	r3, r1
 80045f6:	491b      	ldr	r1, [pc, #108]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045fc:	4b1b      	ldr	r3, [pc, #108]	; (800466c <HAL_RCC_OscConfig+0x4cc>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004602:	f7fd fead 	bl	8002360 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800460a:	f7fd fea9 	bl	8002360 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e03d      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800461c:	4b11      	ldr	r3, [pc, #68]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x46a>
 8004628:	e035      	b.n	8004696 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <HAL_RCC_OscConfig+0x4cc>)
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004630:	f7fd fe96 	bl	8002360 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004638:	f7fd fe92 	bl	8002360 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e026      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_RCC_OscConfig+0x4c4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x498>
 8004656:	e01e      	b.n	8004696 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d107      	bne.n	8004670 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e019      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
 8004664:	40021000 	.word	0x40021000
 8004668:	40007000 	.word	0x40007000
 800466c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <HAL_RCC_OscConfig+0x500>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	429a      	cmp	r2, r3
 8004682:	d106      	bne.n	8004692 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d001      	beq.n	8004696 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000

080046a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0d0      	b.n	800485a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046b8:	4b6a      	ldr	r3, [pc, #424]	; (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d910      	bls.n	80046e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c6:	4b67      	ldr	r3, [pc, #412]	; (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 0207 	bic.w	r2, r3, #7
 80046ce:	4965      	ldr	r1, [pc, #404]	; (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	4b63      	ldr	r3, [pc, #396]	; (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0b8      	b.n	800485a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d020      	beq.n	8004736 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004700:	4b59      	ldr	r3, [pc, #356]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4a58      	ldr	r2, [pc, #352]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004706:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800470a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004718:	4b53      	ldr	r3, [pc, #332]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a52      	ldr	r2, [pc, #328]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 800471e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004722:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004724:	4b50      	ldr	r3, [pc, #320]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	494d      	ldr	r1, [pc, #308]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004732:	4313      	orrs	r3, r2
 8004734:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d040      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d107      	bne.n	800475a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474a:	4b47      	ldr	r3, [pc, #284]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d115      	bne.n	8004782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e07f      	b.n	800485a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d107      	bne.n	8004772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004762:	4b41      	ldr	r3, [pc, #260]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e073      	b.n	800485a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004772:	4b3d      	ldr	r3, [pc, #244]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e06b      	b.n	800485a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004782:	4b39      	ldr	r3, [pc, #228]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f023 0203 	bic.w	r2, r3, #3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4936      	ldr	r1, [pc, #216]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004790:	4313      	orrs	r3, r2
 8004792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004794:	f7fd fde4 	bl	8002360 <HAL_GetTick>
 8004798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479a:	e00a      	b.n	80047b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800479c:	f7fd fde0 	bl	8002360 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e053      	b.n	800485a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b2:	4b2d      	ldr	r3, [pc, #180]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 020c 	and.w	r2, r3, #12
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d1eb      	bne.n	800479c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047c4:	4b27      	ldr	r3, [pc, #156]	; (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d210      	bcs.n	80047f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	4b24      	ldr	r3, [pc, #144]	; (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f023 0207 	bic.w	r2, r3, #7
 80047da:	4922      	ldr	r1, [pc, #136]	; (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	4313      	orrs	r3, r2
 80047e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e2:	4b20      	ldr	r3, [pc, #128]	; (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d001      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e032      	b.n	800485a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004800:	4b19      	ldr	r3, [pc, #100]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4916      	ldr	r1, [pc, #88]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 800480e:	4313      	orrs	r3, r2
 8004810:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800481e:	4b12      	ldr	r3, [pc, #72]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	490e      	ldr	r1, [pc, #56]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004832:	f000 f821 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8004836:	4602      	mov	r2, r0
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	490a      	ldr	r1, [pc, #40]	; (800486c <HAL_RCC_ClockConfig+0x1c8>)
 8004844:	5ccb      	ldrb	r3, [r1, r3]
 8004846:	fa22 f303 	lsr.w	r3, r2, r3
 800484a:	4a09      	ldr	r2, [pc, #36]	; (8004870 <HAL_RCC_ClockConfig+0x1cc>)
 800484c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_RCC_ClockConfig+0x1d0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fd fd42 	bl	80022dc <HAL_InitTick>

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40022000 	.word	0x40022000
 8004868:	40021000 	.word	0x40021000
 800486c:	080074f8 	.word	0x080074f8
 8004870:	2000008c 	.word	0x2000008c
 8004874:	20000090 	.word	0x20000090

08004878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004878:	b490      	push	{r4, r7}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800487e:	4b29      	ldr	r3, [pc, #164]	; (8004924 <HAL_RCC_GetSysClockFreq+0xac>)
 8004880:	1d3c      	adds	r4, r7, #4
 8004882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004888:	f240 2301 	movw	r3, #513	; 0x201
 800488c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048a2:	4b21      	ldr	r3, [pc, #132]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d002      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x40>
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d003      	beq.n	80048be <HAL_RCC_GetSysClockFreq+0x46>
 80048b6:	e02b      	b.n	8004910 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048b8:	4b1c      	ldr	r3, [pc, #112]	; (800492c <HAL_RCC_GetSysClockFreq+0xb4>)
 80048ba:	623b      	str	r3, [r7, #32]
      break;
 80048bc:	e02b      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	0c9b      	lsrs	r3, r3, #18
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	3328      	adds	r3, #40	; 0x28
 80048c8:	443b      	add	r3, r7
 80048ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80048ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d012      	beq.n	8004900 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048da:	4b13      	ldr	r3, [pc, #76]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	0c5b      	lsrs	r3, r3, #17
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	3328      	adds	r3, #40	; 0x28
 80048e6:	443b      	add	r3, r7
 80048e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	4a0e      	ldr	r2, [pc, #56]	; (800492c <HAL_RCC_GetSysClockFreq+0xb4>)
 80048f2:	fb03 f202 	mul.w	r2, r3, r2
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
 80048fe:	e004      	b.n	800490a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	4a0b      	ldr	r2, [pc, #44]	; (8004930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004904:	fb02 f303 	mul.w	r3, r2, r3
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	623b      	str	r3, [r7, #32]
      break;
 800490e:	e002      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004912:	623b      	str	r3, [r7, #32]
      break;
 8004914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004916:	6a3b      	ldr	r3, [r7, #32]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3728      	adds	r7, #40	; 0x28
 800491c:	46bd      	mov	sp, r7
 800491e:	bc90      	pop	{r4, r7}
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	080074e8 	.word	0x080074e8
 8004928:	40021000 	.word	0x40021000
 800492c:	007a1200 	.word	0x007a1200
 8004930:	003d0900 	.word	0x003d0900

08004934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004938:	4b02      	ldr	r3, [pc, #8]	; (8004944 <HAL_RCC_GetHCLKFreq+0x10>)
 800493a:	681b      	ldr	r3, [r3, #0]
}
 800493c:	4618      	mov	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	2000008c 	.word	0x2000008c

08004948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800494c:	f7ff fff2 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 8004950:	4602      	mov	r2, r0
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	4903      	ldr	r1, [pc, #12]	; (800496c <HAL_RCC_GetPCLK1Freq+0x24>)
 800495e:	5ccb      	ldrb	r3, [r1, r3]
 8004960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004964:	4618      	mov	r0, r3
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40021000 	.word	0x40021000
 800496c:	08007508 	.word	0x08007508

08004970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004974:	f7ff ffde 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 8004978:	4602      	mov	r2, r0
 800497a:	4b05      	ldr	r3, [pc, #20]	; (8004990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	0adb      	lsrs	r3, r3, #11
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	4903      	ldr	r1, [pc, #12]	; (8004994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004986:	5ccb      	ldrb	r3, [r1, r3]
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000
 8004994:	08007508 	.word	0x08007508

08004998 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <RCC_Delay+0x34>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a0a      	ldr	r2, [pc, #40]	; (80049d0 <RCC_Delay+0x38>)
 80049a6:	fba2 2303 	umull	r2, r3, r2, r3
 80049aa:	0a5b      	lsrs	r3, r3, #9
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
 80049b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049b4:	bf00      	nop
  }
  while (Delay --);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1e5a      	subs	r2, r3, #1
 80049ba:	60fa      	str	r2, [r7, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f9      	bne.n	80049b4 <RCC_Delay+0x1c>
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	2000008c 	.word	0x2000008c
 80049d0:	10624dd3 	.word	0x10624dd3

080049d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e041      	b.n	8004a6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fd fb48 	bl	8002090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f000 fbde 	bl	80051d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d001      	beq.n	8004a8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e032      	b.n	8004af2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a18      	ldr	r2, [pc, #96]	; (8004afc <HAL_TIM_Base_Start+0x88>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00e      	beq.n	8004abc <HAL_TIM_Base_Start+0x48>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa6:	d009      	beq.n	8004abc <HAL_TIM_Base_Start+0x48>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a14      	ldr	r2, [pc, #80]	; (8004b00 <HAL_TIM_Base_Start+0x8c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d004      	beq.n	8004abc <HAL_TIM_Base_Start+0x48>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <HAL_TIM_Base_Start+0x90>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d111      	bne.n	8004ae0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b06      	cmp	r3, #6
 8004acc:	d010      	beq.n	8004af0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0201 	orr.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ade:	e007      	b.n	8004af0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bc80      	pop	{r7}
 8004afa:	4770      	bx	lr
 8004afc:	40012c00 	.word	0x40012c00
 8004b00:	40000400 	.word	0x40000400
 8004b04:	40000800 	.word	0x40000800

08004b08 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6a1a      	ldr	r2, [r3, #32]
 8004b16:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10f      	bne.n	8004b40 <HAL_TIM_Base_Stop+0x38>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6a1a      	ldr	r2, [r3, #32]
 8004b26:	f240 4344 	movw	r3, #1092	; 0x444
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d107      	bne.n	8004b40 <HAL_TIM_Base_Stop+0x38>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr

08004b54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e093      	b.n	8004c90 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d106      	bne.n	8004b82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fd fa13 	bl	8001fa8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b98:	f023 0307 	bic.w	r3, r3, #7
 8004b9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f000 fb13 	bl	80051d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd6:	f023 0303 	bic.w	r3, r3, #3
 8004bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	4313      	orrs	r3, r2
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004bf4:	f023 030c 	bic.w	r3, r3, #12
 8004bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	4313      	orrs	r3, r2
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	011a      	lsls	r2, r3, #4
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	031b      	lsls	r3, r3, #12
 8004c24:	4313      	orrs	r3, r2
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cc0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d110      	bne.n	8004cea <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d102      	bne.n	8004cd4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cce:	7b7b      	ldrb	r3, [r7, #13]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d001      	beq.n	8004cd8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e089      	b.n	8004dec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce8:	e031      	b.n	8004d4e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d110      	bne.n	8004d12 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cf0:	7bbb      	ldrb	r3, [r7, #14]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d102      	bne.n	8004cfc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cf6:	7b3b      	ldrb	r3, [r7, #12]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d001      	beq.n	8004d00 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e075      	b.n	8004dec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d10:	e01d      	b.n	8004d4e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d108      	bne.n	8004d2a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d18:	7bbb      	ldrb	r3, [r7, #14]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d105      	bne.n	8004d2a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d1e:	7b7b      	ldrb	r3, [r7, #13]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d102      	bne.n	8004d2a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d24:	7b3b      	ldrb	r3, [r7, #12]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d001      	beq.n	8004d2e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e05e      	b.n	8004dec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2202      	movs	r2, #2
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2202      	movs	r2, #2
 8004d3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_TIM_Encoder_Start_IT+0xc4>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d010      	beq.n	8004d7c <HAL_TIM_Encoder_Start_IT+0xe4>
 8004d5a:	e01f      	b.n	8004d9c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2201      	movs	r2, #1
 8004d62:	2100      	movs	r1, #0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fb2d 	bl	80053c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0202 	orr.w	r2, r2, #2
 8004d78:	60da      	str	r2, [r3, #12]
      break;
 8004d7a:	e02e      	b.n	8004dda <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2201      	movs	r2, #1
 8004d82:	2104      	movs	r1, #4
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fb1d 	bl	80053c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0204 	orr.w	r2, r2, #4
 8004d98:	60da      	str	r2, [r3, #12]
      break;
 8004d9a:	e01e      	b.n	8004dda <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2201      	movs	r2, #1
 8004da2:	2100      	movs	r1, #0
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fb0d 	bl	80053c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	2104      	movs	r1, #4
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fb06 	bl	80053c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0202 	orr.w	r2, r2, #2
 8004dc6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0204 	orr.w	r2, r2, #4
 8004dd6:	60da      	str	r2, [r3, #12]
      break;
 8004dd8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0201 	orr.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d122      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d11b      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0202 	mvn.w	r2, #2
 8004e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f001 fa56 	bl	80062e8 <HAL_TIM_IC_CaptureCallback>
 8004e3c:	e005      	b.n	8004e4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f9ad 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f9b3 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0304 	and.w	r3, r3, #4
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d122      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d11b      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0204 	mvn.w	r2, #4
 8004e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2202      	movs	r2, #2
 8004e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f001 fa2c 	bl	80062e8 <HAL_TIM_IC_CaptureCallback>
 8004e90:	e005      	b.n	8004e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f983 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f989 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d122      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d11b      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0208 	mvn.w	r2, #8
 8004ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2204      	movs	r2, #4
 8004ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f001 fa02 	bl	80062e8 <HAL_TIM_IC_CaptureCallback>
 8004ee4:	e005      	b.n	8004ef2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f959 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f95f 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b10      	cmp	r3, #16
 8004f04:	d122      	bne.n	8004f4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d11b      	bne.n	8004f4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0210 	mvn.w	r2, #16
 8004f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2208      	movs	r2, #8
 8004f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f001 f9d8 	bl	80062e8 <HAL_TIM_IC_CaptureCallback>
 8004f38:	e005      	b.n	8004f46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f92f 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f935 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d10e      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d107      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0201 	mvn.w	r2, #1
 8004f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f90a 	bl	800518c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f82:	2b80      	cmp	r3, #128	; 0x80
 8004f84:	d10e      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f90:	2b80      	cmp	r3, #128	; 0x80
 8004f92:	d107      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fa9b 	bl	80054da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	d10e      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbc:	2b40      	cmp	r3, #64	; 0x40
 8004fbe:	d107      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f8f9 	bl	80051c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d10e      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	d107      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0220 	mvn.w	r2, #32
 8004ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fa66 	bl	80054c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_TIM_ConfigClockSource+0x18>
 8005018:	2302      	movs	r3, #2
 800501a:	e0b3      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x180>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800503a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005042:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005054:	d03e      	beq.n	80050d4 <HAL_TIM_ConfigClockSource+0xd0>
 8005056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505a:	f200 8087 	bhi.w	800516c <HAL_TIM_ConfigClockSource+0x168>
 800505e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005062:	f000 8085 	beq.w	8005170 <HAL_TIM_ConfigClockSource+0x16c>
 8005066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506a:	d87f      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x168>
 800506c:	2b70      	cmp	r3, #112	; 0x70
 800506e:	d01a      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0xa2>
 8005070:	2b70      	cmp	r3, #112	; 0x70
 8005072:	d87b      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x168>
 8005074:	2b60      	cmp	r3, #96	; 0x60
 8005076:	d050      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x116>
 8005078:	2b60      	cmp	r3, #96	; 0x60
 800507a:	d877      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x168>
 800507c:	2b50      	cmp	r3, #80	; 0x50
 800507e:	d03c      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0xf6>
 8005080:	2b50      	cmp	r3, #80	; 0x50
 8005082:	d873      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x168>
 8005084:	2b40      	cmp	r3, #64	; 0x40
 8005086:	d058      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x136>
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d86f      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x168>
 800508c:	2b30      	cmp	r3, #48	; 0x30
 800508e:	d064      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x156>
 8005090:	2b30      	cmp	r3, #48	; 0x30
 8005092:	d86b      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x168>
 8005094:	2b20      	cmp	r3, #32
 8005096:	d060      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x156>
 8005098:	2b20      	cmp	r3, #32
 800509a:	d867      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x168>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d05c      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x156>
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d05a      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80050a4:	e062      	b.n	800516c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6899      	ldr	r1, [r3, #8]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f000 f966 	bl	8005386 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	609a      	str	r2, [r3, #8]
      break;
 80050d2:	e04e      	b.n	8005172 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	6899      	ldr	r1, [r3, #8]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f000 f94f 	bl	8005386 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050f6:	609a      	str	r2, [r3, #8]
      break;
 80050f8:	e03b      	b.n	8005172 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6859      	ldr	r1, [r3, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	461a      	mov	r2, r3
 8005108:	f000 f8c6 	bl	8005298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2150      	movs	r1, #80	; 0x50
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f91d 	bl	8005352 <TIM_ITRx_SetConfig>
      break;
 8005118:	e02b      	b.n	8005172 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6859      	ldr	r1, [r3, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	461a      	mov	r2, r3
 8005128:	f000 f8e4 	bl	80052f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2160      	movs	r1, #96	; 0x60
 8005132:	4618      	mov	r0, r3
 8005134:	f000 f90d 	bl	8005352 <TIM_ITRx_SetConfig>
      break;
 8005138:	e01b      	b.n	8005172 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6859      	ldr	r1, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	461a      	mov	r2, r3
 8005148:	f000 f8a6 	bl	8005298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2140      	movs	r1, #64	; 0x40
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f8fd 	bl	8005352 <TIM_ITRx_SetConfig>
      break;
 8005158:	e00b      	b.n	8005172 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f000 f8f4 	bl	8005352 <TIM_ITRx_SetConfig>
        break;
 800516a:	e002      	b.n	8005172 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800516c:	bf00      	nop
 800516e:	e000      	b.n	8005172 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005170:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr

0800519e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr

080051b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	bc80      	pop	{r7}
 80051c0:	4770      	bx	lr

080051c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr

080051d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a29      	ldr	r2, [pc, #164]	; (800528c <TIM_Base_SetConfig+0xb8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00b      	beq.n	8005204 <TIM_Base_SetConfig+0x30>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f2:	d007      	beq.n	8005204 <TIM_Base_SetConfig+0x30>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a26      	ldr	r2, [pc, #152]	; (8005290 <TIM_Base_SetConfig+0xbc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d003      	beq.n	8005204 <TIM_Base_SetConfig+0x30>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a25      	ldr	r2, [pc, #148]	; (8005294 <TIM_Base_SetConfig+0xc0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d108      	bne.n	8005216 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a1c      	ldr	r2, [pc, #112]	; (800528c <TIM_Base_SetConfig+0xb8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00b      	beq.n	8005236 <TIM_Base_SetConfig+0x62>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005224:	d007      	beq.n	8005236 <TIM_Base_SetConfig+0x62>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a19      	ldr	r2, [pc, #100]	; (8005290 <TIM_Base_SetConfig+0xbc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d003      	beq.n	8005236 <TIM_Base_SetConfig+0x62>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a18      	ldr	r2, [pc, #96]	; (8005294 <TIM_Base_SetConfig+0xc0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d108      	bne.n	8005248 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a07      	ldr	r2, [pc, #28]	; (800528c <TIM_Base_SetConfig+0xb8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d103      	bne.n	800527c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	615a      	str	r2, [r3, #20]
}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	bc80      	pop	{r7}
 800528a:	4770      	bx	lr
 800528c:	40012c00 	.word	0x40012c00
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800

08005298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f023 0201 	bic.w	r2, r3, #1
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f023 030a 	bic.w	r3, r3, #10
 80052d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	f023 0210 	bic.w	r2, r3, #16
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800531e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	031b      	lsls	r3, r3, #12
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005330:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	621a      	str	r2, [r3, #32]
}
 8005348:	bf00      	nop
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr

08005352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	f043 0307 	orr.w	r3, r3, #7
 8005374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	609a      	str	r2, [r3, #8]
}
 800537c:	bf00      	nop
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr

08005386 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005386:	b480      	push	{r7}
 8005388:	b087      	sub	sp, #28
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	021a      	lsls	r2, r3, #8
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	431a      	orrs	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	609a      	str	r2, [r3, #8]
}
 80053ba:	bf00      	nop
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr

080053c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	2201      	movs	r2, #1
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1a      	ldr	r2, [r3, #32]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	43db      	mvns	r3, r3
 80053e6:	401a      	ands	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a1a      	ldr	r2, [r3, #32]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f003 031f 	and.w	r3, r3, #31
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	fa01 f303 	lsl.w	r3, r1, r3
 80053fc:	431a      	orrs	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005420:	2302      	movs	r3, #2
 8005422:	e046      	b.n	80054b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a16      	ldr	r2, [pc, #88]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00e      	beq.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005470:	d009      	beq.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a12      	ldr	r2, [pc, #72]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d004      	beq.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a10      	ldr	r2, [pc, #64]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d10c      	bne.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800548c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	4313      	orrs	r3, r2
 8005496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr
 80054bc:	40012c00 	.word	0x40012c00
 80054c0:	40000400 	.word	0x40000400
 80054c4:	40000800 	.word	0x40000800

080054c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr

080054da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bc80      	pop	{r7}
 80054ea:	4770      	bx	lr

080054ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e03f      	b.n	800557e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fc fdda 	bl	80020cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2224      	movs	r2, #36	; 0x24
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800552e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fb49 	bl	8005bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695a      	ldr	r2, [r3, #20]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	; 0x28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10d      	bne.n	80055da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <HAL_UART_IRQHandler+0x52>
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fa4f 	bl	8005a76 <UART_Receive_IT>
      return;
 80055d8:	e17b      	b.n	80058d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80b1 	beq.w	8005744 <HAL_UART_IRQHandler+0x1bc>
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d105      	bne.n	80055f8 <HAL_UART_IRQHandler+0x70>
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 80a6 	beq.w	8005744 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <HAL_UART_IRQHandler+0x90>
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005610:	f043 0201 	orr.w	r2, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HAL_UART_IRQHandler+0xb0>
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	f043 0202 	orr.w	r2, r3, #2
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <HAL_UART_IRQHandler+0xd0>
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d005      	beq.n	8005658 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	f043 0204 	orr.w	r2, r3, #4
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00f      	beq.n	8005682 <HAL_UART_IRQHandler+0xfa>
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d104      	bne.n	8005676 <HAL_UART_IRQHandler+0xee>
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f043 0208 	orr.w	r2, r3, #8
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 811e 	beq.w	80058c8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <HAL_UART_IRQHandler+0x11e>
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f9e8 	bl	8005a76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bf14      	ite	ne
 80056b4:	2301      	movne	r3, #1
 80056b6:	2300      	moveq	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	f003 0308 	and.w	r3, r3, #8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d102      	bne.n	80056ce <HAL_UART_IRQHandler+0x146>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d031      	beq.n	8005732 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f92a 	bl	8005928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d023      	beq.n	800572a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695a      	ldr	r2, [r3, #20]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d013      	beq.n	8005722 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	4a76      	ldr	r2, [pc, #472]	; (80058d8 <HAL_UART_IRQHandler+0x350>)
 8005700:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	4618      	mov	r0, r3
 8005708:	f7fc ffa0 	bl	800264c <HAL_DMA_Abort_IT>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d016      	beq.n	8005740 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800571c:	4610      	mov	r0, r2
 800571e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005720:	e00e      	b.n	8005740 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f8ec 	bl	8005900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	e00a      	b.n	8005740 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f8e8 	bl	8005900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005730:	e006      	b.n	8005740 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f8e4 	bl	8005900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800573e:	e0c3      	b.n	80058c8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	bf00      	nop
    return;
 8005742:	e0c1      	b.n	80058c8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005748:	2b01      	cmp	r3, #1
 800574a:	f040 80a1 	bne.w	8005890 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 809b 	beq.w	8005890 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 8095 	beq.w	8005890 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d04e      	beq.n	8005828 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005794:	8a3b      	ldrh	r3, [r7, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 8098 	beq.w	80058cc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057a0:	8a3a      	ldrh	r2, [r7, #16]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	f080 8092 	bcs.w	80058cc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	8a3a      	ldrh	r2, [r7, #16]
 80057ac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d02b      	beq.n	8005810 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057c6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695a      	ldr	r2, [r3, #20]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0201 	bic.w	r2, r2, #1
 80057d6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0210 	bic.w	r2, r2, #16
 8005804:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	4618      	mov	r0, r3
 800580c:	f7fc fee3 	bl	80025d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005818:	b29b      	uxth	r3, r3
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	b29b      	uxth	r3, r3
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f876 	bl	8005912 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005826:	e051      	b.n	80058cc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005830:	b29b      	uxth	r3, r3
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d047      	beq.n	80058d0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005840:	8a7b      	ldrh	r3, [r7, #18]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d044      	beq.n	80058d0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005854:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695a      	ldr	r2, [r3, #20]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0210 	bic.w	r2, r2, #16
 8005882:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005884:	8a7b      	ldrh	r3, [r7, #18]
 8005886:	4619      	mov	r1, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f842 	bl	8005912 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800588e:	e01f      	b.n	80058d0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <HAL_UART_IRQHandler+0x324>
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f87f 	bl	80059a8 <UART_Transmit_IT>
    return;
 80058aa:	e012      	b.n	80058d2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00d      	beq.n	80058d2 <HAL_UART_IRQHandler+0x34a>
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d008      	beq.n	80058d2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f8c0 	bl	8005a46 <UART_EndTransmit_IT>
    return;
 80058c6:	e004      	b.n	80058d2 <HAL_UART_IRQHandler+0x34a>
    return;
 80058c8:	bf00      	nop
 80058ca:	e002      	b.n	80058d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80058cc:	bf00      	nop
 80058ce:	e000      	b.n	80058d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80058d0:	bf00      	nop
  }
}
 80058d2:	3728      	adds	r7, #40	; 0x28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	08005981 	.word	0x08005981

080058dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr

08005912 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	460b      	mov	r3, r1
 800591c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr

08005928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800593e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695a      	ldr	r2, [r3, #20]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0201 	bic.w	r2, r2, #1
 800594e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	2b01      	cmp	r3, #1
 8005956:	d107      	bne.n	8005968 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0210 	bic.w	r2, r2, #16
 8005966:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr

08005980 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f7ff ffb0 	bl	8005900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059a0:	bf00      	nop
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b21      	cmp	r3, #33	; 0x21
 80059ba:	d13e      	bne.n	8005a3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c4:	d114      	bne.n	80059f0 <UART_Transmit_IT+0x48>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d110      	bne.n	80059f0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	461a      	mov	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	1c9a      	adds	r2, r3, #2
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	621a      	str	r2, [r3, #32]
 80059ee:	e008      	b.n	8005a02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	1c59      	adds	r1, r3, #1
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6211      	str	r1, [r2, #32]
 80059fa:	781a      	ldrb	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10f      	bne.n	8005a36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	e000      	b.n	8005a3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a3a:	2302      	movs	r3, #2
  }
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr

08005a46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7ff ff38 	bl	80058dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b086      	sub	sp, #24
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b22      	cmp	r3, #34	; 0x22
 8005a88:	f040 8099 	bne.w	8005bbe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a94:	d117      	bne.n	8005ac6 <UART_Receive_IT+0x50>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d113      	bne.n	8005ac6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abe:	1c9a      	adds	r2, r3, #2
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ac4:	e026      	b.n	8005b14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad8:	d007      	beq.n	8005aea <UART_Receive_IT+0x74>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <UART_Receive_IT+0x82>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	e008      	b.n	8005b0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4619      	mov	r1, r3
 8005b22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d148      	bne.n	8005bba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0220 	bic.w	r2, r2, #32
 8005b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695a      	ldr	r2, [r3, #20]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0201 	bic.w	r2, r2, #1
 8005b56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d123      	bne.n	8005bb0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0210 	bic.w	r2, r2, #16
 8005b7c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	d10a      	bne.n	8005ba2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff feb2 	bl	8005912 <HAL_UARTEx_RxEventCallback>
 8005bae:	e002      	b.n	8005bb6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff fe9c 	bl	80058ee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e002      	b.n	8005bc0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e000      	b.n	8005bc0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005bbe:	2302      	movs	r3, #2
  }
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005c02:	f023 030c 	bic.w	r3, r3, #12
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a2c      	ldr	r2, [pc, #176]	; (8005cdc <UART_SetConfig+0x114>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d103      	bne.n	8005c38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c30:	f7fe fe9e 	bl	8004970 <HAL_RCC_GetPCLK2Freq>
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	e002      	b.n	8005c3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c38:	f7fe fe86 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
 8005c3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4613      	mov	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	009a      	lsls	r2, r3, #2
 8005c48:	441a      	add	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c54:	4a22      	ldr	r2, [pc, #136]	; (8005ce0 <UART_SetConfig+0x118>)
 8005c56:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	0119      	lsls	r1, r3, #4
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	009a      	lsls	r2, r3, #2
 8005c68:	441a      	add	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c74:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <UART_SetConfig+0x118>)
 8005c76:	fba3 0302 	umull	r0, r3, r3, r2
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	2064      	movs	r0, #100	; 0x64
 8005c7e:	fb00 f303 	mul.w	r3, r0, r3
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	3332      	adds	r3, #50	; 0x32
 8005c88:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <UART_SetConfig+0x118>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c94:	4419      	add	r1, r3
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009a      	lsls	r2, r3, #2
 8005ca0:	441a      	add	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cac:	4b0c      	ldr	r3, [pc, #48]	; (8005ce0 <UART_SetConfig+0x118>)
 8005cae:	fba3 0302 	umull	r0, r3, r3, r2
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	2064      	movs	r0, #100	; 0x64
 8005cb6:	fb00 f303 	mul.w	r3, r0, r3
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	3332      	adds	r3, #50	; 0x32
 8005cc0:	4a07      	ldr	r2, [pc, #28]	; (8005ce0 <UART_SetConfig+0x118>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	f003 020f 	and.w	r2, r3, #15
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40013800 	.word	0x40013800
 8005ce0:	51eb851f 	.word	0x51eb851f

08005ce4 <DHT_Set_Pin_Output>:
#define DHT11_STARTTIME 18000
#define DHT22_STARTTIME 12000

#define TIME_OUT		10

static void DHT_Set_Pin_Output(DHT_HandleTypeDef* p_DHT){
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cec:	f107 0308 	add.w	r3, r7, #8
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	609a      	str	r2, [r3, #8]
 8005cf8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	891b      	ldrh	r3, [r3, #8]
 8005cfe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d00:	2301      	movs	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d04:	2302      	movs	r3, #2
 8005d06:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f107 0208 	add.w	r2, r7, #8
 8005d10:	4611      	mov	r1, r2
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fc ff10 	bl	8002b38 <HAL_GPIO_Init>
}
 8005d18:	bf00      	nop
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <DHT_Set_Pin_Input>:

static void DHT_Set_Pin_Input(DHT_HandleTypeDef* p_DHT){
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d28:	f107 0308 	add.w	r3, r7, #8
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	609a      	str	r2, [r3, #8]
 8005d34:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	891b      	ldrh	r3, [r3, #8]
 8005d3a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f107 0208 	add.w	r2, r7, #8
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fc fef2 	bl	8002b38 <HAL_GPIO_Init>
}
 8005d54:	bf00      	nop
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <DHT_Start>:

static void DHT_Start(DHT_HandleTypeDef* p_DHT){
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	DHT_Set_Pin_Output(p_DHT);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff ffbd 	bl	8005ce4 <DHT_Set_Pin_Output>
	HAL_GPIO_WritePin(p_DHT->DHT_Port, p_DHT->DHT_Pin, 0);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6858      	ldr	r0, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	891b      	ldrh	r3, [r3, #8]
 8005d72:	2200      	movs	r2, #0
 8005d74:	4619      	mov	r1, r3
 8005d76:	f7fd f87a 	bl	8002e6e <HAL_GPIO_WritePin>
	DELAY_US_Run((p_DHT->sensor_type == DHT11) ? DHT11_STARTTIME : DHT22_STARTTIME);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <DHT_Start+0x2c>
 8005d82:	f244 6350 	movw	r3, #18000	; 0x4650
 8005d86:	e001      	b.n	8005d8c <DHT_Start+0x30>
 8005d88:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fa89 	bl	80062a4 <DELAY_US_Run>
	HAL_GPIO_WritePin(p_DHT->DHT_Port, p_DHT->DHT_Pin, 1);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6858      	ldr	r0, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	891b      	ldrh	r3, [r3, #8]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	f7fd f866 	bl	8002e6e <HAL_GPIO_WritePin>
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <DHT_Check_Response>:

static uint8_t DHT_Check_Response(DHT_HandleTypeDef* p_DHT){
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
	DHT_Set_Pin_Input(p_DHT);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff ffb4 	bl	8005d20 <DHT_Set_Pin_Input>
	DELAY_US_Run(40);
 8005db8:	2028      	movs	r0, #40	; 0x28
 8005dba:	f000 fa73 	bl	80062a4 <DELAY_US_Run>
	if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	891b      	ldrh	r3, [r3, #8]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4610      	mov	r0, r2
 8005dca:	f7fd f839 	bl	8002e40 <HAL_GPIO_ReadPin>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10f      	bne.n	8005df4 <DHT_Check_Response+0x4a>
		DELAY_US_Run(80);
 8005dd4:	2050      	movs	r0, #80	; 0x50
 8005dd6:	f000 fa65 	bl	80062a4 <DELAY_US_Run>
		if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	891b      	ldrh	r3, [r3, #8]
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f7fd f82b 	bl	8002e40 <HAL_GPIO_ReadPin>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d103      	bne.n	8005df8 <DHT_Check_Response+0x4e>
			return DHT_FAIL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e01a      	b.n	8005e2a <DHT_Check_Response+0x80>
		}
	} else{
		return DHT_FAIL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e018      	b.n	8005e2a <DHT_Check_Response+0x80>
	}

	uint32_t timer_out = HAL_GetTick();
 8005df8:	f7fc fab2 	bl	8002360 <HAL_GetTick>
 8005dfc:	60f8      	str	r0, [r7, #12]
	while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8005dfe:	e008      	b.n	8005e12 <DHT_Check_Response+0x68>
		if(HAL_GetTick() - timer_out > TIME_OUT){
 8005e00:	f7fc faae 	bl	8002360 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b0a      	cmp	r3, #10
 8005e0c:	d901      	bls.n	8005e12 <DHT_Check_Response+0x68>
			return DHT_FAIL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	e00b      	b.n	8005e2a <DHT_Check_Response+0x80>
	while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	891b      	ldrh	r3, [r3, #8]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	f7fd f80f 	bl	8002e40 <HAL_GPIO_ReadPin>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1eb      	bne.n	8005e00 <DHT_Check_Response+0x56>
		}
	}

	return DHT_OK;
 8005e28:	2301      	movs	r3, #1
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <DHT_Read>:

static uint8_t DHT_Read(DHT_HandleTypeDef* p_DHT, uint8_t p_data[5]){
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b086      	sub	sp, #24
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
	DHT_Set_Pin_Input(p_DHT);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff ff6f 	bl	8005d20 <DHT_Set_Pin_Input>
	for(int i = 0; i < 5; i++){
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	e072      	b.n	8005f2e <DHT_Read+0xfc>
		for(int j = 0; j < 8; j++)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	e069      	b.n	8005f22 <DHT_Read+0xf0>
		{
			uint32_t timer_out = HAL_GetTick();
 8005e4e:	f7fc fa87 	bl	8002360 <HAL_GetTick>
 8005e52:	60f8      	str	r0, [r7, #12]
			while(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8005e54:	e008      	b.n	8005e68 <DHT_Read+0x36>
				if(HAL_GetTick() - timer_out > TIME_OUT){
 8005e56:	f7fc fa83 	bl	8002360 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b0a      	cmp	r3, #10
 8005e62:	d901      	bls.n	8005e68 <DHT_Read+0x36>
					return DHT_FAIL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	e066      	b.n	8005f36 <DHT_Read+0x104>
			while(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	891b      	ldrh	r3, [r3, #8]
 8005e70:	4619      	mov	r1, r3
 8005e72:	4610      	mov	r0, r2
 8005e74:	f7fc ffe4 	bl	8002e40 <HAL_GPIO_ReadPin>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0eb      	beq.n	8005e56 <DHT_Read+0x24>
				}
			}
			DELAY_US_Run(40);
 8005e7e:	2028      	movs	r0, #40	; 0x28
 8005e80:	f000 fa10 	bl	80062a4 <DELAY_US_Run>
			if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	891b      	ldrh	r3, [r3, #8]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	f7fc ffd6 	bl	8002e40 <HAL_GPIO_ReadPin>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d115      	bne.n	8005ec6 <DHT_Read+0x94>
			{
				*(p_data + i) &= ~(1 << (7-j));
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	b25a      	sxtb	r2, r3
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f1c3 0307 	rsb	r3, r3, #7
 8005eaa:	2101      	movs	r1, #1
 8005eac:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb0:	b25b      	sxtb	r3, r3
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	b25b      	sxtb	r3, r3
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	b259      	sxtb	r1, r3
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	b2ca      	uxtb	r2, r1
 8005ec2:	701a      	strb	r2, [r3, #0]
 8005ec4:	e012      	b.n	8005eec <DHT_Read+0xba>
			} else {
				*(p_data + i) |= (1 << (7-j));
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	4413      	add	r3, r2
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	b25a      	sxtb	r2, r3
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f1c3 0307 	rsb	r3, r3, #7
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8005edc:	b25b      	sxtb	r3, r3
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	b259      	sxtb	r1, r3
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	b2ca      	uxtb	r2, r1
 8005eea:	701a      	strb	r2, [r3, #0]
			}
			timer_out = HAL_GetTick();
 8005eec:	f7fc fa38 	bl	8002360 <HAL_GetTick>
 8005ef0:	60f8      	str	r0, [r7, #12]
			while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8005ef2:	e008      	b.n	8005f06 <DHT_Read+0xd4>
				if(HAL_GetTick() - timer_out > TIME_OUT){
 8005ef4:	f7fc fa34 	bl	8002360 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b0a      	cmp	r3, #10
 8005f00:	d901      	bls.n	8005f06 <DHT_Read+0xd4>
					return DHT_FAIL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e017      	b.n	8005f36 <DHT_Read+0x104>
			while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	891b      	ldrh	r3, [r3, #8]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4610      	mov	r0, r2
 8005f12:	f7fc ff95 	bl	8002e40 <HAL_GPIO_ReadPin>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1eb      	bne.n	8005ef4 <DHT_Read+0xc2>
		for(int j = 0; j < 8; j++)
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b07      	cmp	r3, #7
 8005f26:	dd92      	ble.n	8005e4e <DHT_Read+0x1c>
	for(int i = 0; i < 5; i++){
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	dd89      	ble.n	8005e48 <DHT_Read+0x16>
				}
			}
		}
	}
	return DHT_OK;
 8005f34:	2301      	movs	r3, #1
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <DHT_Init>:

void DHT_Init(DHT_HandleTypeDef* p_DHT, TIM_HandleTypeDef* p_htim, uint8_t p_sensor_type, GPIO_TypeDef* p_Port, uint16_t p_Pin){
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	60f8      	str	r0, [r7, #12]
 8005f46:	60b9      	str	r1, [r7, #8]
 8005f48:	603b      	str	r3, [r7, #0]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	71fb      	strb	r3, [r7, #7]
	DELAY_US_Init(p_htim);
 8005f4e:	68b8      	ldr	r0, [r7, #8]
 8005f50:	f000 f99a 	bl	8006288 <DELAY_US_Init>
	p_DHT->sensor_type = p_sensor_type;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	79fa      	ldrb	r2, [r7, #7]
 8005f58:	701a      	strb	r2, [r3, #0]
	p_DHT->DHT_Port = p_Port;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	605a      	str	r2, [r3, #4]
	p_DHT->DHT_Pin = p_Pin;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8b3a      	ldrh	r2, [r7, #24]
 8005f64:	811a      	strh	r2, [r3, #8]
	p_DHT->temperature = 0.0;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	60da      	str	r2, [r3, #12]
	p_DHT->huminity = 0.0;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	611a      	str	r2, [r3, #16]
}
 8005f76:	bf00      	nop
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <DHT_Read_Value>:

uint8_t DHT_Read_Value(DHT_HandleTypeDef* p_DHT){
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
	uint8_t t_data[5] = {};
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	733b      	strb	r3, [r7, #12]
	DHT_Start(p_DHT);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff fee4 	bl	8005d5c <DHT_Start>
	if(DHT_Check_Response(p_DHT) == DHT_FAIL)
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff ff08 	bl	8005daa <DHT_Check_Response>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <DHT_Read_Value+0x26>
		return DHT_FAIL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e044      	b.n	800602e <DHT_Read_Value+0xb0>
	if(DHT_Read(p_DHT, t_data) == DHT_FAIL)
 8005fa4:	f107 0308 	add.w	r3, r7, #8
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff ff41 	bl	8005e32 <DHT_Read>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <DHT_Read_Value+0x3c>
		return DHT_FAIL;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e039      	b.n	800602e <DHT_Read_Value+0xb0>
	if(((t_data[0] + t_data[1] + t_data[2] + t_data[3]) & 0xFF) != t_data[4])
 8005fba:	7a3b      	ldrb	r3, [r7, #8]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	7a7b      	ldrb	r3, [r7, #9]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	7aba      	ldrb	r2, [r7, #10]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	7afa      	ldrb	r2, [r7, #11]
 8005fc8:	4413      	add	r3, r2
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	7b3a      	ldrb	r2, [r7, #12]
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d001      	beq.n	8005fd6 <DHT_Read_Value+0x58>
		return DHT_FAIL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e02b      	b.n	800602e <DHT_Read_Value+0xb0>

	if(t_data[0] < 100 && t_data[0] > 0)
 8005fd6:	7a3b      	ldrb	r3, [r7, #8]
 8005fd8:	2b63      	cmp	r3, #99	; 0x63
 8005fda:	d813      	bhi.n	8006004 <DHT_Read_Value+0x86>
 8005fdc:	7a3b      	ldrb	r3, [r7, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d010      	beq.n	8006004 <DHT_Read_Value+0x86>
		p_DHT->huminity = t_data[0] / 1.0;
 8005fe2:	7a3b      	ldrb	r3, [r7, #8]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fa fa0b 	bl	8000400 <__aeabi_i2d>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4610      	mov	r0, r2
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	f7fa fa6f 	bl	80004d4 <__aeabi_d2f>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	611a      	str	r2, [r3, #16]
	else
		return DHT_FAIL;

	if(t_data[2] < 100 && t_data[2] > 0)
 8005ffc:	7abb      	ldrb	r3, [r7, #10]
 8005ffe:	2b63      	cmp	r3, #99	; 0x63
 8006000:	d902      	bls.n	8006008 <DHT_Read_Value+0x8a>
 8006002:	e013      	b.n	800602c <DHT_Read_Value+0xae>
		return DHT_FAIL;
 8006004:	2300      	movs	r3, #0
 8006006:	e012      	b.n	800602e <DHT_Read_Value+0xb0>
	if(t_data[2] < 100 && t_data[2] > 0)
 8006008:	7abb      	ldrb	r3, [r7, #10]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00e      	beq.n	800602c <DHT_Read_Value+0xae>
		p_DHT->temperature = t_data[2] / 1.0;
 800600e:	7abb      	ldrb	r3, [r7, #10]
 8006010:	4618      	mov	r0, r3
 8006012:	f7fa f9f5 	bl	8000400 <__aeabi_i2d>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4610      	mov	r0, r2
 800601c:	4619      	mov	r1, r3
 800601e:	f7fa fa59 	bl	80004d4 <__aeabi_d2f>
 8006022:	4602      	mov	r2, r0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	60da      	str	r2, [r3, #12]
	else
		return DHT_FAIL;

	return DHT_OK;
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <DHT_Read_Value+0xb0>
		return DHT_FAIL;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <BCD_To_DEC>:

#define DS3231_ADDRESS			(0x68 << 1)
#define SECOND_VALUE_ADDRESS	(0x00)
#define DATE_VALUE_ADDRESS		(0x04)

static uint8_t BCD_To_DEC(uint8_t p_BCD_value){
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	4603      	mov	r3, r0
 800603e:	71fb      	strb	r3, [r7, #7]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	091b      	lsrs	r3, r3, #4
 8006044:	b2db      	uxtb	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	0092      	lsls	r2, r2, #2
 800604a:	4413      	add	r3, r2
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	b2da      	uxtb	r2, r3
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	b2db      	uxtb	r3, r3
 8006058:	4413      	add	r3, r2
 800605a:	b2db      	uxtb	r3, r3
}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr
	...

08006068 <DEC_To_BCD>:

static uint8_t DEC_To_BCD(uint8_t p_DEC_value){
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	71fb      	strb	r3, [r7, #7]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	4a0d      	ldr	r2, [pc, #52]	; (80060ac <DEC_To_BCD+0x44>)
 8006076:	fba2 2303 	umull	r2, r3, r2, r3
 800607a:	08db      	lsrs	r3, r3, #3
 800607c:	b2db      	uxtb	r3, r3
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	b258      	sxtb	r0, r3
 8006082:	79fa      	ldrb	r2, [r7, #7]
 8006084:	4b09      	ldr	r3, [pc, #36]	; (80060ac <DEC_To_BCD+0x44>)
 8006086:	fba3 1302 	umull	r1, r3, r3, r2
 800608a:	08d9      	lsrs	r1, r3, #3
 800608c:	460b      	mov	r3, r1
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	b2db      	uxtb	r3, r3
 8006098:	b25b      	sxtb	r3, r3
 800609a:	4303      	orrs	r3, r0
 800609c:	b25b      	sxtb	r3, r3
 800609e:	b2db      	uxtb	r3, r3
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc80      	pop	{r7}
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	cccccccd 	.word	0xcccccccd

080060b0 <DS3231_Init>:

void DS3231_Init(DS3231_HandleTypeDef *p_ds3231, I2C_HandleTypeDef *p_hi2c){
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
	p_ds3231->hi2c = p_hi2c;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	609a      	str	r2, [r3, #8]
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr

080060ca <DS3231_Set_Time>:

void DS3231_Set_Time(DS3231_HandleTypeDef *p_ds3231, uint8_t p_hour, uint8_t p_minute, uint8_t p_second, uint8_t p_day){
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b088      	sub	sp, #32
 80060ce:	af04      	add	r7, sp, #16
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	4608      	mov	r0, r1
 80060d4:	4611      	mov	r1, r2
 80060d6:	461a      	mov	r2, r3
 80060d8:	4603      	mov	r3, r0
 80060da:	70fb      	strb	r3, [r7, #3]
 80060dc:	460b      	mov	r3, r1
 80060de:	70bb      	strb	r3, [r7, #2]
 80060e0:	4613      	mov	r3, r2
 80060e2:	707b      	strb	r3, [r7, #1]
	uint8_t t_i2c_buffer[4];
	t_i2c_buffer[0] = DEC_To_BCD(p_second);
 80060e4:	787b      	ldrb	r3, [r7, #1]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff ffbe 	bl	8006068 <DEC_To_BCD>
 80060ec:	4603      	mov	r3, r0
 80060ee:	733b      	strb	r3, [r7, #12]
	t_i2c_buffer[1] = DEC_To_BCD(p_minute);
 80060f0:	78bb      	ldrb	r3, [r7, #2]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff ffb8 	bl	8006068 <DEC_To_BCD>
 80060f8:	4603      	mov	r3, r0
 80060fa:	737b      	strb	r3, [r7, #13]
	t_i2c_buffer[2] = DEC_To_BCD(p_hour) & (~USING_12_HOURS_TIME);
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff ffb2 	bl	8006068 <DEC_To_BCD>
 8006104:	4603      	mov	r3, r0
 8006106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800610a:	b2db      	uxtb	r3, r3
 800610c:	73bb      	strb	r3, [r7, #14]
	t_i2c_buffer[3] = DEC_To_BCD(p_day);
 800610e:	7e3b      	ldrb	r3, [r7, #24]
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff ffa9 	bl	8006068 <DEC_To_BCD>
 8006116:	4603      	mov	r3, r0
 8006118:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6898      	ldr	r0, [r3, #8]
 800611e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006122:	9302      	str	r3, [sp, #8]
 8006124:	2304      	movs	r3, #4
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	f107 030c 	add.w	r3, r7, #12
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	2301      	movs	r3, #1
 8006130:	2200      	movs	r2, #0
 8006132:	21d0      	movs	r1, #208	; 0xd0
 8006134:	f7fd f8f6 	bl	8003324 <HAL_I2C_Mem_Write>
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <DS3231_Get_Time>:

uint8_t DS3231_Get_Time(DS3231_HandleTypeDef *p_ds3231){
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af04      	add	r7, sp, #16
 8006146:	6078      	str	r0, [r7, #4]
	uint8_t t_i2c_buffer[4];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000) != HAL_OK){
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6898      	ldr	r0, [r3, #8]
 800614c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006150:	9302      	str	r3, [sp, #8]
 8006152:	2304      	movs	r3, #4
 8006154:	9301      	str	r3, [sp, #4]
 8006156:	f107 030c 	add.w	r3, r7, #12
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	2301      	movs	r3, #1
 800615e:	2200      	movs	r2, #0
 8006160:	21d0      	movs	r1, #208	; 0xd0
 8006162:	f7fd f9d9 	bl	8003518 <HAL_I2C_Mem_Read>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <DS3231_Get_Time+0x30>
		return DS3231_FAIL;
 800616c:	2300      	movs	r3, #0
 800616e:	e020      	b.n	80061b2 <DS3231_Get_Time+0x72>
	}
	p_ds3231->current_second = BCD_To_DEC(t_i2c_buffer[0]);
 8006170:	7b3b      	ldrb	r3, [r7, #12]
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff ff5f 	bl	8006036 <BCD_To_DEC>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	709a      	strb	r2, [r3, #2]
	p_ds3231->current_minute = BCD_To_DEC(t_i2c_buffer[1]);
 8006180:	7b7b      	ldrb	r3, [r7, #13]
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff ff57 	bl	8006036 <BCD_To_DEC>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	705a      	strb	r2, [r3, #1]
	p_ds3231->current_hour = BCD_To_DEC(t_i2c_buffer[2]);
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff ff4f 	bl	8006036 <BCD_To_DEC>
 8006198:	4603      	mov	r3, r0
 800619a:	461a      	mov	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	701a      	strb	r2, [r3, #0]
	p_ds3231->current_day = BCD_To_DEC(t_i2c_buffer[3]);
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff ff47 	bl	8006036 <BCD_To_DEC>
 80061a8:	4603      	mov	r3, r0
 80061aa:	461a      	mov	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	70da      	strb	r2, [r3, #3]
	return DS3231_OK;
 80061b0:	2301      	movs	r3, #1
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <DS3231_Set_Date>:

void DS3231_Set_Date(DS3231_HandleTypeDef *p_ds3231, uint8_t p_date, uint8_t p_month, uint8_t p_year){
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b088      	sub	sp, #32
 80061be:	af04      	add	r7, sp, #16
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	4608      	mov	r0, r1
 80061c4:	4611      	mov	r1, r2
 80061c6:	461a      	mov	r2, r3
 80061c8:	4603      	mov	r3, r0
 80061ca:	70fb      	strb	r3, [r7, #3]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70bb      	strb	r3, [r7, #2]
 80061d0:	4613      	mov	r3, r2
 80061d2:	707b      	strb	r3, [r7, #1]
	uint8_t t_i2c_buffer[3];
	t_i2c_buffer[0] = DEC_To_BCD(p_date);
 80061d4:	78fb      	ldrb	r3, [r7, #3]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff ff46 	bl	8006068 <DEC_To_BCD>
 80061dc:	4603      	mov	r3, r0
 80061de:	733b      	strb	r3, [r7, #12]
	t_i2c_buffer[1] = DEC_To_BCD(p_month);
 80061e0:	78bb      	ldrb	r3, [r7, #2]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff ff40 	bl	8006068 <DEC_To_BCD>
 80061e8:	4603      	mov	r3, r0
 80061ea:	737b      	strb	r3, [r7, #13]
	t_i2c_buffer[2] = DEC_To_BCD(p_year);
 80061ec:	787b      	ldrb	r3, [r7, #1]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff ff3a 	bl	8006068 <DEC_To_BCD>
 80061f4:	4603      	mov	r3, r0
 80061f6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6898      	ldr	r0, [r3, #8]
 80061fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006200:	9302      	str	r3, [sp, #8]
 8006202:	2303      	movs	r3, #3
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	f107 030c 	add.w	r3, r7, #12
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2301      	movs	r3, #1
 800620e:	2204      	movs	r2, #4
 8006210:	21d0      	movs	r1, #208	; 0xd0
 8006212:	f7fd f887 	bl	8003324 <HAL_I2C_Mem_Write>
}
 8006216:	bf00      	nop
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <DS3231_Get_Date>:

uint8_t DS3231_Get_Date(DS3231_HandleTypeDef *p_ds3231){
 800621e:	b580      	push	{r7, lr}
 8006220:	b088      	sub	sp, #32
 8006222:	af04      	add	r7, sp, #16
 8006224:	6078      	str	r0, [r7, #4]
	uint8_t t_i2c_buffer[3];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000) != HAL_OK){
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6898      	ldr	r0, [r3, #8]
 800622a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800622e:	9302      	str	r3, [sp, #8]
 8006230:	2303      	movs	r3, #3
 8006232:	9301      	str	r3, [sp, #4]
 8006234:	f107 030c 	add.w	r3, r7, #12
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	2301      	movs	r3, #1
 800623c:	2204      	movs	r2, #4
 800623e:	21d0      	movs	r1, #208	; 0xd0
 8006240:	f7fd f96a 	bl	8003518 <HAL_I2C_Mem_Read>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <DS3231_Get_Date+0x30>
		return DS3231_FAIL;
 800624a:	2300      	movs	r3, #0
 800624c:	e018      	b.n	8006280 <DS3231_Get_Date+0x62>
	}
	p_ds3231->current_date = BCD_To_DEC(t_i2c_buffer[0]);
 800624e:	7b3b      	ldrb	r3, [r7, #12]
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff fef0 	bl	8006036 <BCD_To_DEC>
 8006256:	4603      	mov	r3, r0
 8006258:	461a      	mov	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	711a      	strb	r2, [r3, #4]
	p_ds3231->current_month = BCD_To_DEC(t_i2c_buffer[1]);
 800625e:	7b7b      	ldrb	r3, [r7, #13]
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fee8 	bl	8006036 <BCD_To_DEC>
 8006266:	4603      	mov	r3, r0
 8006268:	461a      	mov	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	715a      	strb	r2, [r3, #5]
	p_ds3231->current_year = BCD_To_DEC(t_i2c_buffer[2]);
 800626e:	7bbb      	ldrb	r3, [r7, #14]
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff fee0 	bl	8006036 <BCD_To_DEC>
 8006276:	4603      	mov	r3, r0
 8006278:	b29a      	uxth	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	80da      	strh	r2, [r3, #6]
	return DS3231_OK;
 800627e:	2301      	movs	r3, #1
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <DELAY_US_Init>:
#include "Delay_us.h"

TIM_HandleTypeDef *delay_timer;

void DELAY_US_Init(TIM_HandleTypeDef *p_htim){
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
	delay_timer = p_htim;
 8006290:	4a03      	ldr	r2, [pc, #12]	; (80062a0 <DELAY_US_Init+0x18>)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6013      	str	r3, [r2, #0]
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr
 80062a0:	200004c0 	.word	0x200004c0

080062a4 <DELAY_US_Run>:

void DELAY_US_Run(uint32_t p_delay_time){
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
	delay_timer->Instance->CNT = 0;
 80062ac:	4b0d      	ldr	r3, [pc, #52]	; (80062e4 <DELAY_US_Run+0x40>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2200      	movs	r2, #0
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(delay_timer);
 80062b6:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <DELAY_US_Run+0x40>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe fbda 	bl	8004a74 <HAL_TIM_Base_Start>
	while(delay_timer->Instance->CNT < p_delay_time);
 80062c0:	bf00      	nop
 80062c2:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <DELAY_US_Run+0x40>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d8f8      	bhi.n	80062c2 <DELAY_US_Run+0x1e>
	HAL_TIM_Base_Stop(delay_timer);
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <DELAY_US_Run+0x40>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fe fc17 	bl	8004b08 <HAL_TIM_Base_Stop>
}
 80062da:	bf00      	nop
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	200004c0 	.word	0x200004c0

080062e8 <HAL_TIM_IC_CaptureCallback>:
encoder_callback_function_t __ENCODER_Forward_Callback = NULL;
encoder_callback_function_t __ENCODER_Backward_Callback = NULL;

#ifdef _USING_LIBRARY_ENCODER_IT_FUNCTION_
extern ENCODER_HandleTypeDef h_encoder;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
	if(h_encoder.encoder_timer->Instance == htim->Instance){
 80062f0:	4b06      	ldr	r3, [pc, #24]	; (800630c <HAL_TIM_IC_CaptureCallback+0x24>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d102      	bne.n	8006304 <HAL_TIM_IC_CaptureCallback+0x1c>
		ENCODER_IT_Handle(&h_encoder);
 80062fe:	4803      	ldr	r0, [pc, #12]	; (800630c <HAL_TIM_IC_CaptureCallback+0x24>)
 8006300:	f000 f82e 	bl	8006360 <ENCODER_IT_Handle>
	}
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	20000290 	.word	0x20000290

08006310 <ENCODER_Init>:
#endif

void ENCODER_Init(ENCODER_HandleTypeDef *p_encoder, TIM_HandleTypeDef *p_encoder_timer){
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
	p_encoder->encoder_timer = p_encoder_timer;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	601a      	str	r2, [r3, #0]
	p_encoder->current_possition = 0;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	809a      	strh	r2, [r3, #4]
	p_encoder->last_position = 0;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	80da      	strh	r2, [r3, #6]
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr
	...

08006338 <ENCODER_Set_Callback_Function>:

void ENCODER_Set_Callback_Function(encoder_callback_function_t p_forward_callback_function, encoder_callback_function_t p_backward_callback_function){
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
	__ENCODER_Forward_Callback = p_forward_callback_function;
 8006342:	4a05      	ldr	r2, [pc, #20]	; (8006358 <ENCODER_Set_Callback_Function+0x20>)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6013      	str	r3, [r2, #0]
	__ENCODER_Backward_Callback = p_backward_callback_function;
 8006348:	4a04      	ldr	r2, [pc, #16]	; (800635c <ENCODER_Set_Callback_Function+0x24>)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6013      	str	r3, [r2, #0]
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	bc80      	pop	{r7}
 8006356:	4770      	bx	lr
 8006358:	200004c4 	.word	0x200004c4
 800635c:	200004c8 	.word	0x200004c8

08006360 <ENCODER_IT_Handle>:

void ENCODER_IT_Handle(ENCODER_HandleTypeDef *p_encoder){
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	uint32_t t_counter = __HAL_TIM_GET_COUNTER(p_encoder->encoder_timer);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	60fb      	str	r3, [r7, #12]
	p_encoder->current_possition =  (int16_t)t_counter / 4;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	b21b      	sxth	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	da00      	bge.n	800637c <ENCODER_IT_Handle+0x1c>
 800637a:	3303      	adds	r3, #3
 800637c:	109b      	asrs	r3, r3, #2
 800637e:	b21a      	sxth	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	809a      	strh	r2, [r3, #4]
}
 8006384:	bf00      	nop
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr
	...

08006390 <ENCODER_Handle>:

void ENCODER_Handle(ENCODER_HandleTypeDef *p_encoder){
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
	if(p_encoder->current_possition > p_encoder->last_position){
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	dd0c      	ble.n	80063c2 <ENCODER_Handle+0x32>
		if(__ENCODER_Forward_Callback != NULL){
 80063a8:	4b12      	ldr	r3, [pc, #72]	; (80063f4 <ENCODER_Handle+0x64>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <ENCODER_Handle+0x28>
			__ENCODER_Forward_Callback(p_encoder);
 80063b0:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <ENCODER_Handle+0x64>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	4798      	blx	r3
		}
		p_encoder->last_position = p_encoder->current_possition;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	80da      	strh	r2, [r3, #6]
	}
	if(p_encoder->current_possition < p_encoder->last_position){
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	da0c      	bge.n	80063ec <ENCODER_Handle+0x5c>
		if(__ENCODER_Backward_Callback != NULL){
 80063d2:	4b09      	ldr	r3, [pc, #36]	; (80063f8 <ENCODER_Handle+0x68>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <ENCODER_Handle+0x52>
			__ENCODER_Backward_Callback(p_encoder);
 80063da:	4b07      	ldr	r3, [pc, #28]	; (80063f8 <ENCODER_Handle+0x68>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	4798      	blx	r3
		}
		p_encoder->last_position = p_encoder->current_possition;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	80da      	strh	r2, [r3, #6]
	}
}
 80063ec:	bf00      	nop
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	200004c4 	.word	0x200004c4
 80063f8:	200004c8 	.word	0x200004c8

080063fc <LCD_Init>:
#include "LCD_I2C.h"

void LCD_Init(LCD_I2C_HandleTypeDef *p_lcd, I2C_HandleTypeDef *p_hi2c, uint8_t p_cols, uint8_t p_rows, uint8_t p_SLAVE_ADDRESS){
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	4611      	mov	r1, r2
 8006408:	461a      	mov	r2, r3
 800640a:	460b      	mov	r3, r1
 800640c:	71fb      	strb	r3, [r7, #7]
 800640e:	4613      	mov	r3, r2
 8006410:	71bb      	strb	r3, [r7, #6]
	p_lcd->SLAVE_ADDRESS = p_SLAVE_ADDRESS;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	7e3a      	ldrb	r2, [r7, #24]
 8006416:	709a      	strb	r2, [r3, #2]
	p_lcd->LCD_Backlight_Value = LCD_BACKLIGHT;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2208      	movs	r2, #8
 800641c:	70da      	strb	r2, [r3, #3]
	p_lcd->LCD_Columns = p_cols;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	79fa      	ldrb	r2, [r7, #7]
 8006422:	701a      	strb	r2, [r3, #0]
	p_lcd->LCD_Rows = p_rows;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	79ba      	ldrb	r2, [r7, #6]
 8006428:	705a      	strb	r2, [r3, #1]
	p_lcd->hi2c = p_hi2c;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	609a      	str	r2, [r3, #8]
	p_lcd->LCD_Display_Option = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2204      	movs	r2, #4
 8006434:	711a      	strb	r2, [r3, #4]

	// 4 bit initialization
	HAL_Delay(50);  // wait for >40ms
 8006436:	2032      	movs	r0, #50	; 0x32
 8006438:	f7fb ff9c 	bl	8002374 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x30);
 800643c:	2130      	movs	r1, #48	; 0x30
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 f8f0 	bl	8006624 <LCD_Send_Command>
	HAL_Delay(5);  // wait for >4.1ms
 8006444:	2005      	movs	r0, #5
 8006446:	f7fb ff95 	bl	8002374 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x30);
 800644a:	2130      	movs	r1, #48	; 0x30
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f8e9 	bl	8006624 <LCD_Send_Command>
	HAL_Delay(1);  // wait for >100us
 8006452:	2001      	movs	r0, #1
 8006454:	f7fb ff8e 	bl	8002374 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x30);
 8006458:	2130      	movs	r1, #48	; 0x30
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 f8e2 	bl	8006624 <LCD_Send_Command>
	HAL_Delay(10);
 8006460:	200a      	movs	r0, #10
 8006462:	f7fb ff87 	bl	8002374 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x20);  // 4bit mode
 8006466:	2120      	movs	r1, #32
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f8db 	bl	8006624 <LCD_Send_Command>
	HAL_Delay(10);
 800646e:	200a      	movs	r0, #10
 8006470:	f7fb ff80 	bl	8002374 <HAL_Delay>

	// Display initialization
	LCD_Send_Command(p_lcd, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8006474:	2128      	movs	r1, #40	; 0x28
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 f8d4 	bl	8006624 <LCD_Send_Command>
	HAL_Delay(1);
 800647c:	2001      	movs	r0, #1
 800647e:	f7fb ff79 	bl	8002374 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8006482:	2108      	movs	r1, #8
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f8cd 	bl	8006624 <LCD_Send_Command>
	HAL_Delay(1);
 800648a:	2001      	movs	r0, #1
 800648c:	f7fb ff72 	bl	8002374 <HAL_Delay>

	LCD_Send_Command(p_lcd, 0x01);  // clear display
 8006490:	2101      	movs	r1, #1
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f8c6 	bl	8006624 <LCD_Send_Command>
	HAL_Delay(1);
 8006498:	2001      	movs	r0, #1
 800649a:	f7fb ff6b 	bl	8002374 <HAL_Delay>
	HAL_Delay(1);
 800649e:	2001      	movs	r0, #1
 80064a0:	f7fb ff68 	bl	8002374 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80064a4:	2106      	movs	r1, #6
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 f8bc 	bl	8006624 <LCD_Send_Command>
	HAL_Delay(1);
 80064ac:	2001      	movs	r0, #1
 80064ae:	f7fb ff61 	bl	8002374 <HAL_Delay>
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	791b      	ldrb	r3, [r3, #4]
 80064b6:	f043 0308 	orr.w	r3, r3, #8
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	4619      	mov	r1, r3
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 f8b0 	bl	8006624 <LCD_Send_Command>

	HAL_Delay(500);
 80064c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80064c8:	f7fb ff54 	bl	8002374 <HAL_Delay>
}
 80064cc:	bf00      	nop
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <LCD_Write>:

void LCD_Write(LCD_I2C_HandleTypeDef *p_lcd, const char *p_str, ...){
 80064d4:	b40e      	push	{r1, r2, r3}
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b08b      	sub	sp, #44	; 0x2c
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
	char t_stringArray[21] = {};
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	f107 0310 	add.w	r3, r7, #16
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	605a      	str	r2, [r3, #4]
 80064ec:	609a      	str	r2, [r3, #8]
 80064ee:	60da      	str	r2, [r3, #12]
 80064f0:	741a      	strb	r2, [r3, #16]

	va_list t_args;
	va_start(t_args, p_str);
 80064f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80064f6:	60bb      	str	r3, [r7, #8]
	vsprintf(t_stringArray, p_str, t_args);
 80064f8:	f107 030c 	add.w	r3, r7, #12
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fbd5 	bl	8006cb0 <vsiprintf>
	va_end(t_args);

	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 8006506:	2300      	movs	r3, #0
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
 800650a:	e00b      	b.n	8006524 <LCD_Write+0x50>
		LCD_Send_Data(p_lcd, t_stringArray[i]);
 800650c:	f107 020c 	add.w	r2, r7, #12
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	4413      	add	r3, r2
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f8be 	bl	800669a <LCD_Send_Data>
	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	3301      	adds	r3, #1
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
 8006524:	f107 030c 	add.w	r3, r7, #12
 8006528:	4618      	mov	r0, r3
 800652a:	f7f9 fe0f 	bl	800014c <strlen>
 800652e:	4602      	mov	r2, r0
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	429a      	cmp	r2, r3
 8006534:	d905      	bls.n	8006542 <LCD_Write+0x6e>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	4293      	cmp	r3, r2
 8006540:	dbe4      	blt.n	800650c <LCD_Write+0x38>
	}
}
 8006542:	bf00      	nop
 8006544:	372c      	adds	r7, #44	; 0x2c
 8006546:	46bd      	mov	sp, r7
 8006548:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800654c:	b003      	add	sp, #12
 800654e:	4770      	bx	lr

08006550 <LCD_Clear>:

void LCD_Write_Custom_Char(LCD_I2C_HandleTypeDef *p_lcd, char p_location){
	LCD_Send_Data(p_lcd, p_location);
}

void LCD_Clear(LCD_I2C_HandleTypeDef *p_lcd){
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 8006558:	2101      	movs	r1, #1
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f862 	bl	8006624 <LCD_Send_Command>
	HAL_Delay(2);
 8006560:	2002      	movs	r0, #2
 8006562:	f7fb ff07 	bl	8002374 <HAL_Delay>
	LCD_Set_Cursor(p_lcd, 0, 0);
 8006566:	2200      	movs	r2, #0
 8006568:	2100      	movs	r1, #0
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f804 	bl	8006578 <LCD_Set_Cursor>
}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <LCD_Set_Cursor>:

void LCD_Set_Cursor(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_col, uint8_t p_row){
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	460b      	mov	r3, r1
 8006582:	70fb      	strb	r3, [r7, #3]
 8006584:	4613      	mov	r3, r2
 8006586:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8006588:	4b0f      	ldr	r3, [pc, #60]	; (80065c8 <LCD_Set_Cursor+0x50>)
 800658a:	60fb      	str	r3, [r7, #12]
	if(p_row > p_lcd->LCD_Rows) p_row = p_lcd->LCD_Rows - 1;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	785b      	ldrb	r3, [r3, #1]
 8006590:	78ba      	ldrb	r2, [r7, #2]
 8006592:	429a      	cmp	r2, r3
 8006594:	d903      	bls.n	800659e <LCD_Set_Cursor+0x26>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	785b      	ldrb	r3, [r3, #1]
 800659a:	3b01      	subs	r3, #1
 800659c:	70bb      	strb	r3, [r7, #2]
	LCD_Send_Command(p_lcd, LCD_SETDDRAMADDR | (p_col + t_row_Offets[p_row]));
 800659e:	78bb      	ldrb	r3, [r7, #2]
 80065a0:	3310      	adds	r3, #16
 80065a2:	443b      	add	r3, r7
 80065a4:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80065a8:	78fb      	ldrb	r3, [r7, #3]
 80065aa:	4413      	add	r3, r2
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	b25b      	sxtb	r3, r3
 80065b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065b4:	b25b      	sxtb	r3, r3
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f832 	bl	8006624 <LCD_Send_Command>
}
 80065c0:	bf00      	nop
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	54144000 	.word	0x54144000

080065cc <LCD_Create_Char>:

void LCD_Create_Char(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_location, uint8_t p_charMap[]){
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	460b      	mov	r3, r1
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	72fb      	strb	r3, [r7, #11]
	p_location &= 7; // only have 8 locations 0-7.
 80065da:	7afb      	ldrb	r3, [r7, #11]
 80065dc:	f003 0307 	and.w	r3, r3, #7
 80065e0:	72fb      	strb	r3, [r7, #11]
	p_location <<= 3;
 80065e2:	7afb      	ldrb	r3, [r7, #11]
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	72fb      	strb	r3, [r7, #11]
	LCD_Send_Command(p_lcd, LCD_SETCGRAMADDR | p_location);
 80065e8:	7afb      	ldrb	r3, [r7, #11]
 80065ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	4619      	mov	r1, r3
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 f816 	bl	8006624 <LCD_Send_Command>
	for(int i = 0; i < 8; i++) LCD_Send_Data(p_lcd, p_charMap[i]);
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	e00a      	b.n	8006614 <LCD_Create_Char+0x48>
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	4413      	add	r3, r2
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	4619      	mov	r1, r3
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 f846 	bl	800669a <LCD_Send_Data>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	3301      	adds	r3, #1
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2b07      	cmp	r3, #7
 8006618:	ddf1      	ble.n	80065fe <LCD_Create_Char+0x32>
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <LCD_Send_Command>:
void LCD_Display_Off(LCD_I2C_HandleTypeDef *p_lcd){
	p_lcd->LCD_Display_Option &= ~LCD_DISPLAYON;
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
}

void LCD_Send_Command(LCD_I2C_HandleTypeDef *p_lcd, char cmd){
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af02      	add	r7, sp, #8
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
	char p_data_H, p_data_L;
	uint8_t p_I2C_Bufer[4];
	p_data_H = cmd & 0xF0;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	f023 030f 	bic.w	r3, r3, #15
 8006636:	73fb      	strb	r3, [r7, #15]
	p_data_L = (cmd << 4) & 0xF0;
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	73bb      	strb	r3, [r7, #14]

	p_I2C_Bufer[0] = p_data_H | p_lcd->LCD_Backlight_Value | En;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	78da      	ldrb	r2, [r3, #3]
 8006642:	7bfb      	ldrb	r3, [r7, #15]
 8006644:	4313      	orrs	r3, r2
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f043 0304 	orr.w	r3, r3, #4
 800664c:	b2db      	uxtb	r3, r3
 800664e:	723b      	strb	r3, [r7, #8]
	p_I2C_Bufer[1] = p_data_H | p_lcd->LCD_Backlight_Value;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	78da      	ldrb	r2, [r3, #3]
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	4313      	orrs	r3, r2
 8006658:	b2db      	uxtb	r3, r3
 800665a:	727b      	strb	r3, [r7, #9]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	78da      	ldrb	r2, [r3, #3]
 8006660:	7bbb      	ldrb	r3, [r7, #14]
 8006662:	4313      	orrs	r3, r2
 8006664:	b2db      	uxtb	r3, r3
 8006666:	f043 0304 	orr.w	r3, r3, #4
 800666a:	b2db      	uxtb	r3, r3
 800666c:	72bb      	strb	r3, [r7, #10]
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	78da      	ldrb	r2, [r3, #3]
 8006672:	7bbb      	ldrb	r3, [r7, #14]
 8006674:	4313      	orrs	r3, r2
 8006676:	b2db      	uxtb	r3, r3
 8006678:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6898      	ldr	r0, [r3, #8]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	789b      	ldrb	r3, [r3, #2]
 8006682:	b299      	uxth	r1, r3
 8006684:	f107 0208 	add.w	r2, r7, #8
 8006688:	2364      	movs	r3, #100	; 0x64
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	2304      	movs	r3, #4
 800668e:	f7fc fd4b 	bl	8003128 <HAL_I2C_Master_Transmit>
}
 8006692:	bf00      	nop
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <LCD_Send_Data>:

void LCD_Send_Data(LCD_I2C_HandleTypeDef *p_lcd, char data){
 800669a:	b580      	push	{r7, lr}
 800669c:	b086      	sub	sp, #24
 800669e:	af02      	add	r7, sp, #8
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
	char p_data_H, p_data_L;
	uint8_t p_I2C_Bufer[4];
	p_data_H = data & 0xF0;
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	f023 030f 	bic.w	r3, r3, #15
 80066ac:	73fb      	strb	r3, [r7, #15]
	p_data_L = (data << 4) & 0xF0;
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	73bb      	strb	r3, [r7, #14]

	p_I2C_Bufer[0] = p_data_H | p_lcd->LCD_Backlight_Value | En | Rs;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	78da      	ldrb	r2, [r3, #3]
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f043 0305 	orr.w	r3, r3, #5
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	723b      	strb	r3, [r7, #8]
	p_I2C_Bufer[1] = p_data_H | p_lcd->LCD_Backlight_Value | Rs;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	78da      	ldrb	r2, [r3, #3]
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f043 0301 	orr.w	r3, r3, #1
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	727b      	strb	r3, [r7, #9]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En | Rs;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	78da      	ldrb	r2, [r3, #3]
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	4313      	orrs	r3, r2
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f043 0305 	orr.w	r3, r3, #5
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	72bb      	strb	r3, [r7, #10]
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value | Rs;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	78da      	ldrb	r2, [r3, #3]
 80066ee:	7bbb      	ldrb	r3, [r7, #14]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	f043 0301 	orr.w	r3, r3, #1
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6898      	ldr	r0, [r3, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	789b      	ldrb	r3, [r3, #2]
 8006704:	b299      	uxth	r1, r3
 8006706:	f107 0208 	add.w	r2, r7, #8
 800670a:	2364      	movs	r3, #100	; 0x64
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	2304      	movs	r3, #4
 8006710:	f7fc fd0a 	bl	8003128 <HAL_I2C_Master_Transmit>
}
 8006714:	bf00      	nop
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <BUTTON_Handle>:
//
//__weak void BTN_Long_Press_Callback(BUTTON_HandleTypedef *ButtonX){
//	;
//}

void BUTTON_Handle(BUTTON_HandleTypedef *ButtonX){
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
	uint8_t state = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	8a9b      	ldrh	r3, [r3, #20]
 800672c:	4619      	mov	r1, r3
 800672e:	4610      	mov	r0, r2
 8006730:	f7fc fb86 	bl	8002e40 <HAL_GPIO_ReadPin>
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]
	if(state != ButtonX->BTN_Filter){
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	789b      	ldrb	r3, [r3, #2]
 800673c:	7bfa      	ldrb	r2, [r7, #15]
 800673e:	429a      	cmp	r2, r3
 8006740:	d00a      	beq.n	8006758 <BUTTON_Handle+0x3c>
		ButtonX->BTN_Filter = state;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	7bfa      	ldrb	r2, [r7, #15]
 8006746:	709a      	strb	r2, [r3, #2]
		ButtonX->is_debouncing = 1;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	70da      	strb	r2, [r3, #3]
		ButtonX->time_debounce = HAL_GetTick();
 800674e:	f7fb fe07 	bl	8002360 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	609a      	str	r2, [r3, #8]
	}

	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->time_debounce >= 15)){
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	78db      	ldrb	r3, [r3, #3]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00e      	beq.n	800677e <BUTTON_Handle+0x62>
 8006760:	f7fb fdfe 	bl	8002360 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b0e      	cmp	r3, #14
 800676e:	d906      	bls.n	800677e <BUTTON_Handle+0x62>
		ButtonX->BTN_Current = ButtonX->BTN_Filter;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	789a      	ldrb	r2, [r3, #2]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	701a      	strb	r2, [r3, #0]
		ButtonX->is_debouncing = 0;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	70da      	strb	r2, [r3, #3]
	}

	if(ButtonX->BTN_Current != ButtonX->BTN_Last){
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	781a      	ldrb	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	785b      	ldrb	r3, [r3, #1]
 8006786:	429a      	cmp	r2, r3
 8006788:	d034      	beq.n	80067f4 <BUTTON_Handle+0xd8>
		if(ButtonX->BTN_Current == 0){
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d110      	bne.n	80067b4 <BUTTON_Handle+0x98>
			if(__BUTTON_Pressing_Callback != NULL){
 8006792:	4b27      	ldr	r3, [pc, #156]	; (8006830 <BUTTON_Handle+0x114>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <BUTTON_Handle+0x86>
				__BUTTON_Pressing_Callback(ButtonX);
 800679a:	4b25      	ldr	r3, [pc, #148]	; (8006830 <BUTTON_Handle+0x114>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	4798      	blx	r3
			}
			ButtonX->is_press = 1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	711a      	strb	r2, [r3, #4]
			ButtonX->time_start_press = HAL_GetTick();
 80067a8:	f7fb fdda 	bl	8002360 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60da      	str	r2, [r3, #12]
 80067b2:	e01b      	b.n	80067ec <BUTTON_Handle+0xd0>
		}
		else{
			ButtonX->is_press = 0;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	711a      	strb	r2, [r3, #4]
			if(HAL_GetTick() - ButtonX->time_start_press <= 1000){
 80067ba:	f7fb fdd1 	bl	8002360 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ca:	d807      	bhi.n	80067dc <BUTTON_Handle+0xc0>
				if(__BUTTON_Short_Pressing_Callback != NULL){
 80067cc:	4b19      	ldr	r3, [pc, #100]	; (8006834 <BUTTON_Handle+0x118>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <BUTTON_Handle+0xc0>
					__BUTTON_Short_Pressing_Callback(ButtonX);
 80067d4:	4b17      	ldr	r3, [pc, #92]	; (8006834 <BUTTON_Handle+0x118>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	4798      	blx	r3
				}
			}
			if(__BUTTON_Releasing_Callback != NULL){
 80067dc:	4b16      	ldr	r3, [pc, #88]	; (8006838 <BUTTON_Handle+0x11c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <BUTTON_Handle+0xd0>
				__BUTTON_Releasing_Callback(ButtonX);
 80067e4:	4b14      	ldr	r3, [pc, #80]	; (8006838 <BUTTON_Handle+0x11c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	4798      	blx	r3
			}
		}
		ButtonX->BTN_Last = ButtonX->BTN_Current;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	781a      	ldrb	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	705a      	strb	r2, [r3, #1]
	}

	if(ButtonX->is_press && (HAL_GetTick() - ButtonX->time_start_press >= 3000)){
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	791b      	ldrb	r3, [r3, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d014      	beq.n	8006826 <BUTTON_Handle+0x10a>
 80067fc:	f7fb fdb0 	bl	8002360 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800680c:	4293      	cmp	r3, r2
 800680e:	d90a      	bls.n	8006826 <BUTTON_Handle+0x10a>
		if(__BUTTON_Long_Pressing_Callback != NULL){
 8006810:	4b0a      	ldr	r3, [pc, #40]	; (800683c <BUTTON_Handle+0x120>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <BUTTON_Handle+0x104>
			__BUTTON_Long_Pressing_Callback(ButtonX);
 8006818:	4b08      	ldr	r3, [pc, #32]	; (800683c <BUTTON_Handle+0x120>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	4798      	blx	r3
		}
		ButtonX->is_press = 0;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	711a      	strb	r2, [r3, #4]
	}
}
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	200004cc 	.word	0x200004cc
 8006834:	200004d4 	.word	0x200004d4
 8006838:	200004d0 	.word	0x200004d0
 800683c:	200004d8 	.word	0x200004d8

08006840 <BUTTON_Init>:

void BUTTON_Init(BUTTON_HandleTypedef *ButtonX, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4613      	mov	r3, r2
 800684c:	80fb      	strh	r3, [r7, #6]
	ButtonX->GPIOx = GPIOx;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	611a      	str	r2, [r3, #16]
	ButtonX->GPIO_Pin = GPIO_Pin;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	88fa      	ldrh	r2, [r7, #6]
 8006858:	829a      	strh	r2, [r3, #20]
	ButtonX->BTN_Current = 1;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2201      	movs	r2, #1
 800685e:	701a      	strb	r2, [r3, #0]
	ButtonX->BTN_Last = 1;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	705a      	strb	r2, [r3, #1]
	ButtonX->BTN_Filter = 1;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	709a      	strb	r2, [r3, #2]
	ButtonX->is_debouncing = 0;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	70da      	strb	r2, [r3, #3]
	ButtonX->is_press = 0;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	711a      	strb	r2, [r3, #4]
}
 8006878:	bf00      	nop
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr
	...

08006884 <BUTTON_Set_Callback_Function>:

void BUTTON_Set_Callback_Function(button_callback_function_t p_pressing_callback_function,
								button_callback_function_t p_releasing_callback_function,
								button_callback_function_t p_short_pressing_callback_function,
								button_callback_function_t p_long_pressing_callback_function){
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
	__BUTTON_Pressing_Callback = p_pressing_callback_function;
 8006892:	4a08      	ldr	r2, [pc, #32]	; (80068b4 <BUTTON_Set_Callback_Function+0x30>)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6013      	str	r3, [r2, #0]
	__BUTTON_Releasing_Callback = p_releasing_callback_function;
 8006898:	4a07      	ldr	r2, [pc, #28]	; (80068b8 <BUTTON_Set_Callback_Function+0x34>)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	6013      	str	r3, [r2, #0]
	__BUTTON_Short_Pressing_Callback = p_short_pressing_callback_function;
 800689e:	4a07      	ldr	r2, [pc, #28]	; (80068bc <BUTTON_Set_Callback_Function+0x38>)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6013      	str	r3, [r2, #0]
	__BUTTON_Long_Pressing_Callback = p_long_pressing_callback_function;
 80068a4:	4a06      	ldr	r2, [pc, #24]	; (80068c0 <BUTTON_Set_Callback_Function+0x3c>)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6013      	str	r3, [r2, #0]
}
 80068aa:	bf00      	nop
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bc80      	pop	{r7}
 80068b2:	4770      	bx	lr
 80068b4:	200004cc 	.word	0x200004cc
 80068b8:	200004d0 	.word	0x200004d0
 80068bc:	200004d4 	.word	0x200004d4
 80068c0:	200004d8 	.word	0x200004d8

080068c4 <FLASH_Erase>:
#include "flash.h"

void FLASH_Erase(uint32_t p_page){
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80068cc:	f7fb ffa4 	bl	8002818 <HAL_FLASH_Unlock>
	eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
#endif

#ifdef __STM32F1xx_HAL_H
	eraseInit.Banks = 1;
 80068d0:	2301      	movs	r3, #1
 80068d2:	613b      	str	r3, [r7, #16]
	eraseInit.NbPages = 1;
 80068d4:	2301      	movs	r3, #1
 80068d6:	61bb      	str	r3, [r7, #24]
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80068de:	029b      	lsls	r3, r3, #10
 80068e0:	617b      	str	r3, [r7, #20]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
	eraseInit.NbPages = 1;
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
#endif

	HAL_FLASHEx_Erase(&eraseInit, &t_PageError);
 80068e6:	f107 021c 	add.w	r2, r7, #28
 80068ea:	f107 030c 	add.w	r3, r7, #12
 80068ee:	4611      	mov	r1, r2
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fc f879 	bl	80029e8 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80068f6:	f7fb ffb5 	bl	8002864 <HAL_FLASH_Lock>
//	while(FLASH->CR & FLASH_SR_BSY);
//	FLASH->CR &= ~FLASH_CR_PER;
//	FLASH->CR &= ~FLASH_CR_STRT;
//
//	FLASH->CR |= FLASH_CR_LOCK;
}
 80068fa:	bf00      	nop
 80068fc:	3720      	adds	r7, #32
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <FLASH_Write>:

void FLASH_Write(uint32_t p_page, uint8_t *p_data, uint16_t p_len){
 8006902:	b5b0      	push	{r4, r5, r7, lr}
 8006904:	b086      	sub	sp, #24
 8006906:	af00      	add	r7, sp, #0
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	4613      	mov	r3, r2
 800690e:	80fb      	strh	r3, [r7, #6]
	FLASH_Erase(63);
 8006910:	203f      	movs	r0, #63	; 0x3f
 8006912:	f7ff ffd7 	bl	80068c4 <FLASH_Erase>
#ifdef __STM32F4xx_HAL_H
	uint32_t t_add = SECTOR_7_ADD;
#endif
#ifdef __STM32F1xx_HAL_H
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800691c:	029b      	lsls	r3, r3, #10
 800691e:	613b      	str	r3, [r7, #16]
#endif
#ifdef __STM32F0xx_HAL_H
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
#endif
	HAL_FLASH_Unlock();
 8006920:	f7fb ff7a 	bl	8002818 <HAL_FLASH_Unlock>
	for(int i = 0; i < p_len; i += 2){
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	e021      	b.n	800696e <FLASH_Write+0x6c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, t_add + i, p_data[i] | ((uint16_t)((i+1 >= p_len) ? 0xFF : p_data[i+1]) << 8));
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	18d1      	adds	r1, r2, r3
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	4413      	add	r3, r2
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	429a      	cmp	r2, r3
 8006942:	da06      	bge.n	8006952 <FLASH_Write+0x50>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	3301      	adds	r3, #1
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	4413      	add	r3, r2
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	021b      	lsls	r3, r3, #8
 8006950:	e001      	b.n	8006956 <FLASH_Write+0x54>
 8006952:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8006956:	4303      	orrs	r3, r0
 8006958:	17da      	asrs	r2, r3, #31
 800695a:	461c      	mov	r4, r3
 800695c:	4615      	mov	r5, r2
 800695e:	4622      	mov	r2, r4
 8006960:	462b      	mov	r3, r5
 8006962:	2001      	movs	r0, #1
 8006964:	f7fb fee8 	bl	8002738 <HAL_FLASH_Program>
	for(int i = 0; i < p_len; i += 2){
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	3302      	adds	r3, #2
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	88fb      	ldrh	r3, [r7, #6]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	429a      	cmp	r2, r3
 8006974:	dbd9      	blt.n	800692a <FLASH_Write+0x28>
	}
	HAL_FLASH_Lock();
 8006976:	f7fb ff75 	bl	8002864 <HAL_FLASH_Lock>
//	}
//	FLASH->CR |= FLASH_CR_PG;
//	for(int i = 0; i < p_len; i += 2){
//		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, t_add + i, p_data[i] | (uint16_t)((i+1 >= p_len) ? 0xFF : p_data[i+1]) << 8);
//	}
}
 800697a:	bf00      	nop
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bdb0      	pop	{r4, r5, r7, pc}

08006982 <FLASH_Read>:

void FLASH_Read(uint32_t add, uint8_t *p_data, uint16_t p_len){
 8006982:	b480      	push	{r7}
 8006984:	b087      	sub	sp, #28
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	4613      	mov	r3, r2
 800698e:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < p_len; i += 2){
 8006990:	2300      	movs	r3, #0
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	e016      	b.n	80069c4 <FLASH_Read+0x42>
		uint16_t t_data = *(volatile uint16_t *)(add + i);
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	827b      	strh	r3, [r7, #18]
		p_data[i] = t_data;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	4413      	add	r3, r2
 80069a6:	8a7a      	ldrh	r2, [r7, #18]
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
		p_data[i+1] = t_data >> 8;
 80069ac:	8a7b      	ldrh	r3, [r7, #18]
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	b299      	uxth	r1, r3
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	3301      	adds	r3, #1
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	4413      	add	r3, r2
 80069ba:	b2ca      	uxtb	r2, r1
 80069bc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < p_len; i += 2){
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	3302      	adds	r3, #2
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	88fb      	ldrh	r3, [r7, #6]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	dbe4      	blt.n	8006996 <FLASH_Read+0x14>
	}
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr

080069d8 <__errno>:
 80069d8:	4b01      	ldr	r3, [pc, #4]	; (80069e0 <__errno+0x8>)
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20000098 	.word	0x20000098

080069e4 <__libc_init_array>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	2600      	movs	r6, #0
 80069e8:	4d0c      	ldr	r5, [pc, #48]	; (8006a1c <__libc_init_array+0x38>)
 80069ea:	4c0d      	ldr	r4, [pc, #52]	; (8006a20 <__libc_init_array+0x3c>)
 80069ec:	1b64      	subs	r4, r4, r5
 80069ee:	10a4      	asrs	r4, r4, #2
 80069f0:	42a6      	cmp	r6, r4
 80069f2:	d109      	bne.n	8006a08 <__libc_init_array+0x24>
 80069f4:	f000 fcd4 	bl	80073a0 <_init>
 80069f8:	2600      	movs	r6, #0
 80069fa:	4d0a      	ldr	r5, [pc, #40]	; (8006a24 <__libc_init_array+0x40>)
 80069fc:	4c0a      	ldr	r4, [pc, #40]	; (8006a28 <__libc_init_array+0x44>)
 80069fe:	1b64      	subs	r4, r4, r5
 8006a00:	10a4      	asrs	r4, r4, #2
 8006a02:	42a6      	cmp	r6, r4
 8006a04:	d105      	bne.n	8006a12 <__libc_init_array+0x2e>
 8006a06:	bd70      	pop	{r4, r5, r6, pc}
 8006a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a0c:	4798      	blx	r3
 8006a0e:	3601      	adds	r6, #1
 8006a10:	e7ee      	b.n	80069f0 <__libc_init_array+0xc>
 8006a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a16:	4798      	blx	r3
 8006a18:	3601      	adds	r6, #1
 8006a1a:	e7f2      	b.n	8006a02 <__libc_init_array+0x1e>
 8006a1c:	08007544 	.word	0x08007544
 8006a20:	08007544 	.word	0x08007544
 8006a24:	08007544 	.word	0x08007544
 8006a28:	08007548 	.word	0x08007548

08006a2c <malloc>:
 8006a2c:	4b02      	ldr	r3, [pc, #8]	; (8006a38 <malloc+0xc>)
 8006a2e:	4601      	mov	r1, r0
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	f000 b87b 	b.w	8006b2c <_malloc_r>
 8006a36:	bf00      	nop
 8006a38:	20000098 	.word	0x20000098

08006a3c <free>:
 8006a3c:	4b02      	ldr	r3, [pc, #8]	; (8006a48 <free+0xc>)
 8006a3e:	4601      	mov	r1, r0
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	f000 b80b 	b.w	8006a5c <_free_r>
 8006a46:	bf00      	nop
 8006a48:	20000098 	.word	0x20000098

08006a4c <memset>:
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	4402      	add	r2, r0
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d100      	bne.n	8006a56 <memset+0xa>
 8006a54:	4770      	bx	lr
 8006a56:	f803 1b01 	strb.w	r1, [r3], #1
 8006a5a:	e7f9      	b.n	8006a50 <memset+0x4>

08006a5c <_free_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4605      	mov	r5, r0
 8006a60:	2900      	cmp	r1, #0
 8006a62:	d040      	beq.n	8006ae6 <_free_r+0x8a>
 8006a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a68:	1f0c      	subs	r4, r1, #4
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	bfb8      	it	lt
 8006a6e:	18e4      	addlt	r4, r4, r3
 8006a70:	f000 f928 	bl	8006cc4 <__malloc_lock>
 8006a74:	4a1c      	ldr	r2, [pc, #112]	; (8006ae8 <_free_r+0x8c>)
 8006a76:	6813      	ldr	r3, [r2, #0]
 8006a78:	b933      	cbnz	r3, 8006a88 <_free_r+0x2c>
 8006a7a:	6063      	str	r3, [r4, #4]
 8006a7c:	6014      	str	r4, [r2, #0]
 8006a7e:	4628      	mov	r0, r5
 8006a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a84:	f000 b924 	b.w	8006cd0 <__malloc_unlock>
 8006a88:	42a3      	cmp	r3, r4
 8006a8a:	d908      	bls.n	8006a9e <_free_r+0x42>
 8006a8c:	6820      	ldr	r0, [r4, #0]
 8006a8e:	1821      	adds	r1, r4, r0
 8006a90:	428b      	cmp	r3, r1
 8006a92:	bf01      	itttt	eq
 8006a94:	6819      	ldreq	r1, [r3, #0]
 8006a96:	685b      	ldreq	r3, [r3, #4]
 8006a98:	1809      	addeq	r1, r1, r0
 8006a9a:	6021      	streq	r1, [r4, #0]
 8006a9c:	e7ed      	b.n	8006a7a <_free_r+0x1e>
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	b10b      	cbz	r3, 8006aa8 <_free_r+0x4c>
 8006aa4:	42a3      	cmp	r3, r4
 8006aa6:	d9fa      	bls.n	8006a9e <_free_r+0x42>
 8006aa8:	6811      	ldr	r1, [r2, #0]
 8006aaa:	1850      	adds	r0, r2, r1
 8006aac:	42a0      	cmp	r0, r4
 8006aae:	d10b      	bne.n	8006ac8 <_free_r+0x6c>
 8006ab0:	6820      	ldr	r0, [r4, #0]
 8006ab2:	4401      	add	r1, r0
 8006ab4:	1850      	adds	r0, r2, r1
 8006ab6:	4283      	cmp	r3, r0
 8006ab8:	6011      	str	r1, [r2, #0]
 8006aba:	d1e0      	bne.n	8006a7e <_free_r+0x22>
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	4401      	add	r1, r0
 8006ac2:	6011      	str	r1, [r2, #0]
 8006ac4:	6053      	str	r3, [r2, #4]
 8006ac6:	e7da      	b.n	8006a7e <_free_r+0x22>
 8006ac8:	d902      	bls.n	8006ad0 <_free_r+0x74>
 8006aca:	230c      	movs	r3, #12
 8006acc:	602b      	str	r3, [r5, #0]
 8006ace:	e7d6      	b.n	8006a7e <_free_r+0x22>
 8006ad0:	6820      	ldr	r0, [r4, #0]
 8006ad2:	1821      	adds	r1, r4, r0
 8006ad4:	428b      	cmp	r3, r1
 8006ad6:	bf01      	itttt	eq
 8006ad8:	6819      	ldreq	r1, [r3, #0]
 8006ada:	685b      	ldreq	r3, [r3, #4]
 8006adc:	1809      	addeq	r1, r1, r0
 8006ade:	6021      	streq	r1, [r4, #0]
 8006ae0:	6063      	str	r3, [r4, #4]
 8006ae2:	6054      	str	r4, [r2, #4]
 8006ae4:	e7cb      	b.n	8006a7e <_free_r+0x22>
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	200004dc 	.word	0x200004dc

08006aec <sbrk_aligned>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	4e0e      	ldr	r6, [pc, #56]	; (8006b28 <sbrk_aligned+0x3c>)
 8006af0:	460c      	mov	r4, r1
 8006af2:	6831      	ldr	r1, [r6, #0]
 8006af4:	4605      	mov	r5, r0
 8006af6:	b911      	cbnz	r1, 8006afe <sbrk_aligned+0x12>
 8006af8:	f000 f88c 	bl	8006c14 <_sbrk_r>
 8006afc:	6030      	str	r0, [r6, #0]
 8006afe:	4621      	mov	r1, r4
 8006b00:	4628      	mov	r0, r5
 8006b02:	f000 f887 	bl	8006c14 <_sbrk_r>
 8006b06:	1c43      	adds	r3, r0, #1
 8006b08:	d00a      	beq.n	8006b20 <sbrk_aligned+0x34>
 8006b0a:	1cc4      	adds	r4, r0, #3
 8006b0c:	f024 0403 	bic.w	r4, r4, #3
 8006b10:	42a0      	cmp	r0, r4
 8006b12:	d007      	beq.n	8006b24 <sbrk_aligned+0x38>
 8006b14:	1a21      	subs	r1, r4, r0
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 f87c 	bl	8006c14 <_sbrk_r>
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d101      	bne.n	8006b24 <sbrk_aligned+0x38>
 8006b20:	f04f 34ff 	mov.w	r4, #4294967295
 8006b24:	4620      	mov	r0, r4
 8006b26:	bd70      	pop	{r4, r5, r6, pc}
 8006b28:	200004e0 	.word	0x200004e0

08006b2c <_malloc_r>:
 8006b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b30:	1ccd      	adds	r5, r1, #3
 8006b32:	f025 0503 	bic.w	r5, r5, #3
 8006b36:	3508      	adds	r5, #8
 8006b38:	2d0c      	cmp	r5, #12
 8006b3a:	bf38      	it	cc
 8006b3c:	250c      	movcc	r5, #12
 8006b3e:	2d00      	cmp	r5, #0
 8006b40:	4607      	mov	r7, r0
 8006b42:	db01      	blt.n	8006b48 <_malloc_r+0x1c>
 8006b44:	42a9      	cmp	r1, r5
 8006b46:	d905      	bls.n	8006b54 <_malloc_r+0x28>
 8006b48:	230c      	movs	r3, #12
 8006b4a:	2600      	movs	r6, #0
 8006b4c:	603b      	str	r3, [r7, #0]
 8006b4e:	4630      	mov	r0, r6
 8006b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b54:	4e2e      	ldr	r6, [pc, #184]	; (8006c10 <_malloc_r+0xe4>)
 8006b56:	f000 f8b5 	bl	8006cc4 <__malloc_lock>
 8006b5a:	6833      	ldr	r3, [r6, #0]
 8006b5c:	461c      	mov	r4, r3
 8006b5e:	bb34      	cbnz	r4, 8006bae <_malloc_r+0x82>
 8006b60:	4629      	mov	r1, r5
 8006b62:	4638      	mov	r0, r7
 8006b64:	f7ff ffc2 	bl	8006aec <sbrk_aligned>
 8006b68:	1c43      	adds	r3, r0, #1
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	d14d      	bne.n	8006c0a <_malloc_r+0xde>
 8006b6e:	6834      	ldr	r4, [r6, #0]
 8006b70:	4626      	mov	r6, r4
 8006b72:	2e00      	cmp	r6, #0
 8006b74:	d140      	bne.n	8006bf8 <_malloc_r+0xcc>
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	4631      	mov	r1, r6
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	eb04 0803 	add.w	r8, r4, r3
 8006b80:	f000 f848 	bl	8006c14 <_sbrk_r>
 8006b84:	4580      	cmp	r8, r0
 8006b86:	d13a      	bne.n	8006bfe <_malloc_r+0xd2>
 8006b88:	6821      	ldr	r1, [r4, #0]
 8006b8a:	3503      	adds	r5, #3
 8006b8c:	1a6d      	subs	r5, r5, r1
 8006b8e:	f025 0503 	bic.w	r5, r5, #3
 8006b92:	3508      	adds	r5, #8
 8006b94:	2d0c      	cmp	r5, #12
 8006b96:	bf38      	it	cc
 8006b98:	250c      	movcc	r5, #12
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	f7ff ffa5 	bl	8006aec <sbrk_aligned>
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	d02b      	beq.n	8006bfe <_malloc_r+0xd2>
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	442b      	add	r3, r5
 8006baa:	6023      	str	r3, [r4, #0]
 8006bac:	e00e      	b.n	8006bcc <_malloc_r+0xa0>
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	1b52      	subs	r2, r2, r5
 8006bb2:	d41e      	bmi.n	8006bf2 <_malloc_r+0xc6>
 8006bb4:	2a0b      	cmp	r2, #11
 8006bb6:	d916      	bls.n	8006be6 <_malloc_r+0xba>
 8006bb8:	1961      	adds	r1, r4, r5
 8006bba:	42a3      	cmp	r3, r4
 8006bbc:	6025      	str	r5, [r4, #0]
 8006bbe:	bf18      	it	ne
 8006bc0:	6059      	strne	r1, [r3, #4]
 8006bc2:	6863      	ldr	r3, [r4, #4]
 8006bc4:	bf08      	it	eq
 8006bc6:	6031      	streq	r1, [r6, #0]
 8006bc8:	5162      	str	r2, [r4, r5]
 8006bca:	604b      	str	r3, [r1, #4]
 8006bcc:	4638      	mov	r0, r7
 8006bce:	f104 060b 	add.w	r6, r4, #11
 8006bd2:	f000 f87d 	bl	8006cd0 <__malloc_unlock>
 8006bd6:	f026 0607 	bic.w	r6, r6, #7
 8006bda:	1d23      	adds	r3, r4, #4
 8006bdc:	1af2      	subs	r2, r6, r3
 8006bde:	d0b6      	beq.n	8006b4e <_malloc_r+0x22>
 8006be0:	1b9b      	subs	r3, r3, r6
 8006be2:	50a3      	str	r3, [r4, r2]
 8006be4:	e7b3      	b.n	8006b4e <_malloc_r+0x22>
 8006be6:	6862      	ldr	r2, [r4, #4]
 8006be8:	42a3      	cmp	r3, r4
 8006bea:	bf0c      	ite	eq
 8006bec:	6032      	streq	r2, [r6, #0]
 8006bee:	605a      	strne	r2, [r3, #4]
 8006bf0:	e7ec      	b.n	8006bcc <_malloc_r+0xa0>
 8006bf2:	4623      	mov	r3, r4
 8006bf4:	6864      	ldr	r4, [r4, #4]
 8006bf6:	e7b2      	b.n	8006b5e <_malloc_r+0x32>
 8006bf8:	4634      	mov	r4, r6
 8006bfa:	6876      	ldr	r6, [r6, #4]
 8006bfc:	e7b9      	b.n	8006b72 <_malloc_r+0x46>
 8006bfe:	230c      	movs	r3, #12
 8006c00:	4638      	mov	r0, r7
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	f000 f864 	bl	8006cd0 <__malloc_unlock>
 8006c08:	e7a1      	b.n	8006b4e <_malloc_r+0x22>
 8006c0a:	6025      	str	r5, [r4, #0]
 8006c0c:	e7de      	b.n	8006bcc <_malloc_r+0xa0>
 8006c0e:	bf00      	nop
 8006c10:	200004dc 	.word	0x200004dc

08006c14 <_sbrk_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	2300      	movs	r3, #0
 8006c18:	4d05      	ldr	r5, [pc, #20]	; (8006c30 <_sbrk_r+0x1c>)
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	602b      	str	r3, [r5, #0]
 8006c20:	f7fb fae4 	bl	80021ec <_sbrk>
 8006c24:	1c43      	adds	r3, r0, #1
 8006c26:	d102      	bne.n	8006c2e <_sbrk_r+0x1a>
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	b103      	cbz	r3, 8006c2e <_sbrk_r+0x1a>
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	bd38      	pop	{r3, r4, r5, pc}
 8006c30:	200004e4 	.word	0x200004e4

08006c34 <siprintf>:
 8006c34:	b40e      	push	{r1, r2, r3}
 8006c36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c3a:	b500      	push	{lr}
 8006c3c:	b09c      	sub	sp, #112	; 0x70
 8006c3e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c40:	9002      	str	r0, [sp, #8]
 8006c42:	9006      	str	r0, [sp, #24]
 8006c44:	9107      	str	r1, [sp, #28]
 8006c46:	9104      	str	r1, [sp, #16]
 8006c48:	4808      	ldr	r0, [pc, #32]	; (8006c6c <siprintf+0x38>)
 8006c4a:	4909      	ldr	r1, [pc, #36]	; (8006c70 <siprintf+0x3c>)
 8006c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c50:	9105      	str	r1, [sp, #20]
 8006c52:	6800      	ldr	r0, [r0, #0]
 8006c54:	a902      	add	r1, sp, #8
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	f000 f89c 	bl	8006d94 <_svfiprintf_r>
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	9b02      	ldr	r3, [sp, #8]
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	b01c      	add	sp, #112	; 0x70
 8006c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c68:	b003      	add	sp, #12
 8006c6a:	4770      	bx	lr
 8006c6c:	20000098 	.word	0x20000098
 8006c70:	ffff0208 	.word	0xffff0208

08006c74 <strcpy>:
 8006c74:	4603      	mov	r3, r0
 8006c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c7a:	f803 2b01 	strb.w	r2, [r3], #1
 8006c7e:	2a00      	cmp	r2, #0
 8006c80:	d1f9      	bne.n	8006c76 <strcpy+0x2>
 8006c82:	4770      	bx	lr

08006c84 <_vsiprintf_r>:
 8006c84:	b500      	push	{lr}
 8006c86:	b09b      	sub	sp, #108	; 0x6c
 8006c88:	9100      	str	r1, [sp, #0]
 8006c8a:	9104      	str	r1, [sp, #16]
 8006c8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c90:	9105      	str	r1, [sp, #20]
 8006c92:	9102      	str	r1, [sp, #8]
 8006c94:	4905      	ldr	r1, [pc, #20]	; (8006cac <_vsiprintf_r+0x28>)
 8006c96:	9103      	str	r1, [sp, #12]
 8006c98:	4669      	mov	r1, sp
 8006c9a:	f000 f87b 	bl	8006d94 <_svfiprintf_r>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	9b00      	ldr	r3, [sp, #0]
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	b01b      	add	sp, #108	; 0x6c
 8006ca6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006caa:	bf00      	nop
 8006cac:	ffff0208 	.word	0xffff0208

08006cb0 <vsiprintf>:
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	460a      	mov	r2, r1
 8006cb4:	4601      	mov	r1, r0
 8006cb6:	4802      	ldr	r0, [pc, #8]	; (8006cc0 <vsiprintf+0x10>)
 8006cb8:	6800      	ldr	r0, [r0, #0]
 8006cba:	f7ff bfe3 	b.w	8006c84 <_vsiprintf_r>
 8006cbe:	bf00      	nop
 8006cc0:	20000098 	.word	0x20000098

08006cc4 <__malloc_lock>:
 8006cc4:	4801      	ldr	r0, [pc, #4]	; (8006ccc <__malloc_lock+0x8>)
 8006cc6:	f000 bafb 	b.w	80072c0 <__retarget_lock_acquire_recursive>
 8006cca:	bf00      	nop
 8006ccc:	200004e8 	.word	0x200004e8

08006cd0 <__malloc_unlock>:
 8006cd0:	4801      	ldr	r0, [pc, #4]	; (8006cd8 <__malloc_unlock+0x8>)
 8006cd2:	f000 baf6 	b.w	80072c2 <__retarget_lock_release_recursive>
 8006cd6:	bf00      	nop
 8006cd8:	200004e8 	.word	0x200004e8

08006cdc <__ssputs_r>:
 8006cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce0:	688e      	ldr	r6, [r1, #8]
 8006ce2:	4682      	mov	sl, r0
 8006ce4:	429e      	cmp	r6, r3
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	4690      	mov	r8, r2
 8006cea:	461f      	mov	r7, r3
 8006cec:	d838      	bhi.n	8006d60 <__ssputs_r+0x84>
 8006cee:	898a      	ldrh	r2, [r1, #12]
 8006cf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cf4:	d032      	beq.n	8006d5c <__ssputs_r+0x80>
 8006cf6:	6825      	ldr	r5, [r4, #0]
 8006cf8:	6909      	ldr	r1, [r1, #16]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	eba5 0901 	sub.w	r9, r5, r1
 8006d00:	6965      	ldr	r5, [r4, #20]
 8006d02:	444b      	add	r3, r9
 8006d04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d0c:	106d      	asrs	r5, r5, #1
 8006d0e:	429d      	cmp	r5, r3
 8006d10:	bf38      	it	cc
 8006d12:	461d      	movcc	r5, r3
 8006d14:	0553      	lsls	r3, r2, #21
 8006d16:	d531      	bpl.n	8006d7c <__ssputs_r+0xa0>
 8006d18:	4629      	mov	r1, r5
 8006d1a:	f7ff ff07 	bl	8006b2c <_malloc_r>
 8006d1e:	4606      	mov	r6, r0
 8006d20:	b950      	cbnz	r0, 8006d38 <__ssputs_r+0x5c>
 8006d22:	230c      	movs	r3, #12
 8006d24:	f04f 30ff 	mov.w	r0, #4294967295
 8006d28:	f8ca 3000 	str.w	r3, [sl]
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d32:	81a3      	strh	r3, [r4, #12]
 8006d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d38:	464a      	mov	r2, r9
 8006d3a:	6921      	ldr	r1, [r4, #16]
 8006d3c:	f000 fad0 	bl	80072e0 <memcpy>
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	6126      	str	r6, [r4, #16]
 8006d4e:	444e      	add	r6, r9
 8006d50:	6026      	str	r6, [r4, #0]
 8006d52:	463e      	mov	r6, r7
 8006d54:	6165      	str	r5, [r4, #20]
 8006d56:	eba5 0509 	sub.w	r5, r5, r9
 8006d5a:	60a5      	str	r5, [r4, #8]
 8006d5c:	42be      	cmp	r6, r7
 8006d5e:	d900      	bls.n	8006d62 <__ssputs_r+0x86>
 8006d60:	463e      	mov	r6, r7
 8006d62:	4632      	mov	r2, r6
 8006d64:	4641      	mov	r1, r8
 8006d66:	6820      	ldr	r0, [r4, #0]
 8006d68:	f000 fac8 	bl	80072fc <memmove>
 8006d6c:	68a3      	ldr	r3, [r4, #8]
 8006d6e:	2000      	movs	r0, #0
 8006d70:	1b9b      	subs	r3, r3, r6
 8006d72:	60a3      	str	r3, [r4, #8]
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	4433      	add	r3, r6
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	e7db      	b.n	8006d34 <__ssputs_r+0x58>
 8006d7c:	462a      	mov	r2, r5
 8006d7e:	f000 fad7 	bl	8007330 <_realloc_r>
 8006d82:	4606      	mov	r6, r0
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d1e1      	bne.n	8006d4c <__ssputs_r+0x70>
 8006d88:	4650      	mov	r0, sl
 8006d8a:	6921      	ldr	r1, [r4, #16]
 8006d8c:	f7ff fe66 	bl	8006a5c <_free_r>
 8006d90:	e7c7      	b.n	8006d22 <__ssputs_r+0x46>
	...

08006d94 <_svfiprintf_r>:
 8006d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d98:	4698      	mov	r8, r3
 8006d9a:	898b      	ldrh	r3, [r1, #12]
 8006d9c:	4607      	mov	r7, r0
 8006d9e:	061b      	lsls	r3, r3, #24
 8006da0:	460d      	mov	r5, r1
 8006da2:	4614      	mov	r4, r2
 8006da4:	b09d      	sub	sp, #116	; 0x74
 8006da6:	d50e      	bpl.n	8006dc6 <_svfiprintf_r+0x32>
 8006da8:	690b      	ldr	r3, [r1, #16]
 8006daa:	b963      	cbnz	r3, 8006dc6 <_svfiprintf_r+0x32>
 8006dac:	2140      	movs	r1, #64	; 0x40
 8006dae:	f7ff febd 	bl	8006b2c <_malloc_r>
 8006db2:	6028      	str	r0, [r5, #0]
 8006db4:	6128      	str	r0, [r5, #16]
 8006db6:	b920      	cbnz	r0, 8006dc2 <_svfiprintf_r+0x2e>
 8006db8:	230c      	movs	r3, #12
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc0:	e0d1      	b.n	8006f66 <_svfiprintf_r+0x1d2>
 8006dc2:	2340      	movs	r3, #64	; 0x40
 8006dc4:	616b      	str	r3, [r5, #20]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dca:	2320      	movs	r3, #32
 8006dcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dd0:	2330      	movs	r3, #48	; 0x30
 8006dd2:	f04f 0901 	mov.w	r9, #1
 8006dd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006f80 <_svfiprintf_r+0x1ec>
 8006dde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006de2:	4623      	mov	r3, r4
 8006de4:	469a      	mov	sl, r3
 8006de6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dea:	b10a      	cbz	r2, 8006df0 <_svfiprintf_r+0x5c>
 8006dec:	2a25      	cmp	r2, #37	; 0x25
 8006dee:	d1f9      	bne.n	8006de4 <_svfiprintf_r+0x50>
 8006df0:	ebba 0b04 	subs.w	fp, sl, r4
 8006df4:	d00b      	beq.n	8006e0e <_svfiprintf_r+0x7a>
 8006df6:	465b      	mov	r3, fp
 8006df8:	4622      	mov	r2, r4
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	f7ff ff6d 	bl	8006cdc <__ssputs_r>
 8006e02:	3001      	adds	r0, #1
 8006e04:	f000 80aa 	beq.w	8006f5c <_svfiprintf_r+0x1c8>
 8006e08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e0a:	445a      	add	r2, fp
 8006e0c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 80a2 	beq.w	8006f5c <_svfiprintf_r+0x1c8>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e22:	f10a 0a01 	add.w	sl, sl, #1
 8006e26:	9304      	str	r3, [sp, #16]
 8006e28:	9307      	str	r3, [sp, #28]
 8006e2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e2e:	931a      	str	r3, [sp, #104]	; 0x68
 8006e30:	4654      	mov	r4, sl
 8006e32:	2205      	movs	r2, #5
 8006e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e38:	4851      	ldr	r0, [pc, #324]	; (8006f80 <_svfiprintf_r+0x1ec>)
 8006e3a:	f000 fa43 	bl	80072c4 <memchr>
 8006e3e:	9a04      	ldr	r2, [sp, #16]
 8006e40:	b9d8      	cbnz	r0, 8006e7a <_svfiprintf_r+0xe6>
 8006e42:	06d0      	lsls	r0, r2, #27
 8006e44:	bf44      	itt	mi
 8006e46:	2320      	movmi	r3, #32
 8006e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e4c:	0711      	lsls	r1, r2, #28
 8006e4e:	bf44      	itt	mi
 8006e50:	232b      	movmi	r3, #43	; 0x2b
 8006e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e56:	f89a 3000 	ldrb.w	r3, [sl]
 8006e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e5c:	d015      	beq.n	8006e8a <_svfiprintf_r+0xf6>
 8006e5e:	4654      	mov	r4, sl
 8006e60:	2000      	movs	r0, #0
 8006e62:	f04f 0c0a 	mov.w	ip, #10
 8006e66:	9a07      	ldr	r2, [sp, #28]
 8006e68:	4621      	mov	r1, r4
 8006e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e6e:	3b30      	subs	r3, #48	; 0x30
 8006e70:	2b09      	cmp	r3, #9
 8006e72:	d94e      	bls.n	8006f12 <_svfiprintf_r+0x17e>
 8006e74:	b1b0      	cbz	r0, 8006ea4 <_svfiprintf_r+0x110>
 8006e76:	9207      	str	r2, [sp, #28]
 8006e78:	e014      	b.n	8006ea4 <_svfiprintf_r+0x110>
 8006e7a:	eba0 0308 	sub.w	r3, r0, r8
 8006e7e:	fa09 f303 	lsl.w	r3, r9, r3
 8006e82:	4313      	orrs	r3, r2
 8006e84:	46a2      	mov	sl, r4
 8006e86:	9304      	str	r3, [sp, #16]
 8006e88:	e7d2      	b.n	8006e30 <_svfiprintf_r+0x9c>
 8006e8a:	9b03      	ldr	r3, [sp, #12]
 8006e8c:	1d19      	adds	r1, r3, #4
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	9103      	str	r1, [sp, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	bfbb      	ittet	lt
 8006e96:	425b      	neglt	r3, r3
 8006e98:	f042 0202 	orrlt.w	r2, r2, #2
 8006e9c:	9307      	strge	r3, [sp, #28]
 8006e9e:	9307      	strlt	r3, [sp, #28]
 8006ea0:	bfb8      	it	lt
 8006ea2:	9204      	strlt	r2, [sp, #16]
 8006ea4:	7823      	ldrb	r3, [r4, #0]
 8006ea6:	2b2e      	cmp	r3, #46	; 0x2e
 8006ea8:	d10c      	bne.n	8006ec4 <_svfiprintf_r+0x130>
 8006eaa:	7863      	ldrb	r3, [r4, #1]
 8006eac:	2b2a      	cmp	r3, #42	; 0x2a
 8006eae:	d135      	bne.n	8006f1c <_svfiprintf_r+0x188>
 8006eb0:	9b03      	ldr	r3, [sp, #12]
 8006eb2:	3402      	adds	r4, #2
 8006eb4:	1d1a      	adds	r2, r3, #4
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	9203      	str	r2, [sp, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	bfb8      	it	lt
 8006ebe:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ec2:	9305      	str	r3, [sp, #20]
 8006ec4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006f84 <_svfiprintf_r+0x1f0>
 8006ec8:	2203      	movs	r2, #3
 8006eca:	4650      	mov	r0, sl
 8006ecc:	7821      	ldrb	r1, [r4, #0]
 8006ece:	f000 f9f9 	bl	80072c4 <memchr>
 8006ed2:	b140      	cbz	r0, 8006ee6 <_svfiprintf_r+0x152>
 8006ed4:	2340      	movs	r3, #64	; 0x40
 8006ed6:	eba0 000a 	sub.w	r0, r0, sl
 8006eda:	fa03 f000 	lsl.w	r0, r3, r0
 8006ede:	9b04      	ldr	r3, [sp, #16]
 8006ee0:	3401      	adds	r4, #1
 8006ee2:	4303      	orrs	r3, r0
 8006ee4:	9304      	str	r3, [sp, #16]
 8006ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eea:	2206      	movs	r2, #6
 8006eec:	4826      	ldr	r0, [pc, #152]	; (8006f88 <_svfiprintf_r+0x1f4>)
 8006eee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ef2:	f000 f9e7 	bl	80072c4 <memchr>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d038      	beq.n	8006f6c <_svfiprintf_r+0x1d8>
 8006efa:	4b24      	ldr	r3, [pc, #144]	; (8006f8c <_svfiprintf_r+0x1f8>)
 8006efc:	bb1b      	cbnz	r3, 8006f46 <_svfiprintf_r+0x1b2>
 8006efe:	9b03      	ldr	r3, [sp, #12]
 8006f00:	3307      	adds	r3, #7
 8006f02:	f023 0307 	bic.w	r3, r3, #7
 8006f06:	3308      	adds	r3, #8
 8006f08:	9303      	str	r3, [sp, #12]
 8006f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f0c:	4433      	add	r3, r6
 8006f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f10:	e767      	b.n	8006de2 <_svfiprintf_r+0x4e>
 8006f12:	460c      	mov	r4, r1
 8006f14:	2001      	movs	r0, #1
 8006f16:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f1a:	e7a5      	b.n	8006e68 <_svfiprintf_r+0xd4>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f04f 0c0a 	mov.w	ip, #10
 8006f22:	4619      	mov	r1, r3
 8006f24:	3401      	adds	r4, #1
 8006f26:	9305      	str	r3, [sp, #20]
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f2e:	3a30      	subs	r2, #48	; 0x30
 8006f30:	2a09      	cmp	r2, #9
 8006f32:	d903      	bls.n	8006f3c <_svfiprintf_r+0x1a8>
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0c5      	beq.n	8006ec4 <_svfiprintf_r+0x130>
 8006f38:	9105      	str	r1, [sp, #20]
 8006f3a:	e7c3      	b.n	8006ec4 <_svfiprintf_r+0x130>
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	2301      	movs	r3, #1
 8006f40:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f44:	e7f0      	b.n	8006f28 <_svfiprintf_r+0x194>
 8006f46:	ab03      	add	r3, sp, #12
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	462a      	mov	r2, r5
 8006f4c:	4638      	mov	r0, r7
 8006f4e:	4b10      	ldr	r3, [pc, #64]	; (8006f90 <_svfiprintf_r+0x1fc>)
 8006f50:	a904      	add	r1, sp, #16
 8006f52:	f3af 8000 	nop.w
 8006f56:	1c42      	adds	r2, r0, #1
 8006f58:	4606      	mov	r6, r0
 8006f5a:	d1d6      	bne.n	8006f0a <_svfiprintf_r+0x176>
 8006f5c:	89ab      	ldrh	r3, [r5, #12]
 8006f5e:	065b      	lsls	r3, r3, #25
 8006f60:	f53f af2c 	bmi.w	8006dbc <_svfiprintf_r+0x28>
 8006f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f66:	b01d      	add	sp, #116	; 0x74
 8006f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6c:	ab03      	add	r3, sp, #12
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	462a      	mov	r2, r5
 8006f72:	4638      	mov	r0, r7
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <_svfiprintf_r+0x1fc>)
 8006f76:	a904      	add	r1, sp, #16
 8006f78:	f000 f87c 	bl	8007074 <_printf_i>
 8006f7c:	e7eb      	b.n	8006f56 <_svfiprintf_r+0x1c2>
 8006f7e:	bf00      	nop
 8006f80:	08007510 	.word	0x08007510
 8006f84:	08007516 	.word	0x08007516
 8006f88:	0800751a 	.word	0x0800751a
 8006f8c:	00000000 	.word	0x00000000
 8006f90:	08006cdd 	.word	0x08006cdd

08006f94 <_printf_common>:
 8006f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f98:	4616      	mov	r6, r2
 8006f9a:	4699      	mov	r9, r3
 8006f9c:	688a      	ldr	r2, [r1, #8]
 8006f9e:	690b      	ldr	r3, [r1, #16]
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	bfb8      	it	lt
 8006fa6:	4613      	movlt	r3, r2
 8006fa8:	6033      	str	r3, [r6, #0]
 8006faa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fae:	460c      	mov	r4, r1
 8006fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fb4:	b10a      	cbz	r2, 8006fba <_printf_common+0x26>
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	6033      	str	r3, [r6, #0]
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	0699      	lsls	r1, r3, #26
 8006fbe:	bf42      	ittt	mi
 8006fc0:	6833      	ldrmi	r3, [r6, #0]
 8006fc2:	3302      	addmi	r3, #2
 8006fc4:	6033      	strmi	r3, [r6, #0]
 8006fc6:	6825      	ldr	r5, [r4, #0]
 8006fc8:	f015 0506 	ands.w	r5, r5, #6
 8006fcc:	d106      	bne.n	8006fdc <_printf_common+0x48>
 8006fce:	f104 0a19 	add.w	sl, r4, #25
 8006fd2:	68e3      	ldr	r3, [r4, #12]
 8006fd4:	6832      	ldr	r2, [r6, #0]
 8006fd6:	1a9b      	subs	r3, r3, r2
 8006fd8:	42ab      	cmp	r3, r5
 8006fda:	dc28      	bgt.n	800702e <_printf_common+0x9a>
 8006fdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fe0:	1e13      	subs	r3, r2, #0
 8006fe2:	6822      	ldr	r2, [r4, #0]
 8006fe4:	bf18      	it	ne
 8006fe6:	2301      	movne	r3, #1
 8006fe8:	0692      	lsls	r2, r2, #26
 8006fea:	d42d      	bmi.n	8007048 <_printf_common+0xb4>
 8006fec:	4649      	mov	r1, r9
 8006fee:	4638      	mov	r0, r7
 8006ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ff4:	47c0      	blx	r8
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	d020      	beq.n	800703c <_printf_common+0xa8>
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	68e5      	ldr	r5, [r4, #12]
 8006ffe:	f003 0306 	and.w	r3, r3, #6
 8007002:	2b04      	cmp	r3, #4
 8007004:	bf18      	it	ne
 8007006:	2500      	movne	r5, #0
 8007008:	6832      	ldr	r2, [r6, #0]
 800700a:	f04f 0600 	mov.w	r6, #0
 800700e:	68a3      	ldr	r3, [r4, #8]
 8007010:	bf08      	it	eq
 8007012:	1aad      	subeq	r5, r5, r2
 8007014:	6922      	ldr	r2, [r4, #16]
 8007016:	bf08      	it	eq
 8007018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800701c:	4293      	cmp	r3, r2
 800701e:	bfc4      	itt	gt
 8007020:	1a9b      	subgt	r3, r3, r2
 8007022:	18ed      	addgt	r5, r5, r3
 8007024:	341a      	adds	r4, #26
 8007026:	42b5      	cmp	r5, r6
 8007028:	d11a      	bne.n	8007060 <_printf_common+0xcc>
 800702a:	2000      	movs	r0, #0
 800702c:	e008      	b.n	8007040 <_printf_common+0xac>
 800702e:	2301      	movs	r3, #1
 8007030:	4652      	mov	r2, sl
 8007032:	4649      	mov	r1, r9
 8007034:	4638      	mov	r0, r7
 8007036:	47c0      	blx	r8
 8007038:	3001      	adds	r0, #1
 800703a:	d103      	bne.n	8007044 <_printf_common+0xb0>
 800703c:	f04f 30ff 	mov.w	r0, #4294967295
 8007040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007044:	3501      	adds	r5, #1
 8007046:	e7c4      	b.n	8006fd2 <_printf_common+0x3e>
 8007048:	2030      	movs	r0, #48	; 0x30
 800704a:	18e1      	adds	r1, r4, r3
 800704c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007056:	4422      	add	r2, r4
 8007058:	3302      	adds	r3, #2
 800705a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800705e:	e7c5      	b.n	8006fec <_printf_common+0x58>
 8007060:	2301      	movs	r3, #1
 8007062:	4622      	mov	r2, r4
 8007064:	4649      	mov	r1, r9
 8007066:	4638      	mov	r0, r7
 8007068:	47c0      	blx	r8
 800706a:	3001      	adds	r0, #1
 800706c:	d0e6      	beq.n	800703c <_printf_common+0xa8>
 800706e:	3601      	adds	r6, #1
 8007070:	e7d9      	b.n	8007026 <_printf_common+0x92>
	...

08007074 <_printf_i>:
 8007074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007078:	7e0f      	ldrb	r7, [r1, #24]
 800707a:	4691      	mov	r9, r2
 800707c:	2f78      	cmp	r7, #120	; 0x78
 800707e:	4680      	mov	r8, r0
 8007080:	460c      	mov	r4, r1
 8007082:	469a      	mov	sl, r3
 8007084:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007086:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800708a:	d807      	bhi.n	800709c <_printf_i+0x28>
 800708c:	2f62      	cmp	r7, #98	; 0x62
 800708e:	d80a      	bhi.n	80070a6 <_printf_i+0x32>
 8007090:	2f00      	cmp	r7, #0
 8007092:	f000 80d9 	beq.w	8007248 <_printf_i+0x1d4>
 8007096:	2f58      	cmp	r7, #88	; 0x58
 8007098:	f000 80a4 	beq.w	80071e4 <_printf_i+0x170>
 800709c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070a4:	e03a      	b.n	800711c <_printf_i+0xa8>
 80070a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070aa:	2b15      	cmp	r3, #21
 80070ac:	d8f6      	bhi.n	800709c <_printf_i+0x28>
 80070ae:	a101      	add	r1, pc, #4	; (adr r1, 80070b4 <_printf_i+0x40>)
 80070b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070b4:	0800710d 	.word	0x0800710d
 80070b8:	08007121 	.word	0x08007121
 80070bc:	0800709d 	.word	0x0800709d
 80070c0:	0800709d 	.word	0x0800709d
 80070c4:	0800709d 	.word	0x0800709d
 80070c8:	0800709d 	.word	0x0800709d
 80070cc:	08007121 	.word	0x08007121
 80070d0:	0800709d 	.word	0x0800709d
 80070d4:	0800709d 	.word	0x0800709d
 80070d8:	0800709d 	.word	0x0800709d
 80070dc:	0800709d 	.word	0x0800709d
 80070e0:	0800722f 	.word	0x0800722f
 80070e4:	08007151 	.word	0x08007151
 80070e8:	08007211 	.word	0x08007211
 80070ec:	0800709d 	.word	0x0800709d
 80070f0:	0800709d 	.word	0x0800709d
 80070f4:	08007251 	.word	0x08007251
 80070f8:	0800709d 	.word	0x0800709d
 80070fc:	08007151 	.word	0x08007151
 8007100:	0800709d 	.word	0x0800709d
 8007104:	0800709d 	.word	0x0800709d
 8007108:	08007219 	.word	0x08007219
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	1d1a      	adds	r2, r3, #4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	602a      	str	r2, [r5, #0]
 8007114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800711c:	2301      	movs	r3, #1
 800711e:	e0a4      	b.n	800726a <_printf_i+0x1f6>
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	6829      	ldr	r1, [r5, #0]
 8007124:	0606      	lsls	r6, r0, #24
 8007126:	f101 0304 	add.w	r3, r1, #4
 800712a:	d50a      	bpl.n	8007142 <_printf_i+0xce>
 800712c:	680e      	ldr	r6, [r1, #0]
 800712e:	602b      	str	r3, [r5, #0]
 8007130:	2e00      	cmp	r6, #0
 8007132:	da03      	bge.n	800713c <_printf_i+0xc8>
 8007134:	232d      	movs	r3, #45	; 0x2d
 8007136:	4276      	negs	r6, r6
 8007138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800713c:	230a      	movs	r3, #10
 800713e:	485e      	ldr	r0, [pc, #376]	; (80072b8 <_printf_i+0x244>)
 8007140:	e019      	b.n	8007176 <_printf_i+0x102>
 8007142:	680e      	ldr	r6, [r1, #0]
 8007144:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007148:	602b      	str	r3, [r5, #0]
 800714a:	bf18      	it	ne
 800714c:	b236      	sxthne	r6, r6
 800714e:	e7ef      	b.n	8007130 <_printf_i+0xbc>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	6820      	ldr	r0, [r4, #0]
 8007154:	1d19      	adds	r1, r3, #4
 8007156:	6029      	str	r1, [r5, #0]
 8007158:	0601      	lsls	r1, r0, #24
 800715a:	d501      	bpl.n	8007160 <_printf_i+0xec>
 800715c:	681e      	ldr	r6, [r3, #0]
 800715e:	e002      	b.n	8007166 <_printf_i+0xf2>
 8007160:	0646      	lsls	r6, r0, #25
 8007162:	d5fb      	bpl.n	800715c <_printf_i+0xe8>
 8007164:	881e      	ldrh	r6, [r3, #0]
 8007166:	2f6f      	cmp	r7, #111	; 0x6f
 8007168:	bf0c      	ite	eq
 800716a:	2308      	moveq	r3, #8
 800716c:	230a      	movne	r3, #10
 800716e:	4852      	ldr	r0, [pc, #328]	; (80072b8 <_printf_i+0x244>)
 8007170:	2100      	movs	r1, #0
 8007172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007176:	6865      	ldr	r5, [r4, #4]
 8007178:	2d00      	cmp	r5, #0
 800717a:	bfa8      	it	ge
 800717c:	6821      	ldrge	r1, [r4, #0]
 800717e:	60a5      	str	r5, [r4, #8]
 8007180:	bfa4      	itt	ge
 8007182:	f021 0104 	bicge.w	r1, r1, #4
 8007186:	6021      	strge	r1, [r4, #0]
 8007188:	b90e      	cbnz	r6, 800718e <_printf_i+0x11a>
 800718a:	2d00      	cmp	r5, #0
 800718c:	d04d      	beq.n	800722a <_printf_i+0x1b6>
 800718e:	4615      	mov	r5, r2
 8007190:	fbb6 f1f3 	udiv	r1, r6, r3
 8007194:	fb03 6711 	mls	r7, r3, r1, r6
 8007198:	5dc7      	ldrb	r7, [r0, r7]
 800719a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800719e:	4637      	mov	r7, r6
 80071a0:	42bb      	cmp	r3, r7
 80071a2:	460e      	mov	r6, r1
 80071a4:	d9f4      	bls.n	8007190 <_printf_i+0x11c>
 80071a6:	2b08      	cmp	r3, #8
 80071a8:	d10b      	bne.n	80071c2 <_printf_i+0x14e>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	07de      	lsls	r6, r3, #31
 80071ae:	d508      	bpl.n	80071c2 <_printf_i+0x14e>
 80071b0:	6923      	ldr	r3, [r4, #16]
 80071b2:	6861      	ldr	r1, [r4, #4]
 80071b4:	4299      	cmp	r1, r3
 80071b6:	bfde      	ittt	le
 80071b8:	2330      	movle	r3, #48	; 0x30
 80071ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071c2:	1b52      	subs	r2, r2, r5
 80071c4:	6122      	str	r2, [r4, #16]
 80071c6:	464b      	mov	r3, r9
 80071c8:	4621      	mov	r1, r4
 80071ca:	4640      	mov	r0, r8
 80071cc:	f8cd a000 	str.w	sl, [sp]
 80071d0:	aa03      	add	r2, sp, #12
 80071d2:	f7ff fedf 	bl	8006f94 <_printf_common>
 80071d6:	3001      	adds	r0, #1
 80071d8:	d14c      	bne.n	8007274 <_printf_i+0x200>
 80071da:	f04f 30ff 	mov.w	r0, #4294967295
 80071de:	b004      	add	sp, #16
 80071e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e4:	4834      	ldr	r0, [pc, #208]	; (80072b8 <_printf_i+0x244>)
 80071e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071ea:	6829      	ldr	r1, [r5, #0]
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80071f2:	6029      	str	r1, [r5, #0]
 80071f4:	061d      	lsls	r5, r3, #24
 80071f6:	d514      	bpl.n	8007222 <_printf_i+0x1ae>
 80071f8:	07df      	lsls	r7, r3, #31
 80071fa:	bf44      	itt	mi
 80071fc:	f043 0320 	orrmi.w	r3, r3, #32
 8007200:	6023      	strmi	r3, [r4, #0]
 8007202:	b91e      	cbnz	r6, 800720c <_printf_i+0x198>
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	f023 0320 	bic.w	r3, r3, #32
 800720a:	6023      	str	r3, [r4, #0]
 800720c:	2310      	movs	r3, #16
 800720e:	e7af      	b.n	8007170 <_printf_i+0xfc>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	f043 0320 	orr.w	r3, r3, #32
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	2378      	movs	r3, #120	; 0x78
 800721a:	4828      	ldr	r0, [pc, #160]	; (80072bc <_printf_i+0x248>)
 800721c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007220:	e7e3      	b.n	80071ea <_printf_i+0x176>
 8007222:	0659      	lsls	r1, r3, #25
 8007224:	bf48      	it	mi
 8007226:	b2b6      	uxthmi	r6, r6
 8007228:	e7e6      	b.n	80071f8 <_printf_i+0x184>
 800722a:	4615      	mov	r5, r2
 800722c:	e7bb      	b.n	80071a6 <_printf_i+0x132>
 800722e:	682b      	ldr	r3, [r5, #0]
 8007230:	6826      	ldr	r6, [r4, #0]
 8007232:	1d18      	adds	r0, r3, #4
 8007234:	6961      	ldr	r1, [r4, #20]
 8007236:	6028      	str	r0, [r5, #0]
 8007238:	0635      	lsls	r5, r6, #24
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	d501      	bpl.n	8007242 <_printf_i+0x1ce>
 800723e:	6019      	str	r1, [r3, #0]
 8007240:	e002      	b.n	8007248 <_printf_i+0x1d4>
 8007242:	0670      	lsls	r0, r6, #25
 8007244:	d5fb      	bpl.n	800723e <_printf_i+0x1ca>
 8007246:	8019      	strh	r1, [r3, #0]
 8007248:	2300      	movs	r3, #0
 800724a:	4615      	mov	r5, r2
 800724c:	6123      	str	r3, [r4, #16]
 800724e:	e7ba      	b.n	80071c6 <_printf_i+0x152>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	2100      	movs	r1, #0
 8007254:	1d1a      	adds	r2, r3, #4
 8007256:	602a      	str	r2, [r5, #0]
 8007258:	681d      	ldr	r5, [r3, #0]
 800725a:	6862      	ldr	r2, [r4, #4]
 800725c:	4628      	mov	r0, r5
 800725e:	f000 f831 	bl	80072c4 <memchr>
 8007262:	b108      	cbz	r0, 8007268 <_printf_i+0x1f4>
 8007264:	1b40      	subs	r0, r0, r5
 8007266:	6060      	str	r0, [r4, #4]
 8007268:	6863      	ldr	r3, [r4, #4]
 800726a:	6123      	str	r3, [r4, #16]
 800726c:	2300      	movs	r3, #0
 800726e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007272:	e7a8      	b.n	80071c6 <_printf_i+0x152>
 8007274:	462a      	mov	r2, r5
 8007276:	4649      	mov	r1, r9
 8007278:	4640      	mov	r0, r8
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	47d0      	blx	sl
 800727e:	3001      	adds	r0, #1
 8007280:	d0ab      	beq.n	80071da <_printf_i+0x166>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	079b      	lsls	r3, r3, #30
 8007286:	d413      	bmi.n	80072b0 <_printf_i+0x23c>
 8007288:	68e0      	ldr	r0, [r4, #12]
 800728a:	9b03      	ldr	r3, [sp, #12]
 800728c:	4298      	cmp	r0, r3
 800728e:	bfb8      	it	lt
 8007290:	4618      	movlt	r0, r3
 8007292:	e7a4      	b.n	80071de <_printf_i+0x16a>
 8007294:	2301      	movs	r3, #1
 8007296:	4632      	mov	r2, r6
 8007298:	4649      	mov	r1, r9
 800729a:	4640      	mov	r0, r8
 800729c:	47d0      	blx	sl
 800729e:	3001      	adds	r0, #1
 80072a0:	d09b      	beq.n	80071da <_printf_i+0x166>
 80072a2:	3501      	adds	r5, #1
 80072a4:	68e3      	ldr	r3, [r4, #12]
 80072a6:	9903      	ldr	r1, [sp, #12]
 80072a8:	1a5b      	subs	r3, r3, r1
 80072aa:	42ab      	cmp	r3, r5
 80072ac:	dcf2      	bgt.n	8007294 <_printf_i+0x220>
 80072ae:	e7eb      	b.n	8007288 <_printf_i+0x214>
 80072b0:	2500      	movs	r5, #0
 80072b2:	f104 0619 	add.w	r6, r4, #25
 80072b6:	e7f5      	b.n	80072a4 <_printf_i+0x230>
 80072b8:	08007521 	.word	0x08007521
 80072bc:	08007532 	.word	0x08007532

080072c0 <__retarget_lock_acquire_recursive>:
 80072c0:	4770      	bx	lr

080072c2 <__retarget_lock_release_recursive>:
 80072c2:	4770      	bx	lr

080072c4 <memchr>:
 80072c4:	4603      	mov	r3, r0
 80072c6:	b510      	push	{r4, lr}
 80072c8:	b2c9      	uxtb	r1, r1
 80072ca:	4402      	add	r2, r0
 80072cc:	4293      	cmp	r3, r2
 80072ce:	4618      	mov	r0, r3
 80072d0:	d101      	bne.n	80072d6 <memchr+0x12>
 80072d2:	2000      	movs	r0, #0
 80072d4:	e003      	b.n	80072de <memchr+0x1a>
 80072d6:	7804      	ldrb	r4, [r0, #0]
 80072d8:	3301      	adds	r3, #1
 80072da:	428c      	cmp	r4, r1
 80072dc:	d1f6      	bne.n	80072cc <memchr+0x8>
 80072de:	bd10      	pop	{r4, pc}

080072e0 <memcpy>:
 80072e0:	440a      	add	r2, r1
 80072e2:	4291      	cmp	r1, r2
 80072e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072e8:	d100      	bne.n	80072ec <memcpy+0xc>
 80072ea:	4770      	bx	lr
 80072ec:	b510      	push	{r4, lr}
 80072ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072f2:	4291      	cmp	r1, r2
 80072f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072f8:	d1f9      	bne.n	80072ee <memcpy+0xe>
 80072fa:	bd10      	pop	{r4, pc}

080072fc <memmove>:
 80072fc:	4288      	cmp	r0, r1
 80072fe:	b510      	push	{r4, lr}
 8007300:	eb01 0402 	add.w	r4, r1, r2
 8007304:	d902      	bls.n	800730c <memmove+0x10>
 8007306:	4284      	cmp	r4, r0
 8007308:	4623      	mov	r3, r4
 800730a:	d807      	bhi.n	800731c <memmove+0x20>
 800730c:	1e43      	subs	r3, r0, #1
 800730e:	42a1      	cmp	r1, r4
 8007310:	d008      	beq.n	8007324 <memmove+0x28>
 8007312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007316:	f803 2f01 	strb.w	r2, [r3, #1]!
 800731a:	e7f8      	b.n	800730e <memmove+0x12>
 800731c:	4601      	mov	r1, r0
 800731e:	4402      	add	r2, r0
 8007320:	428a      	cmp	r2, r1
 8007322:	d100      	bne.n	8007326 <memmove+0x2a>
 8007324:	bd10      	pop	{r4, pc}
 8007326:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800732a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800732e:	e7f7      	b.n	8007320 <memmove+0x24>

08007330 <_realloc_r>:
 8007330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007334:	4680      	mov	r8, r0
 8007336:	4614      	mov	r4, r2
 8007338:	460e      	mov	r6, r1
 800733a:	b921      	cbnz	r1, 8007346 <_realloc_r+0x16>
 800733c:	4611      	mov	r1, r2
 800733e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007342:	f7ff bbf3 	b.w	8006b2c <_malloc_r>
 8007346:	b92a      	cbnz	r2, 8007354 <_realloc_r+0x24>
 8007348:	f7ff fb88 	bl	8006a5c <_free_r>
 800734c:	4625      	mov	r5, r4
 800734e:	4628      	mov	r0, r5
 8007350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007354:	f000 f81b 	bl	800738e <_malloc_usable_size_r>
 8007358:	4284      	cmp	r4, r0
 800735a:	4607      	mov	r7, r0
 800735c:	d802      	bhi.n	8007364 <_realloc_r+0x34>
 800735e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007362:	d812      	bhi.n	800738a <_realloc_r+0x5a>
 8007364:	4621      	mov	r1, r4
 8007366:	4640      	mov	r0, r8
 8007368:	f7ff fbe0 	bl	8006b2c <_malloc_r>
 800736c:	4605      	mov	r5, r0
 800736e:	2800      	cmp	r0, #0
 8007370:	d0ed      	beq.n	800734e <_realloc_r+0x1e>
 8007372:	42bc      	cmp	r4, r7
 8007374:	4622      	mov	r2, r4
 8007376:	4631      	mov	r1, r6
 8007378:	bf28      	it	cs
 800737a:	463a      	movcs	r2, r7
 800737c:	f7ff ffb0 	bl	80072e0 <memcpy>
 8007380:	4631      	mov	r1, r6
 8007382:	4640      	mov	r0, r8
 8007384:	f7ff fb6a 	bl	8006a5c <_free_r>
 8007388:	e7e1      	b.n	800734e <_realloc_r+0x1e>
 800738a:	4635      	mov	r5, r6
 800738c:	e7df      	b.n	800734e <_realloc_r+0x1e>

0800738e <_malloc_usable_size_r>:
 800738e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007392:	1f18      	subs	r0, r3, #4
 8007394:	2b00      	cmp	r3, #0
 8007396:	bfbc      	itt	lt
 8007398:	580b      	ldrlt	r3, [r1, r0]
 800739a:	18c0      	addlt	r0, r0, r3
 800739c:	4770      	bx	lr
	...

080073a0 <_init>:
 80073a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a2:	bf00      	nop
 80073a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a6:	bc08      	pop	{r3}
 80073a8:	469e      	mov	lr, r3
 80073aa:	4770      	bx	lr

080073ac <_fini>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	bf00      	nop
 80073b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b2:	bc08      	pop	{r3}
 80073b4:	469e      	mov	lr, r3
 80073b6:	4770      	bx	lr
