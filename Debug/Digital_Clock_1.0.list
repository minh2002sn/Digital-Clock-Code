
Digital_Clock_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009258  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08009368  08009368  00019368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095ac  080095ac  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  080095ac  080095ac  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095ac  080095ac  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095ac  080095ac  000195ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095b0  080095b0  000195b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080095b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000100  080096b0  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  080096b0  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af54  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c9b  00000000  00000000  0003b079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  0003fd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001658  00000000  00000000  00041548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d599  00000000  00000000  00042ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000219f9  00000000  00000000  00060139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000964d1  00000000  00000000  00081b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118003  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006650  00000000  00000000  00118054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000100 	.word	0x20000100
 800012c:	00000000 	.word	0x00000000
 8000130:	08009350 	.word	0x08009350

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000104 	.word	0x20000104
 800014c:	08009350 	.word	0x08009350

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_f2uiz>:
 80009dc:	0042      	lsls	r2, r0, #1
 80009de:	d20e      	bcs.n	80009fe <__aeabi_f2uiz+0x22>
 80009e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009e4:	d30b      	bcc.n	80009fe <__aeabi_f2uiz+0x22>
 80009e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009ee:	d409      	bmi.n	8000a04 <__aeabi_f2uiz+0x28>
 80009f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f8:	fa23 f002 	lsr.w	r0, r3, r2
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr
 8000a04:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a08:	d101      	bne.n	8000a0e <__aeabi_f2uiz+0x32>
 8000a0a:	0242      	lsls	r2, r0, #9
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_f2uiz+0x38>
 8000a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__buzzer_on>:
#define BUZZER_SHORT_CYCLE		100
#define BUZZER_LONG_CYCLE		500

ALARM_DATA_t ALARM_Data;

static void __buzzer_on(){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ALARM_Data.buzzer_port, ALARM_Data.buzzer_pin, 1);
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__buzzer_on+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	4a03      	ldr	r2, [pc, #12]	; (8000a34 <__buzzer_on+0x18>)
 8000a26:	8a11      	ldrh	r1, [r2, #16]
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 feaf 	bl	800478e <HAL_GPIO_WritePin>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000011c 	.word	0x2000011c

08000a38 <__buzzer_off>:

static void __buzzer_off(){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ALARM_Data.buzzer_port, ALARM_Data.buzzer_pin, 0);
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__buzzer_off+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	4a03      	ldr	r2, [pc, #12]	; (8000a50 <__buzzer_off+0x18>)
 8000a42:	8a11      	ldrh	r1, [r2, #16]
 8000a44:	2200      	movs	r2, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 fea1 	bl	800478e <HAL_GPIO_WritePin>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000011c 	.word	0x2000011c

08000a54 <__finding_next_timeline>:

static void __finding_next_timeline(){
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
	if(TIMELINE_Data.len != 0){
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <__finding_next_timeline+0xb4>)
 8000a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d04c      	beq.n	8000afe <__finding_next_timeline+0xaa>
		for(int i = 0; i < TIMELINE_Data.len; i++){
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	e042      	b.n	8000af0 <__finding_next_timeline+0x9c>
			if(TIMELINE_Data.flash_data[i].timeline_state == TIMELINE_OFF) continue;
 8000a6a:	4a27      	ldr	r2, [pc, #156]	; (8000b08 <__finding_next_timeline+0xb4>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	79db      	ldrb	r3, [r3, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d037      	beq.n	8000ae8 <__finding_next_timeline+0x94>
			uint8_t t_system_time = REALTIME_Data.system_hour * 60 + REALTIME_Data.system_minute;
 8000a78:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <__finding_next_timeline+0xb8>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <__finding_next_timeline+0xb8>)
 8000a88:	785b      	ldrb	r3, [r3, #1]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	70fb      	strb	r3, [r7, #3]
			uint8_t t_alarm_time = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 8000a8e:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <__finding_next_timeline+0xb4>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	791b      	ldrb	r3, [r3, #4]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4919      	ldr	r1, [pc, #100]	; (8000b08 <__finding_next_timeline+0xb4>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	795b      	ldrb	r3, [r3, #5]
 8000aac:	4413      	add	r3, r2
 8000aae:	70bb      	strb	r3, [r7, #2]
			if(t_system_time < t_alarm_time && ((0x01 << (REALTIME_Data.system_day - 1)) & TIMELINE_Data.flash_data[i].day) != 0){
 8000ab0:	78fa      	ldrb	r2, [r7, #3]
 8000ab2:	78bb      	ldrb	r3, [r7, #2]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d218      	bcs.n	8000aea <__finding_next_timeline+0x96>
 8000ab8:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <__finding_next_timeline+0xb4>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	799b      	ldrb	r3, [r3, #6]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <__finding_next_timeline+0xb8>)
 8000ac6:	789b      	ldrb	r3, [r3, #2]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	fa42 f303 	asr.w	r3, r2, r3
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d009      	beq.n	8000aea <__finding_next_timeline+0x96>
				ALARM_Data.next_timeline_index = i;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <__finding_next_timeline+0xbc>)
 8000adc:	705a      	strb	r2, [r3, #1]
				ALARM_Data.state = WAITING_FOR_TIMELINE;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <__finding_next_timeline+0xbc>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
				break;
 8000ae4:	bf00      	nop
			}
		}
	}
}
 8000ae6:	e00a      	b.n	8000afe <__finding_next_timeline+0xaa>
			if(TIMELINE_Data.flash_data[i].timeline_state == TIMELINE_OFF) continue;
 8000ae8:	bf00      	nop
		for(int i = 0; i < TIMELINE_Data.len; i++){
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3301      	adds	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <__finding_next_timeline+0xb4>)
 8000af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000af6:	461a      	mov	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4293      	cmp	r3, r2
 8000afc:	dbb5      	blt.n	8000a6a <__finding_next_timeline+0x16>
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	20000164 	.word	0x20000164
 8000b0c:	200001b0 	.word	0x200001b0
 8000b10:	2000011c 	.word	0x2000011c

08000b14 <__waiting_for_timeline>:

static void __waiting_for_timeline(){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
	uint8_t t_system_time = REALTIME_Data.system_hour * 60 + REALTIME_Data.system_minute;
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <__waiting_for_timeline+0x84>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <__waiting_for_timeline+0x84>)
 8000b2a:	785b      	ldrb	r3, [r3, #1]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	71fb      	strb	r3, [r7, #7]
	uint8_t t_alarm_time = TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].hour * 60 + TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].minute;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <__waiting_for_timeline+0x88>)
 8000b32:	785b      	ldrb	r3, [r3, #1]
 8000b34:	4a1a      	ldr	r2, [pc, #104]	; (8000ba0 <__waiting_for_timeline+0x8c>)
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4413      	add	r3, r2
 8000b3a:	791b      	ldrb	r3, [r3, #4]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <__waiting_for_timeline+0x88>)
 8000b48:	785b      	ldrb	r3, [r3, #1]
 8000b4a:	4915      	ldr	r1, [pc, #84]	; (8000ba0 <__waiting_for_timeline+0x8c>)
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	440b      	add	r3, r1
 8000b50:	795b      	ldrb	r3, [r3, #5]
 8000b52:	4413      	add	r3, r2
 8000b54:	71bb      	strb	r3, [r7, #6]
	if(TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].timeline_state == TIMELINE_OFF){
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <__waiting_for_timeline+0x88>)
 8000b58:	785b      	ldrb	r3, [r3, #1]
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <__waiting_for_timeline+0x8c>)
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	79db      	ldrb	r3, [r3, #7]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d103      	bne.n	8000b6e <__waiting_for_timeline+0x5a>
		ALARM_Data.state = FINDING_NEXT_TIMELINE;
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <__waiting_for_timeline+0x88>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
		return;
 8000b6c:	e010      	b.n	8000b90 <__waiting_for_timeline+0x7c>
	}
	if(t_system_time == t_alarm_time){
 8000b6e:	79fa      	ldrb	r2, [r7, #7]
 8000b70:	79bb      	ldrb	r3, [r7, #6]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d10c      	bne.n	8000b90 <__waiting_for_timeline+0x7c>
		ALARM_Data.state = ALARM_RUNNING;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <__waiting_for_timeline+0x88>)
 8000b78:	2202      	movs	r2, #2
 8000b7a:	701a      	strb	r2, [r3, #0]
		ALARM_Data.buzzer_running_timer = HAL_GetTick();
 8000b7c:	f002 fc7e 	bl	800347c <HAL_GetTick>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <__waiting_for_timeline+0x88>)
 8000b84:	6053      	str	r3, [r2, #4]
		ALARM_Data.buzzer_cycle_timer = HAL_GetTick();
 8000b86:	f002 fc79 	bl	800347c <HAL_GetTick>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <__waiting_for_timeline+0x88>)
 8000b8e:	6093      	str	r3, [r2, #8]
	}
}
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200001b0 	.word	0x200001b0
 8000b9c:	2000011c 	.word	0x2000011c
 8000ba0:	20000164 	.word	0x20000164

08000ba4 <__alarm_running>:

static void __alarm_running(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	static uint8_t buzzer_counter = 0;
	if(HAL_GetTick() - ALARM_Data.buzzer_running_timer < BUZZER_RUNNING_TIME){
 8000ba8:	f002 fc68 	bl	800347c <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <__alarm_running+0x9c>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d83a      	bhi.n	8000c32 <__alarm_running+0x8e>
		if(buzzer_counter <= 2){
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <__alarm_running+0xa0>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d81e      	bhi.n	8000c02 <__alarm_running+0x5e>
			if(buzzer_counter % 2 == 0)
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <__alarm_running+0xa0>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d102      	bne.n	8000bd8 <__alarm_running+0x34>
				__buzzer_on();
 8000bd2:	f7ff ff23 	bl	8000a1c <__buzzer_on>
 8000bd6:	e001      	b.n	8000bdc <__alarm_running+0x38>
			else
				__buzzer_off();
 8000bd8:	f7ff ff2e 	bl	8000a38 <__buzzer_off>
			if(HAL_GetTick() - ALARM_Data.buzzer_cycle_timer >= BUZZER_SHORT_CYCLE){
 8000bdc:	f002 fc4e 	bl	800347c <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <__alarm_running+0x9c>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	2b63      	cmp	r3, #99	; 0x63
 8000bea:	d90a      	bls.n	8000c02 <__alarm_running+0x5e>
				buzzer_counter++;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <__alarm_running+0xa0>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <__alarm_running+0xa0>)
 8000bf6:	701a      	strb	r2, [r3, #0]
				ALARM_Data.buzzer_cycle_timer = HAL_GetTick();
 8000bf8:	f002 fc40 	bl	800347c <HAL_GetTick>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <__alarm_running+0x9c>)
 8000c00:	6093      	str	r3, [r2, #8]
			}
		}

		if(buzzer_counter == 3){
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <__alarm_running+0xa0>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d118      	bne.n	8000c3c <__alarm_running+0x98>
			__buzzer_off();
 8000c0a:	f7ff ff15 	bl	8000a38 <__buzzer_off>
			if(HAL_GetTick() - ALARM_Data.buzzer_cycle_timer >= BUZZER_LONG_CYCLE){
 8000c0e:	f002 fc35 	bl	800347c <HAL_GetTick>
 8000c12:	4602      	mov	r2, r0
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <__alarm_running+0x9c>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c1e:	d30d      	bcc.n	8000c3c <__alarm_running+0x98>
				buzzer_counter = 0;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <__alarm_running+0xa0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
				ALARM_Data.buzzer_cycle_timer = HAL_GetTick();
 8000c26:	f002 fc29 	bl	800347c <HAL_GetTick>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <__alarm_running+0x9c>)
 8000c2e:	6093      	str	r3, [r2, #8]
		}
	} else{
		ALARM_Data.state = FINDING_NEXT_TIMELINE;
		__buzzer_off();
	}
}
 8000c30:	e004      	b.n	8000c3c <__alarm_running+0x98>
		ALARM_Data.state = FINDING_NEXT_TIMELINE;
 8000c32:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <__alarm_running+0x9c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
		__buzzer_off();
 8000c38:	f7ff fefe 	bl	8000a38 <__buzzer_off>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000011c 	.word	0x2000011c
 8000c44:	20000130 	.word	0x20000130

08000c48 <ALARM_Init>:

void ALARM_Init(GPIO_TypeDef *p_buzzer_port, uint16_t p_buzzer_pin){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
	ALARM_Data.state = FINDING_NEXT_TIMELINE;
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <ALARM_Init+0x2c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
	ALARM_Data.buzzer_port = p_buzzer_port;
 8000c5a:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <ALARM_Init+0x2c>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	60d3      	str	r3, [r2, #12]
	ALARM_Data.buzzer_pin = p_buzzer_pin;
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <ALARM_Init+0x2c>)
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	8213      	strh	r3, [r2, #16]
	__buzzer_off();
 8000c66:	f7ff fee7 	bl	8000a38 <__buzzer_off>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000011c 	.word	0x2000011c

08000c78 <ALARM_Handle>:

void ALARM_Handle(){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	switch(ALARM_Data.state){
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <ALARM_Handle+0x34>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d00c      	beq.n	8000c9e <ALARM_Handle+0x26>
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	dc0d      	bgt.n	8000ca4 <ALARM_Handle+0x2c>
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <ALARM_Handle+0x1a>
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d003      	beq.n	8000c98 <ALARM_Handle+0x20>
			break;
		case ALARM_RUNNING:
			__alarm_running();
			break;
		default:
			break;
 8000c90:	e008      	b.n	8000ca4 <ALARM_Handle+0x2c>
			__finding_next_timeline();
 8000c92:	f7ff fedf 	bl	8000a54 <__finding_next_timeline>
			break;
 8000c96:	e006      	b.n	8000ca6 <ALARM_Handle+0x2e>
			__waiting_for_timeline();
 8000c98:	f7ff ff3c 	bl	8000b14 <__waiting_for_timeline>
			break;
 8000c9c:	e003      	b.n	8000ca6 <ALARM_Handle+0x2e>
			__alarm_running();
 8000c9e:	f7ff ff81 	bl	8000ba4 <__alarm_running>
			break;
 8000ca2:	e000      	b.n	8000ca6 <ALARM_Handle+0x2e>
			break;
 8000ca4:	bf00      	nop
	}
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000011c 	.word	0x2000011c

08000cb0 <ALARM_Stop_Buzzer>:

void ALARM_Stop_Buzzer(){
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
	if(ALARM_Data.state == ALARM_RUNNING){
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <ALARM_Stop_Buzzer+0x1c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d102      	bne.n	8000cc2 <ALARM_Stop_Buzzer+0x12>
		ALARM_Data.state = FINDING_NEXT_TIMELINE;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <ALARM_Stop_Buzzer+0x1c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
	}
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	2000011c 	.word	0x2000011c

08000cd0 <ALARM_Is_Buzzer_Running>:

uint8_t ALARM_Is_Buzzer_Running(){
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	return (ALARM_Data.state == ALARM_RUNNING) ? 1 : 0;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <ALARM_Is_Buzzer_Running+0x1c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	bf0c      	ite	eq
 8000cdc:	2301      	moveq	r3, #1
 8000cde:	2300      	movne	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	2000011c 	.word	0x2000011c

08000cf0 <HAL_ADC_ConvCpltCallback>:

extern ADC_HandleTypeDef hadc1;

BATTERY_LEVEL_DATA_t BATTERY_LEVEL_Data;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance){
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b34      	ldr	r3, [pc, #208]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d157      	bne.n	8000db4 <HAL_ADC_ConvCpltCallback+0xc4>
		BATTERY_LEVEL_Data.ADC_Value = HAL_ADC_GetValue(&hadc1);
 8000d04:	4832      	ldr	r0, [pc, #200]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000d06:	f002 fd75 	bl	80037f4 <HAL_ADC_GetValue>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a31      	ldr	r2, [pc, #196]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000d0e:	6093      	str	r3, [r2, #8]
		BATTERY_LEVEL_Data.batterry_voltage = BATTERY_LEVEL_Data.ADC_Value * 3.3 / 4096.0 * 3.5;
 8000d10:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fb65 	bl	80003e4 <__aeabi_ui2d>
 8000d1a:	a329      	add	r3, pc, #164	; (adr r3, 8000dc0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d20:	f7ff fbda 	bl	80004d8 <__aeabi_dmul>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f04f 0200 	mov.w	r2, #0
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000d32:	f7ff fcfb 	bl	800072c <__aeabi_ddiv>
 8000d36:	4602      	mov	r2, r0
 8000d38:	460b      	mov	r3, r1
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <HAL_ADC_ConvCpltCallback+0xec>)
 8000d44:	f7ff fbc8 	bl	80004d8 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f7ff fdf4 	bl	800093c <__aeabi_d2f>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4a1f      	ldr	r2, [pc, #124]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000d58:	6013      	str	r3, [r2, #0]
		BATTERY_LEVEL_Data.battery_level = (BATTERY_LEVEL_Data.batterry_voltage - 7.2) * 100.0 / 1.2;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fb62 	bl	8000428 <__aeabi_f2d>
 8000d64:	a318      	add	r3, pc, #96	; (adr r3, 8000dc8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6a:	f7ff f9fd 	bl	8000168 <__aeabi_dsub>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	460b      	mov	r3, r1
 8000d72:	4610      	mov	r0, r2
 8000d74:	4619      	mov	r1, r3
 8000d76:	f04f 0200 	mov.w	r2, #0
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_ADC_ConvCpltCallback+0xf0>)
 8000d7c:	f7ff fbac 	bl	80004d8 <__aeabi_dmul>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	4610      	mov	r0, r2
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_ADC_ConvCpltCallback+0xf4>)
 8000d8e:	f7ff fccd 	bl	800072c <__aeabi_ddiv>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4610      	mov	r0, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f7ff fdaf 	bl	80008fc <__aeabi_d2uiz>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000da4:	711a      	strb	r2, [r3, #4]
		if(BATTERY_LEVEL_Data.battery_level > 100)
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000da8:	791b      	ldrb	r3, [r3, #4]
 8000daa:	2b64      	cmp	r3, #100	; 0x64
 8000dac:	d902      	bls.n	8000db4 <HAL_ADC_ConvCpltCallback+0xc4>
			BATTERY_LEVEL_Data.battery_level = 100;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000db0:	2264      	movs	r2, #100	; 0x64
 8000db2:	711a      	strb	r2, [r3, #4]
	}
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	f3af 8000 	nop.w
 8000dc0:	66666666 	.word	0x66666666
 8000dc4:	400a6666 	.word	0x400a6666
 8000dc8:	cccccccd 	.word	0xcccccccd
 8000dcc:	401ccccc 	.word	0x401ccccc
 8000dd0:	200001f0 	.word	0x200001f0
 8000dd4:	20000134 	.word	0x20000134
 8000dd8:	40b00000 	.word	0x40b00000
 8000ddc:	400c0000 	.word	0x400c0000
 8000de0:	40590000 	.word	0x40590000
 8000de4:	3ff33333 	.word	0x3ff33333

08000de8 <BATTERY_LEVEL_Init>:

void BATTERY_LEVEL_Init(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	BATTERY_LEVEL_Data.batterry_voltage = 0.0;
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <BATTERY_LEVEL_Init+0x24>)
 8000dee:	f04f 0200 	mov.w	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
	BATTERY_LEVEL_Data.battery_level = 100;
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <BATTERY_LEVEL_Init+0x24>)
 8000df6:	2264      	movs	r2, #100	; 0x64
 8000df8:	711a      	strb	r2, [r3, #4]
	BATTERY_LEVEL_Data.ADC_Value = 0;
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <BATTERY_LEVEL_Init+0x24>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
	HAL_ADC_Start_IT(&hadc1);
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <BATTERY_LEVEL_Init+0x28>)
 8000e02:	f002 fc41 	bl	8003688 <HAL_ADC_Start_IT>
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000134 	.word	0x20000134
 8000e10:	200001f0 	.word	0x200001f0

08000e14 <BATTERY_LEVEL_Handle>:

void BATTERY_LEVEL_Handle(){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	static uint32_t adc_conversion_timer = 0;
	if(HAL_GetTick() - adc_conversion_timer > 10000){
 8000e18:	f002 fb30 	bl	800347c <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <BATTERY_LEVEL_Handle+0x2c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d907      	bls.n	8000e3c <BATTERY_LEVEL_Handle+0x28>
		HAL_ADC_Start_IT(&hadc1);
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <BATTERY_LEVEL_Handle+0x30>)
 8000e2e:	f002 fc2b 	bl	8003688 <HAL_ADC_Start_IT>
		adc_conversion_timer = HAL_GetTick();
 8000e32:	f002 fb23 	bl	800347c <HAL_GetTick>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4a01      	ldr	r2, [pc, #4]	; (8000e40 <BATTERY_LEVEL_Handle+0x2c>)
 8000e3a:	6013      	str	r3, [r2, #0]
	}
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000140 	.word	0x20000140
 8000e44:	200001f0 	.word	0x200001f0

08000e48 <BTN_Short_Pressing_Callback>:

BUTTON_HandleTypedef h_encoder_button;
ENCODER_HandleTypeDef h_encoder;
extern TIM_HandleTypeDef htim2;

void BTN_Short_Pressing_Callback(BUTTON_HandleTypedef *p_ButtonX){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	if(p_ButtonX == &h_encoder_button){
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a2a      	ldr	r2, [pc, #168]	; (8000efc <BTN_Short_Pressing_Callback+0xb4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d107      	bne.n	8000e68 <BTN_Short_Pressing_Callback+0x20>
		if(ALARM_Is_Buzzer_Running()){
 8000e58:	f7ff ff3a 	bl	8000cd0 <ALARM_Is_Buzzer_Running>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <BTN_Short_Pressing_Callback+0x20>
			ALARM_Stop_Buzzer();
 8000e62:	f7ff ff25 	bl	8000cb0 <ALARM_Stop_Buzzer>
			return;
 8000e66:	e046      	b.n	8000ef6 <BTN_Short_Pressing_Callback+0xae>
		}
	}

	if(p_ButtonX == &h_encoder_button){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a24      	ldr	r2, [pc, #144]	; (8000efc <BTN_Short_Pressing_Callback+0xb4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d142      	bne.n	8000ef6 <BTN_Short_Pressing_Callback+0xae>
		switch(MENU_Data.menu_type){
 8000e70:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <BTN_Short_Pressing_Callback+0xb8>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d83b      	bhi.n	8000ef0 <BTN_Short_Pressing_Callback+0xa8>
 8000e78:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <BTN_Short_Pressing_Callback+0x38>)
 8000e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7e:	bf00      	nop
 8000e80:	08000e95 	.word	0x08000e95
 8000e84:	08000e9b 	.word	0x08000e9b
 8000e88:	08000ecb 	.word	0x08000ecb
 8000e8c:	08000ed3 	.word	0x08000ed3
 8000e90:	08000ee9 	.word	0x08000ee9
			case MAIN_MENU:
				SETTING_MENU_Set_State();
 8000e94:	f000 fe44 	bl	8001b20 <SETTING_MENU_Set_State>
				break;
 8000e98:	e02d      	b.n	8000ef6 <BTN_Short_Pressing_Callback+0xae>
			case SETTING_MENU:
				if(SETTING_MENU_Data.current_pointer == 0){
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <BTN_Short_Pressing_Callback+0xbc>)
 8000e9c:	f993 3000 	ldrsb.w	r3, [r3]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <BTN_Short_Pressing_Callback+0x62>
					SETTING_MENU_Change_Working_State();
 8000ea4:	f000 fea6 	bl	8001bf4 <SETTING_MENU_Change_Working_State>
				} else if(SETTING_MENU_Data.current_pointer == 1){
					TL_MENU_Set_State();
				} else if(SETTING_MENU_Data.current_pointer == 2){
					SR_MENU_Set_State();
				}
				break;
 8000ea8:	e024      	b.n	8000ef4 <BTN_Short_Pressing_Callback+0xac>
				} else if(SETTING_MENU_Data.current_pointer == 1){
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <BTN_Short_Pressing_Callback+0xbc>)
 8000eac:	f993 3000 	ldrsb.w	r3, [r3]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d102      	bne.n	8000eba <BTN_Short_Pressing_Callback+0x72>
					TL_MENU_Set_State();
 8000eb4:	f001 fb0e 	bl	80024d4 <TL_MENU_Set_State>
				break;
 8000eb8:	e01c      	b.n	8000ef4 <BTN_Short_Pressing_Callback+0xac>
				} else if(SETTING_MENU_Data.current_pointer == 2){
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <BTN_Short_Pressing_Callback+0xbc>)
 8000ebc:	f993 3000 	ldrsb.w	r3, [r3]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d117      	bne.n	8000ef4 <BTN_Short_Pressing_Callback+0xac>
					SR_MENU_Set_State();
 8000ec4:	f000 ff5c 	bl	8001d80 <SR_MENU_Set_State>
				break;
 8000ec8:	e014      	b.n	8000ef4 <BTN_Short_Pressing_Callback+0xac>
			case SETTING_REALTIME_MENU:
				SR_MENU_Change_Setting_State(INCREASE);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f000 ff7c 	bl	8001dc8 <SR_MENU_Change_Setting_State>
				break;
 8000ed0:	e011      	b.n	8000ef6 <BTN_Short_Pressing_Callback+0xae>
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.current_pointer == 0){
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <BTN_Short_Pressing_Callback+0xc0>)
 8000ed4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <BTN_Short_Pressing_Callback+0x9a>
					ST_MENU_Set_State();
 8000edc:	f001 f912 	bl	8002104 <ST_MENU_Set_State>
				} else{
					TL_MENU_Change_Working_State();
				}
				break;
 8000ee0:	e009      	b.n	8000ef6 <BTN_Short_Pressing_Callback+0xae>
					TL_MENU_Change_Working_State();
 8000ee2:	f001 fb1d 	bl	8002520 <TL_MENU_Change_Working_State>
				break;
 8000ee6:	e006      	b.n	8000ef6 <BTN_Short_Pressing_Callback+0xae>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Change_Setting_State(INCREASE);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f001 f933 	bl	8002154 <ST_MENU_Change_Setting_State>
				break;
 8000eee:	e002      	b.n	8000ef6 <BTN_Short_Pressing_Callback+0xae>
			default:
				break;
 8000ef0:	bf00      	nop
 8000ef2:	e000      	b.n	8000ef6 <BTN_Short_Pressing_Callback+0xae>
				break;
 8000ef4:	bf00      	nop
		}
	}
}
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000144 	.word	0x20000144
 8000f00:	200001c0 	.word	0x200001c0
 8000f04:	200001d4 	.word	0x200001d4
 8000f08:	200001e8 	.word	0x200001e8

08000f0c <BTN_Long_Pressing_Callback>:

void BTN_Long_Pressing_Callback(BUTTON_HandleTypedef *p_ButtonX){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	if(p_ButtonX == &h_encoder_button){
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <BTN_Long_Pressing_Callback+0x8c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d107      	bne.n	8000f2c <BTN_Long_Pressing_Callback+0x20>
		if(ALARM_Is_Buzzer_Running()){
 8000f1c:	f7ff fed8 	bl	8000cd0 <ALARM_Is_Buzzer_Running>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <BTN_Long_Pressing_Callback+0x20>
			ALARM_Stop_Buzzer();
 8000f26:	f7ff fec3 	bl	8000cb0 <ALARM_Stop_Buzzer>
			return;
 8000f2a:	e032      	b.n	8000f92 <BTN_Long_Pressing_Callback+0x86>
		}
	}

	if(p_ButtonX == &h_encoder_button){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <BTN_Long_Pressing_Callback+0x8c>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d12e      	bne.n	8000f92 <BTN_Long_Pressing_Callback+0x86>
		switch(MENU_Data.menu_type){
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <BTN_Long_Pressing_Callback+0x90>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d829      	bhi.n	8000f90 <BTN_Long_Pressing_Callback+0x84>
 8000f3c:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <BTN_Long_Pressing_Callback+0x38>)
 8000f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f42:	bf00      	nop
 8000f44:	08000f91 	.word	0x08000f91
 8000f48:	08000f59 	.word	0x08000f59
 8000f4c:	08000f6d 	.word	0x08000f6d
 8000f50:	08000f75 	.word	0x08000f75
 8000f54:	08000f89 	.word	0x08000f89
			case MAIN_MENU:

				break;
			case SETTING_MENU:
				if(SETTING_MENU_Data.is_setting_time_format == 1){
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <BTN_Long_Pressing_Callback+0x94>)
 8000f5a:	785b      	ldrb	r3, [r3, #1]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d102      	bne.n	8000f66 <BTN_Long_Pressing_Callback+0x5a>
					SETTING_MENU_Change_Working_State();
 8000f60:	f000 fe48 	bl	8001bf4 <SETTING_MENU_Change_Working_State>
				} else{
					MAIN_MENU_Set_State();
				}
				break;
 8000f64:	e015      	b.n	8000f92 <BTN_Long_Pressing_Callback+0x86>
					MAIN_MENU_Set_State();
 8000f66:	f000 fd49 	bl	80019fc <MAIN_MENU_Set_State>
				break;
 8000f6a:	e012      	b.n	8000f92 <BTN_Long_Pressing_Callback+0x86>
			case SETTING_REALTIME_MENU:
				SR_MENU_Change_Setting_State(DECREASE);
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f000 ff2b 	bl	8001dc8 <SR_MENU_Change_Setting_State>
				break;
 8000f72:	e00e      	b.n	8000f92 <BTN_Long_Pressing_Callback+0x86>
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.woking_state == NORMAL_STATE){
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <BTN_Long_Pressing_Callback+0x98>)
 8000f76:	78db      	ldrb	r3, [r3, #3]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <BTN_Long_Pressing_Callback+0x76>
					SETTING_MENU_Set_State();
 8000f7c:	f000 fdd0 	bl	8001b20 <SETTING_MENU_Set_State>
				} else{
					TL_MENU_Change_Working_State();
				}
				break;
 8000f80:	e007      	b.n	8000f92 <BTN_Long_Pressing_Callback+0x86>
					TL_MENU_Change_Working_State();
 8000f82:	f001 facd 	bl	8002520 <TL_MENU_Change_Working_State>
				break;
 8000f86:	e004      	b.n	8000f92 <BTN_Long_Pressing_Callback+0x86>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Change_Setting_State(DECREASE);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f001 f8e3 	bl	8002154 <ST_MENU_Change_Setting_State>
				break;
 8000f8e:	e000      	b.n	8000f92 <BTN_Long_Pressing_Callback+0x86>
			default:
				break;
 8000f90:	bf00      	nop
		}
	}
}
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000144 	.word	0x20000144
 8000f9c:	200001c0 	.word	0x200001c0
 8000fa0:	200001d4 	.word	0x200001d4
 8000fa4:	200001e8 	.word	0x200001e8

08000fa8 <ENCODER_Forward_Callback>:

void ENCODER_Forward_Callback(ENCODER_HandleTypeDef *p_encoder){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	if(p_encoder == &h_encoder){
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <ENCODER_Forward_Callback+0x80>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d130      	bne.n	800101a <ENCODER_Forward_Callback+0x72>
		switch(MENU_Data.menu_type){
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <ENCODER_Forward_Callback+0x84>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d82e      	bhi.n	800101e <ENCODER_Forward_Callback+0x76>
 8000fc0:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <ENCODER_Forward_Callback+0x20>)
 8000fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc6:	bf00      	nop
 8000fc8:	0800101f 	.word	0x0800101f
 8000fcc:	08000fdd 	.word	0x08000fdd
 8000fd0:	08000ff3 	.word	0x08000ff3
 8000fd4:	08000ffb 	.word	0x08000ffb
 8000fd8:	08001013 	.word	0x08001013
			case MAIN_MENU:

				break;
			case SETTING_MENU:
				if(SETTING_MENU_Data.is_setting_time_format == 1){
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <ENCODER_Forward_Callback+0x88>)
 8000fde:	785b      	ldrb	r3, [r3, #1]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d102      	bne.n	8000fea <ENCODER_Forward_Callback+0x42>
					SETTING_MENU_Config_Time_Format();
 8000fe4:	f000 fdb6 	bl	8001b54 <SETTING_MENU_Config_Time_Format>
				} else{
					SETTING_MENU_Change_Pointer(INCREASE);
				}
				break;
 8000fe8:	e01a      	b.n	8001020 <ENCODER_Forward_Callback+0x78>
					SETTING_MENU_Change_Pointer(INCREASE);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 fdce 	bl	8001b8c <SETTING_MENU_Change_Pointer>
				break;
 8000ff0:	e016      	b.n	8001020 <ENCODER_Forward_Callback+0x78>
			case SETTING_REALTIME_MENU:
				SR_MENU_Set_Value(INCREASE);
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f000 ff1e 	bl	8001e34 <SR_MENU_Set_Value>
				break;
 8000ff8:	e012      	b.n	8001020 <ENCODER_Forward_Callback+0x78>
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.woking_state == NORMAL_STATE)
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <ENCODER_Forward_Callback+0x8c>)
 8000ffc:	78db      	ldrb	r3, [r3, #3]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d103      	bne.n	800100a <ENCODER_Forward_Callback+0x62>
					TL_MENU_Change_Pointer(INCREASE);
 8001002:	2001      	movs	r0, #1
 8001004:	f001 faec 	bl	80025e0 <TL_MENU_Change_Pointer>
				else
					TL_MENU_Config_Timeline(INCREASE);
				break;
 8001008:	e00a      	b.n	8001020 <ENCODER_Forward_Callback+0x78>
					TL_MENU_Config_Timeline(INCREASE);
 800100a:	2001      	movs	r0, #1
 800100c:	f001 fb42 	bl	8002694 <TL_MENU_Config_Timeline>
				break;
 8001010:	e006      	b.n	8001020 <ENCODER_Forward_Callback+0x78>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Set_Value(INCREASE);
 8001012:	2001      	movs	r0, #1
 8001014:	f001 f8e0 	bl	80021d8 <ST_MENU_Set_Value>
				break;
 8001018:	e002      	b.n	8001020 <ENCODER_Forward_Callback+0x78>
			default:
				break;
		}
	}
 800101a:	bf00      	nop
 800101c:	e000      	b.n	8001020 <ENCODER_Forward_Callback+0x78>
				break;
 800101e:	bf00      	nop
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2000015c 	.word	0x2000015c
 800102c:	200001c0 	.word	0x200001c0
 8001030:	200001d4 	.word	0x200001d4
 8001034:	200001e8 	.word	0x200001e8

08001038 <ENCODER_Backward_Callback>:

void ENCODER_Backward_Callback(ENCODER_HandleTypeDef *p_encoder){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	if(p_encoder == &h_encoder){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <ENCODER_Backward_Callback+0x80>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d130      	bne.n	80010aa <ENCODER_Backward_Callback+0x72>
		switch(MENU_Data.menu_type){
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <ENCODER_Backward_Callback+0x84>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b04      	cmp	r3, #4
 800104e:	d82e      	bhi.n	80010ae <ENCODER_Backward_Callback+0x76>
 8001050:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <ENCODER_Backward_Callback+0x20>)
 8001052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001056:	bf00      	nop
 8001058:	080010af 	.word	0x080010af
 800105c:	0800106d 	.word	0x0800106d
 8001060:	08001083 	.word	0x08001083
 8001064:	0800108b 	.word	0x0800108b
 8001068:	080010a3 	.word	0x080010a3
			case MAIN_MENU:

				break;
			case SETTING_MENU:
				if(SETTING_MENU_Data.is_setting_time_format == 1){
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <ENCODER_Backward_Callback+0x88>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d102      	bne.n	800107a <ENCODER_Backward_Callback+0x42>
					SETTING_MENU_Config_Time_Format();
 8001074:	f000 fd6e 	bl	8001b54 <SETTING_MENU_Config_Time_Format>
				} else{
					SETTING_MENU_Change_Pointer(DECREASE);
				}
				break;
 8001078:	e01a      	b.n	80010b0 <ENCODER_Backward_Callback+0x78>
					SETTING_MENU_Change_Pointer(DECREASE);
 800107a:	2000      	movs	r0, #0
 800107c:	f000 fd86 	bl	8001b8c <SETTING_MENU_Change_Pointer>
				break;
 8001080:	e016      	b.n	80010b0 <ENCODER_Backward_Callback+0x78>
			case SETTING_REALTIME_MENU:
				SR_MENU_Set_Value(DECREASE);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 fed6 	bl	8001e34 <SR_MENU_Set_Value>
				break;
 8001088:	e012      	b.n	80010b0 <ENCODER_Backward_Callback+0x78>
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.woking_state == NORMAL_STATE)
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <ENCODER_Backward_Callback+0x8c>)
 800108c:	78db      	ldrb	r3, [r3, #3]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d103      	bne.n	800109a <ENCODER_Backward_Callback+0x62>
					TL_MENU_Change_Pointer(DECREASE);
 8001092:	2000      	movs	r0, #0
 8001094:	f001 faa4 	bl	80025e0 <TL_MENU_Change_Pointer>
				else
					TL_MENU_Config_Timeline(DECREASE);
				break;
 8001098:	e00a      	b.n	80010b0 <ENCODER_Backward_Callback+0x78>
					TL_MENU_Config_Timeline(DECREASE);
 800109a:	2000      	movs	r0, #0
 800109c:	f001 fafa 	bl	8002694 <TL_MENU_Config_Timeline>
				break;
 80010a0:	e006      	b.n	80010b0 <ENCODER_Backward_Callback+0x78>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Set_Value(DECREASE);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f001 f898 	bl	80021d8 <ST_MENU_Set_Value>
				break;
 80010a8:	e002      	b.n	80010b0 <ENCODER_Backward_Callback+0x78>
			default:
				break;
		}
	}
 80010aa:	bf00      	nop
 80010ac:	e000      	b.n	80010b0 <ENCODER_Backward_Callback+0x78>
				break;
 80010ae:	bf00      	nop
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000015c 	.word	0x2000015c
 80010bc:	200001c0 	.word	0x200001c0
 80010c0:	200001d4 	.word	0x200001d4
 80010c4:	200001e8 	.word	0x200001e8

080010c8 <ROTARY_ENCODER_Init>:

void ROTARY_ENCODER_Init(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	BUTTON_Init(&h_encoder_button, GPIOB, GPIO_PIN_4);
 80010cc:	2210      	movs	r2, #16
 80010ce:	490a      	ldr	r1, [pc, #40]	; (80010f8 <ROTARY_ENCODER_Init+0x30>)
 80010d0:	480a      	ldr	r0, [pc, #40]	; (80010fc <ROTARY_ENCODER_Init+0x34>)
 80010d2:	f007 fbad 	bl	8008830 <BUTTON_Init>
	BUTTON_Set_Callback_Function(NULL, NULL, BTN_Short_Pressing_Callback, BTN_Long_Pressing_Callback);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <ROTARY_ENCODER_Init+0x38>)
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <ROTARY_ENCODER_Init+0x3c>)
 80010da:	2100      	movs	r1, #0
 80010dc:	2000      	movs	r0, #0
 80010de:	f007 fbc9 	bl	8008874 <BUTTON_Set_Callback_Function>
	ENCODER_Init(&h_encoder, &htim2);
 80010e2:	4909      	ldr	r1, [pc, #36]	; (8001108 <ROTARY_ENCODER_Init+0x40>)
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <ROTARY_ENCODER_Init+0x44>)
 80010e6:	f007 f8a3 	bl	8008230 <ENCODER_Init>
	ENCODER_Set_Callback_Function(ENCODER_Forward_Callback, ENCODER_Backward_Callback);
 80010ea:	4909      	ldr	r1, [pc, #36]	; (8001110 <ROTARY_ENCODER_Init+0x48>)
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <ROTARY_ENCODER_Init+0x4c>)
 80010ee:	f007 f8b3 	bl	8008258 <ENCODER_Set_Callback_Function>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	20000144 	.word	0x20000144
 8001100:	08000f0d 	.word	0x08000f0d
 8001104:	08000e49 	.word	0x08000e49
 8001108:	200002d0 	.word	0x200002d0
 800110c:	2000015c 	.word	0x2000015c
 8001110:	08001039 	.word	0x08001039
 8001114:	08000fa9 	.word	0x08000fa9

08001118 <ROTARY_ENCODER_Handle>:

void ROTARY_ENCODER_Handle(){
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	BUTTON_Handle(&h_encoder_button);
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <ROTARY_ENCODER_Handle+0x14>)
 800111e:	f007 faf7 	bl	8008710 <BUTTON_Handle>
	ENCODER_Handle(&h_encoder);
 8001122:	4803      	ldr	r0, [pc, #12]	; (8001130 <ROTARY_ENCODER_Handle+0x18>)
 8001124:	f007 f8c4 	bl	80082b0 <ENCODER_Handle>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000144 	.word	0x20000144
 8001130:	2000015c 	.word	0x2000015c

08001134 <TIMELINE_Init>:
//			HAL_UART_Transmit(&huart2, (uint8_t *)Tx_Buffer, strlen(Tx_Buffer), 1000);
//		}
//	}
}

void TIMELINE_Init(){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
#ifdef __STM32F0xx_HAL_H
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63;
#endif
#ifdef __STM32F1xx_HAL_H
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63; // 0x0800FC00
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <TIMELINE_Init+0x80>)
 800113c:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <TIMELINE_Init+0x84>)
 800113e:	601a      	str	r2, [r3, #0]
#endif
#ifdef __STM32F4xx_HAL_H
	TIMELINE_Data.add = SECTOR_7_ADD;
#endif

	TIMELINE_Data.len = 0;
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <TIMELINE_Init+0x80>)
 8001142:	2200      	movs	r2, #0
 8001144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	for(int i = 0; i < MAX_OPTIONS; i++){
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	e02a      	b.n	80011a4 <TIMELINE_Init+0x70>
		uint8_t t_data[DATA_FRAME_SIZE_BYTE];
		FLASH_Read(TIMELINE_Data.add + i*DATA_FRAME_SIZE_BYTE, t_data, DATA_FRAME_SIZE_BYTE);
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <TIMELINE_Init+0x80>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	4639      	mov	r1, r7
 800115a:	2204      	movs	r2, #4
 800115c:	4618      	mov	r0, r3
 800115e:	f007 fc08 	bl	8008972 <FLASH_Read>
		if(*(uint32_t *)t_data == 0xFFFFFFFF){
 8001162:	463b      	mov	r3, r7
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116a:	d107      	bne.n	800117c <TIMELINE_Init+0x48>
			*(uint32_t *)(TIMELINE_Data.flash_data + i) = 0xFFFFFFFF;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4a12      	ldr	r2, [pc, #72]	; (80011bc <TIMELINE_Init+0x88>)
 8001172:	4413      	add	r3, r2
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e010      	b.n	800119e <TIMELINE_Init+0x6a>
		} else{
			TIMELINE_Data.flash_data[i] = *((FLASH_DATA_t *)t_data);
 800117c:	4639      	mov	r1, r7
 800117e:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <TIMELINE_Init+0x80>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3304      	adds	r3, #4
 8001188:	460a      	mov	r2, r1
 800118a:	6810      	ldr	r0, [r2, #0]
 800118c:	6018      	str	r0, [r3, #0]
			TIMELINE_Data.len++;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <TIMELINE_Init+0x80>)
 8001190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001194:	3301      	adds	r3, #1
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <TIMELINE_Init+0x80>)
 800119a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	for(int i = 0; i < MAX_OPTIONS; i++){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3301      	adds	r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b0d      	cmp	r3, #13
 80011a8:	ddd1      	ble.n	800114e <TIMELINE_Init+0x1a>
		}
	}
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000164 	.word	0x20000164
 80011b8:	0800fc00 	.word	0x0800fc00
 80011bc:	20000168 	.word	0x20000168

080011c0 <TIMELINE_Add>:

void TIMELINE_Add(FLASH_DATA_t *p_new_timeline){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	if(TIMELINE_Data.len < MAX_OPTIONS){
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <TIMELINE_Add+0x48>)
 80011ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ce:	2b0d      	cmp	r3, #13
 80011d0:	d815      	bhi.n	80011fe <TIMELINE_Add+0x3e>
		TIMELINE_Data.flash_data[TIMELINE_Data.len] = *p_new_timeline;
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <TIMELINE_Add+0x48>)
 80011d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011d8:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <TIMELINE_Add+0x48>)
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	3304      	adds	r3, #4
 80011e2:	6810      	ldr	r0, [r2, #0]
 80011e4:	6018      	str	r0, [r3, #0]
		TIMELINE_Data.len++;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <TIMELINE_Add+0x48>)
 80011e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <TIMELINE_Add+0x48>)
 80011f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		TIMELINE_Sort();
 80011f6:	f000 f851 	bl	800129c <TIMELINE_Sort>
		TIMELINE_Store_To_Flash();
 80011fa:	f000 f8b5 	bl	8001368 <TIMELINE_Store_To_Flash>
	}
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000164 	.word	0x20000164

0800120c <TIMELINE_Delete>:
	*p_des_timeline = *p_new_timeline;
	TIMELINE_Sort();
	TIMELINE_Store_To_Flash();
}

void TIMELINE_Delete(uint8_t p_index){
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	if(TIMELINE_Data.len >= 0){
		for(int i = p_index; i < TIMELINE_Data.len - 1; i++){
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	e01a      	b.n	8001252 <TIMELINE_Delete+0x46>
			FLASH_DATA_t t_temp = TIMELINE_Data.flash_data[i];
 800121c:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <TIMELINE_Delete+0x88>)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	60bb      	str	r3, [r7, #8]
			TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[i+1];
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	4919      	ldr	r1, [pc, #100]	; (8001294 <TIMELINE_Delete+0x88>)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	4917      	ldr	r1, [pc, #92]	; (8001294 <TIMELINE_Delete+0x88>)
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	440a      	add	r2, r1
 800123a:	6852      	ldr	r2, [r2, #4]
 800123c:	605a      	str	r2, [r3, #4]
			TIMELINE_Data.flash_data[i+1] = t_temp;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3301      	adds	r3, #1
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <TIMELINE_Delete+0x88>)
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	605a      	str	r2, [r3, #4]
		for(int i = p_index; i < TIMELINE_Data.len - 1; i++){
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3301      	adds	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <TIMELINE_Delete+0x88>)
 8001254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001258:	3b01      	subs	r3, #1
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	dbdd      	blt.n	800121c <TIMELINE_Delete+0x10>
		}
		*(uint32_t *)(TIMELINE_Data.flash_data + TIMELINE_Data.len - 1) = 0xFFFFFFFF;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <TIMELINE_Delete+0x88>)
 8001262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001266:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800126a:	3b01      	subs	r3, #1
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <TIMELINE_Delete+0x8c>)
 8001270:	4413      	add	r3, r2
 8001272:	f04f 32ff 	mov.w	r2, #4294967295
 8001276:	601a      	str	r2, [r3, #0]
		TIMELINE_Data.len--;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <TIMELINE_Delete+0x88>)
 800127a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800127e:	3b01      	subs	r3, #1
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <TIMELINE_Delete+0x88>)
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		TIMELINE_Store_To_Flash();
 8001288:	f000 f86e 	bl	8001368 <TIMELINE_Store_To_Flash>
	}
}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000164 	.word	0x20000164
 8001298:	20000168 	.word	0x20000168

0800129c <TIMELINE_Sort>:

void TIMELINE_Sort(){
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
	for(int i = 0; i < TIMELINE_Data.len; i++){
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e050      	b.n	800134a <TIMELINE_Sort+0xae>
		for(int j = i + 1; j < TIMELINE_Data.len; j++){
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3301      	adds	r3, #1
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	e042      	b.n	8001336 <TIMELINE_Sort+0x9a>
			uint16_t t_data_i = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 80012b0:	4a2c      	ldr	r2, [pc, #176]	; (8001364 <TIMELINE_Sort+0xc8>)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	791b      	ldrb	r3, [r3, #4]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	4927      	ldr	r1, [pc, #156]	; (8001364 <TIMELINE_Sort+0xc8>)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	795b      	ldrb	r3, [r3, #5]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	80fb      	strh	r3, [r7, #6]
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 80012d6:	4a23      	ldr	r2, [pc, #140]	; (8001364 <TIMELINE_Sort+0xc8>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	791b      	ldrb	r3, [r3, #4]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	491d      	ldr	r1, [pc, #116]	; (8001364 <TIMELINE_Sort+0xc8>)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	795b      	ldrb	r3, [r3, #5]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	80bb      	strh	r3, [r7, #4]
			if(t_data_i > t_data_j){
 80012fc:	88fa      	ldrh	r2, [r7, #6]
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	d915      	bls.n	8001330 <TIMELINE_Sort+0x94>
				FLASH_DATA_t t_temp;
				t_temp = TIMELINE_Data.flash_data[i];
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <TIMELINE_Sort+0xc8>)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	603b      	str	r3, [r7, #0]
				TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[j];
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <TIMELINE_Sort+0xc8>)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	4912      	ldr	r1, [pc, #72]	; (8001364 <TIMELINE_Sort+0xc8>)
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	440a      	add	r2, r1
 8001320:	6852      	ldr	r2, [r2, #4]
 8001322:	605a      	str	r2, [r3, #4]
				TIMELINE_Data.flash_data[j] = t_temp;
 8001324:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <TIMELINE_Sort+0xc8>)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	605a      	str	r2, [r3, #4]
		for(int j = i + 1; j < TIMELINE_Data.len; j++){
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	3301      	adds	r3, #1
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <TIMELINE_Sort+0xc8>)
 8001338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800133c:	461a      	mov	r2, r3
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	4293      	cmp	r3, r2
 8001342:	dbb5      	blt.n	80012b0 <TIMELINE_Sort+0x14>
	for(int i = 0; i < TIMELINE_Data.len; i++){
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <TIMELINE_Sort+0xc8>)
 800134c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4293      	cmp	r3, r2
 8001356:	dba7      	blt.n	80012a8 <TIMELINE_Sort+0xc>
			}
		}
	}
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	20000164 	.word	0x20000164

08001368 <TIMELINE_Store_To_Flash>:

void TIMELINE_Store_To_Flash(){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
	FLASH_DATA_t *t_flash_data;
	t_flash_data = (FLASH_DATA_t *)malloc(TIMELINE_Data.len * DATA_FRAME_SIZE_BIT);
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <TIMELINE_Store_To_Flash+0x70>)
 8001370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001374:	015b      	lsls	r3, r3, #5
 8001376:	4618      	mov	r0, r3
 8001378:	f007 fb50 	bl	8008a1c <malloc>
 800137c:	4603      	mov	r3, r0
 800137e:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < TIMELINE_Data.len; i++){
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	e00e      	b.n	80013a4 <TIMELINE_Store_To_Flash+0x3c>
		*(t_flash_data + i) = *(TIMELINE_Data.flash_data + i);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <TIMELINE_Store_To_Flash+0x74>)
 800138c:	1899      	adds	r1, r3, r2
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	4413      	add	r3, r2
 8001396:	461a      	mov	r2, r3
 8001398:	460b      	mov	r3, r1
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < TIMELINE_Data.len; i++){
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3301      	adds	r3, #1
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <TIMELINE_Store_To_Flash+0x70>)
 80013a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013aa:	461a      	mov	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4293      	cmp	r3, r2
 80013b0:	dbe9      	blt.n	8001386 <TIMELINE_Store_To_Flash+0x1e>
	}
	FLASH_Write(63, (uint8_t *)t_flash_data, TIMELINE_Data.len * DATA_FRAME_SIZE_BYTE);
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <TIMELINE_Store_To_Flash+0x70>)
 80013b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	b29b      	uxth	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	6839      	ldr	r1, [r7, #0]
 80013c2:	203f      	movs	r0, #63	; 0x3f
 80013c4:	f007 fa95 	bl	80088f2 <FLASH_Write>
	free(t_flash_data);
 80013c8:	6838      	ldr	r0, [r7, #0]
 80013ca:	f007 fb2f 	bl	8008a2c <free>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000164 	.word	0x20000164
 80013dc:	20000168 	.word	0x20000168

080013e0 <REALTIME_Init>:
extern RTC_HandleTypeDef hrtc;
#endif

static uint32_t timer = 0;

void REALTIME_Init(){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	DS3231_Init(&hds3231, &hi2c2);
 80013e4:	491e      	ldr	r1, [pc, #120]	; (8001460 <REALTIME_Init+0x80>)
 80013e6:	481f      	ldr	r0, [pc, #124]	; (8001464 <REALTIME_Init+0x84>)
 80013e8:	f006 fdea 	bl	8007fc0 <DS3231_Init>
	REALTIME_Data.system_day = 1;
 80013ec:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <REALTIME_Init+0x88>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = 0;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <REALTIME_Init+0x88>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = 0;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <REALTIME_Init+0x88>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = 1;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <REALTIME_Init+0x88>)
 8001400:	2201      	movs	r2, #1
 8001402:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = 1;
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <REALTIME_Init+0x88>)
 8001406:	2201      	movs	r2, #1
 8001408:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = 0;
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <REALTIME_Init+0x88>)
 800140c:	2200      	movs	r2, #0
 800140e:	715a      	strb	r2, [r3, #5]
	REALTIME_Data.system_minute = Time.Minutes;
	REALTIME_Data.system_date = Date.Date;
	REALTIME_Data.system_month = Date.Month;
	REALTIME_Data.system_year = Date.Year;
#else
	if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8001410:	4814      	ldr	r0, [pc, #80]	; (8001464 <REALTIME_Init+0x84>)
 8001412:	f006 fe25 	bl	8008060 <DS3231_Get_Time>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d01f      	beq.n	800145c <REALTIME_Init+0x7c>
 800141c:	4811      	ldr	r0, [pc, #68]	; (8001464 <REALTIME_Init+0x84>)
 800141e:	f006 fe8e 	bl	800813e <DS3231_Get_Date>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d019      	beq.n	800145c <REALTIME_Init+0x7c>
		return;
	}

	REALTIME_Data.system_day = hds3231.current_day;
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <REALTIME_Init+0x84>)
 800142a:	78da      	ldrb	r2, [r3, #3]
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <REALTIME_Init+0x88>)
 800142e:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = hds3231.current_hour;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <REALTIME_Init+0x84>)
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <REALTIME_Init+0x88>)
 8001436:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = hds3231.current_minute;
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <REALTIME_Init+0x84>)
 800143a:	785a      	ldrb	r2, [r3, #1]
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <REALTIME_Init+0x88>)
 800143e:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = hds3231.current_date;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <REALTIME_Init+0x84>)
 8001442:	791a      	ldrb	r2, [r3, #4]
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <REALTIME_Init+0x88>)
 8001446:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = hds3231.current_month;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <REALTIME_Init+0x84>)
 800144a:	795a      	ldrb	r2, [r3, #5]
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <REALTIME_Init+0x88>)
 800144e:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = hds3231.current_year;
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <REALTIME_Init+0x84>)
 8001452:	88db      	ldrh	r3, [r3, #6]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <REALTIME_Init+0x88>)
 8001458:	715a      	strb	r2, [r3, #5]
 800145a:	e000      	b.n	800145e <REALTIME_Init+0x7e>
		return;
 800145c:	bf00      	nop
#endif
}
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000220 	.word	0x20000220
 8001464:	200001a4 	.word	0x200001a4
 8001468:	200001b0 	.word	0x200001b0

0800146c <REALTIME_Handle>:

void REALTIME_Handle(){
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - timer > CHECKING_REAL_TIME_CYCLE){
 8001470:	f002 f804 	bl	800347c <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <REALTIME_Handle+0x80>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001480:	4293      	cmp	r3, r2
 8001482:	d932      	bls.n	80014ea <REALTIME_Handle+0x7e>
		REALTIME_Data.system_minute = Time.Minutes;
		REALTIME_Data.system_date = Date.Date;
		REALTIME_Data.system_month = Date.Month;
		REALTIME_Data.system_year = Date.Year;
#else
		if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8001484:	481a      	ldr	r0, [pc, #104]	; (80014f0 <REALTIME_Handle+0x84>)
 8001486:	f006 fdeb 	bl	8008060 <DS3231_Get_Time>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d02b      	beq.n	80014e8 <REALTIME_Handle+0x7c>
 8001490:	4817      	ldr	r0, [pc, #92]	; (80014f0 <REALTIME_Handle+0x84>)
 8001492:	f006 fe54 	bl	800813e <DS3231_Get_Date>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d025      	beq.n	80014e8 <REALTIME_Handle+0x7c>
			return;
		}

		if(REALTIME_Data.system_minute != hds3231.current_minute){
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <REALTIME_Handle+0x88>)
 800149e:	785a      	ldrb	r2, [r3, #1]
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <REALTIME_Handle+0x84>)
 80014a2:	785b      	ldrb	r3, [r3, #1]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d005      	beq.n	80014b4 <REALTIME_Handle+0x48>
			if(MENU_Data.menu_type == MAIN_MENU){
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <REALTIME_Handle+0x8c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <REALTIME_Handle+0x48>
				MAIN_MENU_Update_Value();
 80014b0:	f000 fab6 	bl	8001a20 <MAIN_MENU_Update_Value>
			}
		}

		REALTIME_Data.system_day = hds3231.current_day;
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <REALTIME_Handle+0x84>)
 80014b6:	78da      	ldrb	r2, [r3, #3]
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <REALTIME_Handle+0x88>)
 80014ba:	709a      	strb	r2, [r3, #2]
		REALTIME_Data.system_hour = hds3231.current_hour;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <REALTIME_Handle+0x84>)
 80014be:	781a      	ldrb	r2, [r3, #0]
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <REALTIME_Handle+0x88>)
 80014c2:	701a      	strb	r2, [r3, #0]
		REALTIME_Data.system_minute = hds3231.current_minute;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <REALTIME_Handle+0x84>)
 80014c6:	785a      	ldrb	r2, [r3, #1]
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <REALTIME_Handle+0x88>)
 80014ca:	705a      	strb	r2, [r3, #1]
		REALTIME_Data.system_date = hds3231.current_date;
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <REALTIME_Handle+0x84>)
 80014ce:	791a      	ldrb	r2, [r3, #4]
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <REALTIME_Handle+0x88>)
 80014d2:	70da      	strb	r2, [r3, #3]
		REALTIME_Data.system_month = hds3231.current_month;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <REALTIME_Handle+0x84>)
 80014d6:	795a      	ldrb	r2, [r3, #5]
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <REALTIME_Handle+0x88>)
 80014da:	711a      	strb	r2, [r3, #4]
		REALTIME_Data.system_year = hds3231.current_year;
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <REALTIME_Handle+0x84>)
 80014de:	88db      	ldrh	r3, [r3, #6]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <REALTIME_Handle+0x88>)
 80014e4:	715a      	strb	r2, [r3, #5]
 80014e6:	e000      	b.n	80014ea <REALTIME_Handle+0x7e>
			return;
 80014e8:	bf00      	nop
#endif
	}
}
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200001b8 	.word	0x200001b8
 80014f0:	200001a4 	.word	0x200001a4
 80014f4:	200001b0 	.word	0x200001b0
 80014f8:	200001c0 	.word	0x200001c0

080014fc <REALTIME_Set_New_Realtime>:

void REALTIME_Set_New_Realtime(REALTIME_DATA_HandleTypeDef *p_new_realtime){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af02      	add	r7, sp, #8
 8001502:	6078      	str	r0, [r7, #4]
	Date.Year = REALTIME_Data.system_year;

	if(HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
	if(HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
#else
	DS3231_Set_Time(&hds3231, p_new_realtime->system_hour, p_new_realtime->system_minute, 0, p_new_realtime->system_day);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7819      	ldrb	r1, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	785a      	ldrb	r2, [r3, #1]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	789b      	ldrb	r3, [r3, #2]
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2300      	movs	r3, #0
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <REALTIME_Set_New_Realtime+0x68>)
 8001516:	f006 fd68 	bl	8007fea <DS3231_Set_Time>
	DS3231_Set_Date(&hds3231, p_new_realtime->system_date, p_new_realtime->system_month, p_new_realtime->system_year);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	78d9      	ldrb	r1, [r3, #3]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	791a      	ldrb	r2, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	795b      	ldrb	r3, [r3, #5]
 8001526:	480f      	ldr	r0, [pc, #60]	; (8001564 <REALTIME_Set_New_Realtime+0x68>)
 8001528:	f006 fdd7 	bl	80080da <DS3231_Set_Date>

	REALTIME_Data.system_day = p_new_realtime->system_day;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	789a      	ldrb	r2, [r3, #2]
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <REALTIME_Set_New_Realtime+0x6c>)
 8001532:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = p_new_realtime->system_hour;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <REALTIME_Set_New_Realtime+0x6c>)
 800153a:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = p_new_realtime->system_minute;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	785a      	ldrb	r2, [r3, #1]
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <REALTIME_Set_New_Realtime+0x6c>)
 8001542:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = p_new_realtime->system_date;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	78da      	ldrb	r2, [r3, #3]
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <REALTIME_Set_New_Realtime+0x6c>)
 800154a:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = p_new_realtime->system_month;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	791a      	ldrb	r2, [r3, #4]
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <REALTIME_Set_New_Realtime+0x6c>)
 8001552:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = p_new_realtime->system_year;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	795a      	ldrb	r2, [r3, #5]
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <REALTIME_Set_New_Realtime+0x6c>)
 800155a:	715a      	strb	r2, [r3, #5]
#endif
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200001a4 	.word	0x200001a4
 8001568:	200001b0 	.word	0x200001b0

0800156c <MAIN_MENU_Init>:
		{0xFF, 0x02, 0xFF, 0xFF, 0x01, 0xFF},	// 8
		{0xFF, 0x02, 0xFF, 0x01, 0x01, 0xFF},	// 9
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00},	// Nothing
};

void MAIN_MENU_Init(){
 800156c:	b580      	push	{r7, lr}
 800156e:	b090      	sub	sp, #64	; 0x40
 8001570:	af00      	add	r7, sp, #0
	uint8_t num_char_0[] = {
 8001572:	4a3e      	ldr	r2, [pc, #248]	; (800166c <MAIN_MENU_Init+0x100>)
 8001574:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800157c:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000,
			0b00000,
			0b00000,
			0b00000,
	};
	LCD_Create_Char(MENU_Data.hlcd, 0, num_char_0);
 8001580:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <MAIN_MENU_Init+0x104>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f006 ff98 	bl	80084c0 <LCD_Create_Char>

	uint8_t num_char_1[] = {
 8001590:	4a38      	ldr	r2, [pc, #224]	; (8001674 <MAIN_MENU_Init+0x108>)
 8001592:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001596:	e892 0003 	ldmia.w	r2, {r0, r1}
 800159a:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000,
			0b00000,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 1, num_char_1);
 800159e:	4b34      	ldr	r3, [pc, #208]	; (8001670 <MAIN_MENU_Init+0x104>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80015a6:	2101      	movs	r1, #1
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 ff89 	bl	80084c0 <LCD_Create_Char>

	uint8_t num_char_2[] = {
 80015ae:	4a32      	ldr	r2, [pc, #200]	; (8001678 <MAIN_MENU_Init+0x10c>)
 80015b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015b8:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000,
			0b00000,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 2, num_char_2);
 80015bc:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <MAIN_MENU_Init+0x104>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015c4:	2102      	movs	r1, #2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f006 ff7a 	bl	80084c0 <LCD_Create_Char>

	uint8_t thermometro[8] = {
 80015cc:	4a2b      	ldr	r2, [pc, #172]	; (800167c <MAIN_MENU_Init+0x110>)
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015d6:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01110,
			0b11111,
			0b11111,
			0b01110
	};
	LCD_Create_Char(MENU_Data.hlcd, 3, thermometro);
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <MAIN_MENU_Init+0x104>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f107 0220 	add.w	r2, r7, #32
 80015e2:	2103      	movs	r1, #3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f006 ff6b 	bl	80084c0 <LCD_Create_Char>

	uint8_t igrasia[8] = {
 80015ea:	4a25      	ldr	r2, [pc, #148]	; (8001680 <MAIN_MENU_Init+0x114>)
 80015ec:	f107 0318 	add.w	r3, r7, #24
 80015f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f4:	e883 0003 	stmia.w	r3, {r0, r1}
			0b10001,
			0b10001,
			0b10001,
			0b01110,
	};
	LCD_Create_Char(MENU_Data.hlcd, 4, igrasia);
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MAIN_MENU_Init+0x104>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f107 0218 	add.w	r2, r7, #24
 8001600:	2104      	movs	r1, #4
 8001602:	4618      	mov	r0, r3
 8001604:	f006 ff5c 	bl	80084c0 <LCD_Create_Char>

	uint8_t low_battery[8] = {
 8001608:	4a1e      	ldr	r2, [pc, #120]	; (8001684 <MAIN_MENU_Init+0x118>)
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001612:	e883 0003 	stmia.w	r3, {r0, r1}
			0b10001,
			0b10001,
			0b10001,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 5, low_battery);
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <MAIN_MENU_Init+0x104>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f107 0210 	add.w	r2, r7, #16
 800161e:	2105      	movs	r1, #5
 8001620:	4618      	mov	r0, r3
 8001622:	f006 ff4d 	bl	80084c0 <LCD_Create_Char>

	uint8_t half_battery[8] = {
 8001626:	4a18      	ldr	r2, [pc, #96]	; (8001688 <MAIN_MENU_Init+0x11c>)
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001630:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11111,
			0b11111,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 6, half_battery);
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MAIN_MENU_Init+0x104>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f107 0208 	add.w	r2, r7, #8
 800163c:	2106      	movs	r1, #6
 800163e:	4618      	mov	r0, r3
 8001640:	f006 ff3e 	bl	80084c0 <LCD_Create_Char>

	uint8_t full_battery[8] = {
 8001644:	4a11      	ldr	r2, [pc, #68]	; (800168c <MAIN_MENU_Init+0x120>)
 8001646:	463b      	mov	r3, r7
 8001648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800164c:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11111,
			0b11111,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 7, full_battery);
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <MAIN_MENU_Init+0x104>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	463a      	mov	r2, r7
 8001656:	2107      	movs	r1, #7
 8001658:	4618      	mov	r0, r3
 800165a:	f006 ff31 	bl	80084c0 <LCD_Create_Char>

	MAIN_MENU_Data.time_format = FORMAT_24_HOURS;
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MAIN_MENU_Init+0x124>)
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
}
 8001664:	bf00      	nop
 8001666:	3740      	adds	r7, #64	; 0x40
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	08009368 	.word	0x08009368
 8001670:	200001c0 	.word	0x200001c0
 8001674:	08009370 	.word	0x08009370
 8001678:	08009378 	.word	0x08009378
 800167c:	08009380 	.word	0x08009380
 8001680:	08009388 	.word	0x08009388
 8001684:	08009390 	.word	0x08009390
 8001688:	08009398 	.word	0x08009398
 800168c:	080093a0 	.word	0x080093a0
 8001690:	200001bc 	.word	0x200001bc

08001694 <MAIN_MENU_Display_Num>:

void MAIN_MENU_Display_Num(uint8_t p_number, uint8_t p_col, uint8_t p_row){
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
 800169e:	460b      	mov	r3, r1
 80016a0:	71bb      	strb	r3, [r7, #6]
 80016a2:	4613      	mov	r3, r2
 80016a4:	717b      	strb	r3, [r7, #5]
	if(p_row > 2) return;
 80016a6:	797b      	ldrb	r3, [r7, #5]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d841      	bhi.n	8001730 <MAIN_MENU_Display_Num+0x9c>

	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row);
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <MAIN_MENU_Display_Num+0xa4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	797a      	ldrb	r2, [r7, #5]
 80016b2:	79b9      	ldrb	r1, [r7, #6]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f006 fed9 	bl	800846c <LCD_Set_Cursor>
	for(int i = 0; i < 3; i++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e011      	b.n	80016e4 <MAIN_MENU_Display_Num+0x50>
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i]);
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <MAIN_MENU_Display_Num+0xa4>)
 80016c2:	6858      	ldr	r0, [r3, #4]
 80016c4:	79fa      	ldrb	r2, [r7, #7]
 80016c6:	491d      	ldr	r1, [pc, #116]	; (800173c <MAIN_MENU_Display_Num+0xa8>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	18ca      	adds	r2, r1, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4413      	add	r3, r2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f006 ffb3 	bl	8008644 <LCD_Send_Data>
	for(int i = 0; i < 3; i++){
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3301      	adds	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	ddea      	ble.n	80016c0 <MAIN_MENU_Display_Num+0x2c>
	}

	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row + 1);
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MAIN_MENU_Display_Num+0xa4>)
 80016ec:	6858      	ldr	r0, [r3, #4]
 80016ee:	797b      	ldrb	r3, [r7, #5]
 80016f0:	3301      	adds	r3, #1
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	79bb      	ldrb	r3, [r7, #6]
 80016f6:	4619      	mov	r1, r3
 80016f8:	f006 feb8 	bl	800846c <LCD_Set_Cursor>
	for(int i = 0; i < 3; i++){
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	e012      	b.n	8001728 <MAIN_MENU_Display_Num+0x94>
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i+3]);
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <MAIN_MENU_Display_Num+0xa4>)
 8001704:	6858      	ldr	r0, [r3, #4]
 8001706:	79fa      	ldrb	r2, [r7, #7]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1cd9      	adds	r1, r3, #3
 800170c:	4c0b      	ldr	r4, [pc, #44]	; (800173c <MAIN_MENU_Display_Num+0xa8>)
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4423      	add	r3, r4
 8001718:	440b      	add	r3, r1
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f006 ff91 	bl	8008644 <LCD_Send_Data>
	for(int i = 0; i < 3; i++){
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3301      	adds	r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2b02      	cmp	r3, #2
 800172c:	dde9      	ble.n	8001702 <MAIN_MENU_Display_Num+0x6e>
 800172e:	e000      	b.n	8001732 <MAIN_MENU_Display_Num+0x9e>
	if(p_row > 2) return;
 8001730:	bf00      	nop
	}

}
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}
 8001738:	200001c0 	.word	0x200001c0
 800173c:	2000001c 	.word	0x2000001c

08001740 <MAIN_MENU_Display>:

void MAIN_MENU_Display(){
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b085      	sub	sp, #20
 8001744:	af02      	add	r7, sp, #8
	if(MENU_Data.is_changing_menu){
 8001746:	4b9e      	ldr	r3, [pc, #632]	; (80019c0 <MAIN_MENU_Display+0x280>)
 8001748:	7a5b      	ldrb	r3, [r3, #9]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <MAIN_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 800174e:	4b9c      	ldr	r3, [pc, #624]	; (80019c0 <MAIN_MENU_Display+0x280>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4618      	mov	r0, r3
 8001754:	f006 fe75 	bl	8008442 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8001758:	4b99      	ldr	r3, [pc, #612]	; (80019c0 <MAIN_MENU_Display+0x280>)
 800175a:	2200      	movs	r2, #0
 800175c:	725a      	strb	r2, [r3, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 0);
 800175e:	4b98      	ldr	r3, [pc, #608]	; (80019c0 <MAIN_MENU_Display+0x280>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	2103      	movs	r1, #3
 8001766:	4618      	mov	r0, r3
 8001768:	f006 fe80 	bl	800846c <LCD_Set_Cursor>
	char t_day_string[] = "SUN";
 800176c:	4b95      	ldr	r3, [pc, #596]	; (80019c4 <MAIN_MENU_Display+0x284>)
 800176e:	607b      	str	r3, [r7, #4]
	if(REALTIME_Data.system_day > 0){
 8001770:	4b95      	ldr	r3, [pc, #596]	; (80019c8 <MAIN_MENU_Display+0x288>)
 8001772:	789b      	ldrb	r3, [r3, #2]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00a      	beq.n	800178e <MAIN_MENU_Display+0x4e>
		strcpy(t_day_string, DAY_Str[REALTIME_Data.system_day - 1]);
 8001778:	4b93      	ldr	r3, [pc, #588]	; (80019c8 <MAIN_MENU_Display+0x288>)
 800177a:	789b      	ldrb	r3, [r3, #2]
 800177c:	3b01      	subs	r3, #1
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4a92      	ldr	r2, [pc, #584]	; (80019cc <MAIN_MENU_Display+0x28c>)
 8001782:	441a      	add	r2, r3
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f007 fa4b 	bl	8008c24 <strcpy>
	}
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 800178e:	4b8c      	ldr	r3, [pc, #560]	; (80019c0 <MAIN_MENU_Display+0x280>)
 8001790:	6858      	ldr	r0, [r3, #4]
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
 8001792:	4b8d      	ldr	r3, [pc, #564]	; (80019c8 <MAIN_MENU_Display+0x288>)
 8001794:	78db      	ldrb	r3, [r3, #3]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8001796:	461c      	mov	r4, r3
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
 8001798:	4b8b      	ldr	r3, [pc, #556]	; (80019c8 <MAIN_MENU_Display+0x288>)
 800179a:	791b      	ldrb	r3, [r3, #4]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 800179c:	4619      	mov	r1, r3
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
 800179e:	4b8a      	ldr	r3, [pc, #552]	; (80019c8 <MAIN_MENU_Display+0x288>)
 80017a0:	795b      	ldrb	r3, [r3, #5]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 80017a2:	1d3a      	adds	r2, r7, #4
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	9100      	str	r1, [sp, #0]
 80017a8:	4623      	mov	r3, r4
 80017aa:	4989      	ldr	r1, [pc, #548]	; (80019d0 <MAIN_MENU_Display+0x290>)
 80017ac:	f006 fe0b 	bl	80083c6 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 2, 1);
 80017b0:	4b83      	ldr	r3, [pc, #524]	; (80019c0 <MAIN_MENU_Display+0x280>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	2102      	movs	r1, #2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f006 fe57 	bl	800846c <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, 3);
 80017be:	4b80      	ldr	r3, [pc, #512]	; (80019c0 <MAIN_MENU_Display+0x280>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2103      	movs	r1, #3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f006 ff3d 	bl	8008644 <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02dC  ", (uint8_t)hdht.temperature);
 80017ca:	4b7d      	ldr	r3, [pc, #500]	; (80019c0 <MAIN_MENU_Display+0x280>)
 80017cc:	685c      	ldr	r4, [r3, #4]
 80017ce:	4b81      	ldr	r3, [pc, #516]	; (80019d4 <MAIN_MENU_Display+0x294>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff f902 	bl	80009dc <__aeabi_f2uiz>
 80017d8:	4603      	mov	r3, r0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	497e      	ldr	r1, [pc, #504]	; (80019d8 <MAIN_MENU_Display+0x298>)
 80017e0:	4620      	mov	r0, r4
 80017e2:	f006 fdf0 	bl	80083c6 <LCD_Write>
	LCD_Send_Data(MENU_Data.hlcd, 4);
 80017e6:	4b76      	ldr	r3, [pc, #472]	; (80019c0 <MAIN_MENU_Display+0x280>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2104      	movs	r1, #4
 80017ec:	4618      	mov	r0, r3
 80017ee:	f006 ff29 	bl	8008644 <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02d%%  ", (uint8_t)hdht.huminity);
 80017f2:	4b73      	ldr	r3, [pc, #460]	; (80019c0 <MAIN_MENU_Display+0x280>)
 80017f4:	685c      	ldr	r4, [r3, #4]
 80017f6:	4b77      	ldr	r3, [pc, #476]	; (80019d4 <MAIN_MENU_Display+0x294>)
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff f8ee 	bl	80009dc <__aeabi_f2uiz>
 8001800:	4603      	mov	r3, r0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	4975      	ldr	r1, [pc, #468]	; (80019dc <MAIN_MENU_Display+0x29c>)
 8001808:	4620      	mov	r0, r4
 800180a:	f006 fddc 	bl	80083c6 <LCD_Write>
	if(BATTERY_LEVEL_Data.battery_level > 70)
 800180e:	4b74      	ldr	r3, [pc, #464]	; (80019e0 <MAIN_MENU_Display+0x2a0>)
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	2b46      	cmp	r3, #70	; 0x46
 8001814:	d906      	bls.n	8001824 <MAIN_MENU_Display+0xe4>
		LCD_Send_Data(MENU_Data.hlcd, 7);
 8001816:	4b6a      	ldr	r3, [pc, #424]	; (80019c0 <MAIN_MENU_Display+0x280>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2107      	movs	r1, #7
 800181c:	4618      	mov	r0, r3
 800181e:	f006 ff11 	bl	8008644 <LCD_Send_Data>
 8001822:	e010      	b.n	8001846 <MAIN_MENU_Display+0x106>
	else if(BATTERY_LEVEL_Data.battery_level > 40)
 8001824:	4b6e      	ldr	r3, [pc, #440]	; (80019e0 <MAIN_MENU_Display+0x2a0>)
 8001826:	791b      	ldrb	r3, [r3, #4]
 8001828:	2b28      	cmp	r3, #40	; 0x28
 800182a:	d906      	bls.n	800183a <MAIN_MENU_Display+0xfa>
		LCD_Send_Data(MENU_Data.hlcd, 6);
 800182c:	4b64      	ldr	r3, [pc, #400]	; (80019c0 <MAIN_MENU_Display+0x280>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2106      	movs	r1, #6
 8001832:	4618      	mov	r0, r3
 8001834:	f006 ff06 	bl	8008644 <LCD_Send_Data>
 8001838:	e005      	b.n	8001846 <MAIN_MENU_Display+0x106>
	else
		LCD_Send_Data(MENU_Data.hlcd, 5);
 800183a:	4b61      	ldr	r3, [pc, #388]	; (80019c0 <MAIN_MENU_Display+0x280>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2105      	movs	r1, #5
 8001840:	4618      	mov	r0, r3
 8001842:	f006 feff 	bl	8008644 <LCD_Send_Data>

	LCD_Write(MENU_Data.hlcd, "%02d%%  ", BATTERY_LEVEL_Data.battery_level);
 8001846:	4b5e      	ldr	r3, [pc, #376]	; (80019c0 <MAIN_MENU_Display+0x280>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4a65      	ldr	r2, [pc, #404]	; (80019e0 <MAIN_MENU_Display+0x2a0>)
 800184c:	7912      	ldrb	r2, [r2, #4]
 800184e:	4963      	ldr	r1, [pc, #396]	; (80019dc <MAIN_MENU_Display+0x29c>)
 8001850:	4618      	mov	r0, r3
 8001852:	f006 fdb8 	bl	80083c6 <LCD_Write>


	if(MAIN_MENU_Data.time_format == FORMAT_24_HOURS){
 8001856:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <MAIN_MENU_Display+0x2a4>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d11d      	bne.n	800189a <MAIN_MENU_Display+0x15a>
		MAIN_MENU_Display_Num(REALTIME_Data.system_hour / 10, 2, 2);
 800185e:	4b5a      	ldr	r3, [pc, #360]	; (80019c8 <MAIN_MENU_Display+0x288>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4a61      	ldr	r2, [pc, #388]	; (80019e8 <MAIN_MENU_Display+0x2a8>)
 8001864:	fba2 2303 	umull	r2, r3, r2, r3
 8001868:	08db      	lsrs	r3, r3, #3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2202      	movs	r2, #2
 800186e:	2102      	movs	r1, #2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff0f 	bl	8001694 <MAIN_MENU_Display_Num>
		MAIN_MENU_Display_Num(REALTIME_Data.system_hour % 10, 6, 2);
 8001876:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <MAIN_MENU_Display+0x288>)
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	4b5b      	ldr	r3, [pc, #364]	; (80019e8 <MAIN_MENU_Display+0x2a8>)
 800187c:	fba3 1302 	umull	r1, r3, r3, r2
 8001880:	08d9      	lsrs	r1, r3, #3
 8001882:	460b      	mov	r3, r1
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2202      	movs	r2, #2
 8001890:	2106      	movs	r1, #6
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fefe 	bl	8001694 <MAIN_MENU_Display_Num>
 8001898:	e037      	b.n	800190a <MAIN_MENU_Display+0x1ca>
	} else{
		MAIN_MENU_Display_Num((REALTIME_Data.system_hour - 12) / 10, 2, 2);
 800189a:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <MAIN_MENU_Display+0x288>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	3b0c      	subs	r3, #12
 80018a0:	4a52      	ldr	r2, [pc, #328]	; (80019ec <MAIN_MENU_Display+0x2ac>)
 80018a2:	fb82 1203 	smull	r1, r2, r2, r3
 80018a6:	1092      	asrs	r2, r2, #2
 80018a8:	17db      	asrs	r3, r3, #31
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2202      	movs	r2, #2
 80018b0:	2102      	movs	r1, #2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff feee 	bl	8001694 <MAIN_MENU_Display_Num>
		MAIN_MENU_Display_Num((REALTIME_Data.system_hour - 12) % 10, 6, 2);
 80018b8:	4b43      	ldr	r3, [pc, #268]	; (80019c8 <MAIN_MENU_Display+0x288>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	f1a3 020c 	sub.w	r2, r3, #12
 80018c0:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <MAIN_MENU_Display+0x2ac>)
 80018c2:	fb83 1302 	smull	r1, r3, r3, r2
 80018c6:	1099      	asrs	r1, r3, #2
 80018c8:	17d3      	asrs	r3, r2, #31
 80018ca:	1ac9      	subs	r1, r1, r3
 80018cc:	460b      	mov	r3, r1
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	1ad1      	subs	r1, r2, r3
 80018d6:	b2cb      	uxtb	r3, r1
 80018d8:	2202      	movs	r2, #2
 80018da:	2106      	movs	r1, #6
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fed9 	bl	8001694 <MAIN_MENU_Display_Num>
		LCD_Set_Cursor(MENU_Data.hlcd, 18, 3);
 80018e2:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <MAIN_MENU_Display+0x280>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2203      	movs	r2, #3
 80018e8:	2112      	movs	r1, #18
 80018ea:	4618      	mov	r0, r3
 80018ec:	f006 fdbe 	bl	800846c <LCD_Set_Cursor>
		LCD_Write(MENU_Data.hlcd, "%s", (REALTIME_Data.system_hour > 12) ? "PM" : "AM");
 80018f0:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <MAIN_MENU_Display+0x280>)
 80018f2:	6858      	ldr	r0, [r3, #4]
 80018f4:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <MAIN_MENU_Display+0x288>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b0c      	cmp	r3, #12
 80018fa:	d901      	bls.n	8001900 <MAIN_MENU_Display+0x1c0>
 80018fc:	4b3c      	ldr	r3, [pc, #240]	; (80019f0 <MAIN_MENU_Display+0x2b0>)
 80018fe:	e000      	b.n	8001902 <MAIN_MENU_Display+0x1c2>
 8001900:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <MAIN_MENU_Display+0x2b4>)
 8001902:	461a      	mov	r2, r3
 8001904:	493c      	ldr	r1, [pc, #240]	; (80019f8 <MAIN_MENU_Display+0x2b8>)
 8001906:	f006 fd5e 	bl	80083c6 <LCD_Write>
	}

	if(MENU_Data.blink_state){
 800190a:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <MAIN_MENU_Display+0x280>)
 800190c:	7c1b      	ldrb	r3, [r3, #16]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d01a      	beq.n	8001948 <MAIN_MENU_Display+0x208>
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8001912:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <MAIN_MENU_Display+0x280>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	2109      	movs	r1, #9
 800191a:	4618      	mov	r0, r3
 800191c:	f006 fda6 	bl	800846c <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, '.');
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <MAIN_MENU_Display+0x280>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	212e      	movs	r1, #46	; 0x2e
 8001926:	4618      	mov	r0, r3
 8001928:	f006 fe8c 	bl	8008644 <LCD_Send_Data>
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <MAIN_MENU_Display+0x280>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2203      	movs	r2, #3
 8001932:	2109      	movs	r1, #9
 8001934:	4618      	mov	r0, r3
 8001936:	f006 fd99 	bl	800846c <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, '.');
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <MAIN_MENU_Display+0x280>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	212e      	movs	r1, #46	; 0x2e
 8001940:	4618      	mov	r0, r3
 8001942:	f006 fe7f 	bl	8008644 <LCD_Send_Data>
 8001946:	e019      	b.n	800197c <MAIN_MENU_Display+0x23c>
	} else{
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8001948:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <MAIN_MENU_Display+0x280>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2202      	movs	r2, #2
 800194e:	2109      	movs	r1, #9
 8001950:	4618      	mov	r0, r3
 8001952:	f006 fd8b 	bl	800846c <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, ' ');
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <MAIN_MENU_Display+0x280>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2120      	movs	r1, #32
 800195c:	4618      	mov	r0, r3
 800195e:	f006 fe71 	bl	8008644 <LCD_Send_Data>
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MAIN_MENU_Display+0x280>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2203      	movs	r2, #3
 8001968:	2109      	movs	r1, #9
 800196a:	4618      	mov	r0, r3
 800196c:	f006 fd7e 	bl	800846c <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, ' ');
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <MAIN_MENU_Display+0x280>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2120      	movs	r1, #32
 8001976:	4618      	mov	r0, r3
 8001978:	f006 fe64 	bl	8008644 <LCD_Send_Data>
	}

	MAIN_MENU_Display_Num(REALTIME_Data.system_minute / 10, 10, 2);
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <MAIN_MENU_Display+0x288>)
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <MAIN_MENU_Display+0x2a8>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	08db      	lsrs	r3, r3, #3
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2202      	movs	r2, #2
 800198c:	210a      	movs	r1, #10
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fe80 	bl	8001694 <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(REALTIME_Data.system_minute % 10, 14, 2);
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MAIN_MENU_Display+0x288>)
 8001996:	785a      	ldrb	r2, [r3, #1]
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <MAIN_MENU_Display+0x2a8>)
 800199a:	fba3 1302 	umull	r1, r3, r3, r2
 800199e:	08d9      	lsrs	r1, r3, #3
 80019a0:	460b      	mov	r3, r1
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2202      	movs	r2, #2
 80019ae:	210e      	movs	r1, #14
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fe6f 	bl	8001694 <MAIN_MENU_Display_Num>
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd90      	pop	{r4, r7, pc}
 80019be:	bf00      	nop
 80019c0:	200001c0 	.word	0x200001c0
 80019c4:	004e5553 	.word	0x004e5553
 80019c8:	200001b0 	.word	0x200001b0
 80019cc:	20000000 	.word	0x20000000
 80019d0:	080093a8 	.word	0x080093a8
 80019d4:	20000368 	.word	0x20000368
 80019d8:	080093bc 	.word	0x080093bc
 80019dc:	080093c4 	.word	0x080093c4
 80019e0:	20000134 	.word	0x20000134
 80019e4:	200001bc 	.word	0x200001bc
 80019e8:	cccccccd 	.word	0xcccccccd
 80019ec:	66666667 	.word	0x66666667
 80019f0:	080093d0 	.word	0x080093d0
 80019f4:	080093d4 	.word	0x080093d4
 80019f8:	080093d8 	.word	0x080093d8

080019fc <MAIN_MENU_Set_State>:

void MAIN_MENU_Set_State(){
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = MAIN_MENU;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MAIN_MENU_Set_State+0x20>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <MAIN_MENU_Set_State+0x20>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <MAIN_MENU_Set_State+0x20>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	725a      	strb	r2, [r3, #9]
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	200001c0 	.word	0x200001c0

08001a20 <MAIN_MENU_Update_Value>:

void MAIN_MENU_Update_Value(){
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = MAIN_MENU;
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <MAIN_MENU_Update_Value+0x18>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001a2a:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <MAIN_MENU_Update_Value+0x18>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	721a      	strb	r2, [r3, #8]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	200001c0 	.word	0x200001c0

08001a3c <MENU_Init>:

MENU_DATA_t MENU_Data;

#define BLINKING_CYCLE		1000

void MENU_Init(LCD_I2C_HandleTypeDef *p_hlcd){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	MENU_Data.hlcd = p_hlcd;
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <MENU_Init+0x44>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6053      	str	r3, [r2, #4]
	MENU_Data.changed = 0;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <MENU_Init+0x44>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <MENU_Init+0x44>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	725a      	strb	r2, [r3, #9]
	MENU_Data.menu_type = MAIN_MENU;
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <MENU_Init+0x44>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
	MENU_Data.blinking_timer = 0;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <MENU_Init+0x44>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
	MENU_Data.blink_state = 1;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <MENU_Init+0x44>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	741a      	strb	r2, [r3, #16]
	MAIN_MENU_Init();
 8001a68:	f7ff fd80 	bl	800156c <MAIN_MENU_Init>
	SR_MENU_Init();
 8001a6c:	f000 f970 	bl	8001d50 <SR_MENU_Init>
	TL_MENU_Init();
 8001a70:	f000 fd1c 	bl	80024ac <TL_MENU_Init>
	ST_MENU_Init();
 8001a74:	f000 fb40 	bl	80020f8 <ST_MENU_Init>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200001c0 	.word	0x200001c0

08001a84 <MENU_Handle>:
//		timer = HAL_GetTick();
//		count ++;
//	}
//}

void MENU_Handle(){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	if(!MENU_Data.changed){
 8001a88:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <MENU_Handle+0x98>)
 8001a8a:	7a1b      	ldrb	r3, [r3, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d124      	bne.n	8001ada <MENU_Handle+0x56>
		switch(MENU_Data.menu_type){
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <MENU_Handle+0x98>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d81c      	bhi.n	8001ad2 <MENU_Handle+0x4e>
 8001a98:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <MENU_Handle+0x1c>)
 8001a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9e:	bf00      	nop
 8001aa0:	08001ab5 	.word	0x08001ab5
 8001aa4:	08001abb 	.word	0x08001abb
 8001aa8:	08001ac1 	.word	0x08001ac1
 8001aac:	08001ac7 	.word	0x08001ac7
 8001ab0:	08001acd 	.word	0x08001acd
			case MAIN_MENU:
				MAIN_MENU_Display();
 8001ab4:	f7ff fe44 	bl	8001740 <MAIN_MENU_Display>
				break;
 8001ab8:	e00c      	b.n	8001ad4 <MENU_Handle+0x50>
			case SETTING_MENU:
				SETTING_MENU_Display();
 8001aba:	f000 f8bb 	bl	8001c34 <SETTING_MENU_Display>
				break;
 8001abe:	e009      	b.n	8001ad4 <MENU_Handle+0x50>
			case SETTING_REALTIME_MENU:
				SR_MENU_Display();
 8001ac0:	f000 fa5a 	bl	8001f78 <SR_MENU_Display>
				break;
 8001ac4:	e006      	b.n	8001ad4 <MENU_Handle+0x50>
			case TIMELINE_LIST_MENU:
				TL_MENU_Display();
 8001ac6:	f000 fe15 	bl	80026f4 <TL_MENU_Display>
				break;
 8001aca:	e003      	b.n	8001ad4 <MENU_Handle+0x50>
			case SETTING_TIMELINE_MENU:
				ST_MENU_Display();
 8001acc:	f000 fc04 	bl	80022d8 <ST_MENU_Display>
				break;
 8001ad0:	e000      	b.n	8001ad4 <MENU_Handle+0x50>
			default:
				break;
 8001ad2:	bf00      	nop
		}
		MENU_Data.changed = 1;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MENU_Handle+0x98>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	721a      	strb	r2, [r3, #8]
	}

	if(HAL_GetTick() - MENU_Data.blinking_timer > BLINKING_CYCLE){
 8001ada:	f001 fccf 	bl	800347c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MENU_Handle+0x98>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aea:	d915      	bls.n	8001b18 <MENU_Handle+0x94>
		if(MENU_Data.menu_type == MAIN_MENU){
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <MENU_Handle+0x98>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10c      	bne.n	8001b0e <MENU_Handle+0x8a>
			MENU_Data.changed = 0;
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MENU_Handle+0x98>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	721a      	strb	r2, [r3, #8]
			MENU_Data.blink_state = !MENU_Data.blink_state;
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <MENU_Handle+0x98>)
 8001afc:	7c1b      	ldrb	r3, [r3, #16]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <MENU_Handle+0x98>)
 8001b0c:	741a      	strb	r2, [r3, #16]
		}
		MENU_Data.blinking_timer = HAL_GetTick();
 8001b0e:	f001 fcb5 	bl	800347c <HAL_GetTick>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a01      	ldr	r2, [pc, #4]	; (8001b1c <MENU_Handle+0x98>)
 8001b16:	60d3      	str	r3, [r2, #12]
	}

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200001c0 	.word	0x200001c0

08001b20 <SETTING_MENU_Set_State>:
void SETTING_MENU_Init(){
	SETTING_MENU_Data.current_pointer = 0;
	SETTING_MENU_Data.is_setting_time_format = 0;
}

void SETTING_MENU_Set_State(){
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = SETTING_MENU;
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <SETTING_MENU_Set_State+0x2c>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <SETTING_MENU_Set_State+0x2c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <SETTING_MENU_Set_State+0x2c>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	725a      	strb	r2, [r3, #9]
	SETTING_MENU_Data.current_pointer = 0;
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <SETTING_MENU_Set_State+0x30>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
	SETTING_MENU_Data.is_setting_time_format = 0;
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <SETTING_MENU_Set_State+0x30>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	705a      	strb	r2, [r3, #1]
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	200001c0 	.word	0x200001c0
 8001b50:	200001d4 	.word	0x200001d4

08001b54 <SETTING_MENU_Config_Time_Format>:

void SETTING_MENU_Config_Time_Format(){
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
	if(MAIN_MENU_Data.time_format == FORMAT_12_HOURS){
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <SETTING_MENU_Config_Time_Format+0x30>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <SETTING_MENU_Config_Time_Format+0x14>
		MAIN_MENU_Data.time_format = FORMAT_24_HOURS;
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <SETTING_MENU_Config_Time_Format+0x30>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e002      	b.n	8001b6e <SETTING_MENU_Config_Time_Format+0x1a>
	} else{
		MAIN_MENU_Data.time_format = FORMAT_12_HOURS;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <SETTING_MENU_Config_Time_Format+0x30>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
	}
	MENU_Data.menu_type = SETTING_MENU;
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <SETTING_MENU_Config_Time_Format+0x34>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <SETTING_MENU_Config_Time_Format+0x34>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	721a      	strb	r2, [r3, #8]
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	200001bc 	.word	0x200001bc
 8001b88:	200001c0 	.word	0x200001c0

08001b8c <SETTING_MENU_Change_Pointer>:

void SETTING_MENU_Change_Pointer(uint8_t p_is_increase){
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
	SETTING_MENU_Data.current_pointer += (p_is_increase) ? 1 : -1;
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <SETTING_MENU_Change_Pointer+0x60>)
 8001b98:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	79fa      	ldrb	r2, [r7, #7]
 8001ba0:	2a00      	cmp	r2, #0
 8001ba2:	d001      	beq.n	8001ba8 <SETTING_MENU_Change_Pointer+0x1c>
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	e000      	b.n	8001baa <SETTING_MENU_Change_Pointer+0x1e>
 8001ba8:	22ff      	movs	r2, #255	; 0xff
 8001baa:	4413      	add	r3, r2
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	b25a      	sxtb	r2, r3
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <SETTING_MENU_Change_Pointer+0x60>)
 8001bb2:	701a      	strb	r2, [r3, #0]
	if(SETTING_MENU_Data.current_pointer < 0){
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <SETTING_MENU_Change_Pointer+0x60>)
 8001bb6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	da02      	bge.n	8001bc4 <SETTING_MENU_Change_Pointer+0x38>
		SETTING_MENU_Data.current_pointer = 0;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <SETTING_MENU_Change_Pointer+0x60>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
	}
	if(SETTING_MENU_Data.current_pointer > 2){
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <SETTING_MENU_Change_Pointer+0x60>)
 8001bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	dd02      	ble.n	8001bd4 <SETTING_MENU_Change_Pointer+0x48>
		SETTING_MENU_Data.current_pointer = 2;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <SETTING_MENU_Change_Pointer+0x60>)
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	701a      	strb	r2, [r3, #0]
	}
	MENU_Data.menu_type = SETTING_MENU;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <SETTING_MENU_Change_Pointer+0x64>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <SETTING_MENU_Change_Pointer+0x64>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	721a      	strb	r2, [r3, #8]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	200001d4 	.word	0x200001d4
 8001bf0:	200001c0 	.word	0x200001c0

08001bf4 <SETTING_MENU_Change_Working_State>:

void SETTING_MENU_Change_Working_State(){
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
	if(SETTING_MENU_Data.current_pointer == 0){
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <SETTING_MENU_Change_Working_State+0x38>)
 8001bfa:	f993 3000 	ldrsb.w	r3, [r3]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <SETTING_MENU_Change_Working_State+0x2e>
		SETTING_MENU_Data.is_setting_time_format = !SETTING_MENU_Data.is_setting_time_format;
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <SETTING_MENU_Change_Working_State+0x38>)
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bf0c      	ite	eq
 8001c0a:	2301      	moveq	r3, #1
 8001c0c:	2300      	movne	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <SETTING_MENU_Change_Working_State+0x38>)
 8001c14:	705a      	strb	r2, [r3, #1]
		MENU_Data.menu_type = SETTING_MENU;
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <SETTING_MENU_Change_Working_State+0x3c>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
		MENU_Data.changed = 0;
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <SETTING_MENU_Change_Working_State+0x3c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	721a      	strb	r2, [r3, #8]
	}
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200001d4 	.word	0x200001d4
 8001c30:	200001c0 	.word	0x200001c0

08001c34 <SETTING_MENU_Display>:

void SETTING_MENU_Display(){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	if(MENU_Data.is_changing_menu){
 8001c38:	4b3c      	ldr	r3, [pc, #240]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001c3a:	7a5b      	ldrb	r3, [r3, #9]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <SETTING_MENU_Display+0x1c>
		LCD_Clear(MENU_Data.hlcd);
 8001c40:	4b3a      	ldr	r3, [pc, #232]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f006 fbfc 	bl	8008442 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8001c4a:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	725a      	strb	r2, [r3, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 4, 0);
 8001c50:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	2104      	movs	r1, #4
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f006 fc07 	bl	800846c <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Setting Menu");
 8001c5e:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4933      	ldr	r1, [pc, #204]	; (8001d30 <SETTING_MENU_Display+0xfc>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f006 fbae 	bl	80083c6 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 1);
 8001c6a:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f006 fbfa 	bl	800846c <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, " Time format:  %s ", (MAIN_MENU_Data.time_format == FORMAT_12_HOURS) ? "12" : "24");
 8001c78:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001c7a:	6858      	ldr	r0, [r3, #4]
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <SETTING_MENU_Display+0x100>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <SETTING_MENU_Display+0x54>
 8001c84:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <SETTING_MENU_Display+0x104>)
 8001c86:	e000      	b.n	8001c8a <SETTING_MENU_Display+0x56>
 8001c88:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <SETTING_MENU_Display+0x108>)
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	492c      	ldr	r1, [pc, #176]	; (8001d40 <SETTING_MENU_Display+0x10c>)
 8001c8e:	f006 fb9a 	bl	80083c6 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 2);
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f006 fbe6 	bl	800846c <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, " Alarm");
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4927      	ldr	r1, [pc, #156]	; (8001d44 <SETTING_MENU_Display+0x110>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f006 fb8d 	bl	80083c6 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 3);
 8001cac:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f006 fbd9 	bl	800846c <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, " Setting real-time");
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4922      	ldr	r1, [pc, #136]	; (8001d48 <SETTING_MENU_Display+0x114>)
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f006 fb80 	bl	80083c6 <LCD_Write>
	if(SETTING_MENU_Data.is_setting_time_format == 1){
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <SETTING_MENU_Display+0x118>)
 8001cc8:	785b      	ldrb	r3, [r3, #1]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d11a      	bne.n	8001d04 <SETTING_MENU_Display+0xd0>
		LCD_Set_Cursor(MENU_Data.hlcd, 14, 1);
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	210e      	movs	r1, #14
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f006 fbc8 	bl	800846c <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	217e      	movs	r1, #126	; 0x7e
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f006 fcae 	bl	8008644 <LCD_Send_Data>
		LCD_Set_Cursor(MENU_Data.hlcd, 17, 1);
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	2111      	movs	r1, #17
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f006 fbbb 	bl	800846c <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, 0x7F);
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	217f      	movs	r1, #127	; 0x7f
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f006 fca1 	bl	8008644 <LCD_Send_Data>
	} else{
		LCD_Set_Cursor(MENU_Data.hlcd, 0, SETTING_MENU_Data.current_pointer + 1);
		LCD_Send_Data(MENU_Data.hlcd, 0x7E);
	}
}
 8001d02:	e011      	b.n	8001d28 <SETTING_MENU_Display+0xf4>
		LCD_Set_Cursor(MENU_Data.hlcd, 0, SETTING_MENU_Data.current_pointer + 1);
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001d06:	6858      	ldr	r0, [r3, #4]
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <SETTING_MENU_Display+0x118>)
 8001d0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3301      	adds	r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	2100      	movs	r1, #0
 8001d18:	f006 fba8 	bl	800846c <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <SETTING_MENU_Display+0xf8>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	217e      	movs	r1, #126	; 0x7e
 8001d22:	4618      	mov	r0, r3
 8001d24:	f006 fc8e 	bl	8008644 <LCD_Send_Data>
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	200001c0 	.word	0x200001c0
 8001d30:	080093dc 	.word	0x080093dc
 8001d34:	200001bc 	.word	0x200001bc
 8001d38:	080093ec 	.word	0x080093ec
 8001d3c:	080093f0 	.word	0x080093f0
 8001d40:	080093f4 	.word	0x080093f4
 8001d44:	08009408 	.word	0x08009408
 8001d48:	08009410 	.word	0x08009410
 8001d4c:	200001d4 	.word	0x200001d4

08001d50 <SR_MENU_Init>:
		"Year",
};

extern char DAY_Str[7][4];

void SR_MENU_Init(){
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
	SR_MENU_Data.state = SETTING_HOUR;
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <SR_MENU_Init+0x2c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
	REALTIME_DATA_HandleTypeDef t_realtime = {0, 0, 0, 0, 0, 0};
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	809a      	strh	r2, [r3, #4]
	SR_MENU_Data.new_realtime = t_realtime;
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <SR_MENU_Init+0x2c>)
 8001d66:	3301      	adds	r3, #1
 8001d68:	463a      	mov	r2, r7
 8001d6a:	6810      	ldr	r0, [r2, #0]
 8001d6c:	6018      	str	r0, [r3, #0]
 8001d6e:	8892      	ldrh	r2, [r2, #4]
 8001d70:	809a      	strh	r2, [r3, #4]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	200001d8 	.word	0x200001d8

08001d80 <SR_MENU_Set_State>:

void SR_MENU_Set_State(){
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
	SR_MENU_Data.state = SETTING_HOUR;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <SR_MENU_Set_State+0x40>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
	REALTIME_DATA_HandleTypeDef t_realtime = {0, 0, 0, 0, 0, 0};
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	809a      	strh	r2, [r3, #4]
	SR_MENU_Data.new_realtime = t_realtime;
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <SR_MENU_Set_State+0x40>)
 8001d96:	3301      	adds	r3, #1
 8001d98:	463a      	mov	r2, r7
 8001d9a:	6810      	ldr	r0, [r2, #0]
 8001d9c:	6018      	str	r0, [r3, #0]
 8001d9e:	8892      	ldrh	r2, [r2, #4]
 8001da0:	809a      	strh	r2, [r3, #4]
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <SR_MENU_Set_State+0x44>)
 8001da4:	2202      	movs	r2, #2
 8001da6:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <SR_MENU_Set_State+0x44>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <SR_MENU_Set_State+0x44>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	725a      	strb	r2, [r3, #9]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	200001d8 	.word	0x200001d8
 8001dc4:	200001c0 	.word	0x200001c0

08001dc8 <SR_MENU_Change_Setting_State>:

void SR_MENU_Change_Setting_State(uint8_t p_is_increase){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
	if(SR_MENU_Data.state == CHECKING_AGAIN){
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <SR_MENU_Change_Setting_State+0x60>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d105      	bne.n	8001de6 <SR_MENU_Change_Setting_State+0x1e>
		REALTIME_Set_New_Realtime(&SR_MENU_Data.new_realtime);
 8001dda:	4814      	ldr	r0, [pc, #80]	; (8001e2c <SR_MENU_Change_Setting_State+0x64>)
 8001ddc:	f7ff fb8e 	bl	80014fc <REALTIME_Set_New_Realtime>
		SETTING_MENU_Set_State();
 8001de0:	f7ff fe9e 	bl	8001b20 <SETTING_MENU_Set_State>
 8001de4:	e01c      	b.n	8001e20 <SR_MENU_Change_Setting_State+0x58>
	} else{
		SR_MENU_Data.state += ((p_is_increase == INCREASE) ? 1 : -1);
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <SR_MENU_Change_Setting_State+0x60>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	79fa      	ldrb	r2, [r7, #7]
 8001dec:	2a01      	cmp	r2, #1
 8001dee:	d101      	bne.n	8001df4 <SR_MENU_Change_Setting_State+0x2c>
 8001df0:	2201      	movs	r2, #1
 8001df2:	e000      	b.n	8001df6 <SR_MENU_Change_Setting_State+0x2e>
 8001df4:	22ff      	movs	r2, #255	; 0xff
 8001df6:	4413      	add	r3, r2
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <SR_MENU_Change_Setting_State+0x60>)
 8001dfc:	701a      	strb	r2, [r3, #0]
		if((int8_t)SR_MENU_Data.state < 0){
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <SR_MENU_Change_Setting_State+0x60>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b25b      	sxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	da05      	bge.n	8001e14 <SR_MENU_Change_Setting_State+0x4c>
			SR_MENU_Data.state = 0;
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <SR_MENU_Change_Setting_State+0x60>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
			SETTING_MENU_Set_State();
 8001e0e:	f7ff fe87 	bl	8001b20 <SETTING_MENU_Set_State>
			return;
 8001e12:	e005      	b.n	8001e20 <SR_MENU_Change_Setting_State+0x58>
		}
		MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <SR_MENU_Change_Setting_State+0x68>)
 8001e16:	2202      	movs	r2, #2
 8001e18:	701a      	strb	r2, [r3, #0]
		MENU_Data.changed = 0;
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SR_MENU_Change_Setting_State+0x68>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	721a      	strb	r2, [r3, #8]
	}
}
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200001d8 	.word	0x200001d8
 8001e2c:	200001d9 	.word	0x200001d9
 8001e30:	200001c0 	.word	0x200001c0

08001e34 <SR_MENU_Set_Value>:

void SR_MENU_Set_Value(uint8_t p_is_increase){
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 8001e3e:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <SR_MENU_Set_Value+0x128>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d87e      	bhi.n	8001f44 <SR_MENU_Set_Value+0x110>
		int8_t *t_data_ptr = (int8_t *)(&SR_MENU_Data.new_realtime) + SR_MENU_Data.state;
 8001e46:	4b45      	ldr	r3, [pc, #276]	; (8001f5c <SR_MENU_Set_Value+0x128>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b44      	ldr	r3, [pc, #272]	; (8001f60 <SR_MENU_Set_Value+0x12c>)
 8001e4e:	4413      	add	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f993 3000 	ldrsb.w	r3, [r3]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	79fa      	ldrb	r2, [r7, #7]
 8001e5c:	2a01      	cmp	r2, #1
 8001e5e:	d101      	bne.n	8001e64 <SR_MENU_Set_Value+0x30>
 8001e60:	2201      	movs	r2, #1
 8001e62:	e000      	b.n	8001e66 <SR_MENU_Set_Value+0x32>
 8001e64:	22ff      	movs	r2, #255	; 0xff
 8001e66:	4413      	add	r3, r2
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	b25a      	sxtb	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	701a      	strb	r2, [r3, #0]
		if(*t_data_ptr > __max_value[SR_MENU_Data.state]){
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f993 3000 	ldrsb.w	r3, [r3]
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <SR_MENU_Set_Value+0x128>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <SR_MENU_Set_Value+0x130>)
 8001e80:	5c5b      	ldrb	r3, [r3, r1]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	dd0a      	ble.n	8001e9c <SR_MENU_Set_Value+0x68>
			*t_data_ptr = (SR_MENU_Data.state == SETTING_DATE) ? 1 : 0;
 8001e86:	4b35      	ldr	r3, [pc, #212]	; (8001f5c <SR_MENU_Set_Value+0x128>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	bf0c      	ite	eq
 8001e8e:	2301      	moveq	r3, #1
 8001e90:	2300      	movne	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	b25a      	sxtb	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	e00c      	b.n	8001eb6 <SR_MENU_Set_Value+0x82>
		} else if(*t_data_ptr < 0){
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f993 3000 	ldrsb.w	r3, [r3]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	da07      	bge.n	8001eb6 <SR_MENU_Set_Value+0x82>
			*t_data_ptr = __max_value[SR_MENU_Data.state];
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <SR_MENU_Set_Value+0x128>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <SR_MENU_Set_Value+0x130>)
 8001eae:	5c9b      	ldrb	r3, [r3, r2]
 8001eb0:	b25a      	sxtb	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	701a      	strb	r2, [r3, #0]
		}
		if(SR_MENU_Data.state == SETTING_YEAR){
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <SR_MENU_Set_Value+0x128>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d142      	bne.n	8001f44 <SR_MENU_Set_Value+0x110>
			uint8_t *t_date_ptr = &SR_MENU_Data.new_realtime.system_date;
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <SR_MENU_Set_Value+0x134>)
 8001ec0:	613b      	str	r3, [r7, #16]
			uint8_t *t_month_ptr = &SR_MENU_Data.new_realtime.system_month;
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <SR_MENU_Set_Value+0x138>)
 8001ec4:	60fb      	str	r3, [r7, #12]
			uint8_t *t_year_ptr = &SR_MENU_Data.new_realtime.system_year;
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <SR_MENU_Set_Value+0x13c>)
 8001ec8:	60bb      	str	r3, [r7, #8]
			if(*t_month_ptr == 2){
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d11b      	bne.n	8001f0a <SR_MENU_Set_Value+0xd6>
				if(*t_date_ptr > ((*t_year_ptr % 4 == 0) ? 29 : 28)){
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <SR_MENU_Set_Value+0xb6>
 8001ee6:	231d      	movs	r3, #29
 8001ee8:	e000      	b.n	8001eec <SR_MENU_Set_Value+0xb8>
 8001eea:	231c      	movs	r3, #28
 8001eec:	4293      	cmp	r3, r2
 8001eee:	da29      	bge.n	8001f44 <SR_MENU_Set_Value+0x110>
					*t_date_ptr = (*t_year_ptr % 4 == 0) ? 29 : 28;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <SR_MENU_Set_Value+0xce>
 8001efe:	221d      	movs	r2, #29
 8001f00:	e000      	b.n	8001f04 <SR_MENU_Set_Value+0xd0>
 8001f02:	221c      	movs	r2, #28
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	e01c      	b.n	8001f44 <SR_MENU_Set_Value+0x110>
				}
			} else if((*t_month_ptr <= 7 && *t_month_ptr % 2 == 0) || (*t_month_ptr >= 8 && *t_month_ptr % 2 == 1)){
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b07      	cmp	r3, #7
 8001f10:	d806      	bhi.n	8001f20 <SR_MENU_Set_Value+0xec>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00a      	beq.n	8001f36 <SR_MENU_Set_Value+0x102>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b07      	cmp	r3, #7
 8001f26:	d90d      	bls.n	8001f44 <SR_MENU_Set_Value+0x110>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <SR_MENU_Set_Value+0x110>
				if(*t_date_ptr > 30){
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b1e      	cmp	r3, #30
 8001f3c:	d902      	bls.n	8001f44 <SR_MENU_Set_Value+0x110>
					*t_date_ptr = 30;
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	221e      	movs	r2, #30
 8001f42:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <SR_MENU_Set_Value+0x140>)
 8001f46:	2202      	movs	r2, #2
 8001f48:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <SR_MENU_Set_Value+0x140>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	721a      	strb	r2, [r3, #8]
}
 8001f50:	bf00      	nop
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	200001d8 	.word	0x200001d8
 8001f60:	200001d9 	.word	0x200001d9
 8001f64:	20000060 	.word	0x20000060
 8001f68:	200001dc 	.word	0x200001dc
 8001f6c:	200001dd 	.word	0x200001dd
 8001f70:	200001de 	.word	0x200001de
 8001f74:	200001c0 	.word	0x200001c0

08001f78 <SR_MENU_Display>:

void SR_MENU_Display(){
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af02      	add	r7, sp, #8
	if(MENU_Data.is_changing_menu){
 8001f7e:	4b55      	ldr	r3, [pc, #340]	; (80020d4 <SR_MENU_Display+0x15c>)
 8001f80:	7a5b      	ldrb	r3, [r3, #9]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <SR_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 8001f86:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <SR_MENU_Display+0x15c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f006 fa59 	bl	8008442 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8001f90:	4b50      	ldr	r3, [pc, #320]	; (80020d4 <SR_MENU_Display+0x15c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	725a      	strb	r2, [r3, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 8001f96:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <SR_MENU_Display+0x15c>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f006 fa64 	bl	800846c <LCD_Set_Cursor>
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 8001fa4:	4b4c      	ldr	r3, [pc, #304]	; (80020d8 <SR_MENU_Display+0x160>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	d80c      	bhi.n	8001fc6 <SR_MENU_Display+0x4e>
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[SR_MENU_Data.state]);
 8001fac:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <SR_MENU_Display+0x15c>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a49      	ldr	r2, [pc, #292]	; (80020d8 <SR_MENU_Display+0x160>)
 8001fb2:	7812      	ldrb	r2, [r2, #0]
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4a49      	ldr	r2, [pc, #292]	; (80020dc <SR_MENU_Display+0x164>)
 8001fb8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001fbc:	4948      	ldr	r1, [pc, #288]	; (80020e0 <SR_MENU_Display+0x168>)
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f006 fa01 	bl	80083c6 <LCD_Write>
 8001fc4:	e005      	b.n	8001fd2 <SR_MENU_Display+0x5a>
	} else{
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
 8001fc6:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <SR_MENU_Display+0x15c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4946      	ldr	r1, [pc, #280]	; (80020e4 <SR_MENU_Display+0x16c>)
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f006 f9fa 	bl	80083c6 <LCD_Write>
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 1);
 8001fd2:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <SR_MENU_Display+0x15c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2103      	movs	r1, #3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f006 fa46 	bl	800846c <LCD_Set_Cursor>
	char t_day_string[] = "SUN";
 8001fe0:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <SR_MENU_Display+0x170>)
 8001fe2:	607b      	str	r3, [r7, #4]
	if(SR_MENU_Data.new_realtime.system_day > 0){
 8001fe4:	4b3c      	ldr	r3, [pc, #240]	; (80020d8 <SR_MENU_Display+0x160>)
 8001fe6:	78db      	ldrb	r3, [r3, #3]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <SR_MENU_Display+0x8a>
		strcpy(t_day_string, DAY_Str[SR_MENU_Data.new_realtime.system_day - 1]);
 8001fec:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <SR_MENU_Display+0x160>)
 8001fee:	78db      	ldrb	r3, [r3, #3]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4a3d      	ldr	r2, [pc, #244]	; (80020ec <SR_MENU_Display+0x174>)
 8001ff6:	441a      	add	r2, r3
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f006 fe11 	bl	8008c24 <strcpy>
	}
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8002002:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <SR_MENU_Display+0x15c>)
 8002004:	6858      	ldr	r0, [r3, #4]
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);
 8002006:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <SR_MENU_Display+0x160>)
 8002008:	791b      	ldrb	r3, [r3, #4]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 800200a:	461c      	mov	r4, r3
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);
 800200c:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <SR_MENU_Display+0x160>)
 800200e:	795b      	ldrb	r3, [r3, #5]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8002010:	4619      	mov	r1, r3
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);
 8002012:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <SR_MENU_Display+0x160>)
 8002014:	799b      	ldrb	r3, [r3, #6]
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 8002016:	1d3a      	adds	r2, r7, #4
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	9100      	str	r1, [sp, #0]
 800201c:	4623      	mov	r3, r4
 800201e:	4934      	ldr	r1, [pc, #208]	; (80020f0 <SR_MENU_Display+0x178>)
 8002020:	f006 f9d1 	bl	80083c6 <LCD_Write>

	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour / 10, 2, 2);
 8002024:	4b2c      	ldr	r3, [pc, #176]	; (80020d8 <SR_MENU_Display+0x160>)
 8002026:	785b      	ldrb	r3, [r3, #1]
 8002028:	4a32      	ldr	r2, [pc, #200]	; (80020f4 <SR_MENU_Display+0x17c>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	08db      	lsrs	r3, r3, #3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2202      	movs	r2, #2
 8002034:	2102      	movs	r1, #2
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fb2c 	bl	8001694 <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour % 10, 6, 2);
 800203c:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <SR_MENU_Display+0x160>)
 800203e:	785a      	ldrb	r2, [r3, #1]
 8002040:	4b2c      	ldr	r3, [pc, #176]	; (80020f4 <SR_MENU_Display+0x17c>)
 8002042:	fba3 1302 	umull	r1, r3, r3, r2
 8002046:	08d9      	lsrs	r1, r3, #3
 8002048:	460b      	mov	r3, r1
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2202      	movs	r2, #2
 8002056:	2106      	movs	r1, #6
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fb1b 	bl	8001694 <MAIN_MENU_Display_Num>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 800205e:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <SR_MENU_Display+0x15c>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	2109      	movs	r1, #9
 8002066:	4618      	mov	r0, r3
 8002068:	f006 fa00 	bl	800846c <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <SR_MENU_Display+0x15c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	212e      	movs	r1, #46	; 0x2e
 8002072:	4618      	mov	r0, r3
 8002074:	f006 fae6 	bl	8008644 <LCD_Send_Data>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <SR_MENU_Display+0x15c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2203      	movs	r2, #3
 800207e:	2109      	movs	r1, #9
 8002080:	4618      	mov	r0, r3
 8002082:	f006 f9f3 	bl	800846c <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <SR_MENU_Display+0x15c>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	212e      	movs	r1, #46	; 0x2e
 800208c:	4618      	mov	r0, r3
 800208e:	f006 fad9 	bl	8008644 <LCD_Send_Data>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_minute / 10, 10, 2);
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <SR_MENU_Display+0x160>)
 8002094:	789b      	ldrb	r3, [r3, #2]
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <SR_MENU_Display+0x17c>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	08db      	lsrs	r3, r3, #3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2202      	movs	r2, #2
 80020a2:	210a      	movs	r1, #10
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff faf5 	bl	8001694 <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_minute % 10, 14, 2);
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <SR_MENU_Display+0x160>)
 80020ac:	789a      	ldrb	r2, [r3, #2]
 80020ae:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <SR_MENU_Display+0x17c>)
 80020b0:	fba3 1302 	umull	r1, r3, r3, r2
 80020b4:	08d9      	lsrs	r1, r3, #3
 80020b6:	460b      	mov	r3, r1
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2202      	movs	r2, #2
 80020c4:	210e      	movs	r1, #14
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fae4 	bl	8001694 <MAIN_MENU_Display_Num>
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd90      	pop	{r4, r7, pc}
 80020d4:	200001c0 	.word	0x200001c0
 80020d8:	200001d8 	.word	0x200001d8
 80020dc:	20000068 	.word	0x20000068
 80020e0:	08009450 	.word	0x08009450
 80020e4:	08009464 	.word	0x08009464
 80020e8:	004e5553 	.word	0x004e5553
 80020ec:	20000000 	.word	0x20000000
 80020f0:	0800947c 	.word	0x0800947c
 80020f4:	cccccccd 	.word	0xcccccccd

080020f8 <ST_MENU_Init>:
ST_MENU_Data_HandleTypeDef ST_MENU_Data;

static uint8_t __max_value[] = {23, 59, 1, 1, 1, 1, 1, 1, 1};
extern char *__setting_type_str[6];

void ST_MENU_Init(){
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <ST_MENU_Set_State>:

void ST_MENU_Set_State(){
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <ST_MENU_Set_State+0x48>)
 800210c:	2204      	movs	r2, #4
 800210e:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <ST_MENU_Set_State+0x48>)
 8002112:	2200      	movs	r2, #0
 8002114:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <ST_MENU_Set_State+0x48>)
 8002118:	2201      	movs	r2, #1
 800211a:	725a      	strb	r2, [r3, #9]
	ST_MENU_Data.state = SETTING_ALARM_HOUR;
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <ST_MENU_Set_State+0x4c>)
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
	FLASH_DATA_t t_timeline = {0, 0, 0, 1};
 8002122:	2300      	movs	r3, #0
 8002124:	713b      	strb	r3, [r7, #4]
 8002126:	2300      	movs	r3, #0
 8002128:	717b      	strb	r3, [r7, #5]
 800212a:	2300      	movs	r3, #0
 800212c:	71bb      	strb	r3, [r7, #6]
 800212e:	2301      	movs	r3, #1
 8002130:	71fb      	strb	r3, [r7, #7]
	ST_MENU_Data.timeline_data = t_timeline;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <ST_MENU_Set_State+0x4c>)
 8002134:	3301      	adds	r3, #1
 8002136:	1d3a      	adds	r2, r7, #4
 8002138:	6810      	ldr	r0, [r2, #0]
 800213a:	6018      	str	r0, [r3, #0]
	ST_MENU_Data.current_day_state = 0;
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <ST_MENU_Set_State+0x4c>)
 800213e:	2200      	movs	r2, #0
 8002140:	715a      	strb	r2, [r3, #5]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	200001c0 	.word	0x200001c0
 8002150:	200001e0 	.word	0x200001e0

08002154 <ST_MENU_Change_Setting_State>:

void ST_MENU_Change_Setting_State(uint8_t p_is_increase){
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
	int8_t *t_value = (int8_t *)(&ST_MENU_Data.state);
 800215e:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <ST_MENU_Change_Setting_State+0x78>)
 8002160:	60fb      	str	r3, [r7, #12]
	*t_value += ((p_is_increase == INCREASE) ? 1 : -1);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f993 3000 	ldrsb.w	r3, [r3]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	79fa      	ldrb	r2, [r7, #7]
 800216c:	2a01      	cmp	r2, #1
 800216e:	d101      	bne.n	8002174 <ST_MENU_Change_Setting_State+0x20>
 8002170:	2201      	movs	r2, #1
 8002172:	e000      	b.n	8002176 <ST_MENU_Change_Setting_State+0x22>
 8002174:	22ff      	movs	r2, #255	; 0xff
 8002176:	4413      	add	r3, r2
 8002178:	b2db      	uxtb	r3, r3
 800217a:	b25a      	sxtb	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	701a      	strb	r2, [r3, #0]
	if(*t_value > CHECKING_ALARM_AGAIN){
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f993 3000 	ldrsb.w	r3, [r3]
 8002186:	2b09      	cmp	r3, #9
 8002188:	dd08      	ble.n	800219c <ST_MENU_Change_Setting_State+0x48>
		*t_value = CHECKING_ALARM_AGAIN;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2209      	movs	r2, #9
 800218e:	701a      	strb	r2, [r3, #0]
		TIMELINE_Add(&ST_MENU_Data.timeline_data);
 8002190:	480f      	ldr	r0, [pc, #60]	; (80021d0 <ST_MENU_Change_Setting_State+0x7c>)
 8002192:	f7ff f815 	bl	80011c0 <TIMELINE_Add>
		TL_MENU_Set_State();
 8002196:	f000 f99d 	bl	80024d4 <TL_MENU_Set_State>
 800219a:	e013      	b.n	80021c4 <ST_MENU_Change_Setting_State+0x70>
	} else{
		if(*t_value < 0){
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f993 3000 	ldrsb.w	r3, [r3]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	da05      	bge.n	80021b2 <ST_MENU_Change_Setting_State+0x5e>
			*t_value = 0;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
			TL_MENU_Set_State();
 80021ac:	f000 f992 	bl	80024d4 <TL_MENU_Set_State>
			return;
 80021b0:	e008      	b.n	80021c4 <ST_MENU_Change_Setting_State+0x70>
		}
		ST_MENU_Data.current_day_state = 0;
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <ST_MENU_Change_Setting_State+0x78>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	715a      	strb	r2, [r3, #5]
		MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <ST_MENU_Change_Setting_State+0x80>)
 80021ba:	2204      	movs	r2, #4
 80021bc:	701a      	strb	r2, [r3, #0]
		MENU_Data.changed = 0;
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <ST_MENU_Change_Setting_State+0x80>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	721a      	strb	r2, [r3, #8]
	}
}
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200001e0 	.word	0x200001e0
 80021d0:	200001e1 	.word	0x200001e1
 80021d4:	200001c0 	.word	0x200001c0

080021d8 <ST_MENU_Set_Value>:

void ST_MENU_Set_Value(uint8_t p_is_increase){
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 80021e2:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <ST_MENU_Set_Value+0xec>)
 80021e4:	2204      	movs	r2, #4
 80021e6:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80021e8:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <ST_MENU_Set_Value+0xec>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	721a      	strb	r2, [r3, #8]
	if(ST_MENU_Data.state < CHECKING_ALARM_AGAIN){
 80021ee:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <ST_MENU_Set_Value+0xf0>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d861      	bhi.n	80022ba <ST_MENU_Set_Value+0xe2>
		int8_t *t_data_ptr;
		if(ST_MENU_Data.state >= SETTING_ALARM_SUNDAY){
 80021f6:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <ST_MENU_Set_Value+0xf0>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d902      	bls.n	8002204 <ST_MENU_Set_Value+0x2c>
			t_data_ptr = (int8_t *)(&ST_MENU_Data.current_day_state);
 80021fe:	4b33      	ldr	r3, [pc, #204]	; (80022cc <ST_MENU_Set_Value+0xf4>)
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e005      	b.n	8002210 <ST_MENU_Set_Value+0x38>
		} else{
			t_data_ptr = (int8_t *)(&ST_MENU_Data.timeline_data) + ST_MENU_Data.state;
 8002204:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <ST_MENU_Set_Value+0xf0>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <ST_MENU_Set_Value+0xf8>)
 800220c:	4413      	add	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
		}
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f993 3000 	ldrsb.w	r3, [r3]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	79fa      	ldrb	r2, [r7, #7]
 800221a:	2a01      	cmp	r2, #1
 800221c:	d101      	bne.n	8002222 <ST_MENU_Set_Value+0x4a>
 800221e:	2201      	movs	r2, #1
 8002220:	e000      	b.n	8002224 <ST_MENU_Set_Value+0x4c>
 8002222:	22ff      	movs	r2, #255	; 0xff
 8002224:	4413      	add	r3, r2
 8002226:	b2db      	uxtb	r3, r3
 8002228:	b25a      	sxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	701a      	strb	r2, [r3, #0]
		if(*t_data_ptr > __max_value[ST_MENU_Data.state]){
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f993 3000 	ldrsb.w	r3, [r3]
 8002234:	461a      	mov	r2, r3
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <ST_MENU_Set_Value+0xf0>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	4619      	mov	r1, r3
 800223c:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <ST_MENU_Set_Value+0xfc>)
 800223e:	5c5b      	ldrb	r3, [r3, r1]
 8002240:	429a      	cmp	r2, r3
 8002242:	dd03      	ble.n	800224c <ST_MENU_Set_Value+0x74>
			*t_data_ptr = 0;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	e00c      	b.n	8002266 <ST_MENU_Set_Value+0x8e>
		} else if(*t_data_ptr < 0){
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f993 3000 	ldrsb.w	r3, [r3]
 8002252:	2b00      	cmp	r3, #0
 8002254:	da07      	bge.n	8002266 <ST_MENU_Set_Value+0x8e>
			*t_data_ptr = __max_value[ST_MENU_Data.state];
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <ST_MENU_Set_Value+0xf0>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <ST_MENU_Set_Value+0xfc>)
 800225e:	5c9b      	ldrb	r3, [r3, r2]
 8002260:	b25a      	sxtb	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	701a      	strb	r2, [r3, #0]
		}
		if(ST_MENU_Data.state >= SETTING_ALARM_SUNDAY){
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <ST_MENU_Set_Value+0xf0>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d925      	bls.n	80022ba <ST_MENU_Set_Value+0xe2>
			if(*t_data_ptr){
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f993 3000 	ldrsb.w	r3, [r3]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00f      	beq.n	8002298 <ST_MENU_Set_Value+0xc0>
				ST_MENU_Data.timeline_data.day |= (0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <ST_MENU_Set_Value+0xf0>)
 800227a:	78db      	ldrb	r3, [r3, #3]
 800227c:	b25a      	sxtb	r2, r3
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <ST_MENU_Set_Value+0xf0>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3b02      	subs	r3, #2
 8002284:	2101      	movs	r1, #1
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	b25b      	sxtb	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	b25b      	sxtb	r3, r3
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <ST_MENU_Set_Value+0xf0>)
 8002294:	70da      	strb	r2, [r3, #3]
			} else{
				ST_MENU_Data.timeline_data.day &= ~(0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
			}
		}
	}
}
 8002296:	e010      	b.n	80022ba <ST_MENU_Set_Value+0xe2>
				ST_MENU_Data.timeline_data.day &= ~(0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <ST_MENU_Set_Value+0xf0>)
 800229a:	78db      	ldrb	r3, [r3, #3]
 800229c:	b25a      	sxtb	r2, r3
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <ST_MENU_Set_Value+0xf0>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	3b02      	subs	r3, #2
 80022a4:	2101      	movs	r1, #1
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	4013      	ands	r3, r2
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <ST_MENU_Set_Value+0xf0>)
 80022b8:	70da      	strb	r2, [r3, #3]
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	200001c0 	.word	0x200001c0
 80022c8:	200001e0 	.word	0x200001e0
 80022cc:	200001e5 	.word	0x200001e5
 80022d0:	200001e1 	.word	0x200001e1
 80022d4:	20000080 	.word	0x20000080

080022d8 <ST_MENU_Display>:

void ST_MENU_Display(){
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
	if(MENU_Data.is_changing_menu){
 80022de:	4b4d      	ldr	r3, [pc, #308]	; (8002414 <ST_MENU_Display+0x13c>)
 80022e0:	7a5b      	ldrb	r3, [r3, #9]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d007      	beq.n	80022f6 <ST_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 80022e6:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <ST_MENU_Display+0x13c>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f006 f8a9 	bl	8008442 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 80022f0:	4b48      	ldr	r3, [pc, #288]	; (8002414 <ST_MENU_Display+0x13c>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	725a      	strb	r2, [r3, #9]
	}

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 1);
 80022f6:	4b47      	ldr	r3, [pc, #284]	; (8002414 <ST_MENU_Display+0x13c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f006 f8b4 	bl	800846c <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Time: %02d:%02d", ST_MENU_Data.timeline_data.hour, ST_MENU_Data.timeline_data.minute);
 8002304:	4b43      	ldr	r3, [pc, #268]	; (8002414 <ST_MENU_Display+0x13c>)
 8002306:	6858      	ldr	r0, [r3, #4]
 8002308:	4b43      	ldr	r3, [pc, #268]	; (8002418 <ST_MENU_Display+0x140>)
 800230a:	785b      	ldrb	r3, [r3, #1]
 800230c:	461a      	mov	r2, r3
 800230e:	4b42      	ldr	r3, [pc, #264]	; (8002418 <ST_MENU_Display+0x140>)
 8002310:	789b      	ldrb	r3, [r3, #2]
 8002312:	4942      	ldr	r1, [pc, #264]	; (800241c <ST_MENU_Display+0x144>)
 8002314:	f006 f857 	bl	80083c6 <LCD_Write>

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 2);
 8002318:	4b3e      	ldr	r3, [pc, #248]	; (8002414 <ST_MENU_Display+0x13c>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f006 f8a3 	bl	800846c <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Day: C234567");
 8002326:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <ST_MENU_Display+0x13c>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	493d      	ldr	r1, [pc, #244]	; (8002420 <ST_MENU_Display+0x148>)
 800232c:	4618      	mov	r0, r3
 800232e:	f006 f84a 	bl	80083c6 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 5, 3);
 8002332:	4b38      	ldr	r3, [pc, #224]	; (8002414 <ST_MENU_Display+0x13c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2203      	movs	r2, #3
 8002338:	2105      	movs	r1, #5
 800233a:	4618      	mov	r0, r3
 800233c:	f006 f896 	bl	800846c <LCD_Set_Cursor>
	for(int i = 0; i < 7; i++){
 8002340:	2300      	movs	r3, #0
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	e01d      	b.n	8002382 <ST_MENU_Display+0xaa>
		uint8_t t_day_value = ST_MENU_Data.timeline_data.day & (1 << i);
 8002346:	4b34      	ldr	r3, [pc, #208]	; (8002418 <ST_MENU_Display+0x140>)
 8002348:	78db      	ldrb	r3, [r3, #3]
 800234a:	b25a      	sxtb	r2, r3
 800234c:	2101      	movs	r1, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	b25b      	sxtb	r3, r3
 8002356:	4013      	ands	r3, r2
 8002358:	b25b      	sxtb	r3, r3
 800235a:	70fb      	strb	r3, [r7, #3]
		if(t_day_value){
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <ST_MENU_Display+0x98>
			LCD_Send_Data(MENU_Data.hlcd, 0x00);
 8002362:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <ST_MENU_Display+0x13c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f006 f96b 	bl	8008644 <LCD_Send_Data>
 800236e:	e005      	b.n	800237c <ST_MENU_Display+0xa4>
		} else{
			LCD_Send_Data(MENU_Data.hlcd, 0xFE);
 8002370:	4b28      	ldr	r3, [pc, #160]	; (8002414 <ST_MENU_Display+0x13c>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	21fe      	movs	r1, #254	; 0xfe
 8002376:	4618      	mov	r0, r3
 8002378:	f006 f964 	bl	8008644 <LCD_Send_Data>
	for(int i = 0; i < 7; i++){
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3301      	adds	r3, #1
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b06      	cmp	r3, #6
 8002386:	ddde      	ble.n	8002346 <ST_MENU_Display+0x6e>
		}
	}

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 8002388:	4b22      	ldr	r3, [pc, #136]	; (8002414 <ST_MENU_Display+0x13c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f006 f86b 	bl	800846c <LCD_Set_Cursor>
	if(ST_MENU_Data.state < SETTING_ALARM_SUNDAY){
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <ST_MENU_Display+0x140>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d811      	bhi.n	80023c2 <ST_MENU_Display+0xea>
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[ST_MENU_Data.state]);
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <ST_MENU_Display+0x13c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <ST_MENU_Display+0x140>)
 80023a4:	7812      	ldrb	r2, [r2, #0]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <ST_MENU_Display+0x14c>)
 80023aa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80023ae:	491e      	ldr	r1, [pc, #120]	; (8002428 <ST_MENU_Display+0x150>)
 80023b0:	4618      	mov	r0, r3
 80023b2:	f006 f808 	bl	80083c6 <LCD_Write>
		LCD_Cursor_No_Blink(MENU_Data.hlcd);
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <ST_MENU_Display+0x13c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f006 f8c4 	bl	8008548 <LCD_Cursor_No_Blink>
		LCD_Set_Cursor(MENU_Data.hlcd, 5 + ST_MENU_Data.state - SETTING_ALARM_SUNDAY, 2);
	} else{
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
		LCD_Cursor_No_Blink(MENU_Data.hlcd);
	}
}
 80023c0:	e024      	b.n	800240c <ST_MENU_Display+0x134>
	} else if(ST_MENU_Data.state < CHECKING_ALARM_AGAIN){
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <ST_MENU_Display+0x140>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d815      	bhi.n	80023f6 <ST_MENU_Display+0x11e>
		LCD_Write(MENU_Data.hlcd, "  Setting : DAY   ");
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <ST_MENU_Display+0x13c>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4917      	ldr	r1, [pc, #92]	; (800242c <ST_MENU_Display+0x154>)
 80023d0:	4618      	mov	r0, r3
 80023d2:	f005 fff8 	bl	80083c6 <LCD_Write>
		LCD_Cursor_Blink(MENU_Data.hlcd);
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <ST_MENU_Display+0x13c>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4618      	mov	r0, r3
 80023dc:	f006 f89c 	bl	8008518 <LCD_Cursor_Blink>
		LCD_Set_Cursor(MENU_Data.hlcd, 5 + ST_MENU_Data.state - SETTING_ALARM_SUNDAY, 2);
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <ST_MENU_Display+0x13c>)
 80023e2:	6858      	ldr	r0, [r3, #4]
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <ST_MENU_Display+0x140>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	3303      	adds	r3, #3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2202      	movs	r2, #2
 80023ee:	4619      	mov	r1, r3
 80023f0:	f006 f83c 	bl	800846c <LCD_Set_Cursor>
}
 80023f4:	e00a      	b.n	800240c <ST_MENU_Display+0x134>
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <ST_MENU_Display+0x13c>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	490d      	ldr	r1, [pc, #52]	; (8002430 <ST_MENU_Display+0x158>)
 80023fc:	4618      	mov	r0, r3
 80023fe:	f005 ffe2 	bl	80083c6 <LCD_Write>
		LCD_Cursor_No_Blink(MENU_Data.hlcd);
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <ST_MENU_Display+0x13c>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4618      	mov	r0, r3
 8002408:	f006 f89e 	bl	8008548 <LCD_Cursor_No_Blink>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	200001c0 	.word	0x200001c0
 8002418:	200001e0 	.word	0x200001e0
 800241c:	08009490 	.word	0x08009490
 8002420:	080094a0 	.word	0x080094a0
 8002424:	20000068 	.word	0x20000068
 8002428:	080094b0 	.word	0x080094b0
 800242c:	080094c4 	.word	0x080094c4
 8002430:	080094d8 	.word	0x080094d8

08002434 <__create_day_string>:
#include "Timeline_Manage.h"
#include "Alarm.h"

TIME_LIST_MENU_DATA_t TL_MENU_Data;

static void __create_day_string(char str[], uint8_t day){
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	70fb      	strb	r3, [r7, #3]
	uint8_t t_num_of_day = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 7; i++){
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	e026      	b.n	8002498 <__create_day_string+0x64>
		uint8_t t_day_value = day & (1 << i);
 800244a:	2201      	movs	r2, #1
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	b25a      	sxtb	r2, r3
 8002454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002458:	4013      	ands	r3, r2
 800245a:	b25b      	sxtb	r3, r3
 800245c:	73fb      	strb	r3, [r7, #15]
		if(t_day_value){
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d016      	beq.n	8002492 <__create_day_string+0x5e>
			if(t_day_value == 1){
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d108      	bne.n	800247c <__create_day_string+0x48>
				str[t_num_of_day++] = 'C';
 800246a:	7dfb      	ldrb	r3, [r7, #23]
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	75fa      	strb	r2, [r7, #23]
 8002470:	461a      	mov	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	2243      	movs	r2, #67	; 0x43
 8002478:	701a      	strb	r2, [r3, #0]
 800247a:	e00a      	b.n	8002492 <__create_day_string+0x5e>
			} else{
				str[t_num_of_day++] = '1' + i;
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	7dfb      	ldrb	r3, [r7, #23]
 8002482:	1c59      	adds	r1, r3, #1
 8002484:	75f9      	strb	r1, [r7, #23]
 8002486:	4619      	mov	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	440b      	add	r3, r1
 800248c:	3231      	adds	r2, #49	; 0x31
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 7; i++){
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	3301      	adds	r3, #1
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b06      	cmp	r3, #6
 800249c:	ddd5      	ble.n	800244a <__create_day_string+0x16>
			}
		}
	}
}
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
	...

080024ac <TL_MENU_Init>:

void TL_MENU_Init(){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	TL_MENU_Data.first_line = 0;
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <TL_MENU_Init+0x24>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
	TL_MENU_Data.numer_of_choices = 0;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <TL_MENU_Init+0x24>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	705a      	strb	r2, [r3, #1]
	TL_MENU_Data.current_pointer = 0;
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <TL_MENU_Init+0x24>)
 80024be:	2200      	movs	r2, #0
 80024c0:	709a      	strb	r2, [r3, #2]
	TL_MENU_Data.woking_state = NORMAL_STATE;
 80024c2:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <TL_MENU_Init+0x24>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	70da      	strb	r2, [r3, #3]
	TIMELINE_Init();
 80024c8:	f7fe fe34 	bl	8001134 <TIMELINE_Init>
//	for(int i = 0; i < NUMBER_OF_CHOICE; i++){
//		for(int j = 0; j < 21; j++){
//			TL_MENU_Data.list_str[i][j] = 0;
//		}
//	}
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200001e8 	.word	0x200001e8

080024d4 <TL_MENU_Set_State>:

void TL_MENU_Set_State(){
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 80024d8:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <TL_MENU_Set_State+0x40>)
 80024da:	2203      	movs	r2, #3
 80024dc:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80024de:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <TL_MENU_Set_State+0x40>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	721a      	strb	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <TL_MENU_Set_State+0x40>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	725a      	strb	r2, [r3, #9]
	TL_MENU_Data.first_line = 0;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <TL_MENU_Set_State+0x44>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
	TL_MENU_Data.current_pointer = 0;
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <TL_MENU_Set_State+0x44>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	709a      	strb	r2, [r3, #2]
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <TL_MENU_Set_State+0x48>)
 80024f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fc:	3301      	adds	r3, #1
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <TL_MENU_Set_State+0x44>)
 8002502:	705a      	strb	r2, [r3, #1]
	TL_MENU_Data.woking_state = NORMAL_STATE;
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <TL_MENU_Set_State+0x44>)
 8002506:	2200      	movs	r2, #0
 8002508:	70da      	strb	r2, [r3, #3]
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	200001c0 	.word	0x200001c0
 8002518:	200001e8 	.word	0x200001e8
 800251c:	20000164 	.word	0x20000164

08002520 <TL_MENU_Change_Working_State>:

void TL_MENU_Change_Working_State(){
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	if(TL_MENU_Data.current_pointer == 0) return;
 8002524:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 8002526:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d050      	beq.n	80025d0 <TL_MENU_Change_Working_State+0xb0>
	if(TL_MENU_Data.woking_state == NORMAL_STATE){
 800252e:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 8002530:	78db      	ldrb	r3, [r3, #3]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10d      	bne.n	8002552 <TL_MENU_Change_Working_State+0x32>
		TL_MENU_Data.woking_state = CONFIG_TIMELINE_STATE;
 8002536:	4b27      	ldr	r3, [pc, #156]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 8002538:	2201      	movs	r2, #1
 800253a:	70da      	strb	r2, [r3, #3]
		TL_MENU_Data.timeline_state = TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state;
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 800253e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002542:	3b01      	subs	r3, #1
 8002544:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <TL_MENU_Change_Working_State+0xb8>)
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	79da      	ldrb	r2, [r3, #7]
 800254c:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 800254e:	711a      	strb	r2, [r3, #4]
 8002550:	e037      	b.n	80025c2 <TL_MENU_Change_Working_State+0xa2>
	} else{
		TL_MENU_Data.woking_state = NORMAL_STATE;
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 8002554:	2200      	movs	r2, #0
 8002556:	70da      	strb	r2, [r3, #3]
		if(TL_MENU_Data.timeline_state == DELETE_TIMELINE && !ALARM_Is_Buzzer_Running()){
 8002558:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 800255a:	791b      	ldrb	r3, [r3, #4]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d123      	bne.n	80025a8 <TL_MENU_Change_Working_State+0x88>
 8002560:	f7fe fbb6 	bl	8000cd0 <ALARM_Is_Buzzer_Running>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d11e      	bne.n	80025a8 <TL_MENU_Change_Working_State+0x88>
			TIMELINE_Delete(TL_MENU_Data.current_pointer - 1);
 800256a:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 800256c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b2db      	uxtb	r3, r3
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fe48 	bl	800120c <TIMELINE_Delete>
			TL_MENU_Data.numer_of_choices--;
 800257c:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	3b01      	subs	r3, #1
 8002582:	b2da      	uxtb	r2, r3
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 8002586:	705a      	strb	r2, [r3, #1]
			if(TL_MENU_Data.current_pointer > TL_MENU_Data.numer_of_choices - 1){
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 800258a:	785b      	ldrb	r3, [r3, #1]
 800258c:	461a      	mov	r2, r3
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 8002590:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002594:	429a      	cmp	r2, r3
 8002596:	dc14      	bgt.n	80025c2 <TL_MENU_Change_Working_State+0xa2>
				TL_MENU_Data.current_pointer = TL_MENU_Data.numer_of_choices - 1;
 8002598:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 800259a:	785b      	ldrb	r3, [r3, #1]
 800259c:	3b01      	subs	r3, #1
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	b25a      	sxtb	r2, r3
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 80025a4:	709a      	strb	r2, [r3, #2]
			if(TL_MENU_Data.current_pointer > TL_MENU_Data.numer_of_choices - 1){
 80025a6:	e00c      	b.n	80025c2 <TL_MENU_Change_Working_State+0xa2>
			}
		} else{
			TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state = TL_MENU_Data.timeline_state;
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 80025aa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	4a08      	ldr	r2, [pc, #32]	; (80025d4 <TL_MENU_Change_Working_State+0xb4>)
 80025b2:	7911      	ldrb	r1, [r2, #4]
 80025b4:	4a08      	ldr	r2, [pc, #32]	; (80025d8 <TL_MENU_Change_Working_State+0xb8>)
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	460a      	mov	r2, r1
 80025bc:	71da      	strb	r2, [r3, #7]
			TIMELINE_Store_To_Flash();
 80025be:	f7fe fed3 	bl	8001368 <TIMELINE_Store_To_Flash>
		}
	}
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <TL_MENU_Change_Working_State+0xbc>)
 80025c4:	2203      	movs	r2, #3
 80025c6:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <TL_MENU_Change_Working_State+0xbc>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	721a      	strb	r2, [r3, #8]
 80025ce:	e000      	b.n	80025d2 <TL_MENU_Change_Working_State+0xb2>
	if(TL_MENU_Data.current_pointer == 0) return;
 80025d0:	bf00      	nop
}
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	200001e8 	.word	0x200001e8
 80025d8:	20000164 	.word	0x20000164
 80025dc:	200001c0 	.word	0x200001c0

080025e0 <TL_MENU_Change_Pointer>:

void TL_MENU_Change_Pointer(uint8_t p_is_increase){
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 80025ea:	4b28      	ldr	r3, [pc, #160]	; (800268c <TL_MENU_Change_Pointer+0xac>)
 80025ec:	2203      	movs	r2, #3
 80025ee:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80025f0:	4b26      	ldr	r3, [pc, #152]	; (800268c <TL_MENU_Change_Pointer+0xac>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	721a      	strb	r2, [r3, #8]
	TL_MENU_Data.current_pointer += (p_is_increase == INCREASE) ? 1 : -1;
 80025f6:	4b26      	ldr	r3, [pc, #152]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 80025f8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	79fa      	ldrb	r2, [r7, #7]
 8002600:	2a01      	cmp	r2, #1
 8002602:	d101      	bne.n	8002608 <TL_MENU_Change_Pointer+0x28>
 8002604:	2201      	movs	r2, #1
 8002606:	e000      	b.n	800260a <TL_MENU_Change_Pointer+0x2a>
 8002608:	22ff      	movs	r2, #255	; 0xff
 800260a:	4413      	add	r3, r2
 800260c:	b2db      	uxtb	r3, r3
 800260e:	b25a      	sxtb	r2, r3
 8002610:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 8002612:	709a      	strb	r2, [r3, #2]
	if(TL_MENU_Data.current_pointer < 0){
 8002614:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 8002616:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800261a:	2b00      	cmp	r3, #0
 800261c:	da03      	bge.n	8002626 <TL_MENU_Change_Pointer+0x46>
		TL_MENU_Data.current_pointer = 0;
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 8002620:	2200      	movs	r2, #0
 8002622:	709a      	strb	r2, [r3, #2]
 8002624:	e00e      	b.n	8002644 <TL_MENU_Change_Pointer+0x64>
	} else if(TL_MENU_Data.current_pointer >= TL_MENU_Data.numer_of_choices){
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 8002628:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800262c:	461a      	mov	r2, r3
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	429a      	cmp	r2, r3
 8002634:	db06      	blt.n	8002644 <TL_MENU_Change_Pointer+0x64>
		TL_MENU_Data.current_pointer = TL_MENU_Data.numer_of_choices - 1;
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	3b01      	subs	r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	b25a      	sxtb	r2, r3
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 8002642:	709a      	strb	r2, [r3, #2]
	}

	if(TL_MENU_Data.current_pointer > TL_MENU_Data.first_line + 3){
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 8002646:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800264a:	461a      	mov	r2, r3
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	3303      	adds	r3, #3
 8002652:	429a      	cmp	r2, r3
 8002654:	dd06      	ble.n	8002664 <TL_MENU_Change_Pointer+0x84>
		TL_MENU_Data.first_line++;
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	3301      	adds	r3, #1
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 8002660:	701a      	strb	r2, [r3, #0]
	} else if(TL_MENU_Data.current_pointer < TL_MENU_Data.first_line){
		TL_MENU_Data.first_line--;
	}
}
 8002662:	e00d      	b.n	8002680 <TL_MENU_Change_Pointer+0xa0>
	} else if(TL_MENU_Data.current_pointer < TL_MENU_Data.first_line){
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 8002666:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800266a:	461a      	mov	r2, r3
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	da05      	bge.n	8002680 <TL_MENU_Change_Pointer+0xa0>
		TL_MENU_Data.first_line--;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	3b01      	subs	r3, #1
 800267a:	b2da      	uxtb	r2, r3
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <TL_MENU_Change_Pointer+0xb0>)
 800267e:	701a      	strb	r2, [r3, #0]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200001c0 	.word	0x200001c0
 8002690:	200001e8 	.word	0x200001e8

08002694 <TL_MENU_Config_Timeline>:

void TL_MENU_Config_Timeline(uint8_t p_is_increase){
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 800269e:	4b13      	ldr	r3, [pc, #76]	; (80026ec <TL_MENU_Config_Timeline+0x58>)
 80026a0:	2203      	movs	r2, #3
 80026a2:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <TL_MENU_Config_Timeline+0x58>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	721a      	strb	r2, [r3, #8]

	TL_MENU_Data.timeline_state += (p_is_increase == INCREASE) ? 1 : -1;
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <TL_MENU_Config_Timeline+0x5c>)
 80026ac:	791b      	ldrb	r3, [r3, #4]
 80026ae:	79fa      	ldrb	r2, [r7, #7]
 80026b0:	2a01      	cmp	r2, #1
 80026b2:	d101      	bne.n	80026b8 <TL_MENU_Config_Timeline+0x24>
 80026b4:	2201      	movs	r2, #1
 80026b6:	e000      	b.n	80026ba <TL_MENU_Config_Timeline+0x26>
 80026b8:	22ff      	movs	r2, #255	; 0xff
 80026ba:	4413      	add	r3, r2
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <TL_MENU_Config_Timeline+0x5c>)
 80026c0:	711a      	strb	r2, [r3, #4]
	if((int8_t)TL_MENU_Data.timeline_state < 0){
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <TL_MENU_Config_Timeline+0x5c>)
 80026c4:	791b      	ldrb	r3, [r3, #4]
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	da03      	bge.n	80026d4 <TL_MENU_Config_Timeline+0x40>
		TL_MENU_Data.timeline_state = 2;
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <TL_MENU_Config_Timeline+0x5c>)
 80026ce:	2202      	movs	r2, #2
 80026d0:	711a      	strb	r2, [r3, #4]
	} else if(TL_MENU_Data.timeline_state > 2){
		TL_MENU_Data.timeline_state = 0;
	}
}
 80026d2:	e006      	b.n	80026e2 <TL_MENU_Config_Timeline+0x4e>
	} else if(TL_MENU_Data.timeline_state > 2){
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <TL_MENU_Config_Timeline+0x5c>)
 80026d6:	791b      	ldrb	r3, [r3, #4]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d902      	bls.n	80026e2 <TL_MENU_Config_Timeline+0x4e>
		TL_MENU_Data.timeline_state = 0;
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <TL_MENU_Config_Timeline+0x5c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	711a      	strb	r2, [r3, #4]
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	200001c0 	.word	0x200001c0
 80026f0:	200001e8 	.word	0x200001e8

080026f4 <TL_MENU_Display>:

void TL_MENU_Display(){
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af02      	add	r7, sp, #8
	if(MENU_Data.is_changing_menu == 1){
 80026fa:	4b60      	ldr	r3, [pc, #384]	; (800287c <TL_MENU_Display+0x188>)
 80026fc:	7a5b      	ldrb	r3, [r3, #9]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <TL_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 8002702:	4b5e      	ldr	r3, [pc, #376]	; (800287c <TL_MENU_Display+0x188>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4618      	mov	r0, r3
 8002708:	f005 fe9b 	bl	8008442 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 800270c:	4b5b      	ldr	r3, [pc, #364]	; (800287c <TL_MENU_Display+0x188>)
 800270e:	2200      	movs	r2, #0
 8002710:	725a      	strb	r2, [r3, #9]
	}
	for(int i = 0; i < 4; i++){
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e0a7      	b.n	8002868 <TL_MENU_Display+0x174>
		uint8_t t_index = TL_MENU_Data.first_line + i;
 8002718:	4b59      	ldr	r3, [pc, #356]	; (8002880 <TL_MENU_Display+0x18c>)
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	4413      	add	r3, r2
 8002722:	72fb      	strb	r3, [r7, #11]
		LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 8002724:	4b55      	ldr	r3, [pc, #340]	; (800287c <TL_MENU_Display+0x188>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f005 fe9c 	bl	800846c <LCD_Set_Cursor>
		if(t_index == 0){
 8002734:	7afb      	ldrb	r3, [r7, #11]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <TL_MENU_Display+0x54>
			LCD_Write(MENU_Data.hlcd, " Add...             ");
 800273a:	4b50      	ldr	r3, [pc, #320]	; (800287c <TL_MENU_Display+0x188>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4951      	ldr	r1, [pc, #324]	; (8002884 <TL_MENU_Display+0x190>)
 8002740:	4618      	mov	r0, r3
 8002742:	f005 fe40 	bl	80083c6 <LCD_Write>
 8002746:	e03e      	b.n	80027c6 <TL_MENU_Display+0xd2>
		} else if(t_index - 1 < TIMELINE_Data.len){
 8002748:	4b4f      	ldr	r3, [pc, #316]	; (8002888 <TL_MENU_Display+0x194>)
 800274a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274e:	7afa      	ldrb	r2, [r7, #11]
 8002750:	429a      	cmp	r2, r3
 8002752:	d832      	bhi.n	80027ba <TL_MENU_Display+0xc6>
			char day_str[8] = {};
 8002754:	2300      	movs	r3, #0
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	2300      	movs	r3, #0
 800275a:	607b      	str	r3, [r7, #4]
			__create_day_string(day_str, TIMELINE_Data.flash_data[t_index - 1].day);
 800275c:	7afb      	ldrb	r3, [r7, #11]
 800275e:	3b01      	subs	r3, #1
 8002760:	4a49      	ldr	r2, [pc, #292]	; (8002888 <TL_MENU_Display+0x194>)
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	799a      	ldrb	r2, [r3, #6]
 8002768:	463b      	mov	r3, r7
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fe61 	bl	8002434 <__create_day_string>
			LCD_Write(MENU_Data.hlcd, " %02d:%02d %7s  %s ", TIMELINE_Data.flash_data[t_index - 1].hour, TIMELINE_Data.flash_data[t_index - 1].minute,
 8002772:	4b42      	ldr	r3, [pc, #264]	; (800287c <TL_MENU_Display+0x188>)
 8002774:	6858      	ldr	r0, [r3, #4]
 8002776:	7afb      	ldrb	r3, [r7, #11]
 8002778:	3b01      	subs	r3, #1
 800277a:	4a43      	ldr	r2, [pc, #268]	; (8002888 <TL_MENU_Display+0x194>)
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	791b      	ldrb	r3, [r3, #4]
 8002782:	4619      	mov	r1, r3
 8002784:	7afb      	ldrb	r3, [r7, #11]
 8002786:	3b01      	subs	r3, #1
 8002788:	4a3f      	ldr	r2, [pc, #252]	; (8002888 <TL_MENU_Display+0x194>)
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	795b      	ldrb	r3, [r3, #5]
 8002790:	461c      	mov	r4, r3
					day_str, (TIMELINE_Data.flash_data[t_index - 1].timeline_state == TIMELINE_ON) ? " ON" : "OFF");
 8002792:	7afb      	ldrb	r3, [r7, #11]
 8002794:	3b01      	subs	r3, #1
 8002796:	4a3c      	ldr	r2, [pc, #240]	; (8002888 <TL_MENU_Display+0x194>)
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	79db      	ldrb	r3, [r3, #7]
			LCD_Write(MENU_Data.hlcd, " %02d:%02d %7s  %s ", TIMELINE_Data.flash_data[t_index - 1].hour, TIMELINE_Data.flash_data[t_index - 1].minute,
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <TL_MENU_Display+0xb2>
 80027a2:	4b3a      	ldr	r3, [pc, #232]	; (800288c <TL_MENU_Display+0x198>)
 80027a4:	e000      	b.n	80027a8 <TL_MENU_Display+0xb4>
 80027a6:	4b3a      	ldr	r3, [pc, #232]	; (8002890 <TL_MENU_Display+0x19c>)
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	463b      	mov	r3, r7
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	4623      	mov	r3, r4
 80027b0:	460a      	mov	r2, r1
 80027b2:	4938      	ldr	r1, [pc, #224]	; (8002894 <TL_MENU_Display+0x1a0>)
 80027b4:	f005 fe07 	bl	80083c6 <LCD_Write>
 80027b8:	e005      	b.n	80027c6 <TL_MENU_Display+0xd2>
		} else{
			LCD_Write(MENU_Data.hlcd, "                    ");
 80027ba:	4b30      	ldr	r3, [pc, #192]	; (800287c <TL_MENU_Display+0x188>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4936      	ldr	r1, [pc, #216]	; (8002898 <TL_MENU_Display+0x1a4>)
 80027c0:	4618      	mov	r0, r3
 80027c2:	f005 fe00 	bl	80083c6 <LCD_Write>
		}
		if(TL_MENU_Data.current_pointer == t_index){
 80027c6:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <TL_MENU_Display+0x18c>)
 80027c8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80027cc:	461a      	mov	r2, r3
 80027ce:	7afb      	ldrb	r3, [r7, #11]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d146      	bne.n	8002862 <TL_MENU_Display+0x16e>
			if(TL_MENU_Data.woking_state == NORMAL_STATE){
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <TL_MENU_Display+0x18c>)
 80027d6:	78db      	ldrb	r3, [r3, #3]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10e      	bne.n	80027fa <TL_MENU_Display+0x106>
				LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <TL_MENU_Display+0x188>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f005 fe40 	bl	800846c <LCD_Set_Cursor>
				LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 80027ec:	4b23      	ldr	r3, [pc, #140]	; (800287c <TL_MENU_Display+0x188>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	217e      	movs	r1, #126	; 0x7e
 80027f2:	4618      	mov	r0, r3
 80027f4:	f005 ff26 	bl	8008644 <LCD_Send_Data>
 80027f8:	e033      	b.n	8002862 <TL_MENU_Display+0x16e>
			} else{
				LCD_Set_Cursor(MENU_Data.hlcd, 15, i);
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <TL_MENU_Display+0x188>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	210f      	movs	r1, #15
 8002804:	4618      	mov	r0, r3
 8002806:	f005 fe31 	bl	800846c <LCD_Set_Cursor>
				LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <TL_MENU_Display+0x188>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	217e      	movs	r1, #126	; 0x7e
 8002810:	4618      	mov	r0, r3
 8002812:	f005 ff17 	bl	8008644 <LCD_Send_Data>
				if(TL_MENU_Data.timeline_state == TURN_OFF_TIMELINE){
 8002816:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <TL_MENU_Display+0x18c>)
 8002818:	791b      	ldrb	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <TL_MENU_Display+0x138>
					LCD_Write(MENU_Data.hlcd, "OFF");
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <TL_MENU_Display+0x188>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	491b      	ldr	r1, [pc, #108]	; (8002890 <TL_MENU_Display+0x19c>)
 8002824:	4618      	mov	r0, r3
 8002826:	f005 fdce 	bl	80083c6 <LCD_Write>
 800282a:	e014      	b.n	8002856 <TL_MENU_Display+0x162>
				} else if(TL_MENU_Data.timeline_state == TURN_ON_TIMELINE){
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <TL_MENU_Display+0x18c>)
 800282e:	791b      	ldrb	r3, [r3, #4]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d106      	bne.n	8002842 <TL_MENU_Display+0x14e>
					LCD_Write(MENU_Data.hlcd, " ON");
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <TL_MENU_Display+0x188>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4914      	ldr	r1, [pc, #80]	; (800288c <TL_MENU_Display+0x198>)
 800283a:	4618      	mov	r0, r3
 800283c:	f005 fdc3 	bl	80083c6 <LCD_Write>
 8002840:	e009      	b.n	8002856 <TL_MENU_Display+0x162>
				} else if(TL_MENU_Data.timeline_state == DELETE_TIMELINE){
 8002842:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <TL_MENU_Display+0x18c>)
 8002844:	791b      	ldrb	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d105      	bne.n	8002856 <TL_MENU_Display+0x162>
					LCD_Write(MENU_Data.hlcd, "DEL");
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <TL_MENU_Display+0x188>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4913      	ldr	r1, [pc, #76]	; (800289c <TL_MENU_Display+0x1a8>)
 8002850:	4618      	mov	r0, r3
 8002852:	f005 fdb8 	bl	80083c6 <LCD_Write>
				}
				LCD_Send_Data(MENU_Data.hlcd, 0x7F);
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <TL_MENU_Display+0x188>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	217f      	movs	r1, #127	; 0x7f
 800285c:	4618      	mov	r0, r3
 800285e:	f005 fef1 	bl	8008644 <LCD_Send_Data>
	for(int i = 0; i < 4; i++){
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	3301      	adds	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b03      	cmp	r3, #3
 800286c:	f77f af54 	ble.w	8002718 <TL_MENU_Display+0x24>
			}
		}
	}
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bd90      	pop	{r4, r7, pc}
 800287a:	bf00      	nop
 800287c:	200001c0 	.word	0x200001c0
 8002880:	200001e8 	.word	0x200001e8
 8002884:	080094f0 	.word	0x080094f0
 8002888:	20000164 	.word	0x20000164
 800288c:	08009508 	.word	0x08009508
 8002890:	0800950c 	.word	0x0800950c
 8002894:	08009510 	.word	0x08009510
 8002898:	08009524 	.word	0x08009524
 800289c:	0800953c 	.word	0x0800953c

080028a0 <TEMP_AND_HUM_Handle>:

LCD_I2C_HandleTypeDef hlcd;
DHT_HandleTypeDef hdht;

#define CHECKING_SENSOR_TIME	2000
void TEMP_AND_HUM_Handle(){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	static uint32_t timer = 0;
	static uint8_t system_temperature = 0;
	static uint8_t system_huminity = 0;
	if(HAL_GetTick() - timer >= CHECKING_SENSOR_TIME){
 80028a4:	f000 fdea 	bl	800347c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b23      	ldr	r3, [pc, #140]	; (8002938 <TEMP_AND_HUM_Handle+0x98>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028b4:	d33d      	bcc.n	8002932 <TEMP_AND_HUM_Handle+0x92>
		HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
 80028b6:	213c      	movs	r1, #60	; 0x3c
 80028b8:	4820      	ldr	r0, [pc, #128]	; (800293c <TEMP_AND_HUM_Handle+0x9c>)
 80028ba:	f004 f96d 	bl	8006b98 <HAL_TIM_Encoder_Stop_IT>
		DHT_Read_Value(&hdht);
 80028be:	4820      	ldr	r0, [pc, #128]	; (8002940 <TEMP_AND_HUM_Handle+0xa0>)
 80028c0:	f005 fae5 	bl	8007e8e <DHT_Read_Value>
		HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80028c4:	213c      	movs	r1, #60	; 0x3c
 80028c6:	481d      	ldr	r0, [pc, #116]	; (800293c <TEMP_AND_HUM_Handle+0x9c>)
 80028c8:	f004 f8b8 	bl	8006a3c <HAL_TIM_Encoder_Start_IT>
		if(system_huminity != (uint8_t)hdht.huminity || system_temperature != (uint8_t)hdht.temperature){
 80028cc:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <TEMP_AND_HUM_Handle+0xa0>)
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe f883 	bl	80009dc <__aeabi_f2uiz>
 80028d6:	4603      	mov	r3, r0
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <TEMP_AND_HUM_Handle+0xa4>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d10a      	bne.n	80028f8 <TEMP_AND_HUM_Handle+0x58>
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <TEMP_AND_HUM_Handle+0xa0>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe f878 	bl	80009dc <__aeabi_f2uiz>
 80028ec:	4603      	mov	r3, r0
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	4b15      	ldr	r3, [pc, #84]	; (8002948 <TEMP_AND_HUM_Handle+0xa8>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d017      	beq.n	8002928 <TEMP_AND_HUM_Handle+0x88>
			system_huminity = hdht.huminity;
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <TEMP_AND_HUM_Handle+0xa0>)
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe f86d 	bl	80009dc <__aeabi_f2uiz>
 8002902:	4603      	mov	r3, r0
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <TEMP_AND_HUM_Handle+0xa4>)
 8002908:	701a      	strb	r2, [r3, #0]
			system_temperature = hdht.temperature;
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <TEMP_AND_HUM_Handle+0xa0>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe f864 	bl	80009dc <__aeabi_f2uiz>
 8002914:	4603      	mov	r3, r0
 8002916:	b2da      	uxtb	r2, r3
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <TEMP_AND_HUM_Handle+0xa8>)
 800291a:	701a      	strb	r2, [r3, #0]
			if(MENU_Data.menu_type == MAIN_MENU){
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <TEMP_AND_HUM_Handle+0xac>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <TEMP_AND_HUM_Handle+0x88>
				MAIN_MENU_Update_Value();
 8002924:	f7ff f87c 	bl	8001a20 <MAIN_MENU_Update_Value>
			}
		}

		timer = HAL_GetTick();
 8002928:	f000 fda8 	bl	800347c <HAL_GetTick>
 800292c:	4603      	mov	r3, r0
 800292e:	4a02      	ldr	r2, [pc, #8]	; (8002938 <TEMP_AND_HUM_Handle+0x98>)
 8002930:	6013      	str	r3, [r2, #0]
	}
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2000037c 	.word	0x2000037c
 800293c:	200002d0 	.word	0x200002d0
 8002940:	20000368 	.word	0x20000368
 8002944:	20000380 	.word	0x20000380
 8002948:	20000381 	.word	0x20000381
 800294c:	200001c0 	.word	0x200001c0

08002950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002956:	f000 fd39 	bl	80033cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800295a:	f000 f85b 	bl	8002a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800295e:	f000 fa19 	bl	8002d94 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002962:	f000 f999 	bl	8002c98 <MX_TIM2_Init>
  MX_RTC_Init();
 8002966:	f000 f921 	bl	8002bac <MX_RTC_Init>
  MX_I2C2_Init();
 800296a:	f000 f8f1 	bl	8002b50 <MX_I2C2_Init>
  MX_ADC1_Init();
 800296e:	f000 f8b1 	bl	8002ad4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002972:	f000 f941 	bl	8002bf8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002976:	f000 f9e3 	bl	8002d40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002980:	481d      	ldr	r0, [pc, #116]	; (80029f8 <main+0xa8>)
 8002982:	f001 ff04 	bl	800478e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2102      	movs	r1, #2
 800298a:	481c      	ldr	r0, [pc, #112]	; (80029fc <main+0xac>)
 800298c:	f001 feff 	bl	800478e <HAL_GPIO_WritePin>

  HAL_Delay(500);
 8002990:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002994:	f000 fd7c 	bl	8003490 <HAL_Delay>

  DELAY_US_Init(&htim1);
 8002998:	4819      	ldr	r0, [pc, #100]	; (8002a00 <main+0xb0>)
 800299a:	f005 fc05 	bl	80081a8 <DELAY_US_Init>
  REALTIME_Init();
 800299e:	f7fe fd1f 	bl	80013e0 <REALTIME_Init>
  DHT_Init(&hdht, DHT11, GPIOA, GPIO_PIN_0);
 80029a2:	2301      	movs	r3, #1
 80029a4:	4a15      	ldr	r2, [pc, #84]	; (80029fc <main+0xac>)
 80029a6:	2100      	movs	r1, #0
 80029a8:	4816      	ldr	r0, [pc, #88]	; (8002a04 <main+0xb4>)
 80029aa:	f005 fa50 	bl	8007e4e <DHT_Init>
  LCD_Init(&hlcd, &hi2c2, 20, 4, 0x4E);
 80029ae:	234e      	movs	r3, #78	; 0x4e
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2304      	movs	r3, #4
 80029b4:	2214      	movs	r2, #20
 80029b6:	4914      	ldr	r1, [pc, #80]	; (8002a08 <main+0xb8>)
 80029b8:	4814      	ldr	r0, [pc, #80]	; (8002a0c <main+0xbc>)
 80029ba:	f005 fcaf 	bl	800831c <LCD_Init>
  MENU_Init(&hlcd);
 80029be:	4813      	ldr	r0, [pc, #76]	; (8002a0c <main+0xbc>)
 80029c0:	f7ff f83c 	bl	8001a3c <MENU_Init>
  ROTARY_ENCODER_Init();
 80029c4:	f7fe fb80 	bl	80010c8 <ROTARY_ENCODER_Init>
  ALARM_Init(GPIOA, GPIO_PIN_1);
 80029c8:	2102      	movs	r1, #2
 80029ca:	480c      	ldr	r0, [pc, #48]	; (80029fc <main+0xac>)
 80029cc:	f7fe f93c 	bl	8000c48 <ALARM_Init>
  BATTERY_LEVEL_Init();
 80029d0:	f7fe fa0a 	bl	8000de8 <BATTERY_LEVEL_Init>

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80029d4:	213c      	movs	r1, #60	; 0x3c
 80029d6:	480e      	ldr	r0, [pc, #56]	; (8002a10 <main+0xc0>)
 80029d8:	f004 f830 	bl	8006a3c <HAL_TIM_Encoder_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  REALTIME_Handle();
 80029dc:	f7fe fd46 	bl	800146c <REALTIME_Handle>

	  TEMP_AND_HUM_Handle();
 80029e0:	f7ff ff5e 	bl	80028a0 <TEMP_AND_HUM_Handle>

	  MENU_Handle();
 80029e4:	f7ff f84e 	bl	8001a84 <MENU_Handle>

	  ROTARY_ENCODER_Handle();
 80029e8:	f7fe fb96 	bl	8001118 <ROTARY_ENCODER_Handle>

	  ALARM_Handle();
 80029ec:	f7fe f944 	bl	8000c78 <ALARM_Handle>

	  BATTERY_LEVEL_Handle();
 80029f0:	f7fe fa10 	bl	8000e14 <BATTERY_LEVEL_Handle>
	  REALTIME_Handle();
 80029f4:	e7f2      	b.n	80029dc <main+0x8c>
 80029f6:	bf00      	nop
 80029f8:	40011000 	.word	0x40011000
 80029fc:	40010800 	.word	0x40010800
 8002a00:	20000288 	.word	0x20000288
 8002a04:	20000368 	.word	0x20000368
 8002a08:	20000220 	.word	0x20000220
 8002a0c:	2000035c 	.word	0x2000035c
 8002a10:	200002d0 	.word	0x200002d0

08002a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b094      	sub	sp, #80	; 0x50
 8002a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a1e:	2228      	movs	r2, #40	; 0x28
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f006 f80a 	bl	8008a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002a44:	2309      	movs	r3, #9
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a52:	2301      	movs	r3, #1
 8002a54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a56:	2301      	movs	r3, #1
 8002a58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a64:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f002 ffe0 	bl	8005a34 <HAL_RCC_OscConfig>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002a7a:	f000 fa2b 	bl	8002ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a7e:	230f      	movs	r3, #15
 8002a80:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a82:	2302      	movs	r3, #2
 8002a84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	2102      	movs	r1, #2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f003 fa4c 	bl	8005f38 <HAL_RCC_ClockConfig>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002aa6:	f000 fa15 	bl	8002ed4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ab8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	4618      	mov	r0, r3
 8002abe:	f003 fbd3 	bl	8006268 <HAL_RCCEx_PeriphCLKConfig>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002ac8:	f000 fa04 	bl	8002ed4 <Error_Handler>
  }
}
 8002acc:	bf00      	nop
 8002ace:	3750      	adds	r7, #80	; 0x50
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002ae4:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <MX_ADC1_Init+0x74>)
 8002ae6:	4a19      	ldr	r2, [pc, #100]	; (8002b4c <MX_ADC1_Init+0x78>)
 8002ae8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002aea:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <MX_ADC1_Init+0x74>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002af0:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <MX_ADC1_Init+0x74>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002af6:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <MX_ADC1_Init+0x74>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <MX_ADC1_Init+0x74>)
 8002afe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002b02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b04:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <MX_ADC1_Init+0x74>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <MX_ADC1_Init+0x74>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b10:	480d      	ldr	r0, [pc, #52]	; (8002b48 <MX_ADC1_Init+0x74>)
 8002b12:	f000 fce1 	bl	80034d8 <HAL_ADC_Init>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002b1c:	f000 f9da 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002b20:	2302      	movs	r3, #2
 8002b22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b24:	2301      	movs	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002b28:	2307      	movs	r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4805      	ldr	r0, [pc, #20]	; (8002b48 <MX_ADC1_Init+0x74>)
 8002b32:	f000 ff37 	bl	80039a4 <HAL_ADC_ConfigChannel>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002b3c:	f000 f9ca 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	200001f0 	.word	0x200001f0
 8002b4c:	40012400 	.word	0x40012400

08002b50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <MX_I2C2_Init+0x50>)
 8002b56:	4a13      	ldr	r2, [pc, #76]	; (8002ba4 <MX_I2C2_Init+0x54>)
 8002b58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <MX_I2C2_Init+0x50>)
 8002b5c:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <MX_I2C2_Init+0x58>)
 8002b5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <MX_I2C2_Init+0x50>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <MX_I2C2_Init+0x50>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <MX_I2C2_Init+0x50>)
 8002b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <MX_I2C2_Init+0x50>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <MX_I2C2_Init+0x50>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <MX_I2C2_Init+0x50>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <MX_I2C2_Init+0x50>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b8c:	4804      	ldr	r0, [pc, #16]	; (8002ba0 <MX_I2C2_Init+0x50>)
 8002b8e:	f001 fe17 	bl	80047c0 <HAL_I2C_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b98:	f000 f99c 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000220 	.word	0x20000220
 8002ba4:	40005800 	.word	0x40005800
 8002ba8:	000186a0 	.word	0x000186a0

08002bac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	460a      	mov	r2, r1
 8002bb8:	801a      	strh	r2, [r3, #0]
 8002bba:	460a      	mov	r2, r1
 8002bbc:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <MX_RTC_Init+0x44>)
 8002bc4:	4a0b      	ldr	r2, [pc, #44]	; (8002bf4 <MX_RTC_Init+0x48>)
 8002bc6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <MX_RTC_Init+0x44>)
 8002bca:	f04f 32ff 	mov.w	r2, #4294967295
 8002bce:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002bd0:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <MX_RTC_Init+0x44>)
 8002bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bd6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002bd8:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <MX_RTC_Init+0x44>)
 8002bda:	f003 fcbb 	bl	8006554 <HAL_RTC_Init>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002be4:	f000 f976 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000274 	.word	0x20000274
 8002bf4:	40002800 	.word	0x40002800

08002bf8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c0c:	463b      	mov	r3, r7
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c14:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c16:	4a1f      	ldr	r2, [pc, #124]	; (8002c94 <MX_TIM1_Init+0x9c>)
 8002c18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c1c:	2247      	movs	r2, #71	; 0x47
 8002c1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c40:	4813      	ldr	r0, [pc, #76]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c42:	f003 fd9a 	bl	800677a <HAL_TIM_Base_Init>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002c4c:	f000 f942 	bl	8002ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c56:	f107 0308 	add.w	r3, r7, #8
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	480c      	ldr	r0, [pc, #48]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c5e:	f004 f958 	bl	8006f12 <HAL_TIM_ConfigClockSource>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002c68:	f000 f934 	bl	8002ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c74:	463b      	mov	r3, r7
 8002c76:	4619      	mov	r1, r3
 8002c78:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_TIM1_Init+0x98>)
 8002c7a:	f004 fb4f 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002c84:	f000 f926 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c88:	bf00      	nop
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000288 	.word	0x20000288
 8002c94:	40012c00 	.word	0x40012c00

08002c98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08c      	sub	sp, #48	; 0x30
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	2224      	movs	r2, #36	; 0x24
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f005 fec8 	bl	8008a3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cb4:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <MX_TIM2_Init+0xa4>)
 8002cb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002cbc:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <MX_TIM2_Init+0xa4>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc2:	4b1e      	ldr	r3, [pc, #120]	; (8002d3c <MX_TIM2_Init+0xa4>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <MX_TIM2_Init+0xa4>)
 8002cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <MX_TIM2_Init+0xa4>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <MX_TIM2_Init+0xa4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002cec:	230a      	movs	r3, #10
 8002cee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002cfc:	230a      	movs	r3, #10
 8002cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	4619      	mov	r1, r3
 8002d06:	480d      	ldr	r0, [pc, #52]	; (8002d3c <MX_TIM2_Init+0xa4>)
 8002d08:	f003 fdf6 	bl	80068f8 <HAL_TIM_Encoder_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002d12:	f000 f8df 	bl	8002ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	4806      	ldr	r0, [pc, #24]	; (8002d3c <MX_TIM2_Init+0xa4>)
 8002d24:	f004 fafa 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002d2e:	f000 f8d1 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d32:	bf00      	nop
 8002d34:	3730      	adds	r7, #48	; 0x30
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200002d0 	.word	0x200002d0

08002d40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <MX_USART1_UART_Init+0x4c>)
 8002d46:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <MX_USART1_UART_Init+0x50>)
 8002d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <MX_USART1_UART_Init+0x4c>)
 8002d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d52:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <MX_USART1_UART_Init+0x4c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <MX_USART1_UART_Init+0x4c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <MX_USART1_UART_Init+0x4c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <MX_USART1_UART_Init+0x4c>)
 8002d66:	220c      	movs	r2, #12
 8002d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <MX_USART1_UART_Init+0x4c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <MX_USART1_UART_Init+0x4c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d76:	4805      	ldr	r0, [pc, #20]	; (8002d8c <MX_USART1_UART_Init+0x4c>)
 8002d78:	f004 fb40 	bl	80073fc <HAL_UART_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d82:	f000 f8a7 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000318 	.word	0x20000318
 8002d90:	40013800 	.word	0x40013800

08002d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da8:	4b45      	ldr	r3, [pc, #276]	; (8002ec0 <MX_GPIO_Init+0x12c>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	4a44      	ldr	r2, [pc, #272]	; (8002ec0 <MX_GPIO_Init+0x12c>)
 8002dae:	f043 0310 	orr.w	r3, r3, #16
 8002db2:	6193      	str	r3, [r2, #24]
 8002db4:	4b42      	ldr	r3, [pc, #264]	; (8002ec0 <MX_GPIO_Init+0x12c>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <MX_GPIO_Init+0x12c>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	4a3e      	ldr	r2, [pc, #248]	; (8002ec0 <MX_GPIO_Init+0x12c>)
 8002dc6:	f043 0320 	orr.w	r3, r3, #32
 8002dca:	6193      	str	r3, [r2, #24]
 8002dcc:	4b3c      	ldr	r3, [pc, #240]	; (8002ec0 <MX_GPIO_Init+0x12c>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd8:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <MX_GPIO_Init+0x12c>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	4a38      	ldr	r2, [pc, #224]	; (8002ec0 <MX_GPIO_Init+0x12c>)
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	6193      	str	r3, [r2, #24]
 8002de4:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <MX_GPIO_Init+0x12c>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df0:	4b33      	ldr	r3, [pc, #204]	; (8002ec0 <MX_GPIO_Init+0x12c>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	4a32      	ldr	r2, [pc, #200]	; (8002ec0 <MX_GPIO_Init+0x12c>)
 8002df6:	f043 0308 	orr.w	r3, r3, #8
 8002dfa:	6193      	str	r3, [r2, #24]
 8002dfc:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <MX_GPIO_Init+0x12c>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e0e:	482d      	ldr	r0, [pc, #180]	; (8002ec4 <MX_GPIO_Init+0x130>)
 8002e10:	f001 fcbd 	bl	800478e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 8002e14:	2200      	movs	r2, #0
 8002e16:	f640 7103 	movw	r1, #3843	; 0xf03
 8002e1a:	482b      	ldr	r0, [pc, #172]	; (8002ec8 <MX_GPIO_Init+0x134>)
 8002e1c:	f001 fcb7 	bl	800478e <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002e20:	2200      	movs	r2, #0
 8002e22:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002e26:	4829      	ldr	r0, [pc, #164]	; (8002ecc <MX_GPIO_Init+0x138>)
 8002e28:	f001 fcb1 	bl	800478e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e32:	2301      	movs	r3, #1
 8002e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e3e:	f107 0310 	add.w	r3, r7, #16
 8002e42:	4619      	mov	r1, r3
 8002e44:	481f      	ldr	r0, [pc, #124]	; (8002ec4 <MX_GPIO_Init+0x130>)
 8002e46:	f001 fb07 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9
                           PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 8002e4a:	f640 7303 	movw	r3, #3843	; 0xf03
 8002e4e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e50:	2301      	movs	r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5c:	f107 0310 	add.w	r3, r7, #16
 8002e60:	4619      	mov	r1, r3
 8002e62:	4819      	ldr	r0, [pc, #100]	; (8002ec8 <MX_GPIO_Init+0x134>)
 8002e64:	f001 faf8 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002e68:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e76:	2302      	movs	r3, #2
 8002e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7a:	f107 0310 	add.w	r3, r7, #16
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4812      	ldr	r0, [pc, #72]	; (8002ecc <MX_GPIO_Init+0x138>)
 8002e82:	f001 fae9 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e8c:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <MX_GPIO_Init+0x13c>)
 8002e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	4619      	mov	r1, r3
 8002e9a:	480b      	ldr	r0, [pc, #44]	; (8002ec8 <MX_GPIO_Init+0x134>)
 8002e9c:	f001 fadc 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 0310 	add.w	r3, r7, #16
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4806      	ldr	r0, [pc, #24]	; (8002ecc <MX_GPIO_Init+0x138>)
 8002eb4:	f001 fad0 	bl	8004458 <HAL_GPIO_Init>

}
 8002eb8:	bf00      	nop
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40011000 	.word	0x40011000
 8002ec8:	40010800 	.word	0x40010800
 8002ecc:	40010c00 	.word	0x40010c00
 8002ed0:	10110000 	.word	0x10110000

08002ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed8:	b672      	cpsid	i
}
 8002eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002edc:	e7fe      	b.n	8002edc <Error_Handler+0x8>
	...

08002ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <HAL_MspInit+0x5c>)
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	4a14      	ldr	r2, [pc, #80]	; (8002f3c <HAL_MspInit+0x5c>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6193      	str	r3, [r2, #24]
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_MspInit+0x5c>)
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002efe:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <HAL_MspInit+0x5c>)
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <HAL_MspInit+0x5c>)
 8002f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f08:	61d3      	str	r3, [r2, #28]
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <HAL_MspInit+0x5c>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	607b      	str	r3, [r7, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_MspInit+0x60>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <HAL_MspInit+0x60>)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40010000 	.word	0x40010000

08002f44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4c:	f107 0310 	add.w	r3, r7, #16
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a18      	ldr	r2, [pc, #96]	; (8002fc0 <HAL_ADC_MspInit+0x7c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d129      	bne.n	8002fb8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f64:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <HAL_ADC_MspInit+0x80>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	4a16      	ldr	r2, [pc, #88]	; (8002fc4 <HAL_ADC_MspInit+0x80>)
 8002f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f6e:	6193      	str	r3, [r2, #24]
 8002f70:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <HAL_ADC_MspInit+0x80>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_ADC_MspInit+0x80>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	4a10      	ldr	r2, [pc, #64]	; (8002fc4 <HAL_ADC_MspInit+0x80>)
 8002f82:	f043 0304 	orr.w	r3, r3, #4
 8002f86:	6193      	str	r3, [r2, #24]
 8002f88:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <HAL_ADC_MspInit+0x80>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f94:	2304      	movs	r3, #4
 8002f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9c:	f107 0310 	add.w	r3, r7, #16
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4809      	ldr	r0, [pc, #36]	; (8002fc8 <HAL_ADC_MspInit+0x84>)
 8002fa4:	f001 fa58 	bl	8004458 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2100      	movs	r1, #0
 8002fac:	2012      	movs	r0, #18
 8002fae:	f000 ff6c 	bl	8003e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002fb2:	2012      	movs	r0, #18
 8002fb4:	f000 ff85 	bl	8003ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002fb8:	bf00      	nop
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40012400 	.word	0x40012400
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40010800 	.word	0x40010800

08002fcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 0310 	add.w	r3, r7, #16
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a16      	ldr	r2, [pc, #88]	; (8003040 <HAL_I2C_MspInit+0x74>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d124      	bne.n	8003036 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fec:	4b15      	ldr	r3, [pc, #84]	; (8003044 <HAL_I2C_MspInit+0x78>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	4a14      	ldr	r2, [pc, #80]	; (8003044 <HAL_I2C_MspInit+0x78>)
 8002ff2:	f043 0308 	orr.w	r3, r3, #8
 8002ff6:	6193      	str	r3, [r2, #24]
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_I2C_MspInit+0x78>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003004:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003008:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800300a:	2312      	movs	r3, #18
 800300c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800300e:	2303      	movs	r3, #3
 8003010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003012:	f107 0310 	add.w	r3, r7, #16
 8003016:	4619      	mov	r1, r3
 8003018:	480b      	ldr	r0, [pc, #44]	; (8003048 <HAL_I2C_MspInit+0x7c>)
 800301a:	f001 fa1d 	bl	8004458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_I2C_MspInit+0x78>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	4a08      	ldr	r2, [pc, #32]	; (8003044 <HAL_I2C_MspInit+0x78>)
 8003024:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003028:	61d3      	str	r3, [r2, #28]
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_I2C_MspInit+0x78>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003036:	bf00      	nop
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40005800 	.word	0x40005800
 8003044:	40021000 	.word	0x40021000
 8003048:	40010c00 	.word	0x40010c00

0800304c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <HAL_RTC_MspInit+0x3c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d110      	bne.n	8003080 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800305e:	f002 fcdd 	bl	8005a1c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <HAL_RTC_MspInit+0x40>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	4a09      	ldr	r2, [pc, #36]	; (800308c <HAL_RTC_MspInit+0x40>)
 8003068:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800306c:	61d3      	str	r3, [r2, #28]
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <HAL_RTC_MspInit+0x40>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RTC_MspInit+0x44>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40002800 	.word	0x40002800
 800308c:	40021000 	.word	0x40021000
 8003090:	4242043c 	.word	0x4242043c

08003094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <HAL_TIM_Base_MspInit+0x34>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d10b      	bne.n	80030be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_TIM_Base_MspInit+0x38>)
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	4a08      	ldr	r2, [pc, #32]	; (80030cc <HAL_TIM_Base_MspInit+0x38>)
 80030ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030b0:	6193      	str	r3, [r2, #24]
 80030b2:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_TIM_Base_MspInit+0x38>)
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80030be:	bf00      	nop
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40021000 	.word	0x40021000

080030d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	f107 0314 	add.w	r3, r7, #20
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ee:	d156      	bne.n	800319e <HAL_TIM_Encoder_MspInit+0xce>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030f0:	4b2d      	ldr	r3, [pc, #180]	; (80031a8 <HAL_TIM_Encoder_MspInit+0xd8>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	4a2c      	ldr	r2, [pc, #176]	; (80031a8 <HAL_TIM_Encoder_MspInit+0xd8>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	61d3      	str	r3, [r2, #28]
 80030fc:	4b2a      	ldr	r3, [pc, #168]	; (80031a8 <HAL_TIM_Encoder_MspInit+0xd8>)
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <HAL_TIM_Encoder_MspInit+0xd8>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <HAL_TIM_Encoder_MspInit+0xd8>)
 800310e:	f043 0304 	orr.w	r3, r3, #4
 8003112:	6193      	str	r3, [r2, #24]
 8003114:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003120:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	4a20      	ldr	r2, [pc, #128]	; (80031a8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8003126:	f043 0308 	orr.w	r3, r3, #8
 800312a:	6193      	str	r3, [r2, #24]
 800312c:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_TIM_Encoder_MspInit+0xd8>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800313c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003146:	f107 0314 	add.w	r3, r7, #20
 800314a:	4619      	mov	r1, r3
 800314c:	4817      	ldr	r0, [pc, #92]	; (80031ac <HAL_TIM_Encoder_MspInit+0xdc>)
 800314e:	f001 f983 	bl	8004458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003152:	2308      	movs	r3, #8
 8003154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003156:	2300      	movs	r3, #0
 8003158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315e:	f107 0314 	add.w	r3, r7, #20
 8003162:	4619      	mov	r1, r3
 8003164:	4812      	ldr	r0, [pc, #72]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003166:	f001 f977 	bl	8004458 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800318e:	2200      	movs	r2, #0
 8003190:	2100      	movs	r1, #0
 8003192:	201c      	movs	r0, #28
 8003194:	f000 fe79 	bl	8003e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003198:	201c      	movs	r0, #28
 800319a:	f000 fe92 	bl	8003ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800319e:	bf00      	nop
 80031a0:	3728      	adds	r7, #40	; 0x28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40010800 	.word	0x40010800
 80031b0:	40010c00 	.word	0x40010c00
 80031b4:	40010000 	.word	0x40010000

080031b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a26      	ldr	r2, [pc, #152]	; (800326c <HAL_UART_MspInit+0xb4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d145      	bne.n	8003264 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <HAL_UART_MspInit+0xb8>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	4a24      	ldr	r2, [pc, #144]	; (8003270 <HAL_UART_MspInit+0xb8>)
 80031de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e2:	6193      	str	r3, [r2, #24]
 80031e4:	4b22      	ldr	r3, [pc, #136]	; (8003270 <HAL_UART_MspInit+0xb8>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f0:	4b1f      	ldr	r3, [pc, #124]	; (8003270 <HAL_UART_MspInit+0xb8>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	4a1e      	ldr	r2, [pc, #120]	; (8003270 <HAL_UART_MspInit+0xb8>)
 80031f6:	f043 0308 	orr.w	r3, r3, #8
 80031fa:	6193      	str	r3, [r2, #24]
 80031fc:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <HAL_UART_MspInit+0xb8>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003208:	2340      	movs	r3, #64	; 0x40
 800320a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003210:	2303      	movs	r3, #3
 8003212:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	4619      	mov	r1, r3
 800321a:	4816      	ldr	r0, [pc, #88]	; (8003274 <HAL_UART_MspInit+0xbc>)
 800321c:	f001 f91c 	bl	8004458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003224:	2300      	movs	r3, #0
 8003226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	4619      	mov	r1, r3
 8003232:	4810      	ldr	r0, [pc, #64]	; (8003274 <HAL_UART_MspInit+0xbc>)
 8003234:	f001 f910 	bl	8004458 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <HAL_UART_MspInit+0xc0>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
 800324e:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <HAL_UART_MspInit+0xc0>)
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	2100      	movs	r1, #0
 8003258:	2025      	movs	r0, #37	; 0x25
 800325a:	f000 fe16 	bl	8003e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800325e:	2025      	movs	r0, #37	; 0x25
 8003260:	f000 fe2f 	bl	8003ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003264:	bf00      	nop
 8003266:	3728      	adds	r7, #40	; 0x28
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40013800 	.word	0x40013800
 8003270:	40021000 	.word	0x40021000
 8003274:	40010c00 	.word	0x40010c00
 8003278:	40010000 	.word	0x40010000

0800327c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003280:	e7fe      	b.n	8003280 <NMI_Handler+0x4>

08003282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003286:	e7fe      	b.n	8003286 <HardFault_Handler+0x4>

08003288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800328c:	e7fe      	b.n	800328c <MemManage_Handler+0x4>

0800328e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003292:	e7fe      	b.n	8003292 <BusFault_Handler+0x4>

08003294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003298:	e7fe      	b.n	8003298 <UsageFault_Handler+0x4>

0800329a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr

080032b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c2:	f000 f8c9 	bl	8003458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80032d0:	4802      	ldr	r0, [pc, #8]	; (80032dc <ADC1_2_IRQHandler+0x10>)
 80032d2:	f000 fa9b 	bl	800380c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	200001f0 	.word	0x200001f0

080032e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032e4:	4802      	ldr	r0, [pc, #8]	; (80032f0 <TIM2_IRQHandler+0x10>)
 80032e6:	f003 fd0c 	bl	8006d02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200002d0 	.word	0x200002d0

080032f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <USART1_IRQHandler+0x10>)
 80032fa:	f004 f8cd 	bl	8007498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000318 	.word	0x20000318

08003308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003310:	4a14      	ldr	r2, [pc, #80]	; (8003364 <_sbrk+0x5c>)
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <_sbrk+0x60>)
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <_sbrk+0x64>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <_sbrk+0x64>)
 8003326:	4a12      	ldr	r2, [pc, #72]	; (8003370 <_sbrk+0x68>)
 8003328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800332a:	4b10      	ldr	r3, [pc, #64]	; (800336c <_sbrk+0x64>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	429a      	cmp	r2, r3
 8003336:	d207      	bcs.n	8003348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003338:	f005 fb46 	bl	80089c8 <__errno>
 800333c:	4603      	mov	r3, r0
 800333e:	220c      	movs	r2, #12
 8003340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	e009      	b.n	800335c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <_sbrk+0x64>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800334e:	4b07      	ldr	r3, [pc, #28]	; (800336c <_sbrk+0x64>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4413      	add	r3, r2
 8003356:	4a05      	ldr	r2, [pc, #20]	; (800336c <_sbrk+0x64>)
 8003358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20005000 	.word	0x20005000
 8003368:	00000400 	.word	0x00000400
 800336c:	20000384 	.word	0x20000384
 8003370:	200003e0 	.word	0x200003e0

08003374 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003380:	480c      	ldr	r0, [pc, #48]	; (80033b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003382:	490d      	ldr	r1, [pc, #52]	; (80033b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003384:	4a0d      	ldr	r2, [pc, #52]	; (80033bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003388:	e002      	b.n	8003390 <LoopCopyDataInit>

0800338a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800338a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800338c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800338e:	3304      	adds	r3, #4

08003390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003394:	d3f9      	bcc.n	800338a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003396:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003398:	4c0a      	ldr	r4, [pc, #40]	; (80033c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800339a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800339c:	e001      	b.n	80033a2 <LoopFillZerobss>

0800339e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800339e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033a0:	3204      	adds	r2, #4

080033a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033a4:	d3fb      	bcc.n	800339e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80033a6:	f7ff ffe5 	bl	8003374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033aa:	f005 fb13 	bl	80089d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033ae:	f7ff facf 	bl	8002950 <main>
  bx lr
 80033b2:	4770      	bx	lr
  ldr r0, =_sdata
 80033b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033b8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80033bc:	080095b4 	.word	0x080095b4
  ldr r2, =_sbss
 80033c0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80033c4:	200003dc 	.word	0x200003dc

080033c8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033c8:	e7fe      	b.n	80033c8 <CAN1_RX1_IRQHandler>
	...

080033cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <HAL_Init+0x28>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <HAL_Init+0x28>)
 80033d6:	f043 0310 	orr.w	r3, r3, #16
 80033da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033dc:	2003      	movs	r0, #3
 80033de:	f000 fd49 	bl	8003e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033e2:	200f      	movs	r0, #15
 80033e4:	f000 f808 	bl	80033f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033e8:	f7ff fd7a 	bl	8002ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40022000 	.word	0x40022000

080033f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003400:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_InitTick+0x54>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_InitTick+0x58>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	4619      	mov	r1, r3
 800340a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800340e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003412:	fbb2 f3f3 	udiv	r3, r2, r3
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fd61 	bl	8003ede <HAL_SYSTICK_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e00e      	b.n	8003444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b0f      	cmp	r3, #15
 800342a:	d80a      	bhi.n	8003442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800342c:	2200      	movs	r2, #0
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	f04f 30ff 	mov.w	r0, #4294967295
 8003434:	f000 fd29 	bl	8003e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003438:	4a06      	ldr	r2, [pc, #24]	; (8003454 <HAL_InitTick+0x5c>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	2000008c 	.word	0x2000008c
 8003450:	20000094 	.word	0x20000094
 8003454:	20000090 	.word	0x20000090

08003458 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_IncTick+0x1c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_IncTick+0x20>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4413      	add	r3, r2
 8003468:	4a03      	ldr	r2, [pc, #12]	; (8003478 <HAL_IncTick+0x20>)
 800346a:	6013      	str	r3, [r2, #0]
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	20000094 	.word	0x20000094
 8003478:	20000388 	.word	0x20000388

0800347c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return uwTick;
 8003480:	4b02      	ldr	r3, [pc, #8]	; (800348c <HAL_GetTick+0x10>)
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	20000388 	.word	0x20000388

08003490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003498:	f7ff fff0 	bl	800347c <HAL_GetTick>
 800349c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d005      	beq.n	80034b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_Delay+0x44>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034b6:	bf00      	nop
 80034b8:	f7ff ffe0 	bl	800347c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d8f7      	bhi.n	80034b8 <HAL_Delay+0x28>
  {
  }
}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000094 	.word	0x20000094

080034d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e0be      	b.n	8003678 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff fd14 	bl	8002f44 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fb93 	bl	8003c48 <ADC_ConversionStop_Disable>
 8003522:	4603      	mov	r3, r0
 8003524:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b00      	cmp	r3, #0
 8003530:	f040 8099 	bne.w	8003666 <HAL_ADC_Init+0x18e>
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 8095 	bne.w	8003666 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003544:	f023 0302 	bic.w	r3, r3, #2
 8003548:	f043 0202 	orr.w	r2, r3, #2
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003558:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	7b1b      	ldrb	r3, [r3, #12]
 800355e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003560:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	4313      	orrs	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003570:	d003      	beq.n	800357a <HAL_ADC_Init+0xa2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d102      	bne.n	8003580 <HAL_ADC_Init+0xa8>
 800357a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800357e:	e000      	b.n	8003582 <HAL_ADC_Init+0xaa>
 8003580:	2300      	movs	r3, #0
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	7d1b      	ldrb	r3, [r3, #20]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d119      	bne.n	80035c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	7b1b      	ldrb	r3, [r3, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	3b01      	subs	r3, #1
 800359e:	035a      	lsls	r2, r3, #13
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	e00b      	b.n	80035c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	f043 0201 	orr.w	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	4b28      	ldr	r3, [pc, #160]	; (8003680 <HAL_ADC_Init+0x1a8>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	430b      	orrs	r3, r1
 80035ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f4:	d003      	beq.n	80035fe <HAL_ADC_Init+0x126>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d104      	bne.n	8003608 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	3b01      	subs	r3, #1
 8003604:	051b      	lsls	r3, r3, #20
 8003606:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	430a      	orrs	r2, r1
 800361a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	4b18      	ldr	r3, [pc, #96]	; (8003684 <HAL_ADC_Init+0x1ac>)
 8003624:	4013      	ands	r3, r2
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	429a      	cmp	r2, r3
 800362a:	d10b      	bne.n	8003644 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	f043 0201 	orr.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003642:	e018      	b.n	8003676 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	f023 0312 	bic.w	r3, r3, #18
 800364c:	f043 0210 	orr.w	r2, r3, #16
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003664:	e007      	b.n	8003676 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	f043 0210 	orr.w	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003676:	7dfb      	ldrb	r3, [r7, #23]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	ffe1f7fd 	.word	0xffe1f7fd
 8003684:	ff1f0efe 	.word	0xff1f0efe

08003688 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_ADC_Start_IT+0x1a>
 800369e:	2302      	movs	r3, #2
 80036a0:	e0a0      	b.n	80037e4 <HAL_ADC_Start_IT+0x15c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fa72 	bl	8003b94 <ADC_Enable>
 80036b0:	4603      	mov	r3, r0
 80036b2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f040 808f 	bne.w	80037da <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a45      	ldr	r2, [pc, #276]	; (80037ec <HAL_ADC_Start_IT+0x164>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d105      	bne.n	80036e6 <HAL_ADC_Start_IT+0x5e>
 80036da:	4b45      	ldr	r3, [pc, #276]	; (80037f0 <HAL_ADC_Start_IT+0x168>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d115      	bne.n	8003712 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d026      	beq.n	800374e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003708:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003710:	e01d      	b.n	800374e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a33      	ldr	r2, [pc, #204]	; (80037f0 <HAL_ADC_Start_IT+0x168>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d004      	beq.n	8003732 <HAL_ADC_Start_IT+0xaa>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2f      	ldr	r2, [pc, #188]	; (80037ec <HAL_ADC_Start_IT+0x164>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d10d      	bne.n	800374e <HAL_ADC_Start_IT+0xc6>
 8003732:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <HAL_ADC_Start_IT+0x168>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003746:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d006      	beq.n	8003768 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	f023 0206 	bic.w	r2, r3, #6
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	62da      	str	r2, [r3, #44]	; 0x2c
 8003766:	e002      	b.n	800376e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f06f 0202 	mvn.w	r2, #2
 800377e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0220 	orr.w	r2, r2, #32
 800378e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800379a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800379e:	d113      	bne.n	80037c8 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80037a4:	4a11      	ldr	r2, [pc, #68]	; (80037ec <HAL_ADC_Start_IT+0x164>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d105      	bne.n	80037b6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80037aa:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <HAL_ADC_Start_IT+0x168>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d108      	bne.n	80037c8 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80037c4:	609a      	str	r2, [r3, #8]
 80037c6:	e00c      	b.n	80037e2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	e003      	b.n	80037e2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40012800 	.word	0x40012800
 80037f0:	40012400 	.word	0x40012400

080037f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b20      	cmp	r3, #32
 8003820:	d140      	bne.n	80038a4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	d139      	bne.n	80038a4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b00      	cmp	r3, #0
 800383a:	d105      	bne.n	8003848 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003852:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003856:	d11d      	bne.n	8003894 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800385c:	2b00      	cmp	r3, #0
 800385e:	d119      	bne.n	8003894 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0220 	bic.w	r2, r2, #32
 800386e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	f043 0201 	orr.w	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7fd fa2b 	bl	8000cf0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f06f 0212 	mvn.w	r2, #18
 80038a2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ae:	2b80      	cmp	r3, #128	; 0x80
 80038b0:	d14f      	bne.n	8003952 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d148      	bne.n	8003952 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80038e2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80038e6:	d012      	beq.n	800390e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d125      	bne.n	8003942 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003900:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003904:	d11d      	bne.n	8003942 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800390a:	2b00      	cmp	r3, #0
 800390c:	d119      	bne.n	8003942 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800391c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d105      	bne.n	8003942 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	f043 0201 	orr.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f9c1 	bl	8003cca <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 020c 	mvn.w	r2, #12
 8003950:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d114      	bne.n	800398a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b01      	cmp	r3, #1
 800396c:	d10d      	bne.n	800398a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f809 	bl	8003992 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0201 	mvn.w	r2, #1
 8003988:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x20>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e0dc      	b.n	8003b7e <HAL_ADC_ConfigChannel+0x1da>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b06      	cmp	r3, #6
 80039d2:	d81c      	bhi.n	8003a0e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	3b05      	subs	r3, #5
 80039e6:	221f      	movs	r2, #31
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	4019      	ands	r1, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	3b05      	subs	r3, #5
 8003a00:	fa00 f203 	lsl.w	r2, r0, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	635a      	str	r2, [r3, #52]	; 0x34
 8003a0c:	e03c      	b.n	8003a88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b0c      	cmp	r3, #12
 8003a14:	d81c      	bhi.n	8003a50 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	3b23      	subs	r3, #35	; 0x23
 8003a28:	221f      	movs	r2, #31
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	4019      	ands	r1, r3
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	3b23      	subs	r3, #35	; 0x23
 8003a42:	fa00 f203 	lsl.w	r2, r0, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a4e:	e01b      	b.n	8003a88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	3b41      	subs	r3, #65	; 0x41
 8003a62:	221f      	movs	r2, #31
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	4019      	ands	r1, r3
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	3b41      	subs	r3, #65	; 0x41
 8003a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b09      	cmp	r3, #9
 8003a8e:	d91c      	bls.n	8003aca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68d9      	ldr	r1, [r3, #12]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3b1e      	subs	r3, #30
 8003aa2:	2207      	movs	r2, #7
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	4019      	ands	r1, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6898      	ldr	r0, [r3, #8]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	4413      	add	r3, r2
 8003aba:	3b1e      	subs	r3, #30
 8003abc:	fa00 f203 	lsl.w	r2, r0, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	60da      	str	r2, [r3, #12]
 8003ac8:	e019      	b.n	8003afe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6919      	ldr	r1, [r3, #16]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	2207      	movs	r2, #7
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	4019      	ands	r1, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	6898      	ldr	r0, [r3, #8]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	4413      	add	r3, r2
 8003af2:	fa00 f203 	lsl.w	r2, r0, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d003      	beq.n	8003b0e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b0a:	2b11      	cmp	r3, #17
 8003b0c:	d132      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <HAL_ADC_ConfigChannel+0x1e4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d125      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d126      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b34:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b10      	cmp	r3, #16
 8003b3c:	d11a      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <HAL_ADC_ConfigChannel+0x1e8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a13      	ldr	r2, [pc, #76]	; (8003b90 <HAL_ADC_ConfigChannel+0x1ec>)
 8003b44:	fba2 2303 	umull	r2, r3, r2, r3
 8003b48:	0c9a      	lsrs	r2, r3, #18
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b54:	e002      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f9      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x1b2>
 8003b62:	e007      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	f043 0220 	orr.w	r2, r3, #32
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	40012400 	.word	0x40012400
 8003b8c:	2000008c 	.word	0x2000008c
 8003b90:	431bde83 	.word	0x431bde83

08003b94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d040      	beq.n	8003c34 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bc2:	4b1f      	ldr	r3, [pc, #124]	; (8003c40 <ADC_Enable+0xac>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1f      	ldr	r2, [pc, #124]	; (8003c44 <ADC_Enable+0xb0>)
 8003bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bcc:	0c9b      	lsrs	r3, r3, #18
 8003bce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003bd0:	e002      	b.n	8003bd8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f9      	bne.n	8003bd2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bde:	f7ff fc4d 	bl	800347c <HAL_GetTick>
 8003be2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003be4:	e01f      	b.n	8003c26 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003be6:	f7ff fc49 	bl	800347c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d918      	bls.n	8003c26 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d011      	beq.n	8003c26 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	f043 0210 	orr.w	r2, r3, #16
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	f043 0201 	orr.w	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e007      	b.n	8003c36 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d1d8      	bne.n	8003be6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	2000008c 	.word	0x2000008c
 8003c44:	431bde83 	.word	0x431bde83

08003c48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d12e      	bne.n	8003cc0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c72:	f7ff fc03 	bl	800347c <HAL_GetTick>
 8003c76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c78:	e01b      	b.n	8003cb2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c7a:	f7ff fbff 	bl	800347c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d914      	bls.n	8003cb2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d10d      	bne.n	8003cb2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	f043 0210 	orr.w	r2, r3, #16
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	f043 0201 	orr.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e007      	b.n	8003cc2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d0dc      	beq.n	8003c7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cec:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <__NVIC_SetPriorityGrouping+0x44>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d0e:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <__NVIC_SetPriorityGrouping+0x44>)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	60d3      	str	r3, [r2, #12]
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <__NVIC_GetPriorityGrouping+0x18>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	f003 0307 	and.w	r3, r3, #7
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	e000ed00 	.word	0xe000ed00

08003d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	db0b      	blt.n	8003d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	f003 021f 	and.w	r2, r3, #31
 8003d58:	4906      	ldr	r1, [pc, #24]	; (8003d74 <__NVIC_EnableIRQ+0x34>)
 8003d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	2001      	movs	r0, #1
 8003d62:	fa00 f202 	lsl.w	r2, r0, r2
 8003d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	e000e100 	.word	0xe000e100

08003d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	db0a      	blt.n	8003da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	490c      	ldr	r1, [pc, #48]	; (8003dc4 <__NVIC_SetPriority+0x4c>)
 8003d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d96:	0112      	lsls	r2, r2, #4
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003da0:	e00a      	b.n	8003db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	4908      	ldr	r1, [pc, #32]	; (8003dc8 <__NVIC_SetPriority+0x50>)
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	3b04      	subs	r3, #4
 8003db0:	0112      	lsls	r2, r2, #4
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	440b      	add	r3, r1
 8003db6:	761a      	strb	r2, [r3, #24]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	e000e100 	.word	0xe000e100
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	; 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f1c3 0307 	rsb	r3, r3, #7
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	bf28      	it	cs
 8003dea:	2304      	movcs	r3, #4
 8003dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d902      	bls.n	8003dfc <NVIC_EncodePriority+0x30>
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3b03      	subs	r3, #3
 8003dfa:	e000      	b.n	8003dfe <NVIC_EncodePriority+0x32>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	401a      	ands	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e14:	f04f 31ff 	mov.w	r1, #4294967295
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	43d9      	mvns	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e24:	4313      	orrs	r3, r2
         );
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3724      	adds	r7, #36	; 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e40:	d301      	bcc.n	8003e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e42:	2301      	movs	r3, #1
 8003e44:	e00f      	b.n	8003e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <SysTick_Config+0x40>)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e4e:	210f      	movs	r1, #15
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	f7ff ff90 	bl	8003d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <SysTick_Config+0x40>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e5e:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <SysTick_Config+0x40>)
 8003e60:	2207      	movs	r2, #7
 8003e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	e000e010 	.word	0xe000e010

08003e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ff2d 	bl	8003cdc <__NVIC_SetPriorityGrouping>
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b086      	sub	sp, #24
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	4603      	mov	r3, r0
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e9c:	f7ff ff42 	bl	8003d24 <__NVIC_GetPriorityGrouping>
 8003ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	6978      	ldr	r0, [r7, #20]
 8003ea8:	f7ff ff90 	bl	8003dcc <NVIC_EncodePriority>
 8003eac:	4602      	mov	r2, r0
 8003eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff5f 	bl	8003d78 <__NVIC_SetPriority>
}
 8003eba:	bf00      	nop
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	4603      	mov	r3, r0
 8003eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff ff35 	bl	8003d40 <__NVIC_EnableIRQ>
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff ffa2 	bl	8003e30 <SysTick_Config>
 8003eec:	4603      	mov	r3, r0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b085      	sub	sp, #20
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d008      	beq.n	8003f1e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e020      	b.n	8003f60 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 020e 	bic.w	r2, r2, #14
 8003f2c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f46:	2101      	movs	r1, #1
 8003f48:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr
	...

08003f6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d005      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2204      	movs	r2, #4
 8003f86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
 8003f8c:	e051      	b.n	8004032 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 020e 	bic.w	r2, r2, #14
 8003f9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a22      	ldr	r2, [pc, #136]	; (800403c <HAL_DMA_Abort_IT+0xd0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d029      	beq.n	800400c <HAL_DMA_Abort_IT+0xa0>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a20      	ldr	r2, [pc, #128]	; (8004040 <HAL_DMA_Abort_IT+0xd4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d022      	beq.n	8004008 <HAL_DMA_Abort_IT+0x9c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1f      	ldr	r2, [pc, #124]	; (8004044 <HAL_DMA_Abort_IT+0xd8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d01a      	beq.n	8004002 <HAL_DMA_Abort_IT+0x96>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1d      	ldr	r2, [pc, #116]	; (8004048 <HAL_DMA_Abort_IT+0xdc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d012      	beq.n	8003ffc <HAL_DMA_Abort_IT+0x90>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1c      	ldr	r2, [pc, #112]	; (800404c <HAL_DMA_Abort_IT+0xe0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00a      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x8a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a1a      	ldr	r2, [pc, #104]	; (8004050 <HAL_DMA_Abort_IT+0xe4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d102      	bne.n	8003ff0 <HAL_DMA_Abort_IT+0x84>
 8003fea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003fee:	e00e      	b.n	800400e <HAL_DMA_Abort_IT+0xa2>
 8003ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ff4:	e00b      	b.n	800400e <HAL_DMA_Abort_IT+0xa2>
 8003ff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ffa:	e008      	b.n	800400e <HAL_DMA_Abort_IT+0xa2>
 8003ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004000:	e005      	b.n	800400e <HAL_DMA_Abort_IT+0xa2>
 8004002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004006:	e002      	b.n	800400e <HAL_DMA_Abort_IT+0xa2>
 8004008:	2310      	movs	r3, #16
 800400a:	e000      	b.n	800400e <HAL_DMA_Abort_IT+0xa2>
 800400c:	2301      	movs	r3, #1
 800400e:	4a11      	ldr	r2, [pc, #68]	; (8004054 <HAL_DMA_Abort_IT+0xe8>)
 8004010:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	4798      	blx	r3
    } 
  }
  return status;
 8004032:	7bfb      	ldrb	r3, [r7, #15]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40020008 	.word	0x40020008
 8004040:	4002001c 	.word	0x4002001c
 8004044:	40020030 	.word	0x40020030
 8004048:	40020044 	.word	0x40020044
 800404c:	40020058 	.word	0x40020058
 8004050:	4002006c 	.word	0x4002006c
 8004054:	40020000 	.word	0x40020000

08004058 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004072:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <HAL_FLASH_Program+0xd8>)
 8004074:	7e1b      	ldrb	r3, [r3, #24]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_FLASH_Program+0x26>
 800407a:	2302      	movs	r3, #2
 800407c:	e054      	b.n	8004128 <HAL_FLASH_Program+0xd0>
 800407e:	4b2c      	ldr	r3, [pc, #176]	; (8004130 <HAL_FLASH_Program+0xd8>)
 8004080:	2201      	movs	r2, #1
 8004082:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004084:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004088:	f000 f8a8 	bl	80041dc <FLASH_WaitForLastOperation>
 800408c:	4603      	mov	r3, r0
 800408e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d144      	bne.n	8004120 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d102      	bne.n	80040a2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800409c:	2301      	movs	r3, #1
 800409e:	757b      	strb	r3, [r7, #21]
 80040a0:	e007      	b.n	80040b2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d102      	bne.n	80040ae <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80040a8:	2302      	movs	r3, #2
 80040aa:	757b      	strb	r3, [r7, #21]
 80040ac:	e001      	b.n	80040b2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80040ae:	2304      	movs	r3, #4
 80040b0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80040b2:	2300      	movs	r3, #0
 80040b4:	75bb      	strb	r3, [r7, #22]
 80040b6:	e02d      	b.n	8004114 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80040b8:	7dbb      	ldrb	r3, [r7, #22]
 80040ba:	005a      	lsls	r2, r3, #1
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	eb02 0c03 	add.w	ip, r2, r3
 80040c2:	7dbb      	ldrb	r3, [r7, #22]
 80040c4:	0119      	lsls	r1, r3, #4
 80040c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ca:	f1c1 0620 	rsb	r6, r1, #32
 80040ce:	f1a1 0020 	sub.w	r0, r1, #32
 80040d2:	fa22 f401 	lsr.w	r4, r2, r1
 80040d6:	fa03 f606 	lsl.w	r6, r3, r6
 80040da:	4334      	orrs	r4, r6
 80040dc:	fa23 f000 	lsr.w	r0, r3, r0
 80040e0:	4304      	orrs	r4, r0
 80040e2:	fa23 f501 	lsr.w	r5, r3, r1
 80040e6:	b2a3      	uxth	r3, r4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4660      	mov	r0, ip
 80040ec:	f000 f85a 	bl	80041a4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040f4:	f000 f872 	bl	80041dc <FLASH_WaitForLastOperation>
 80040f8:	4603      	mov	r3, r0
 80040fa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <HAL_FLASH_Program+0xdc>)
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <HAL_FLASH_Program+0xdc>)
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d107      	bne.n	800411e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800410e:	7dbb      	ldrb	r3, [r7, #22]
 8004110:	3301      	adds	r3, #1
 8004112:	75bb      	strb	r3, [r7, #22]
 8004114:	7dba      	ldrb	r2, [r7, #22]
 8004116:	7d7b      	ldrb	r3, [r7, #21]
 8004118:	429a      	cmp	r2, r3
 800411a:	d3cd      	bcc.n	80040b8 <HAL_FLASH_Program+0x60>
 800411c:	e000      	b.n	8004120 <HAL_FLASH_Program+0xc8>
      {
        break;
 800411e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <HAL_FLASH_Program+0xd8>)
 8004122:	2200      	movs	r2, #0
 8004124:	761a      	strb	r2, [r3, #24]

  return status;
 8004126:	7dfb      	ldrb	r3, [r7, #23]
}
 8004128:	4618      	mov	r0, r3
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004130:	20000390 	.word	0x20000390
 8004134:	40022000 	.word	0x40022000

08004138 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <HAL_FLASH_Unlock+0x40>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00d      	beq.n	800416a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <HAL_FLASH_Unlock+0x40>)
 8004150:	4a0a      	ldr	r2, [pc, #40]	; (800417c <HAL_FLASH_Unlock+0x44>)
 8004152:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004154:	4b08      	ldr	r3, [pc, #32]	; (8004178 <HAL_FLASH_Unlock+0x40>)
 8004156:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <HAL_FLASH_Unlock+0x48>)
 8004158:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <HAL_FLASH_Unlock+0x40>)
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800416a:	79fb      	ldrb	r3, [r7, #7]
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40022000 	.word	0x40022000
 800417c:	45670123 	.word	0x45670123
 8004180:	cdef89ab 	.word	0xcdef89ab

08004184 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_FLASH_Lock+0x1c>)
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	4a04      	ldr	r2, [pc, #16]	; (80041a0 <HAL_FLASH_Lock+0x1c>)
 800418e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004192:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40022000 	.word	0x40022000

080041a4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <FLASH_Program_HalfWord+0x30>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80041b6:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <FLASH_Program_HalfWord+0x34>)
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	4a07      	ldr	r2, [pc, #28]	; (80041d8 <FLASH_Program_HalfWord+0x34>)
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	887a      	ldrh	r2, [r7, #2]
 80041c6:	801a      	strh	r2, [r3, #0]
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20000390 	.word	0x20000390
 80041d8:	40022000 	.word	0x40022000

080041dc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80041e4:	f7ff f94a 	bl	800347c <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80041ea:	e010      	b.n	800420e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	d00c      	beq.n	800420e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <FLASH_WaitForLastOperation+0x2e>
 80041fa:	f7ff f93f 	bl	800347c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d201      	bcs.n	800420e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e025      	b.n	800425a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800420e:	4b15      	ldr	r3, [pc, #84]	; (8004264 <FLASH_WaitForLastOperation+0x88>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e8      	bne.n	80041ec <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <FLASH_WaitForLastOperation+0x88>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <FLASH_WaitForLastOperation+0x88>)
 8004228:	2220      	movs	r2, #32
 800422a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800422c:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <FLASH_WaitForLastOperation+0x88>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10b      	bne.n	8004250 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004238:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <FLASH_WaitForLastOperation+0x88>)
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004244:	4b07      	ldr	r3, [pc, #28]	; (8004264 <FLASH_WaitForLastOperation+0x88>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004250:	f000 f80a 	bl	8004268 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40022000 	.word	0x40022000

08004268 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004272:	4b23      	ldr	r3, [pc, #140]	; (8004300 <FLASH_SetErrorCode+0x98>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800427e:	4b21      	ldr	r3, [pc, #132]	; (8004304 <FLASH_SetErrorCode+0x9c>)
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f043 0302 	orr.w	r3, r3, #2
 8004286:	4a1f      	ldr	r2, [pc, #124]	; (8004304 <FLASH_SetErrorCode+0x9c>)
 8004288:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f043 0310 	orr.w	r3, r3, #16
 8004290:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004292:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <FLASH_SetErrorCode+0x98>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	d009      	beq.n	80042b2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800429e:	4b19      	ldr	r3, [pc, #100]	; (8004304 <FLASH_SetErrorCode+0x9c>)
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	4a17      	ldr	r2, [pc, #92]	; (8004304 <FLASH_SetErrorCode+0x9c>)
 80042a8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f043 0304 	orr.w	r3, r3, #4
 80042b0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80042b2:	4b13      	ldr	r3, [pc, #76]	; (8004300 <FLASH_SetErrorCode+0x98>)
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80042be:	4b11      	ldr	r3, [pc, #68]	; (8004304 <FLASH_SetErrorCode+0x9c>)
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f043 0304 	orr.w	r3, r3, #4
 80042c6:	4a0f      	ldr	r2, [pc, #60]	; (8004304 <FLASH_SetErrorCode+0x9c>)
 80042c8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <FLASH_SetErrorCode+0x98>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	4a0c      	ldr	r2, [pc, #48]	; (8004300 <FLASH_SetErrorCode+0x98>)
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f240 1201 	movw	r2, #257	; 0x101
 80042dc:	4293      	cmp	r3, r2
 80042de:	d106      	bne.n	80042ee <FLASH_SetErrorCode+0x86>
 80042e0:	4b07      	ldr	r3, [pc, #28]	; (8004300 <FLASH_SetErrorCode+0x98>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	4a06      	ldr	r2, [pc, #24]	; (8004300 <FLASH_SetErrorCode+0x98>)
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	61d3      	str	r3, [r2, #28]
}  
 80042ec:	e002      	b.n	80042f4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80042ee:	4a04      	ldr	r2, [pc, #16]	; (8004300 <FLASH_SetErrorCode+0x98>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60d3      	str	r3, [r2, #12]
}  
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40022000 	.word	0x40022000
 8004304:	20000390 	.word	0x20000390

08004308 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800431a:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <HAL_FLASHEx_Erase+0xd0>)
 800431c:	7e1b      	ldrb	r3, [r3, #24]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_FLASHEx_Erase+0x1e>
 8004322:	2302      	movs	r3, #2
 8004324:	e053      	b.n	80043ce <HAL_FLASHEx_Erase+0xc6>
 8004326:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <HAL_FLASHEx_Erase+0xd0>)
 8004328:	2201      	movs	r2, #1
 800432a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d116      	bne.n	8004362 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004334:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004338:	f7ff ff50 	bl	80041dc <FLASH_WaitForLastOperation>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d141      	bne.n	80043c6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004342:	2001      	movs	r0, #1
 8004344:	f000 f84c 	bl	80043e0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004348:	f24c 3050 	movw	r0, #50000	; 0xc350
 800434c:	f7ff ff46 	bl	80041dc <FLASH_WaitForLastOperation>
 8004350:	4603      	mov	r3, r0
 8004352:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004354:	4b21      	ldr	r3, [pc, #132]	; (80043dc <HAL_FLASHEx_Erase+0xd4>)
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	4a20      	ldr	r2, [pc, #128]	; (80043dc <HAL_FLASHEx_Erase+0xd4>)
 800435a:	f023 0304 	bic.w	r3, r3, #4
 800435e:	6113      	str	r3, [r2, #16]
 8004360:	e031      	b.n	80043c6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004362:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004366:	f7ff ff39 	bl	80041dc <FLASH_WaitForLastOperation>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d12a      	bne.n	80043c6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	f04f 32ff 	mov.w	r2, #4294967295
 8004376:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	e019      	b.n	80043b4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004380:	68b8      	ldr	r0, [r7, #8]
 8004382:	f000 f849 	bl	8004418 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004386:	f24c 3050 	movw	r0, #50000	; 0xc350
 800438a:	f7ff ff27 	bl	80041dc <FLASH_WaitForLastOperation>
 800438e:	4603      	mov	r3, r0
 8004390:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <HAL_FLASHEx_Erase+0xd4>)
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	4a11      	ldr	r2, [pc, #68]	; (80043dc <HAL_FLASHEx_Erase+0xd4>)
 8004398:	f023 0302 	bic.w	r3, r3, #2
 800439c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	601a      	str	r2, [r3, #0]
            break;
 80043aa:	e00c      	b.n	80043c6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043b2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	029a      	lsls	r2, r3, #10
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d3dc      	bcc.n	8004380 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80043c6:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <HAL_FLASHEx_Erase+0xd0>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	761a      	strb	r2, [r3, #24]

  return status;
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000390 	.word	0x20000390
 80043dc:	40022000 	.word	0x40022000

080043e0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043e8:	4b09      	ldr	r3, [pc, #36]	; (8004410 <FLASH_MassErase+0x30>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <FLASH_MassErase+0x34>)
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <FLASH_MassErase+0x34>)
 80043f4:	f043 0304 	orr.w	r3, r3, #4
 80043f8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80043fa:	4b06      	ldr	r3, [pc, #24]	; (8004414 <FLASH_MassErase+0x34>)
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	4a05      	ldr	r2, [pc, #20]	; (8004414 <FLASH_MassErase+0x34>)
 8004400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004404:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	20000390 	.word	0x20000390
 8004414:	40022000 	.word	0x40022000

08004418 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <FLASH_PageErase+0x38>)
 8004422:	2200      	movs	r2, #0
 8004424:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <FLASH_PageErase+0x3c>)
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	4a0a      	ldr	r2, [pc, #40]	; (8004454 <FLASH_PageErase+0x3c>)
 800442c:	f043 0302 	orr.w	r3, r3, #2
 8004430:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004432:	4a08      	ldr	r2, [pc, #32]	; (8004454 <FLASH_PageErase+0x3c>)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <FLASH_PageErase+0x3c>)
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	4a05      	ldr	r2, [pc, #20]	; (8004454 <FLASH_PageErase+0x3c>)
 800443e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004442:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20000390 	.word	0x20000390
 8004454:	40022000 	.word	0x40022000

08004458 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004458:	b480      	push	{r7}
 800445a:	b08b      	sub	sp, #44	; 0x2c
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004462:	2300      	movs	r3, #0
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004466:	2300      	movs	r3, #0
 8004468:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800446a:	e169      	b.n	8004740 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800446c:	2201      	movs	r2, #1
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	4013      	ands	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	429a      	cmp	r2, r3
 8004486:	f040 8158 	bne.w	800473a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4a9a      	ldr	r2, [pc, #616]	; (80046f8 <HAL_GPIO_Init+0x2a0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d05e      	beq.n	8004552 <HAL_GPIO_Init+0xfa>
 8004494:	4a98      	ldr	r2, [pc, #608]	; (80046f8 <HAL_GPIO_Init+0x2a0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d875      	bhi.n	8004586 <HAL_GPIO_Init+0x12e>
 800449a:	4a98      	ldr	r2, [pc, #608]	; (80046fc <HAL_GPIO_Init+0x2a4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d058      	beq.n	8004552 <HAL_GPIO_Init+0xfa>
 80044a0:	4a96      	ldr	r2, [pc, #600]	; (80046fc <HAL_GPIO_Init+0x2a4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d86f      	bhi.n	8004586 <HAL_GPIO_Init+0x12e>
 80044a6:	4a96      	ldr	r2, [pc, #600]	; (8004700 <HAL_GPIO_Init+0x2a8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d052      	beq.n	8004552 <HAL_GPIO_Init+0xfa>
 80044ac:	4a94      	ldr	r2, [pc, #592]	; (8004700 <HAL_GPIO_Init+0x2a8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d869      	bhi.n	8004586 <HAL_GPIO_Init+0x12e>
 80044b2:	4a94      	ldr	r2, [pc, #592]	; (8004704 <HAL_GPIO_Init+0x2ac>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d04c      	beq.n	8004552 <HAL_GPIO_Init+0xfa>
 80044b8:	4a92      	ldr	r2, [pc, #584]	; (8004704 <HAL_GPIO_Init+0x2ac>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d863      	bhi.n	8004586 <HAL_GPIO_Init+0x12e>
 80044be:	4a92      	ldr	r2, [pc, #584]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d046      	beq.n	8004552 <HAL_GPIO_Init+0xfa>
 80044c4:	4a90      	ldr	r2, [pc, #576]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d85d      	bhi.n	8004586 <HAL_GPIO_Init+0x12e>
 80044ca:	2b12      	cmp	r3, #18
 80044cc:	d82a      	bhi.n	8004524 <HAL_GPIO_Init+0xcc>
 80044ce:	2b12      	cmp	r3, #18
 80044d0:	d859      	bhi.n	8004586 <HAL_GPIO_Init+0x12e>
 80044d2:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <HAL_GPIO_Init+0x80>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	08004553 	.word	0x08004553
 80044dc:	0800452d 	.word	0x0800452d
 80044e0:	0800453f 	.word	0x0800453f
 80044e4:	08004581 	.word	0x08004581
 80044e8:	08004587 	.word	0x08004587
 80044ec:	08004587 	.word	0x08004587
 80044f0:	08004587 	.word	0x08004587
 80044f4:	08004587 	.word	0x08004587
 80044f8:	08004587 	.word	0x08004587
 80044fc:	08004587 	.word	0x08004587
 8004500:	08004587 	.word	0x08004587
 8004504:	08004587 	.word	0x08004587
 8004508:	08004587 	.word	0x08004587
 800450c:	08004587 	.word	0x08004587
 8004510:	08004587 	.word	0x08004587
 8004514:	08004587 	.word	0x08004587
 8004518:	08004587 	.word	0x08004587
 800451c:	08004535 	.word	0x08004535
 8004520:	08004549 	.word	0x08004549
 8004524:	4a79      	ldr	r2, [pc, #484]	; (800470c <HAL_GPIO_Init+0x2b4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800452a:	e02c      	b.n	8004586 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	623b      	str	r3, [r7, #32]
          break;
 8004532:	e029      	b.n	8004588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	3304      	adds	r3, #4
 800453a:	623b      	str	r3, [r7, #32]
          break;
 800453c:	e024      	b.n	8004588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	3308      	adds	r3, #8
 8004544:	623b      	str	r3, [r7, #32]
          break;
 8004546:	e01f      	b.n	8004588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	330c      	adds	r3, #12
 800454e:	623b      	str	r3, [r7, #32]
          break;
 8004550:	e01a      	b.n	8004588 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800455a:	2304      	movs	r3, #4
 800455c:	623b      	str	r3, [r7, #32]
          break;
 800455e:	e013      	b.n	8004588 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004568:	2308      	movs	r3, #8
 800456a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	611a      	str	r2, [r3, #16]
          break;
 8004572:	e009      	b.n	8004588 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004574:	2308      	movs	r3, #8
 8004576:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	615a      	str	r2, [r3, #20]
          break;
 800457e:	e003      	b.n	8004588 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004580:	2300      	movs	r3, #0
 8004582:	623b      	str	r3, [r7, #32]
          break;
 8004584:	e000      	b.n	8004588 <HAL_GPIO_Init+0x130>
          break;
 8004586:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2bff      	cmp	r3, #255	; 0xff
 800458c:	d801      	bhi.n	8004592 <HAL_GPIO_Init+0x13a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	e001      	b.n	8004596 <HAL_GPIO_Init+0x13e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3304      	adds	r3, #4
 8004596:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2bff      	cmp	r3, #255	; 0xff
 800459c:	d802      	bhi.n	80045a4 <HAL_GPIO_Init+0x14c>
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	e002      	b.n	80045aa <HAL_GPIO_Init+0x152>
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	3b08      	subs	r3, #8
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	210f      	movs	r1, #15
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	fa01 f303 	lsl.w	r3, r1, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	401a      	ands	r2, r3
 80045bc:	6a39      	ldr	r1, [r7, #32]
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	fa01 f303 	lsl.w	r3, r1, r3
 80045c4:	431a      	orrs	r2, r3
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80b1 	beq.w	800473a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045d8:	4b4d      	ldr	r3, [pc, #308]	; (8004710 <HAL_GPIO_Init+0x2b8>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	4a4c      	ldr	r2, [pc, #304]	; (8004710 <HAL_GPIO_Init+0x2b8>)
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	6193      	str	r3, [r2, #24]
 80045e4:	4b4a      	ldr	r3, [pc, #296]	; (8004710 <HAL_GPIO_Init+0x2b8>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045f0:	4a48      	ldr	r2, [pc, #288]	; (8004714 <HAL_GPIO_Init+0x2bc>)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	089b      	lsrs	r3, r3, #2
 80045f6:	3302      	adds	r3, #2
 80045f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	220f      	movs	r2, #15
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4013      	ands	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a40      	ldr	r2, [pc, #256]	; (8004718 <HAL_GPIO_Init+0x2c0>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d013      	beq.n	8004644 <HAL_GPIO_Init+0x1ec>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a3f      	ldr	r2, [pc, #252]	; (800471c <HAL_GPIO_Init+0x2c4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00d      	beq.n	8004640 <HAL_GPIO_Init+0x1e8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a3e      	ldr	r2, [pc, #248]	; (8004720 <HAL_GPIO_Init+0x2c8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d007      	beq.n	800463c <HAL_GPIO_Init+0x1e4>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a3d      	ldr	r2, [pc, #244]	; (8004724 <HAL_GPIO_Init+0x2cc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d101      	bne.n	8004638 <HAL_GPIO_Init+0x1e0>
 8004634:	2303      	movs	r3, #3
 8004636:	e006      	b.n	8004646 <HAL_GPIO_Init+0x1ee>
 8004638:	2304      	movs	r3, #4
 800463a:	e004      	b.n	8004646 <HAL_GPIO_Init+0x1ee>
 800463c:	2302      	movs	r3, #2
 800463e:	e002      	b.n	8004646 <HAL_GPIO_Init+0x1ee>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <HAL_GPIO_Init+0x1ee>
 8004644:	2300      	movs	r3, #0
 8004646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004648:	f002 0203 	and.w	r2, r2, #3
 800464c:	0092      	lsls	r2, r2, #2
 800464e:	4093      	lsls	r3, r2
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004656:	492f      	ldr	r1, [pc, #188]	; (8004714 <HAL_GPIO_Init+0x2bc>)
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	089b      	lsrs	r3, r3, #2
 800465c:	3302      	adds	r3, #2
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d006      	beq.n	800467e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004670:	4b2d      	ldr	r3, [pc, #180]	; (8004728 <HAL_GPIO_Init+0x2d0>)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	492c      	ldr	r1, [pc, #176]	; (8004728 <HAL_GPIO_Init+0x2d0>)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	4313      	orrs	r3, r2
 800467a:	600b      	str	r3, [r1, #0]
 800467c:	e006      	b.n	800468c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800467e:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <HAL_GPIO_Init+0x2d0>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	43db      	mvns	r3, r3
 8004686:	4928      	ldr	r1, [pc, #160]	; (8004728 <HAL_GPIO_Init+0x2d0>)
 8004688:	4013      	ands	r3, r2
 800468a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d006      	beq.n	80046a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004698:	4b23      	ldr	r3, [pc, #140]	; (8004728 <HAL_GPIO_Init+0x2d0>)
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	4922      	ldr	r1, [pc, #136]	; (8004728 <HAL_GPIO_Init+0x2d0>)
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	604b      	str	r3, [r1, #4]
 80046a4:	e006      	b.n	80046b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <HAL_GPIO_Init+0x2d0>)
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	491e      	ldr	r1, [pc, #120]	; (8004728 <HAL_GPIO_Init+0x2d0>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d006      	beq.n	80046ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80046c0:	4b19      	ldr	r3, [pc, #100]	; (8004728 <HAL_GPIO_Init+0x2d0>)
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	4918      	ldr	r1, [pc, #96]	; (8004728 <HAL_GPIO_Init+0x2d0>)
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	608b      	str	r3, [r1, #8]
 80046cc:	e006      	b.n	80046dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046ce:	4b16      	ldr	r3, [pc, #88]	; (8004728 <HAL_GPIO_Init+0x2d0>)
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	4914      	ldr	r1, [pc, #80]	; (8004728 <HAL_GPIO_Init+0x2d0>)
 80046d8:	4013      	ands	r3, r2
 80046da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d021      	beq.n	800472c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046e8:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <HAL_GPIO_Init+0x2d0>)
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	490e      	ldr	r1, [pc, #56]	; (8004728 <HAL_GPIO_Init+0x2d0>)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60cb      	str	r3, [r1, #12]
 80046f4:	e021      	b.n	800473a <HAL_GPIO_Init+0x2e2>
 80046f6:	bf00      	nop
 80046f8:	10320000 	.word	0x10320000
 80046fc:	10310000 	.word	0x10310000
 8004700:	10220000 	.word	0x10220000
 8004704:	10210000 	.word	0x10210000
 8004708:	10120000 	.word	0x10120000
 800470c:	10110000 	.word	0x10110000
 8004710:	40021000 	.word	0x40021000
 8004714:	40010000 	.word	0x40010000
 8004718:	40010800 	.word	0x40010800
 800471c:	40010c00 	.word	0x40010c00
 8004720:	40011000 	.word	0x40011000
 8004724:	40011400 	.word	0x40011400
 8004728:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <HAL_GPIO_Init+0x304>)
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	43db      	mvns	r3, r3
 8004734:	4909      	ldr	r1, [pc, #36]	; (800475c <HAL_GPIO_Init+0x304>)
 8004736:	4013      	ands	r3, r2
 8004738:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	3301      	adds	r3, #1
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	fa22 f303 	lsr.w	r3, r2, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	f47f ae8e 	bne.w	800446c <HAL_GPIO_Init+0x14>
  }
}
 8004750:	bf00      	nop
 8004752:	bf00      	nop
 8004754:	372c      	adds	r7, #44	; 0x2c
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr
 800475c:	40010400 	.word	0x40010400

08004760 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	887b      	ldrh	r3, [r7, #2]
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
 800477c:	e001      	b.n	8004782 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004782:	7bfb      	ldrb	r3, [r7, #15]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr

0800478e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	807b      	strh	r3, [r7, #2]
 800479a:	4613      	mov	r3, r2
 800479c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800479e:	787b      	ldrb	r3, [r7, #1]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047a4:	887a      	ldrh	r2, [r7, #2]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80047aa:	e003      	b.n	80047b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047ac:	887b      	ldrh	r3, [r7, #2]
 80047ae:	041a      	lsls	r2, r3, #16
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	611a      	str	r2, [r3, #16]
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr
	...

080047c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e12b      	b.n	8004a2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fe fbf0 	bl	8002fcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2224      	movs	r2, #36	; 0x24
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004812:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004822:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004824:	f001 fcda 	bl	80061dc <HAL_RCC_GetPCLK1Freq>
 8004828:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4a81      	ldr	r2, [pc, #516]	; (8004a34 <HAL_I2C_Init+0x274>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d807      	bhi.n	8004844 <HAL_I2C_Init+0x84>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a80      	ldr	r2, [pc, #512]	; (8004a38 <HAL_I2C_Init+0x278>)
 8004838:	4293      	cmp	r3, r2
 800483a:	bf94      	ite	ls
 800483c:	2301      	movls	r3, #1
 800483e:	2300      	movhi	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	e006      	b.n	8004852 <HAL_I2C_Init+0x92>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4a7d      	ldr	r2, [pc, #500]	; (8004a3c <HAL_I2C_Init+0x27c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	bf94      	ite	ls
 800484c:	2301      	movls	r3, #1
 800484e:	2300      	movhi	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e0e7      	b.n	8004a2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4a78      	ldr	r2, [pc, #480]	; (8004a40 <HAL_I2C_Init+0x280>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	0c9b      	lsrs	r3, r3, #18
 8004864:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	4a6a      	ldr	r2, [pc, #424]	; (8004a34 <HAL_I2C_Init+0x274>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d802      	bhi.n	8004894 <HAL_I2C_Init+0xd4>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	3301      	adds	r3, #1
 8004892:	e009      	b.n	80048a8 <HAL_I2C_Init+0xe8>
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800489a:	fb02 f303 	mul.w	r3, r2, r3
 800489e:	4a69      	ldr	r2, [pc, #420]	; (8004a44 <HAL_I2C_Init+0x284>)
 80048a0:	fba2 2303 	umull	r2, r3, r2, r3
 80048a4:	099b      	lsrs	r3, r3, #6
 80048a6:	3301      	adds	r3, #1
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	430b      	orrs	r3, r1
 80048ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	495c      	ldr	r1, [pc, #368]	; (8004a34 <HAL_I2C_Init+0x274>)
 80048c4:	428b      	cmp	r3, r1
 80048c6:	d819      	bhi.n	80048fc <HAL_I2C_Init+0x13c>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1e59      	subs	r1, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048d6:	1c59      	adds	r1, r3, #1
 80048d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048dc:	400b      	ands	r3, r1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_I2C_Init+0x138>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1e59      	subs	r1, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80048f0:	3301      	adds	r3, #1
 80048f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f6:	e051      	b.n	800499c <HAL_I2C_Init+0x1dc>
 80048f8:	2304      	movs	r3, #4
 80048fa:	e04f      	b.n	800499c <HAL_I2C_Init+0x1dc>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d111      	bne.n	8004928 <HAL_I2C_Init+0x168>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1e58      	subs	r0, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6859      	ldr	r1, [r3, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	440b      	add	r3, r1
 8004912:	fbb0 f3f3 	udiv	r3, r0, r3
 8004916:	3301      	adds	r3, #1
 8004918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf0c      	ite	eq
 8004920:	2301      	moveq	r3, #1
 8004922:	2300      	movne	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	e012      	b.n	800494e <HAL_I2C_Init+0x18e>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	1e58      	subs	r0, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6859      	ldr	r1, [r3, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	0099      	lsls	r1, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	fbb0 f3f3 	udiv	r3, r0, r3
 800493e:	3301      	adds	r3, #1
 8004940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004944:	2b00      	cmp	r3, #0
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_I2C_Init+0x196>
 8004952:	2301      	movs	r3, #1
 8004954:	e022      	b.n	800499c <HAL_I2C_Init+0x1dc>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10e      	bne.n	800497c <HAL_I2C_Init+0x1bc>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1e58      	subs	r0, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6859      	ldr	r1, [r3, #4]
 8004966:	460b      	mov	r3, r1
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	440b      	add	r3, r1
 800496c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004970:	3301      	adds	r3, #1
 8004972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800497a:	e00f      	b.n	800499c <HAL_I2C_Init+0x1dc>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	1e58      	subs	r0, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6859      	ldr	r1, [r3, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	0099      	lsls	r1, r3, #2
 800498c:	440b      	add	r3, r1
 800498e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004992:	3301      	adds	r3, #1
 8004994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	6809      	ldr	r1, [r1, #0]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69da      	ldr	r2, [r3, #28]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6911      	ldr	r1, [r2, #16]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68d2      	ldr	r2, [r2, #12]
 80049d6:	4311      	orrs	r1, r2
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	430b      	orrs	r3, r1
 80049de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	000186a0 	.word	0x000186a0
 8004a38:	001e847f 	.word	0x001e847f
 8004a3c:	003d08ff 	.word	0x003d08ff
 8004a40:	431bde83 	.word	0x431bde83
 8004a44:	10624dd3 	.word	0x10624dd3

08004a48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	4608      	mov	r0, r1
 8004a52:	4611      	mov	r1, r2
 8004a54:	461a      	mov	r2, r3
 8004a56:	4603      	mov	r3, r0
 8004a58:	817b      	strh	r3, [r7, #10]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	813b      	strh	r3, [r7, #8]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a62:	f7fe fd0b 	bl	800347c <HAL_GetTick>
 8004a66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	f040 80d9 	bne.w	8004c28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	2319      	movs	r3, #25
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	496d      	ldr	r1, [pc, #436]	; (8004c34 <HAL_I2C_Mem_Write+0x1ec>)
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 fdef 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e0cc      	b.n	8004c2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_I2C_Mem_Write+0x56>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e0c5      	b.n	8004c2a <HAL_I2C_Mem_Write+0x1e2>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d007      	beq.n	8004ac4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0201 	orr.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ad2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2221      	movs	r2, #33	; 0x21
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2240      	movs	r2, #64	; 0x40
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a3a      	ldr	r2, [r7, #32]
 8004aee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004af4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4a4d      	ldr	r2, [pc, #308]	; (8004c38 <HAL_I2C_Mem_Write+0x1f0>)
 8004b04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b06:	88f8      	ldrh	r0, [r7, #6]
 8004b08:	893a      	ldrh	r2, [r7, #8]
 8004b0a:	8979      	ldrh	r1, [r7, #10]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	4603      	mov	r3, r0
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fc26 	bl	8005368 <I2C_RequestMemoryWrite>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d052      	beq.n	8004bc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e081      	b.n	8004c2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fe70 	bl	8005810 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00d      	beq.n	8004b52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d107      	bne.n	8004b4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e06b      	b.n	8004c2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_I2C_Mem_Write+0x180>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d017      	beq.n	8004bc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	781a      	ldrb	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1aa      	bne.n	8004b26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fe5c 	bl	8005892 <I2C_WaitOnBTFFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00d      	beq.n	8004bfc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d107      	bne.n	8004bf8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e016      	b.n	8004c2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	e000      	b.n	8004c2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c28:	2302      	movs	r3, #2
  }
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	00100002 	.word	0x00100002
 8004c38:	ffff0000 	.word	0xffff0000

08004c3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08c      	sub	sp, #48	; 0x30
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	4608      	mov	r0, r1
 8004c46:	4611      	mov	r1, r2
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	817b      	strh	r3, [r7, #10]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	813b      	strh	r3, [r7, #8]
 8004c52:	4613      	mov	r3, r2
 8004c54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c5a:	f7fe fc0f 	bl	800347c <HAL_GetTick>
 8004c5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	f040 8244 	bne.w	80050f6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	2319      	movs	r3, #25
 8004c74:	2201      	movs	r2, #1
 8004c76:	4982      	ldr	r1, [pc, #520]	; (8004e80 <HAL_I2C_Mem_Read+0x244>)
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fcf3 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
 8004c86:	e237      	b.n	80050f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_I2C_Mem_Read+0x5a>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e230      	b.n	80050f8 <HAL_I2C_Mem_Read+0x4bc>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d007      	beq.n	8004cbc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2222      	movs	r2, #34	; 0x22
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2240      	movs	r2, #64	; 0x40
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004cec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4a62      	ldr	r2, [pc, #392]	; (8004e84 <HAL_I2C_Mem_Read+0x248>)
 8004cfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cfe:	88f8      	ldrh	r0, [r7, #6]
 8004d00:	893a      	ldrh	r2, [r7, #8]
 8004d02:	8979      	ldrh	r1, [r7, #10]
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fbc0 	bl	8005494 <I2C_RequestMemoryRead>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e1ec      	b.n	80050f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d113      	bne.n	8004d4e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e1c0      	b.n	80050d0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d11e      	bne.n	8004d94 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d66:	b672      	cpsid	i
}
 8004d68:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61bb      	str	r3, [r7, #24]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	61bb      	str	r3, [r7, #24]
 8004d7e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d90:	b662      	cpsie	i
}
 8004d92:	e035      	b.n	8004e00 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d11e      	bne.n	8004dda <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004daa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004dac:	b672      	cpsid	i
}
 8004dae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004dd6:	b662      	cpsie	i
}
 8004dd8:	e012      	b.n	8004e00 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004de8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004e00:	e166      	b.n	80050d0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	f200 811f 	bhi.w	800504a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d123      	bne.n	8004e5c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 fd7b 	bl	8005914 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e167      	b.n	80050f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e5a:	e139      	b.n	80050d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d152      	bne.n	8004f0a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	4906      	ldr	r1, [pc, #24]	; (8004e88 <HAL_I2C_Mem_Read+0x24c>)
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 fbf8 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e13c      	b.n	80050f8 <HAL_I2C_Mem_Read+0x4bc>
 8004e7e:	bf00      	nop
 8004e80:	00100002 	.word	0x00100002
 8004e84:	ffff0000 	.word	0xffff0000
 8004e88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004e8c:	b672      	cpsid	i
}
 8004e8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ed2:	b662      	cpsie	i
}
 8004ed4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f08:	e0e2      	b.n	80050d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	2200      	movs	r2, #0
 8004f12:	497b      	ldr	r1, [pc, #492]	; (8005100 <HAL_I2C_Mem_Read+0x4c4>)
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 fba5 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e0e9      	b.n	80050f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f34:	b672      	cpsid	i
}
 8004f36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f6a:	4b66      	ldr	r3, [pc, #408]	; (8005104 <HAL_I2C_Mem_Read+0x4c8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	08db      	lsrs	r3, r3, #3
 8004f70:	4a65      	ldr	r2, [pc, #404]	; (8005108 <HAL_I2C_Mem_Read+0x4cc>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	0a1a      	lsrs	r2, r3, #8
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	00da      	lsls	r2, r3, #3
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d118      	bne.n	8004fc2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f043 0220 	orr.w	r2, r3, #32
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004fb2:	b662      	cpsie	i
}
 8004fb4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e09a      	b.n	80050f8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d1d9      	bne.n	8004f84 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005012:	b662      	cpsie	i
}
 8005014:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005048:	e042      	b.n	80050d0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800504a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fc60 	bl	8005914 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e04c      	b.n	80050f8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d118      	bne.n	80050d0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f47f ae94 	bne.w	8004e02 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e000      	b.n	80050f8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80050f6:	2302      	movs	r3, #2
  }
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3728      	adds	r7, #40	; 0x28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	00010004 	.word	0x00010004
 8005104:	2000008c 	.word	0x2000008c
 8005108:	14f8b589 	.word	0x14f8b589

0800510c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	; 0x28
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	460b      	mov	r3, r1
 800511a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800511c:	f7fe f9ae 	bl	800347c <HAL_GetTick>
 8005120:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005122:	2301      	movs	r3, #1
 8005124:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b20      	cmp	r3, #32
 8005130:	f040 8111 	bne.w	8005356 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	2319      	movs	r3, #25
 800513a:	2201      	movs	r2, #1
 800513c:	4988      	ldr	r1, [pc, #544]	; (8005360 <HAL_I2C_IsDeviceReady+0x254>)
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 fa90 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800514a:	2302      	movs	r3, #2
 800514c:	e104      	b.n	8005358 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005154:	2b01      	cmp	r3, #1
 8005156:	d101      	bne.n	800515c <HAL_I2C_IsDeviceReady+0x50>
 8005158:	2302      	movs	r3, #2
 800515a:	e0fd      	b.n	8005358 <HAL_I2C_IsDeviceReady+0x24c>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b01      	cmp	r3, #1
 8005170:	d007      	beq.n	8005182 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0201 	orr.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005190:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2224      	movs	r2, #36	; 0x24
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a70      	ldr	r2, [pc, #448]	; (8005364 <HAL_I2C_IsDeviceReady+0x258>)
 80051a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2200      	movs	r2, #0
 80051be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 fa4e 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00d      	beq.n	80051ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051dc:	d103      	bne.n	80051e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e0b6      	b.n	8005358 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ea:	897b      	ldrh	r3, [r7, #10]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80051fa:	f7fe f93f 	bl	800347c <HAL_GetTick>
 80051fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b02      	cmp	r3, #2
 800520c:	bf0c      	ite	eq
 800520e:	2301      	moveq	r3, #1
 8005210:	2300      	movne	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005224:	bf0c      	ite	eq
 8005226:	2301      	moveq	r3, #1
 8005228:	2300      	movne	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800522e:	e025      	b.n	800527c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005230:	f7fe f924 	bl	800347c <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d302      	bcc.n	8005246 <HAL_I2C_IsDeviceReady+0x13a>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d103      	bne.n	800524e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	22a0      	movs	r2, #160	; 0xa0
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b02      	cmp	r3, #2
 800525a:	bf0c      	ite	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	2300      	movne	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005272:	bf0c      	ite	eq
 8005274:	2301      	moveq	r3, #1
 8005276:	2300      	movne	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2ba0      	cmp	r3, #160	; 0xa0
 8005286:	d005      	beq.n	8005294 <HAL_I2C_IsDeviceReady+0x188>
 8005288:	7dfb      	ldrb	r3, [r7, #23]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <HAL_I2C_IsDeviceReady+0x188>
 800528e:	7dbb      	ldrb	r3, [r7, #22]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0cd      	beq.n	8005230 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d129      	bne.n	80052fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	2319      	movs	r3, #25
 80052d6:	2201      	movs	r2, #1
 80052d8:	4921      	ldr	r1, [pc, #132]	; (8005360 <HAL_I2C_IsDeviceReady+0x254>)
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f9c2 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e036      	b.n	8005358 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e02c      	b.n	8005358 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800530c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005316:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	2319      	movs	r3, #25
 800531e:	2201      	movs	r2, #1
 8005320:	490f      	ldr	r1, [pc, #60]	; (8005360 <HAL_I2C_IsDeviceReady+0x254>)
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f99e 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e012      	b.n	8005358 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	3301      	adds	r3, #1
 8005336:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	429a      	cmp	r2, r3
 800533e:	f4ff af32 	bcc.w	80051a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005356:	2302      	movs	r3, #2
  }
}
 8005358:	4618      	mov	r0, r3
 800535a:	3720      	adds	r7, #32
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	00100002 	.word	0x00100002
 8005364:	ffff0000 	.word	0xffff0000

08005368 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	4608      	mov	r0, r1
 8005372:	4611      	mov	r1, r2
 8005374:	461a      	mov	r2, r3
 8005376:	4603      	mov	r3, r0
 8005378:	817b      	strh	r3, [r7, #10]
 800537a:	460b      	mov	r3, r1
 800537c:	813b      	strh	r3, [r7, #8]
 800537e:	4613      	mov	r3, r2
 8005380:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005390:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	2200      	movs	r2, #0
 800539a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f960 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00d      	beq.n	80053c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b8:	d103      	bne.n	80053c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e05f      	b.n	8005486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053c6:	897b      	ldrh	r3, [r7, #10]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	461a      	mov	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	6a3a      	ldr	r2, [r7, #32]
 80053da:	492d      	ldr	r1, [pc, #180]	; (8005490 <I2C_RequestMemoryWrite+0x128>)
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f998 	bl	8005712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e04c      	b.n	8005486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005404:	6a39      	ldr	r1, [r7, #32]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fa02 	bl	8005810 <I2C_WaitOnTXEFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00d      	beq.n	800542e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	2b04      	cmp	r3, #4
 8005418:	d107      	bne.n	800542a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005428:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e02b      	b.n	8005486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800542e:	88fb      	ldrh	r3, [r7, #6]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d105      	bne.n	8005440 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005434:	893b      	ldrh	r3, [r7, #8]
 8005436:	b2da      	uxtb	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	611a      	str	r2, [r3, #16]
 800543e:	e021      	b.n	8005484 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005440:	893b      	ldrh	r3, [r7, #8]
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	b29b      	uxth	r3, r3
 8005446:	b2da      	uxtb	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800544e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005450:	6a39      	ldr	r1, [r7, #32]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f9dc 	bl	8005810 <I2C_WaitOnTXEFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00d      	beq.n	800547a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	2b04      	cmp	r3, #4
 8005464:	d107      	bne.n	8005476 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005474:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e005      	b.n	8005486 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800547a:	893b      	ldrh	r3, [r7, #8]
 800547c:	b2da      	uxtb	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	00010002 	.word	0x00010002

08005494 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	4608      	mov	r0, r1
 800549e:	4611      	mov	r1, r2
 80054a0:	461a      	mov	r2, r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	817b      	strh	r3, [r7, #10]
 80054a6:	460b      	mov	r3, r1
 80054a8:	813b      	strh	r3, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f8c2 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00d      	beq.n	8005502 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f4:	d103      	bne.n	80054fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e0aa      	b.n	8005658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005502:	897b      	ldrh	r3, [r7, #10]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	461a      	mov	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005510:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	6a3a      	ldr	r2, [r7, #32]
 8005516:	4952      	ldr	r1, [pc, #328]	; (8005660 <I2C_RequestMemoryRead+0x1cc>)
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f8fa 	bl	8005712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e097      	b.n	8005658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800553e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005540:	6a39      	ldr	r1, [r7, #32]
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f964 	bl	8005810 <I2C_WaitOnTXEFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00d      	beq.n	800556a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	2b04      	cmp	r3, #4
 8005554:	d107      	bne.n	8005566 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005564:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e076      	b.n	8005658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d105      	bne.n	800557c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005570:	893b      	ldrh	r3, [r7, #8]
 8005572:	b2da      	uxtb	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	611a      	str	r2, [r3, #16]
 800557a:	e021      	b.n	80055c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800557c:	893b      	ldrh	r3, [r7, #8]
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	b29b      	uxth	r3, r3
 8005582:	b2da      	uxtb	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800558a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558c:	6a39      	ldr	r1, [r7, #32]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f93e 	bl	8005810 <I2C_WaitOnTXEFlagUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00d      	beq.n	80055b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d107      	bne.n	80055b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e050      	b.n	8005658 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055b6:	893b      	ldrh	r3, [r7, #8]
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c2:	6a39      	ldr	r1, [r7, #32]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f923 	bl	8005810 <I2C_WaitOnTXEFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00d      	beq.n	80055ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d107      	bne.n	80055e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e035      	b.n	8005658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	2200      	movs	r2, #0
 8005604:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f82b 	bl	8005664 <I2C_WaitOnFlagUntilTimeout>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00d      	beq.n	8005630 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005622:	d103      	bne.n	800562c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800562a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e013      	b.n	8005658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005630:	897b      	ldrh	r3, [r7, #10]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	b2da      	uxtb	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	6a3a      	ldr	r2, [r7, #32]
 8005644:	4906      	ldr	r1, [pc, #24]	; (8005660 <I2C_RequestMemoryRead+0x1cc>)
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f863 	bl	8005712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	00010002 	.word	0x00010002

08005664 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005674:	e025      	b.n	80056c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d021      	beq.n	80056c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567e:	f7fd fefd 	bl	800347c <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d302      	bcc.n	8005694 <I2C_WaitOnFlagUntilTimeout+0x30>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d116      	bne.n	80056c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f043 0220 	orr.w	r2, r3, #32
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e023      	b.n	800570a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	0c1b      	lsrs	r3, r3, #16
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d10d      	bne.n	80056e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	43da      	mvns	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4013      	ands	r3, r2
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	bf0c      	ite	eq
 80056de:	2301      	moveq	r3, #1
 80056e0:	2300      	movne	r3, #0
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	e00c      	b.n	8005702 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	43da      	mvns	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4013      	ands	r3, r2
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bf0c      	ite	eq
 80056fa:	2301      	moveq	r3, #1
 80056fc:	2300      	movne	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	429a      	cmp	r2, r3
 8005706:	d0b6      	beq.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	607a      	str	r2, [r7, #4]
 800571e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005720:	e051      	b.n	80057c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800572c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005730:	d123      	bne.n	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005740:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800574a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f043 0204 	orr.w	r2, r3, #4
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e046      	b.n	8005808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005780:	d021      	beq.n	80057c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005782:	f7fd fe7b 	bl	800347c <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	429a      	cmp	r2, r3
 8005790:	d302      	bcc.n	8005798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d116      	bne.n	80057c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f043 0220 	orr.w	r2, r3, #32
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e020      	b.n	8005808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	0c1b      	lsrs	r3, r3, #16
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d10c      	bne.n	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	43da      	mvns	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4013      	ands	r3, r2
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bf14      	ite	ne
 80057e2:	2301      	movne	r3, #1
 80057e4:	2300      	moveq	r3, #0
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	e00b      	b.n	8005802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	43da      	mvns	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4013      	ands	r3, r2
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bf14      	ite	ne
 80057fc:	2301      	movne	r3, #1
 80057fe:	2300      	moveq	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d18d      	bne.n	8005722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800581c:	e02d      	b.n	800587a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f8ce 	bl	80059c0 <I2C_IsAcknowledgeFailed>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e02d      	b.n	800588a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d021      	beq.n	800587a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005836:	f7fd fe21 	bl	800347c <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d116      	bne.n	800587a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f043 0220 	orr.w	r2, r3, #32
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e007      	b.n	800588a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005884:	2b80      	cmp	r3, #128	; 0x80
 8005886:	d1ca      	bne.n	800581e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800589e:	e02d      	b.n	80058fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 f88d 	bl	80059c0 <I2C_IsAcknowledgeFailed>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e02d      	b.n	800590c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b6:	d021      	beq.n	80058fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b8:	f7fd fde0 	bl	800347c <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d302      	bcc.n	80058ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d116      	bne.n	80058fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	f043 0220 	orr.w	r2, r3, #32
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e007      	b.n	800590c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b04      	cmp	r3, #4
 8005908:	d1ca      	bne.n	80058a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005920:	e042      	b.n	80059a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b10      	cmp	r3, #16
 800592e:	d119      	bne.n	8005964 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0210 	mvn.w	r2, #16
 8005938:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e029      	b.n	80059b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005964:	f7fd fd8a 	bl	800347c <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	429a      	cmp	r2, r3
 8005972:	d302      	bcc.n	800597a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d116      	bne.n	80059a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	f043 0220 	orr.w	r2, r3, #32
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e007      	b.n	80059b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	d1b5      	bne.n	8005922 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d6:	d11b      	bne.n	8005a10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	f043 0204 	orr.w	r2, r3, #4
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005a20:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
}
 8005a26:	bf00      	nop
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	420e0020 	.word	0x420e0020

08005a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e272      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 8087 	beq.w	8005b62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a54:	4b92      	ldr	r3, [pc, #584]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d00c      	beq.n	8005a7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a60:	4b8f      	ldr	r3, [pc, #572]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f003 030c 	and.w	r3, r3, #12
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d112      	bne.n	8005a92 <HAL_RCC_OscConfig+0x5e>
 8005a6c:	4b8c      	ldr	r3, [pc, #560]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a78:	d10b      	bne.n	8005a92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a7a:	4b89      	ldr	r3, [pc, #548]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d06c      	beq.n	8005b60 <HAL_RCC_OscConfig+0x12c>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d168      	bne.n	8005b60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e24c      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a9a:	d106      	bne.n	8005aaa <HAL_RCC_OscConfig+0x76>
 8005a9c:	4b80      	ldr	r3, [pc, #512]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a7f      	ldr	r2, [pc, #508]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	e02e      	b.n	8005b08 <HAL_RCC_OscConfig+0xd4>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10c      	bne.n	8005acc <HAL_RCC_OscConfig+0x98>
 8005ab2:	4b7b      	ldr	r3, [pc, #492]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a7a      	ldr	r2, [pc, #488]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	4b78      	ldr	r3, [pc, #480]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a77      	ldr	r2, [pc, #476]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	e01d      	b.n	8005b08 <HAL_RCC_OscConfig+0xd4>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ad4:	d10c      	bne.n	8005af0 <HAL_RCC_OscConfig+0xbc>
 8005ad6:	4b72      	ldr	r3, [pc, #456]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a71      	ldr	r2, [pc, #452]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	4b6f      	ldr	r3, [pc, #444]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a6e      	ldr	r2, [pc, #440]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e00b      	b.n	8005b08 <HAL_RCC_OscConfig+0xd4>
 8005af0:	4b6b      	ldr	r3, [pc, #428]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a6a      	ldr	r2, [pc, #424]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	4b68      	ldr	r3, [pc, #416]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a67      	ldr	r2, [pc, #412]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d013      	beq.n	8005b38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b10:	f7fd fcb4 	bl	800347c <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b18:	f7fd fcb0 	bl	800347c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b64      	cmp	r3, #100	; 0x64
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e200      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b2a:	4b5d      	ldr	r3, [pc, #372]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f0      	beq.n	8005b18 <HAL_RCC_OscConfig+0xe4>
 8005b36:	e014      	b.n	8005b62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b38:	f7fd fca0 	bl	800347c <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b40:	f7fd fc9c 	bl	800347c <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b64      	cmp	r3, #100	; 0x64
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e1ec      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b52:	4b53      	ldr	r3, [pc, #332]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f0      	bne.n	8005b40 <HAL_RCC_OscConfig+0x10c>
 8005b5e:	e000      	b.n	8005b62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d063      	beq.n	8005c36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b6e:	4b4c      	ldr	r3, [pc, #304]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f003 030c 	and.w	r3, r3, #12
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00b      	beq.n	8005b92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b7a:	4b49      	ldr	r3, [pc, #292]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f003 030c 	and.w	r3, r3, #12
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	d11c      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x18c>
 8005b86:	4b46      	ldr	r3, [pc, #280]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d116      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b92:	4b43      	ldr	r3, [pc, #268]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d005      	beq.n	8005baa <HAL_RCC_OscConfig+0x176>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d001      	beq.n	8005baa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e1c0      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005baa:	4b3d      	ldr	r3, [pc, #244]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	4939      	ldr	r1, [pc, #228]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bbe:	e03a      	b.n	8005c36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d020      	beq.n	8005c0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bc8:	4b36      	ldr	r3, [pc, #216]	; (8005ca4 <HAL_RCC_OscConfig+0x270>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bce:	f7fd fc55 	bl	800347c <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bd6:	f7fd fc51 	bl	800347c <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e1a1      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be8:	4b2d      	ldr	r3, [pc, #180]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f0      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf4:	4b2a      	ldr	r3, [pc, #168]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	4927      	ldr	r1, [pc, #156]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	600b      	str	r3, [r1, #0]
 8005c08:	e015      	b.n	8005c36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c0a:	4b26      	ldr	r3, [pc, #152]	; (8005ca4 <HAL_RCC_OscConfig+0x270>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c10:	f7fd fc34 	bl	800347c <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c18:	f7fd fc30 	bl	800347c <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e180      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f0      	bne.n	8005c18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d03a      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d019      	beq.n	8005c7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c4a:	4b17      	ldr	r3, [pc, #92]	; (8005ca8 <HAL_RCC_OscConfig+0x274>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c50:	f7fd fc14 	bl	800347c <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c58:	f7fd fc10 	bl	800347c <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e160      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <HAL_RCC_OscConfig+0x26c>)
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c76:	2001      	movs	r0, #1
 8005c78:	f000 fad8 	bl	800622c <RCC_Delay>
 8005c7c:	e01c      	b.n	8005cb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <HAL_RCC_OscConfig+0x274>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c84:	f7fd fbfa 	bl	800347c <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c8a:	e00f      	b.n	8005cac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c8c:	f7fd fbf6 	bl	800347c <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d908      	bls.n	8005cac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e146      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
 8005c9e:	bf00      	nop
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	42420000 	.word	0x42420000
 8005ca8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cac:	4b92      	ldr	r3, [pc, #584]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e9      	bne.n	8005c8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 80a6 	beq.w	8005e12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cca:	4b8b      	ldr	r3, [pc, #556]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10d      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cd6:	4b88      	ldr	r3, [pc, #544]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	4a87      	ldr	r2, [pc, #540]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	61d3      	str	r3, [r2, #28]
 8005ce2:	4b85      	ldr	r3, [pc, #532]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cea:	60bb      	str	r3, [r7, #8]
 8005cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf2:	4b82      	ldr	r3, [pc, #520]	; (8005efc <HAL_RCC_OscConfig+0x4c8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d118      	bne.n	8005d30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cfe:	4b7f      	ldr	r3, [pc, #508]	; (8005efc <HAL_RCC_OscConfig+0x4c8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a7e      	ldr	r2, [pc, #504]	; (8005efc <HAL_RCC_OscConfig+0x4c8>)
 8005d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d0a:	f7fd fbb7 	bl	800347c <HAL_GetTick>
 8005d0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d10:	e008      	b.n	8005d24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d12:	f7fd fbb3 	bl	800347c <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b64      	cmp	r3, #100	; 0x64
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e103      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d24:	4b75      	ldr	r3, [pc, #468]	; (8005efc <HAL_RCC_OscConfig+0x4c8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0f0      	beq.n	8005d12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d106      	bne.n	8005d46 <HAL_RCC_OscConfig+0x312>
 8005d38:	4b6f      	ldr	r3, [pc, #444]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	4a6e      	ldr	r2, [pc, #440]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	6213      	str	r3, [r2, #32]
 8005d44:	e02d      	b.n	8005da2 <HAL_RCC_OscConfig+0x36e>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10c      	bne.n	8005d68 <HAL_RCC_OscConfig+0x334>
 8005d4e:	4b6a      	ldr	r3, [pc, #424]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	4a69      	ldr	r2, [pc, #420]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005d54:	f023 0301 	bic.w	r3, r3, #1
 8005d58:	6213      	str	r3, [r2, #32]
 8005d5a:	4b67      	ldr	r3, [pc, #412]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	4a66      	ldr	r2, [pc, #408]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005d60:	f023 0304 	bic.w	r3, r3, #4
 8005d64:	6213      	str	r3, [r2, #32]
 8005d66:	e01c      	b.n	8005da2 <HAL_RCC_OscConfig+0x36e>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	2b05      	cmp	r3, #5
 8005d6e:	d10c      	bne.n	8005d8a <HAL_RCC_OscConfig+0x356>
 8005d70:	4b61      	ldr	r3, [pc, #388]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	4a60      	ldr	r2, [pc, #384]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005d76:	f043 0304 	orr.w	r3, r3, #4
 8005d7a:	6213      	str	r3, [r2, #32]
 8005d7c:	4b5e      	ldr	r3, [pc, #376]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	4a5d      	ldr	r2, [pc, #372]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	6213      	str	r3, [r2, #32]
 8005d88:	e00b      	b.n	8005da2 <HAL_RCC_OscConfig+0x36e>
 8005d8a:	4b5b      	ldr	r3, [pc, #364]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	4a5a      	ldr	r2, [pc, #360]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005d90:	f023 0301 	bic.w	r3, r3, #1
 8005d94:	6213      	str	r3, [r2, #32]
 8005d96:	4b58      	ldr	r3, [pc, #352]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	4a57      	ldr	r2, [pc, #348]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005d9c:	f023 0304 	bic.w	r3, r3, #4
 8005da0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d015      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005daa:	f7fd fb67 	bl	800347c <HAL_GetTick>
 8005dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db0:	e00a      	b.n	8005dc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db2:	f7fd fb63 	bl	800347c <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e0b1      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc8:	4b4b      	ldr	r3, [pc, #300]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0ee      	beq.n	8005db2 <HAL_RCC_OscConfig+0x37e>
 8005dd4:	e014      	b.n	8005e00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dd6:	f7fd fb51 	bl	800347c <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ddc:	e00a      	b.n	8005df4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dde:	f7fd fb4d 	bl	800347c <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e09b      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005df4:	4b40      	ldr	r3, [pc, #256]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1ee      	bne.n	8005dde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d105      	bne.n	8005e12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e06:	4b3c      	ldr	r3, [pc, #240]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	4a3b      	ldr	r2, [pc, #236]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 8087 	beq.w	8005f2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e1c:	4b36      	ldr	r3, [pc, #216]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f003 030c 	and.w	r3, r3, #12
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d061      	beq.n	8005eec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d146      	bne.n	8005ebe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e30:	4b33      	ldr	r3, [pc, #204]	; (8005f00 <HAL_RCC_OscConfig+0x4cc>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e36:	f7fd fb21 	bl	800347c <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e3c:	e008      	b.n	8005e50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e3e:	f7fd fb1d 	bl	800347c <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e06d      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e50:	4b29      	ldr	r3, [pc, #164]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1f0      	bne.n	8005e3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e64:	d108      	bne.n	8005e78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e66:	4b24      	ldr	r3, [pc, #144]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	4921      	ldr	r1, [pc, #132]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e78:	4b1f      	ldr	r3, [pc, #124]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a19      	ldr	r1, [r3, #32]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	491b      	ldr	r1, [pc, #108]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e90:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <HAL_RCC_OscConfig+0x4cc>)
 8005e92:	2201      	movs	r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e96:	f7fd faf1 	bl	800347c <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e9e:	f7fd faed 	bl	800347c <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e03d      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005eb0:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0f0      	beq.n	8005e9e <HAL_RCC_OscConfig+0x46a>
 8005ebc:	e035      	b.n	8005f2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ebe:	4b10      	ldr	r3, [pc, #64]	; (8005f00 <HAL_RCC_OscConfig+0x4cc>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec4:	f7fd fada 	bl	800347c <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ecc:	f7fd fad6 	bl	800347c <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e026      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <HAL_RCC_OscConfig+0x4c4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f0      	bne.n	8005ecc <HAL_RCC_OscConfig+0x498>
 8005eea:	e01e      	b.n	8005f2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d107      	bne.n	8005f04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e019      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	40007000 	.word	0x40007000
 8005f00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f04:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <HAL_RCC_OscConfig+0x500>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d106      	bne.n	8005f26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d001      	beq.n	8005f2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40021000 	.word	0x40021000

08005f38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0d0      	b.n	80060ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f4c:	4b6a      	ldr	r3, [pc, #424]	; (80060f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d910      	bls.n	8005f7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5a:	4b67      	ldr	r3, [pc, #412]	; (80060f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f023 0207 	bic.w	r2, r3, #7
 8005f62:	4965      	ldr	r1, [pc, #404]	; (80060f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6a:	4b63      	ldr	r3, [pc, #396]	; (80060f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d001      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e0b8      	b.n	80060ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d020      	beq.n	8005fca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f94:	4b59      	ldr	r3, [pc, #356]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4a58      	ldr	r2, [pc, #352]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005f9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0308 	and.w	r3, r3, #8
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fac:	4b53      	ldr	r3, [pc, #332]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	4a52      	ldr	r2, [pc, #328]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005fb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005fb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fb8:	4b50      	ldr	r3, [pc, #320]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	494d      	ldr	r1, [pc, #308]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d040      	beq.n	8006058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d107      	bne.n	8005fee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fde:	4b47      	ldr	r3, [pc, #284]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d115      	bne.n	8006016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e07f      	b.n	80060ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d107      	bne.n	8006006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff6:	4b41      	ldr	r3, [pc, #260]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e073      	b.n	80060ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006006:	4b3d      	ldr	r3, [pc, #244]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e06b      	b.n	80060ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006016:	4b39      	ldr	r3, [pc, #228]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f023 0203 	bic.w	r2, r3, #3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	4936      	ldr	r1, [pc, #216]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8006024:	4313      	orrs	r3, r2
 8006026:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006028:	f7fd fa28 	bl	800347c <HAL_GetTick>
 800602c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800602e:	e00a      	b.n	8006046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006030:	f7fd fa24 	bl	800347c <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	f241 3288 	movw	r2, #5000	; 0x1388
 800603e:	4293      	cmp	r3, r2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e053      	b.n	80060ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006046:	4b2d      	ldr	r3, [pc, #180]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f003 020c 	and.w	r2, r3, #12
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	429a      	cmp	r2, r3
 8006056:	d1eb      	bne.n	8006030 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006058:	4b27      	ldr	r3, [pc, #156]	; (80060f8 <HAL_RCC_ClockConfig+0x1c0>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d210      	bcs.n	8006088 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006066:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f023 0207 	bic.w	r2, r3, #7
 800606e:	4922      	ldr	r1, [pc, #136]	; (80060f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	4313      	orrs	r3, r2
 8006074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006076:	4b20      	ldr	r3, [pc, #128]	; (80060f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	429a      	cmp	r2, r3
 8006082:	d001      	beq.n	8006088 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e032      	b.n	80060ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d008      	beq.n	80060a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006094:	4b19      	ldr	r3, [pc, #100]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4916      	ldr	r1, [pc, #88]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d009      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060b2:	4b12      	ldr	r3, [pc, #72]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	490e      	ldr	r1, [pc, #56]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060c6:	f000 f821 	bl	800610c <HAL_RCC_GetSysClockFreq>
 80060ca:	4602      	mov	r2, r0
 80060cc:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	091b      	lsrs	r3, r3, #4
 80060d2:	f003 030f 	and.w	r3, r3, #15
 80060d6:	490a      	ldr	r1, [pc, #40]	; (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 80060d8:	5ccb      	ldrb	r3, [r1, r3]
 80060da:	fa22 f303 	lsr.w	r3, r2, r3
 80060de:	4a09      	ldr	r2, [pc, #36]	; (8006104 <HAL_RCC_ClockConfig+0x1cc>)
 80060e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060e2:	4b09      	ldr	r3, [pc, #36]	; (8006108 <HAL_RCC_ClockConfig+0x1d0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fd f986 	bl	80033f8 <HAL_InitTick>

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40022000 	.word	0x40022000
 80060fc:	40021000 	.word	0x40021000
 8006100:	08009560 	.word	0x08009560
 8006104:	2000008c 	.word	0x2000008c
 8006108:	20000090 	.word	0x20000090

0800610c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800610c:	b490      	push	{r4, r7}
 800610e:	b08a      	sub	sp, #40	; 0x28
 8006110:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006112:	4b29      	ldr	r3, [pc, #164]	; (80061b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8006114:	1d3c      	adds	r4, r7, #4
 8006116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800611c:	f240 2301 	movw	r3, #513	; 0x201
 8006120:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	61fb      	str	r3, [r7, #28]
 8006126:	2300      	movs	r3, #0
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006136:	4b21      	ldr	r3, [pc, #132]	; (80061bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f003 030c 	and.w	r3, r3, #12
 8006142:	2b04      	cmp	r3, #4
 8006144:	d002      	beq.n	800614c <HAL_RCC_GetSysClockFreq+0x40>
 8006146:	2b08      	cmp	r3, #8
 8006148:	d003      	beq.n	8006152 <HAL_RCC_GetSysClockFreq+0x46>
 800614a:	e02b      	b.n	80061a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800614c:	4b1c      	ldr	r3, [pc, #112]	; (80061c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800614e:	623b      	str	r3, [r7, #32]
      break;
 8006150:	e02b      	b.n	80061aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	0c9b      	lsrs	r3, r3, #18
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	3328      	adds	r3, #40	; 0x28
 800615c:	443b      	add	r3, r7
 800615e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006162:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d012      	beq.n	8006194 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800616e:	4b13      	ldr	r3, [pc, #76]	; (80061bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	0c5b      	lsrs	r3, r3, #17
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	3328      	adds	r3, #40	; 0x28
 800617a:	443b      	add	r3, r7
 800617c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006180:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	4a0e      	ldr	r2, [pc, #56]	; (80061c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006186:	fb03 f202 	mul.w	r2, r3, r2
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
 8006192:	e004      	b.n	800619e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	4a0b      	ldr	r2, [pc, #44]	; (80061c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006198:	fb02 f303 	mul.w	r3, r2, r3
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	623b      	str	r3, [r7, #32]
      break;
 80061a2:	e002      	b.n	80061aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061a4:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80061a6:	623b      	str	r3, [r7, #32]
      break;
 80061a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061aa:	6a3b      	ldr	r3, [r7, #32]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3728      	adds	r7, #40	; 0x28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc90      	pop	{r4, r7}
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	08009540 	.word	0x08009540
 80061bc:	40021000 	.word	0x40021000
 80061c0:	007a1200 	.word	0x007a1200
 80061c4:	003d0900 	.word	0x003d0900

080061c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061cc:	4b02      	ldr	r3, [pc, #8]	; (80061d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80061ce:	681b      	ldr	r3, [r3, #0]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr
 80061d8:	2000008c 	.word	0x2000008c

080061dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061e0:	f7ff fff2 	bl	80061c8 <HAL_RCC_GetHCLKFreq>
 80061e4:	4602      	mov	r2, r0
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	0a1b      	lsrs	r3, r3, #8
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	4903      	ldr	r1, [pc, #12]	; (8006200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061f2:	5ccb      	ldrb	r3, [r1, r3]
 80061f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40021000 	.word	0x40021000
 8006200:	08009570 	.word	0x08009570

08006204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006208:	f7ff ffde 	bl	80061c8 <HAL_RCC_GetHCLKFreq>
 800620c:	4602      	mov	r2, r0
 800620e:	4b05      	ldr	r3, [pc, #20]	; (8006224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	0adb      	lsrs	r3, r3, #11
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	4903      	ldr	r1, [pc, #12]	; (8006228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800621a:	5ccb      	ldrb	r3, [r1, r3]
 800621c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006220:	4618      	mov	r0, r3
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40021000 	.word	0x40021000
 8006228:	08009570 	.word	0x08009570

0800622c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006234:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <RCC_Delay+0x34>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a0a      	ldr	r2, [pc, #40]	; (8006264 <RCC_Delay+0x38>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	0a5b      	lsrs	r3, r3, #9
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	fb02 f303 	mul.w	r3, r2, r3
 8006246:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006248:	bf00      	nop
  }
  while (Delay --);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	1e5a      	subs	r2, r3, #1
 800624e:	60fa      	str	r2, [r7, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f9      	bne.n	8006248 <RCC_Delay+0x1c>
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr
 8006260:	2000008c 	.word	0x2000008c
 8006264:	10624dd3 	.word	0x10624dd3

08006268 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	613b      	str	r3, [r7, #16]
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d07d      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006284:	2300      	movs	r3, #0
 8006286:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006288:	4b4f      	ldr	r3, [pc, #316]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10d      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006294:	4b4c      	ldr	r3, [pc, #304]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	4a4b      	ldr	r2, [pc, #300]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800629a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629e:	61d3      	str	r3, [r2, #28]
 80062a0:	4b49      	ldr	r3, [pc, #292]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a8:	60bb      	str	r3, [r7, #8]
 80062aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ac:	2301      	movs	r3, #1
 80062ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b0:	4b46      	ldr	r3, [pc, #280]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d118      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062bc:	4b43      	ldr	r3, [pc, #268]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a42      	ldr	r2, [pc, #264]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062c8:	f7fd f8d8 	bl	800347c <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ce:	e008      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d0:	f7fd f8d4 	bl	800347c <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b64      	cmp	r3, #100	; 0x64
 80062dc:	d901      	bls.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e06d      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e2:	4b3a      	ldr	r3, [pc, #232]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0f0      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062ee:	4b36      	ldr	r3, [pc, #216]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d02e      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	429a      	cmp	r2, r3
 800630a:	d027      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800630c:	4b2e      	ldr	r3, [pc, #184]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006314:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006316:	4b2e      	ldr	r3, [pc, #184]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006318:	2201      	movs	r2, #1
 800631a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800631c:	4b2c      	ldr	r3, [pc, #176]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006322:	4a29      	ldr	r2, [pc, #164]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d014      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006332:	f7fd f8a3 	bl	800347c <HAL_GetTick>
 8006336:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006338:	e00a      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800633a:	f7fd f89f 	bl	800347c <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	f241 3288 	movw	r2, #5000	; 0x1388
 8006348:	4293      	cmp	r3, r2
 800634a:	d901      	bls.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e036      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006350:	4b1d      	ldr	r3, [pc, #116]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0ee      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800635c:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	4917      	ldr	r1, [pc, #92]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800636a:	4313      	orrs	r3, r2
 800636c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800636e:	7dfb      	ldrb	r3, [r7, #23]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d105      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006374:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800637a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800637e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d008      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800638c:	4b0e      	ldr	r3, [pc, #56]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	490b      	ldr	r1, [pc, #44]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800639a:	4313      	orrs	r3, r2
 800639c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d008      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	4904      	ldr	r1, [pc, #16]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40021000 	.word	0x40021000
 80063cc:	40007000 	.word	0x40007000
 80063d0:	42420440 	.word	0x42420440

080063d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80063d4:	b590      	push	{r4, r7, lr}
 80063d6:	b08d      	sub	sp, #52	; 0x34
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80063dc:	4b58      	ldr	r3, [pc, #352]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80063de:	f107 040c 	add.w	r4, r7, #12
 80063e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80063e8:	f240 2301 	movw	r3, #513	; 0x201
 80063ec:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
 80063f2:	2300      	movs	r3, #0
 80063f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f6:	2300      	movs	r3, #0
 80063f8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	61fb      	str	r3, [r7, #28]
 80063fe:	2300      	movs	r3, #0
 8006400:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b10      	cmp	r3, #16
 8006406:	d00a      	beq.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b10      	cmp	r3, #16
 800640c:	f200 808e 	bhi.w	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d049      	beq.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b02      	cmp	r3, #2
 800641a:	d079      	beq.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800641c:	e086      	b.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800641e:	4b49      	ldr	r3, [pc, #292]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006424:	4b47      	ldr	r3, [pc, #284]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d07f      	beq.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	0c9b      	lsrs	r3, r3, #18
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	3330      	adds	r3, #48	; 0x30
 800643a:	443b      	add	r3, r7
 800643c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006440:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d017      	beq.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800644c:	4b3d      	ldr	r3, [pc, #244]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	0c5b      	lsrs	r3, r3, #17
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	3330      	adds	r3, #48	; 0x30
 8006458:	443b      	add	r3, r7
 800645a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00d      	beq.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800646a:	4a37      	ldr	r2, [pc, #220]	; (8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	fb02 f303 	mul.w	r3, r2, r3
 8006478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800647a:	e004      	b.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	4a33      	ldr	r2, [pc, #204]	; (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006480:	fb02 f303 	mul.w	r3, r2, r3
 8006484:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006486:	4b2f      	ldr	r3, [pc, #188]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006492:	d102      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006498:	e04a      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	4a2c      	ldr	r2, [pc, #176]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80064a0:	fba2 2303 	umull	r2, r3, r2, r3
 80064a4:	085b      	lsrs	r3, r3, #1
 80064a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80064a8:	e042      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80064aa:	4b26      	ldr	r3, [pc, #152]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ba:	d108      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80064c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80064cc:	e01f      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d8:	d109      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80064da:	4b1a      	ldr	r3, [pc, #104]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80064e6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ec:	e00f      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f8:	d11c      	bne.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80064fa:	4b12      	ldr	r3, [pc, #72]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d016      	beq.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8006506:	f24f 4324 	movw	r3, #62500	; 0xf424
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800650c:	e012      	b.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800650e:	e011      	b.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006510:	f7ff fe78 	bl	8006204 <HAL_RCC_GetPCLK2Freq>
 8006514:	4602      	mov	r2, r0
 8006516:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	0b9b      	lsrs	r3, r3, #14
 800651c:	f003 0303 	and.w	r3, r3, #3
 8006520:	3301      	adds	r3, #1
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	fbb2 f3f3 	udiv	r3, r2, r3
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800652a:	e004      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800652c:	bf00      	nop
 800652e:	e002      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006530:	bf00      	nop
 8006532:	e000      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006534:	bf00      	nop
    }
  }
  return (frequency);
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006538:	4618      	mov	r0, r3
 800653a:	3734      	adds	r7, #52	; 0x34
 800653c:	46bd      	mov	sp, r7
 800653e:	bd90      	pop	{r4, r7, pc}
 8006540:	08009550 	.word	0x08009550
 8006544:	40021000 	.word	0x40021000
 8006548:	007a1200 	.word	0x007a1200
 800654c:	003d0900 	.word	0x003d0900
 8006550:	aaaaaaab 	.word	0xaaaaaaab

08006554 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e084      	b.n	8006674 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	7c5b      	ldrb	r3, [r3, #17]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d105      	bne.n	8006580 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fc fd66 	bl	800304c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f87a 	bl	8006680 <HAL_RTC_WaitForSynchro>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d004      	beq.n	800659c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2204      	movs	r2, #4
 8006596:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e06b      	b.n	8006674 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f89c 	bl	80066da <RTC_EnterInitMode>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2204      	movs	r2, #4
 80065ac:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e060      	b.n	8006674 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0207 	bic.w	r2, r2, #7
 80065c0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d005      	beq.n	80065d6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80065ca:	4b2c      	ldr	r3, [pc, #176]	; (800667c <HAL_RTC_Init+0x128>)
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	4a2b      	ldr	r2, [pc, #172]	; (800667c <HAL_RTC_Init+0x128>)
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80065d6:	4b29      	ldr	r3, [pc, #164]	; (800667c <HAL_RTC_Init+0x128>)
 80065d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065da:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	4926      	ldr	r1, [pc, #152]	; (800667c <HAL_RTC_Init+0x128>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d003      	beq.n	80065fa <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	e00e      	b.n	8006618 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80065fa:	2001      	movs	r0, #1
 80065fc:	f7ff feea 	bl	80063d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006600:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d104      	bne.n	8006612 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2204      	movs	r2, #4
 800660c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e030      	b.n	8006674 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3b01      	subs	r3, #1
 8006616:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f023 010f 	bic.w	r1, r3, #15
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	0c1a      	lsrs	r2, r3, #16
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	0c1b      	lsrs	r3, r3, #16
 8006636:	041b      	lsls	r3, r3, #16
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	b291      	uxth	r1, r2
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6812      	ldr	r2, [r2, #0]
 8006640:	430b      	orrs	r3, r1
 8006642:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f870 	bl	800672a <RTC_ExitInitMode>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d004      	beq.n	800665a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2204      	movs	r2, #4
 8006654:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e00c      	b.n	8006674 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006672:	2300      	movs	r3, #0
  }
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	40006c00 	.word	0x40006c00

08006680 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e01d      	b.n	80066d2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0208 	bic.w	r2, r2, #8
 80066a4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80066a6:	f7fc fee9 	bl	800347c <HAL_GetTick>
 80066aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80066ac:	e009      	b.n	80066c2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80066ae:	f7fc fee5 	bl	800347c <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066bc:	d901      	bls.n	80066c2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e007      	b.n	80066d2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0ee      	beq.n	80066ae <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80066e6:	f7fc fec9 	bl	800347c <HAL_GetTick>
 80066ea:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80066ec:	e009      	b.n	8006702 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80066ee:	f7fc fec5 	bl	800347c <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066fc:	d901      	bls.n	8006702 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e00f      	b.n	8006722 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f003 0320 	and.w	r3, r3, #32
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0ee      	beq.n	80066ee <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0210 	orr.w	r2, r2, #16
 800671e:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0210 	bic.w	r2, r2, #16
 8006744:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006746:	f7fc fe99 	bl	800347c <HAL_GetTick>
 800674a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800674c:	e009      	b.n	8006762 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800674e:	f7fc fe95 	bl	800347c <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800675c:	d901      	bls.n	8006762 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e007      	b.n	8006772 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0ee      	beq.n	800674e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e041      	b.n	8006810 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7fc fc77 	bl	8003094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2202      	movs	r2, #2
 80067aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4619      	mov	r1, r3
 80067b8:	4610      	mov	r0, r2
 80067ba:	f000 fc93 	bl	80070e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	d001      	beq.n	8006830 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e032      	b.n	8006896 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a18      	ldr	r2, [pc, #96]	; (80068a0 <HAL_TIM_Base_Start+0x88>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00e      	beq.n	8006860 <HAL_TIM_Base_Start+0x48>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684a:	d009      	beq.n	8006860 <HAL_TIM_Base_Start+0x48>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a14      	ldr	r2, [pc, #80]	; (80068a4 <HAL_TIM_Base_Start+0x8c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d004      	beq.n	8006860 <HAL_TIM_Base_Start+0x48>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a13      	ldr	r2, [pc, #76]	; (80068a8 <HAL_TIM_Base_Start+0x90>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d111      	bne.n	8006884 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b06      	cmp	r3, #6
 8006870:	d010      	beq.n	8006894 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0201 	orr.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006882:	e007      	b.n	8006894 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0201 	orr.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr
 80068a0:	40012c00 	.word	0x40012c00
 80068a4:	40000400 	.word	0x40000400
 80068a8:	40000800 	.word	0x40000800

080068ac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6a1a      	ldr	r2, [r3, #32]
 80068ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80068be:	4013      	ands	r3, r2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10f      	bne.n	80068e4 <HAL_TIM_Base_Stop+0x38>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6a1a      	ldr	r2, [r3, #32]
 80068ca:	f240 4344 	movw	r3, #1092	; 0x444
 80068ce:	4013      	ands	r3, r2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d107      	bne.n	80068e4 <HAL_TIM_Base_Stop+0x38>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0201 	bic.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr

080068f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e093      	b.n	8006a34 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d106      	bne.n	8006926 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7fc fbd5 	bl	80030d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2202      	movs	r2, #2
 800692a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6812      	ldr	r2, [r2, #0]
 8006938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800693c:	f023 0307 	bic.w	r3, r3, #7
 8006940:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3304      	adds	r3, #4
 800694a:	4619      	mov	r1, r3
 800694c:	4610      	mov	r0, r2
 800694e:	f000 fbc9 	bl	80070e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800697a:	f023 0303 	bic.w	r3, r3, #3
 800697e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	4313      	orrs	r3, r2
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006998:	f023 030c 	bic.w	r3, r3, #12
 800699c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	021b      	lsls	r3, r3, #8
 80069b4:	4313      	orrs	r3, r2
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	011a      	lsls	r2, r3, #4
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	031b      	lsls	r3, r3, #12
 80069c8:	4313      	orrs	r3, r2
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80069d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	4313      	orrs	r3, r2
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d110      	bne.n	8006a8e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d102      	bne.n	8006a78 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a72:	7b7b      	ldrb	r3, [r7, #13]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d001      	beq.n	8006a7c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e089      	b.n	8006b90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a8c:	e031      	b.n	8006af2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d110      	bne.n	8006ab6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d102      	bne.n	8006aa0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a9a:	7b3b      	ldrb	r3, [r7, #12]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d001      	beq.n	8006aa4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e075      	b.n	8006b90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ab4:	e01d      	b.n	8006af2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d108      	bne.n	8006ace <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006abc:	7bbb      	ldrb	r3, [r7, #14]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d105      	bne.n	8006ace <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ac2:	7b7b      	ldrb	r3, [r7, #13]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d102      	bne.n	8006ace <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ac8:	7b3b      	ldrb	r3, [r7, #12]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d001      	beq.n	8006ad2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e05e      	b.n	8006b90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2202      	movs	r2, #2
 8006aee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d010      	beq.n	8006b20 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006afe:	e01f      	b.n	8006b40 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2201      	movs	r2, #1
 8006b06:	2100      	movs	r1, #0
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 fbe3 	bl	80072d4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 0202 	orr.w	r2, r2, #2
 8006b1c:	60da      	str	r2, [r3, #12]
      break;
 8006b1e:	e02e      	b.n	8006b7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2201      	movs	r2, #1
 8006b26:	2104      	movs	r1, #4
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fbd3 	bl	80072d4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0204 	orr.w	r2, r2, #4
 8006b3c:	60da      	str	r2, [r3, #12]
      break;
 8006b3e:	e01e      	b.n	8006b7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2201      	movs	r2, #1
 8006b46:	2100      	movs	r1, #0
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fbc3 	bl	80072d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2201      	movs	r2, #1
 8006b54:	2104      	movs	r1, #4
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fbbc 	bl	80072d4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0202 	orr.w	r2, r2, #2
 8006b6a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0204 	orr.w	r2, r2, #4
 8006b7a:	60da      	str	r2, [r3, #12]
      break;
 8006b7c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 0201 	orr.w	r2, r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10f      	bne.n	8006bc8 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2200      	movs	r2, #0
 8006bae:	2100      	movs	r1, #0
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fb8f 	bl	80072d4 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68da      	ldr	r2, [r3, #12]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0202 	bic.w	r2, r2, #2
 8006bc4:	60da      	str	r2, [r3, #12]
 8006bc6:	e030      	b.n	8006c2a <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d10f      	bne.n	8006bee <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2104      	movs	r1, #4
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fb7c 	bl	80072d4 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0204 	bic.w	r2, r2, #4
 8006bea:	60da      	str	r2, [r3, #12]
 8006bec:	e01d      	b.n	8006c2a <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fb6c 	bl	80072d4 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2200      	movs	r2, #0
 8006c02:	2104      	movs	r1, #4
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fb65 	bl	80072d4 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0202 	bic.w	r2, r2, #2
 8006c18:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0204 	bic.w	r2, r2, #4
 8006c28:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6a1a      	ldr	r2, [r3, #32]
 8006c30:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c34:	4013      	ands	r3, r2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10f      	bne.n	8006c5a <HAL_TIM_Encoder_Stop_IT+0xc2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6a1a      	ldr	r2, [r3, #32]
 8006c40:	f240 4344 	movw	r3, #1092	; 0x444
 8006c44:	4013      	ands	r3, r2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d107      	bne.n	8006c5a <HAL_TIM_Encoder_Stop_IT+0xc2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0201 	bic.w	r2, r2, #1
 8006c58:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <HAL_TIM_Encoder_Stop_IT+0xce>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d138      	bne.n	8006cd8 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <HAL_TIM_Encoder_Stop_IT+0xde>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c74:	e013      	b.n	8006c9e <HAL_TIM_Encoder_Stop_IT+0x106>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d104      	bne.n	8006c86 <HAL_TIM_Encoder_Stop_IT+0xee>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c84:	e00b      	b.n	8006c9e <HAL_TIM_Encoder_Stop_IT+0x106>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d104      	bne.n	8006c96 <HAL_TIM_Encoder_Stop_IT+0xfe>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c94:	e003      	b.n	8006c9e <HAL_TIM_Encoder_Stop_IT+0x106>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d104      	bne.n	8006cae <HAL_TIM_Encoder_Stop_IT+0x116>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cac:	e024      	b.n	8006cf8 <HAL_TIM_Encoder_Stop_IT+0x160>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d104      	bne.n	8006cbe <HAL_TIM_Encoder_Stop_IT+0x126>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cbc:	e01c      	b.n	8006cf8 <HAL_TIM_Encoder_Stop_IT+0x160>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d104      	bne.n	8006cce <HAL_TIM_Encoder_Stop_IT+0x136>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ccc:	e014      	b.n	8006cf8 <HAL_TIM_Encoder_Stop_IT+0x160>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cd6:	e00f      	b.n	8006cf8 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d122      	bne.n	8006d5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d11b      	bne.n	8006d5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f06f 0202 	mvn.w	r2, #2
 8006d2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f001 fa5f 	bl	8008208 <HAL_TIM_IC_CaptureCallback>
 8006d4a:	e005      	b.n	8006d58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f9ad 	bl	80070ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f9b3 	bl	80070be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d122      	bne.n	8006db2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f003 0304 	and.w	r3, r3, #4
 8006d76:	2b04      	cmp	r3, #4
 8006d78:	d11b      	bne.n	8006db2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f06f 0204 	mvn.w	r2, #4
 8006d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 fa35 	bl	8008208 <HAL_TIM_IC_CaptureCallback>
 8006d9e:	e005      	b.n	8006dac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f983 	bl	80070ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f989 	bl	80070be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d122      	bne.n	8006e06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	d11b      	bne.n	8006e06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f06f 0208 	mvn.w	r2, #8
 8006dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2204      	movs	r2, #4
 8006ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	f003 0303 	and.w	r3, r3, #3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fa0b 	bl	8008208 <HAL_TIM_IC_CaptureCallback>
 8006df2:	e005      	b.n	8006e00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f959 	bl	80070ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f95f 	bl	80070be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d122      	bne.n	8006e5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f003 0310 	and.w	r3, r3, #16
 8006e1e:	2b10      	cmp	r3, #16
 8006e20:	d11b      	bne.n	8006e5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f06f 0210 	mvn.w	r2, #16
 8006e2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2208      	movs	r2, #8
 8006e30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 f9e1 	bl	8008208 <HAL_TIM_IC_CaptureCallback>
 8006e46:	e005      	b.n	8006e54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f92f 	bl	80070ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f935 	bl	80070be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d10e      	bne.n	8006e86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d107      	bne.n	8006e86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f06f 0201 	mvn.w	r2, #1
 8006e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f90a 	bl	800709a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d10e      	bne.n	8006eb2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9e:	2b80      	cmp	r3, #128	; 0x80
 8006ea0:	d107      	bne.n	8006eb2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fa9c 	bl	80073ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebc:	2b40      	cmp	r3, #64	; 0x40
 8006ebe:	d10e      	bne.n	8006ede <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d107      	bne.n	8006ede <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f8f9 	bl	80070d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d10e      	bne.n	8006f0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d107      	bne.n	8006f0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f06f 0220 	mvn.w	r2, #32
 8006f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fa67 	bl	80073d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f0a:	bf00      	nop
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d101      	bne.n	8006f2a <HAL_TIM_ConfigClockSource+0x18>
 8006f26:	2302      	movs	r3, #2
 8006f28:	e0b3      	b.n	8007092 <HAL_TIM_ConfigClockSource+0x180>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f48:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f50:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f62:	d03e      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0xd0>
 8006f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f68:	f200 8087 	bhi.w	800707a <HAL_TIM_ConfigClockSource+0x168>
 8006f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f70:	f000 8085 	beq.w	800707e <HAL_TIM_ConfigClockSource+0x16c>
 8006f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f78:	d87f      	bhi.n	800707a <HAL_TIM_ConfigClockSource+0x168>
 8006f7a:	2b70      	cmp	r3, #112	; 0x70
 8006f7c:	d01a      	beq.n	8006fb4 <HAL_TIM_ConfigClockSource+0xa2>
 8006f7e:	2b70      	cmp	r3, #112	; 0x70
 8006f80:	d87b      	bhi.n	800707a <HAL_TIM_ConfigClockSource+0x168>
 8006f82:	2b60      	cmp	r3, #96	; 0x60
 8006f84:	d050      	beq.n	8007028 <HAL_TIM_ConfigClockSource+0x116>
 8006f86:	2b60      	cmp	r3, #96	; 0x60
 8006f88:	d877      	bhi.n	800707a <HAL_TIM_ConfigClockSource+0x168>
 8006f8a:	2b50      	cmp	r3, #80	; 0x50
 8006f8c:	d03c      	beq.n	8007008 <HAL_TIM_ConfigClockSource+0xf6>
 8006f8e:	2b50      	cmp	r3, #80	; 0x50
 8006f90:	d873      	bhi.n	800707a <HAL_TIM_ConfigClockSource+0x168>
 8006f92:	2b40      	cmp	r3, #64	; 0x40
 8006f94:	d058      	beq.n	8007048 <HAL_TIM_ConfigClockSource+0x136>
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	d86f      	bhi.n	800707a <HAL_TIM_ConfigClockSource+0x168>
 8006f9a:	2b30      	cmp	r3, #48	; 0x30
 8006f9c:	d064      	beq.n	8007068 <HAL_TIM_ConfigClockSource+0x156>
 8006f9e:	2b30      	cmp	r3, #48	; 0x30
 8006fa0:	d86b      	bhi.n	800707a <HAL_TIM_ConfigClockSource+0x168>
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	d060      	beq.n	8007068 <HAL_TIM_ConfigClockSource+0x156>
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	d867      	bhi.n	800707a <HAL_TIM_ConfigClockSource+0x168>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d05c      	beq.n	8007068 <HAL_TIM_ConfigClockSource+0x156>
 8006fae:	2b10      	cmp	r3, #16
 8006fb0:	d05a      	beq.n	8007068 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006fb2:	e062      	b.n	800707a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6818      	ldr	r0, [r3, #0]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	6899      	ldr	r1, [r3, #8]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f000 f967 	bl	8007296 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	609a      	str	r2, [r3, #8]
      break;
 8006fe0:	e04e      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	6899      	ldr	r1, [r3, #8]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f000 f950 	bl	8007296 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007004:	609a      	str	r2, [r3, #8]
      break;
 8007006:	e03b      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	6859      	ldr	r1, [r3, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	461a      	mov	r2, r3
 8007016:	f000 f8c7 	bl	80071a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2150      	movs	r1, #80	; 0x50
 8007020:	4618      	mov	r0, r3
 8007022:	f000 f91e 	bl	8007262 <TIM_ITRx_SetConfig>
      break;
 8007026:	e02b      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	6859      	ldr	r1, [r3, #4]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	461a      	mov	r2, r3
 8007036:	f000 f8e5 	bl	8007204 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2160      	movs	r1, #96	; 0x60
 8007040:	4618      	mov	r0, r3
 8007042:	f000 f90e 	bl	8007262 <TIM_ITRx_SetConfig>
      break;
 8007046:	e01b      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6818      	ldr	r0, [r3, #0]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	6859      	ldr	r1, [r3, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	461a      	mov	r2, r3
 8007056:	f000 f8a7 	bl	80071a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2140      	movs	r1, #64	; 0x40
 8007060:	4618      	mov	r0, r3
 8007062:	f000 f8fe 	bl	8007262 <TIM_ITRx_SetConfig>
      break;
 8007066:	e00b      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4619      	mov	r1, r3
 8007072:	4610      	mov	r0, r2
 8007074:	f000 f8f5 	bl	8007262 <TIM_ITRx_SetConfig>
        break;
 8007078:	e002      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800707a:	bf00      	nop
 800707c:	e000      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800707e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr

080070ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc80      	pop	{r7}
 80070bc:	4770      	bx	lr

080070be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bc80      	pop	{r7}
 80070ce:	4770      	bx	lr

080070d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	bc80      	pop	{r7}
 80070e0:	4770      	bx	lr
	...

080070e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a29      	ldr	r2, [pc, #164]	; (800719c <TIM_Base_SetConfig+0xb8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00b      	beq.n	8007114 <TIM_Base_SetConfig+0x30>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007102:	d007      	beq.n	8007114 <TIM_Base_SetConfig+0x30>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a26      	ldr	r2, [pc, #152]	; (80071a0 <TIM_Base_SetConfig+0xbc>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d003      	beq.n	8007114 <TIM_Base_SetConfig+0x30>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a25      	ldr	r2, [pc, #148]	; (80071a4 <TIM_Base_SetConfig+0xc0>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d108      	bne.n	8007126 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a1c      	ldr	r2, [pc, #112]	; (800719c <TIM_Base_SetConfig+0xb8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00b      	beq.n	8007146 <TIM_Base_SetConfig+0x62>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007134:	d007      	beq.n	8007146 <TIM_Base_SetConfig+0x62>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a19      	ldr	r2, [pc, #100]	; (80071a0 <TIM_Base_SetConfig+0xbc>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d003      	beq.n	8007146 <TIM_Base_SetConfig+0x62>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a18      	ldr	r2, [pc, #96]	; (80071a4 <TIM_Base_SetConfig+0xc0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d108      	bne.n	8007158 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800714c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a07      	ldr	r2, [pc, #28]	; (800719c <TIM_Base_SetConfig+0xb8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d103      	bne.n	800718c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	691a      	ldr	r2, [r3, #16]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	615a      	str	r2, [r3, #20]
}
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	bc80      	pop	{r7}
 800719a:	4770      	bx	lr
 800719c:	40012c00 	.word	0x40012c00
 80071a0:	40000400 	.word	0x40000400
 80071a4:	40000800 	.word	0x40000800

080071a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	f023 0201 	bic.w	r2, r3, #1
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	011b      	lsls	r3, r3, #4
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	4313      	orrs	r3, r2
 80071dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f023 030a 	bic.w	r3, r3, #10
 80071e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	621a      	str	r2, [r3, #32]
}
 80071fa:	bf00      	nop
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	bc80      	pop	{r7}
 8007202:	4770      	bx	lr

08007204 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	f023 0210 	bic.w	r2, r3, #16
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800722e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	031b      	lsls	r3, r3, #12
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007240:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	011b      	lsls	r3, r3, #4
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	4313      	orrs	r3, r2
 800724a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	621a      	str	r2, [r3, #32]
}
 8007258:	bf00      	nop
 800725a:	371c      	adds	r7, #28
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	4770      	bx	lr

08007262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007262:	b480      	push	{r7}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4313      	orrs	r3, r2
 8007280:	f043 0307 	orr.w	r3, r3, #7
 8007284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	609a      	str	r2, [r3, #8]
}
 800728c:	bf00      	nop
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	bc80      	pop	{r7}
 8007294:	4770      	bx	lr

08007296 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007296:	b480      	push	{r7}
 8007298:	b087      	sub	sp, #28
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	607a      	str	r2, [r7, #4]
 80072a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	021a      	lsls	r2, r3, #8
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	431a      	orrs	r2, r3
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	4313      	orrs	r3, r2
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	609a      	str	r2, [r3, #8]
}
 80072ca:	bf00      	nop
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr

080072d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f003 031f 	and.w	r3, r3, #31
 80072e6:	2201      	movs	r2, #1
 80072e8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6a1a      	ldr	r2, [r3, #32]
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	43db      	mvns	r3, r3
 80072f6:	401a      	ands	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6a1a      	ldr	r2, [r3, #32]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f003 031f 	and.w	r3, r3, #31
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	fa01 f303 	lsl.w	r3, r1, r3
 800730c:	431a      	orrs	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr

0800731c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007330:	2302      	movs	r3, #2
 8007332:	e046      	b.n	80073c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a16      	ldr	r2, [pc, #88]	; (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d00e      	beq.n	8007396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007380:	d009      	beq.n	8007396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a12      	ldr	r2, [pc, #72]	; (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d004      	beq.n	8007396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a10      	ldr	r2, [pc, #64]	; (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d10c      	bne.n	80073b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800739c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr
 80073cc:	40012c00 	.word	0x40012c00
 80073d0:	40000400 	.word	0x40000400
 80073d4:	40000800 	.word	0x40000800

080073d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr

080073ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr

080073fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e03f      	b.n	800748e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d106      	bne.n	8007428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fb fec8 	bl	80031b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2224      	movs	r2, #36	; 0x24
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800743e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fb49 	bl	8007ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691a      	ldr	r2, [r3, #16]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	695a      	ldr	r2, [r3, #20]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2220      	movs	r2, #32
 8007488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08a      	sub	sp, #40	; 0x28
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80074bc:	2300      	movs	r3, #0
 80074be:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10d      	bne.n	80074ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	f003 0320 	and.w	r3, r3, #32
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d008      	beq.n	80074ea <HAL_UART_IRQHandler+0x52>
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fa4f 	bl	8007986 <UART_Receive_IT>
      return;
 80074e8:	e17b      	b.n	80077e2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 80b1 	beq.w	8007654 <HAL_UART_IRQHandler+0x1bc>
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d105      	bne.n	8007508 <HAL_UART_IRQHandler+0x70>
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 80a6 	beq.w	8007654 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <HAL_UART_IRQHandler+0x90>
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007520:	f043 0201 	orr.w	r2, r3, #1
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	f003 0304 	and.w	r3, r3, #4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <HAL_UART_IRQHandler+0xb0>
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007540:	f043 0202 	orr.w	r2, r3, #2
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <HAL_UART_IRQHandler+0xd0>
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007560:	f043 0204 	orr.w	r2, r3, #4
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00f      	beq.n	8007592 <HAL_UART_IRQHandler+0xfa>
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b00      	cmp	r3, #0
 800757a:	d104      	bne.n	8007586 <HAL_UART_IRQHandler+0xee>
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d005      	beq.n	8007592 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	f043 0208 	orr.w	r2, r3, #8
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 811e 	beq.w	80077d8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d007      	beq.n	80075b6 <HAL_UART_IRQHandler+0x11e>
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	f003 0320 	and.w	r3, r3, #32
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f9e8 	bl	8007986 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	bf14      	ite	ne
 80075c4:	2301      	movne	r3, #1
 80075c6:	2300      	moveq	r3, #0
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <HAL_UART_IRQHandler+0x146>
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d031      	beq.n	8007642 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f92a 	bl	8007838 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d023      	beq.n	800763a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	695a      	ldr	r2, [r3, #20]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007600:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007606:	2b00      	cmp	r3, #0
 8007608:	d013      	beq.n	8007632 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	4a76      	ldr	r2, [pc, #472]	; (80077e8 <HAL_UART_IRQHandler+0x350>)
 8007610:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007616:	4618      	mov	r0, r3
 8007618:	f7fc fca8 	bl	8003f6c <HAL_DMA_Abort_IT>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d016      	beq.n	8007650 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800762c:	4610      	mov	r0, r2
 800762e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007630:	e00e      	b.n	8007650 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f8ec 	bl	8007810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007638:	e00a      	b.n	8007650 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f8e8 	bl	8007810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007640:	e006      	b.n	8007650 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f8e4 	bl	8007810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800764e:	e0c3      	b.n	80077d8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007650:	bf00      	nop
    return;
 8007652:	e0c1      	b.n	80077d8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	2b01      	cmp	r3, #1
 800765a:	f040 80a1 	bne.w	80077a0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	f003 0310 	and.w	r3, r3, #16
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 809b 	beq.w	80077a0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	f003 0310 	and.w	r3, r3, #16
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 8095 	beq.w	80077a0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007676:	2300      	movs	r3, #0
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	60fb      	str	r3, [r7, #12]
 800768a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007696:	2b00      	cmp	r3, #0
 8007698:	d04e      	beq.n	8007738 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80076a4:	8a3b      	ldrh	r3, [r7, #16]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 8098 	beq.w	80077dc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076b0:	8a3a      	ldrh	r2, [r7, #16]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	f080 8092 	bcs.w	80077dc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8a3a      	ldrh	r2, [r7, #16]
 80076bc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d02b      	beq.n	8007720 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076d6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695a      	ldr	r2, [r3, #20]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 0201 	bic.w	r2, r2, #1
 80076e6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	695a      	ldr	r2, [r3, #20]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076f6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0210 	bic.w	r2, r2, #16
 8007714:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	4618      	mov	r0, r3
 800771c:	f7fc fbeb 	bl	8003ef6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007728:	b29b      	uxth	r3, r3
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	b29b      	uxth	r3, r3
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f876 	bl	8007822 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007736:	e051      	b.n	80077dc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007740:	b29b      	uxth	r3, r3
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800774a:	b29b      	uxth	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d047      	beq.n	80077e0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007750:	8a7b      	ldrh	r3, [r7, #18]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d044      	beq.n	80077e0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007764:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	695a      	ldr	r2, [r3, #20]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0201 	bic.w	r2, r2, #1
 8007774:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2220      	movs	r2, #32
 800777a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0210 	bic.w	r2, r2, #16
 8007792:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007794:	8a7b      	ldrh	r3, [r7, #18]
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f842 	bl	8007822 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800779e:	e01f      	b.n	80077e0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d008      	beq.n	80077bc <HAL_UART_IRQHandler+0x324>
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f87f 	bl	80078b8 <UART_Transmit_IT>
    return;
 80077ba:	e012      	b.n	80077e2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00d      	beq.n	80077e2 <HAL_UART_IRQHandler+0x34a>
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d008      	beq.n	80077e2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f8c0 	bl	8007956 <UART_EndTransmit_IT>
    return;
 80077d6:	e004      	b.n	80077e2 <HAL_UART_IRQHandler+0x34a>
    return;
 80077d8:	bf00      	nop
 80077da:	e002      	b.n	80077e2 <HAL_UART_IRQHandler+0x34a>
      return;
 80077dc:	bf00      	nop
 80077de:	e000      	b.n	80077e2 <HAL_UART_IRQHandler+0x34a>
      return;
 80077e0:	bf00      	nop
  }
}
 80077e2:	3728      	adds	r7, #40	; 0x28
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	08007891 	.word	0x08007891

080077ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bc80      	pop	{r7}
 80077fc:	4770      	bx	lr

080077fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	bc80      	pop	{r7}
 800780e:	4770      	bx	lr

08007810 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr

08007822 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	460b      	mov	r3, r1
 800782c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	bc80      	pop	{r7}
 8007836:	4770      	bx	lr

08007838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800784e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	695a      	ldr	r2, [r3, #20]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0201 	bic.w	r2, r2, #1
 800785e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007864:	2b01      	cmp	r3, #1
 8007866:	d107      	bne.n	8007878 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0210 	bic.w	r2, r2, #16
 8007876:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2220      	movs	r2, #32
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	bc80      	pop	{r7}
 800788e:	4770      	bx	lr

08007890 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f7ff ffb0 	bl	8007810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078b0:	bf00      	nop
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b21      	cmp	r3, #33	; 0x21
 80078ca:	d13e      	bne.n	800794a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d4:	d114      	bne.n	8007900 <UART_Transmit_IT+0x48>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d110      	bne.n	8007900 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	1c9a      	adds	r2, r3, #2
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	621a      	str	r2, [r3, #32]
 80078fe:	e008      	b.n	8007912 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	1c59      	adds	r1, r3, #1
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6211      	str	r1, [r2, #32]
 800790a:	781a      	ldrb	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29b      	uxth	r3, r3
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	4619      	mov	r1, r3
 8007920:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10f      	bne.n	8007946 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007934:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007944:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	e000      	b.n	800794c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800794a:	2302      	movs	r3, #2
  }
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	bc80      	pop	{r7}
 8007954:	4770      	bx	lr

08007956 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800796c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff ff38 	bl	80077ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b086      	sub	sp, #24
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b22      	cmp	r3, #34	; 0x22
 8007998:	f040 8099 	bne.w	8007ace <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a4:	d117      	bne.n	80079d6 <UART_Receive_IT+0x50>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d113      	bne.n	80079d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	1c9a      	adds	r2, r3, #2
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	629a      	str	r2, [r3, #40]	; 0x28
 80079d4:	e026      	b.n	8007a24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079da:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80079dc:	2300      	movs	r3, #0
 80079de:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e8:	d007      	beq.n	80079fa <UART_Receive_IT+0x74>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <UART_Receive_IT+0x82>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	e008      	b.n	8007a1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	4619      	mov	r1, r3
 8007a32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d148      	bne.n	8007aca <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0220 	bic.w	r2, r2, #32
 8007a46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	695a      	ldr	r2, [r3, #20]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0201 	bic.w	r2, r2, #1
 8007a66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d123      	bne.n	8007ac0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0210 	bic.w	r2, r2, #16
 8007a8c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0310 	and.w	r3, r3, #16
 8007a98:	2b10      	cmp	r3, #16
 8007a9a:	d10a      	bne.n	8007ab2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff feb2 	bl	8007822 <HAL_UARTEx_RxEventCallback>
 8007abe:	e002      	b.n	8007ac6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff fe9c 	bl	80077fe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e002      	b.n	8007ad0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	e000      	b.n	8007ad0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007ace:	2302      	movs	r3, #2
  }
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	689a      	ldr	r2, [r3, #8]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007b12:	f023 030c 	bic.w	r3, r3, #12
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6812      	ldr	r2, [r2, #0]
 8007b1a:	68b9      	ldr	r1, [r7, #8]
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	699a      	ldr	r2, [r3, #24]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a2c      	ldr	r2, [pc, #176]	; (8007bec <UART_SetConfig+0x114>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d103      	bne.n	8007b48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b40:	f7fe fb60 	bl	8006204 <HAL_RCC_GetPCLK2Freq>
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	e002      	b.n	8007b4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007b48:	f7fe fb48 	bl	80061dc <HAL_RCC_GetPCLK1Freq>
 8007b4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	009a      	lsls	r2, r3, #2
 8007b58:	441a      	add	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b64:	4a22      	ldr	r2, [pc, #136]	; (8007bf0 <UART_SetConfig+0x118>)
 8007b66:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6a:	095b      	lsrs	r3, r3, #5
 8007b6c:	0119      	lsls	r1, r3, #4
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	4613      	mov	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	009a      	lsls	r2, r3, #2
 8007b78:	441a      	add	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b84:	4b1a      	ldr	r3, [pc, #104]	; (8007bf0 <UART_SetConfig+0x118>)
 8007b86:	fba3 0302 	umull	r0, r3, r3, r2
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	2064      	movs	r0, #100	; 0x64
 8007b8e:	fb00 f303 	mul.w	r3, r0, r3
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	011b      	lsls	r3, r3, #4
 8007b96:	3332      	adds	r3, #50	; 0x32
 8007b98:	4a15      	ldr	r2, [pc, #84]	; (8007bf0 <UART_SetConfig+0x118>)
 8007b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9e:	095b      	lsrs	r3, r3, #5
 8007ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ba4:	4419      	add	r1, r3
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	009a      	lsls	r2, r3, #2
 8007bb0:	441a      	add	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bbc:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <UART_SetConfig+0x118>)
 8007bbe:	fba3 0302 	umull	r0, r3, r3, r2
 8007bc2:	095b      	lsrs	r3, r3, #5
 8007bc4:	2064      	movs	r0, #100	; 0x64
 8007bc6:	fb00 f303 	mul.w	r3, r0, r3
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	011b      	lsls	r3, r3, #4
 8007bce:	3332      	adds	r3, #50	; 0x32
 8007bd0:	4a07      	ldr	r2, [pc, #28]	; (8007bf0 <UART_SetConfig+0x118>)
 8007bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd6:	095b      	lsrs	r3, r3, #5
 8007bd8:	f003 020f 	and.w	r2, r3, #15
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	440a      	add	r2, r1
 8007be2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007be4:	bf00      	nop
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	40013800 	.word	0x40013800
 8007bf0:	51eb851f 	.word	0x51eb851f

08007bf4 <DHT_Set_Pin_Output>:
#define DHT11_STARTTIME 18000
#define DHT22_STARTTIME 12000

#define TIME_OUT		10

static void DHT_Set_Pin_Output(DHT_HandleTypeDef* p_DHT){
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bfc:	f107 0308 	add.w	r3, r7, #8
 8007c00:	2200      	movs	r2, #0
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	605a      	str	r2, [r3, #4]
 8007c06:	609a      	str	r2, [r3, #8]
 8007c08:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	891b      	ldrh	r3, [r3, #8]
 8007c0e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c10:	2301      	movs	r3, #1
 8007c12:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c14:	2302      	movs	r3, #2
 8007c16:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f107 0208 	add.w	r2, r7, #8
 8007c20:	4611      	mov	r1, r2
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fc fc18 	bl	8004458 <HAL_GPIO_Init>
}
 8007c28:	bf00      	nop
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <DHT_Set_Pin_Input>:

static void DHT_Set_Pin_Input(DHT_HandleTypeDef* p_DHT){
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c38:	f107 0308 	add.w	r3, r7, #8
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	605a      	str	r2, [r3, #4]
 8007c42:	609a      	str	r2, [r3, #8]
 8007c44:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	891b      	ldrh	r3, [r3, #8]
 8007c4a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c50:	2300      	movs	r3, #0
 8007c52:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f107 0208 	add.w	r2, r7, #8
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fc fbfa 	bl	8004458 <HAL_GPIO_Init>
}
 8007c64:	bf00      	nop
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <DHT_Start>:

static void DHT_Start(DHT_HandleTypeDef* p_DHT){
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
	DHT_Set_Pin_Output(p_DHT);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7ff ffbd 	bl	8007bf4 <DHT_Set_Pin_Output>
	HAL_GPIO_WritePin(p_DHT->DHT_Port, p_DHT->DHT_Pin, 0);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6858      	ldr	r0, [r3, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	891b      	ldrh	r3, [r3, #8]
 8007c82:	2200      	movs	r2, #0
 8007c84:	4619      	mov	r1, r3
 8007c86:	f7fc fd82 	bl	800478e <HAL_GPIO_WritePin>
	DELAY_US_Run((p_DHT->sensor_type == DHT11) ? DHT11_STARTTIME : DHT22_STARTTIME);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d102      	bne.n	8007c98 <DHT_Start+0x2c>
 8007c92:	f244 6350 	movw	r3, #18000	; 0x4650
 8007c96:	e001      	b.n	8007c9c <DHT_Start+0x30>
 8007c98:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 fa91 	bl	80081c4 <DELAY_US_Run>
	HAL_GPIO_WritePin(p_DHT->DHT_Port, p_DHT->DHT_Pin, 1);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6858      	ldr	r0, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	891b      	ldrh	r3, [r3, #8]
 8007caa:	2201      	movs	r2, #1
 8007cac:	4619      	mov	r1, r3
 8007cae:	f7fc fd6e 	bl	800478e <HAL_GPIO_WritePin>
}
 8007cb2:	bf00      	nop
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <DHT_Check_Response>:

static uint8_t DHT_Check_Response(DHT_HandleTypeDef* p_DHT){
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
	DHT_Set_Pin_Input(p_DHT);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff ffb4 	bl	8007c30 <DHT_Set_Pin_Input>
	DELAY_US_Run(40);
 8007cc8:	2028      	movs	r0, #40	; 0x28
 8007cca:	f000 fa7b 	bl	80081c4 <DELAY_US_Run>
	if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	891b      	ldrh	r3, [r3, #8]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4610      	mov	r0, r2
 8007cda:	f7fc fd41 	bl	8004760 <HAL_GPIO_ReadPin>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10f      	bne.n	8007d04 <DHT_Check_Response+0x4a>
		DELAY_US_Run(80);
 8007ce4:	2050      	movs	r0, #80	; 0x50
 8007ce6:	f000 fa6d 	bl	80081c4 <DELAY_US_Run>
		if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	891b      	ldrh	r3, [r3, #8]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	f7fc fd33 	bl	8004760 <HAL_GPIO_ReadPin>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d103      	bne.n	8007d08 <DHT_Check_Response+0x4e>
			return DHT_FAIL;
 8007d00:	2300      	movs	r3, #0
 8007d02:	e01a      	b.n	8007d3a <DHT_Check_Response+0x80>
		}
	} else{
		return DHT_FAIL;
 8007d04:	2300      	movs	r3, #0
 8007d06:	e018      	b.n	8007d3a <DHT_Check_Response+0x80>
	}

	uint32_t timer_out = HAL_GetTick();
 8007d08:	f7fb fbb8 	bl	800347c <HAL_GetTick>
 8007d0c:	60f8      	str	r0, [r7, #12]
	while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8007d0e:	e008      	b.n	8007d22 <DHT_Check_Response+0x68>
		if(HAL_GetTick() - timer_out > TIME_OUT){
 8007d10:	f7fb fbb4 	bl	800347c <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	2b0a      	cmp	r3, #10
 8007d1c:	d901      	bls.n	8007d22 <DHT_Check_Response+0x68>
			return DHT_FAIL;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e00b      	b.n	8007d3a <DHT_Check_Response+0x80>
	while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	891b      	ldrh	r3, [r3, #8]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	f7fc fd17 	bl	8004760 <HAL_GPIO_ReadPin>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1eb      	bne.n	8007d10 <DHT_Check_Response+0x56>
		}
	}

	return DHT_OK;
 8007d38:	2301      	movs	r3, #1
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <DHT_Read>:

static uint8_t DHT_Read(DHT_HandleTypeDef* p_DHT, uint8_t p_data[5]){
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b086      	sub	sp, #24
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
	DHT_Set_Pin_Input(p_DHT);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff ff6f 	bl	8007c30 <DHT_Set_Pin_Input>
	for(int i = 0; i < 5; i++){
 8007d52:	2300      	movs	r3, #0
 8007d54:	617b      	str	r3, [r7, #20]
 8007d56:	e072      	b.n	8007e3e <DHT_Read+0xfc>
		for(int j = 0; j < 8; j++)
 8007d58:	2300      	movs	r3, #0
 8007d5a:	613b      	str	r3, [r7, #16]
 8007d5c:	e069      	b.n	8007e32 <DHT_Read+0xf0>
		{
			uint32_t timer_out = HAL_GetTick();
 8007d5e:	f7fb fb8d 	bl	800347c <HAL_GetTick>
 8007d62:	60f8      	str	r0, [r7, #12]
			while(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8007d64:	e008      	b.n	8007d78 <DHT_Read+0x36>
				if(HAL_GetTick() - timer_out > TIME_OUT){
 8007d66:	f7fb fb89 	bl	800347c <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	2b0a      	cmp	r3, #10
 8007d72:	d901      	bls.n	8007d78 <DHT_Read+0x36>
					return DHT_FAIL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	e066      	b.n	8007e46 <DHT_Read+0x104>
			while(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	891b      	ldrh	r3, [r3, #8]
 8007d80:	4619      	mov	r1, r3
 8007d82:	4610      	mov	r0, r2
 8007d84:	f7fc fcec 	bl	8004760 <HAL_GPIO_ReadPin>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0eb      	beq.n	8007d66 <DHT_Read+0x24>
				}
			}
			DELAY_US_Run(40);
 8007d8e:	2028      	movs	r0, #40	; 0x28
 8007d90:	f000 fa18 	bl	80081c4 <DELAY_US_Run>
			if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	891b      	ldrh	r3, [r3, #8]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f7fc fcde 	bl	8004760 <HAL_GPIO_ReadPin>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d115      	bne.n	8007dd6 <DHT_Read+0x94>
			{
				*(p_data + i) &= ~(1 << (7-j));
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	4413      	add	r3, r2
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	b25a      	sxtb	r2, r3
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f1c3 0307 	rsb	r3, r3, #7
 8007dba:	2101      	movs	r1, #1
 8007dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc0:	b25b      	sxtb	r3, r3
 8007dc2:	43db      	mvns	r3, r3
 8007dc4:	b25b      	sxtb	r3, r3
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	b259      	sxtb	r1, r3
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	4413      	add	r3, r2
 8007dd0:	b2ca      	uxtb	r2, r1
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	e012      	b.n	8007dfc <DHT_Read+0xba>
			} else {
				*(p_data + i) |= (1 << (7-j));
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	4413      	add	r3, r2
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	b25a      	sxtb	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	f1c3 0307 	rsb	r3, r3, #7
 8007de6:	2101      	movs	r1, #1
 8007de8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dec:	b25b      	sxtb	r3, r3
 8007dee:	4313      	orrs	r3, r2
 8007df0:	b259      	sxtb	r1, r3
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	4413      	add	r3, r2
 8007df8:	b2ca      	uxtb	r2, r1
 8007dfa:	701a      	strb	r2, [r3, #0]
			}
			timer_out = HAL_GetTick();
 8007dfc:	f7fb fb3e 	bl	800347c <HAL_GetTick>
 8007e00:	60f8      	str	r0, [r7, #12]
			while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8007e02:	e008      	b.n	8007e16 <DHT_Read+0xd4>
				if(HAL_GetTick() - timer_out > TIME_OUT){
 8007e04:	f7fb fb3a 	bl	800347c <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	2b0a      	cmp	r3, #10
 8007e10:	d901      	bls.n	8007e16 <DHT_Read+0xd4>
					return DHT_FAIL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	e017      	b.n	8007e46 <DHT_Read+0x104>
			while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	891b      	ldrh	r3, [r3, #8]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4610      	mov	r0, r2
 8007e22:	f7fc fc9d 	bl	8004760 <HAL_GPIO_ReadPin>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1eb      	bne.n	8007e04 <DHT_Read+0xc2>
		for(int j = 0; j < 8; j++)
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	613b      	str	r3, [r7, #16]
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b07      	cmp	r3, #7
 8007e36:	dd92      	ble.n	8007d5e <DHT_Read+0x1c>
	for(int i = 0; i < 5; i++){
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	617b      	str	r3, [r7, #20]
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	dd89      	ble.n	8007d58 <DHT_Read+0x16>
				}
			}
		}
	}
	return DHT_OK;
 8007e44:	2301      	movs	r3, #1
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <DHT_Init>:

void DHT_Init(DHT_HandleTypeDef* p_DHT, uint8_t p_sensor_type, GPIO_TypeDef* p_Port, uint16_t p_Pin){
 8007e4e:	b480      	push	{r7}
 8007e50:	b085      	sub	sp, #20
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	72fb      	strb	r3, [r7, #11]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	813b      	strh	r3, [r7, #8]
	p_DHT->sensor_type = p_sensor_type;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	7afa      	ldrb	r2, [r7, #11]
 8007e66:	701a      	strb	r2, [r3, #0]
	p_DHT->DHT_Port = p_Port;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	605a      	str	r2, [r3, #4]
	p_DHT->DHT_Pin = p_Pin;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	893a      	ldrh	r2, [r7, #8]
 8007e72:	811a      	strh	r2, [r3, #8]
	p_DHT->temperature = 0.0;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f04f 0200 	mov.w	r2, #0
 8007e7a:	60da      	str	r2, [r3, #12]
	p_DHT->huminity = 0.0;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f04f 0200 	mov.w	r2, #0
 8007e82:	611a      	str	r2, [r3, #16]
}
 8007e84:	bf00      	nop
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr

08007e8e <DHT_Read_Value>:

uint8_t DHT_Read_Value(DHT_HandleTypeDef* p_DHT){
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
	uint8_t t_data[5] = {};
 8007e96:	2300      	movs	r3, #0
 8007e98:	60bb      	str	r3, [r7, #8]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	733b      	strb	r3, [r7, #12]
	DHT_Start(p_DHT);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7ff fee4 	bl	8007c6c <DHT_Start>
	if(DHT_Check_Response(p_DHT) == DHT_FAIL)
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff ff08 	bl	8007cba <DHT_Check_Response>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <DHT_Read_Value+0x26>
		return DHT_FAIL;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e044      	b.n	8007f3e <DHT_Read_Value+0xb0>
	if(DHT_Read(p_DHT, t_data) == DHT_FAIL)
 8007eb4:	f107 0308 	add.w	r3, r7, #8
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7ff ff41 	bl	8007d42 <DHT_Read>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <DHT_Read_Value+0x3c>
		return DHT_FAIL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e039      	b.n	8007f3e <DHT_Read_Value+0xb0>
	if(((t_data[0] + t_data[1] + t_data[2] + t_data[3]) & 0xFF) != t_data[4])
 8007eca:	7a3b      	ldrb	r3, [r7, #8]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	7a7b      	ldrb	r3, [r7, #9]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	7aba      	ldrb	r2, [r7, #10]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	7afa      	ldrb	r2, [r7, #11]
 8007ed8:	4413      	add	r3, r2
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	7b3a      	ldrb	r2, [r7, #12]
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d001      	beq.n	8007ee6 <DHT_Read_Value+0x58>
		return DHT_FAIL;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	e02b      	b.n	8007f3e <DHT_Read_Value+0xb0>

	if(t_data[0] < 100 && t_data[0] > 0)
 8007ee6:	7a3b      	ldrb	r3, [r7, #8]
 8007ee8:	2b63      	cmp	r3, #99	; 0x63
 8007eea:	d813      	bhi.n	8007f14 <DHT_Read_Value+0x86>
 8007eec:	7a3b      	ldrb	r3, [r7, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d010      	beq.n	8007f14 <DHT_Read_Value+0x86>
		p_DHT->huminity = t_data[0] / 1.0;
 8007ef2:	7a3b      	ldrb	r3, [r7, #8]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7f8 fa85 	bl	8000404 <__aeabi_i2d>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4610      	mov	r0, r2
 8007f00:	4619      	mov	r1, r3
 8007f02:	f7f8 fd1b 	bl	800093c <__aeabi_d2f>
 8007f06:	4602      	mov	r2, r0
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	611a      	str	r2, [r3, #16]
	else
		return DHT_FAIL;

	if(t_data[2] < 100 && t_data[2] > 0)
 8007f0c:	7abb      	ldrb	r3, [r7, #10]
 8007f0e:	2b63      	cmp	r3, #99	; 0x63
 8007f10:	d902      	bls.n	8007f18 <DHT_Read_Value+0x8a>
 8007f12:	e013      	b.n	8007f3c <DHT_Read_Value+0xae>
		return DHT_FAIL;
 8007f14:	2300      	movs	r3, #0
 8007f16:	e012      	b.n	8007f3e <DHT_Read_Value+0xb0>
	if(t_data[2] < 100 && t_data[2] > 0)
 8007f18:	7abb      	ldrb	r3, [r7, #10]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00e      	beq.n	8007f3c <DHT_Read_Value+0xae>
		p_DHT->temperature = t_data[2] / 1.0;
 8007f1e:	7abb      	ldrb	r3, [r7, #10]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7f8 fa6f 	bl	8000404 <__aeabi_i2d>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	f7f8 fd05 	bl	800093c <__aeabi_d2f>
 8007f32:	4602      	mov	r2, r0
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	60da      	str	r2, [r3, #12]
	else
		return DHT_FAIL;

	return DHT_OK;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e000      	b.n	8007f3e <DHT_Read_Value+0xb0>
		return DHT_FAIL;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <BCD_To_DEC>:

#define DS3231_ADDRESS			(0x68 << 1)
#define SECOND_VALUE_ADDRESS	(0x00)
#define DATE_VALUE_ADDRESS		(0x04)

static uint8_t BCD_To_DEC(uint8_t p_BCD_value){
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	71fb      	strb	r3, [r7, #7]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 8007f50:	79fb      	ldrb	r3, [r7, #7]
 8007f52:	091b      	lsrs	r3, r3, #4
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	461a      	mov	r2, r3
 8007f58:	0092      	lsls	r2, r2, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	f003 030f 	and.w	r3, r3, #15
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	4413      	add	r3, r2
 8007f6a:	b2db      	uxtb	r3, r3
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr
	...

08007f78 <DEC_To_BCD>:

static uint8_t DEC_To_BCD(uint8_t p_DEC_value){
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	71fb      	strb	r3, [r7, #7]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8007f82:	79fb      	ldrb	r3, [r7, #7]
 8007f84:	4a0d      	ldr	r2, [pc, #52]	; (8007fbc <DEC_To_BCD+0x44>)
 8007f86:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8a:	08db      	lsrs	r3, r3, #3
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	011b      	lsls	r3, r3, #4
 8007f90:	b258      	sxtb	r0, r3
 8007f92:	79fa      	ldrb	r2, [r7, #7]
 8007f94:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <DEC_To_BCD+0x44>)
 8007f96:	fba3 1302 	umull	r1, r3, r3, r2
 8007f9a:	08d9      	lsrs	r1, r3, #3
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	440b      	add	r3, r1
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	b25b      	sxtb	r3, r3
 8007faa:	4303      	orrs	r3, r0
 8007fac:	b25b      	sxtb	r3, r3
 8007fae:	b2db      	uxtb	r3, r3
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bc80      	pop	{r7}
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	cccccccd 	.word	0xcccccccd

08007fc0 <DS3231_Init>:

void DS3231_Init(DS3231_HandleTypeDef *p_ds3231, I2C_HandleTypeDef *p_hi2c){
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
	p_ds3231->hi2c = p_hi2c;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	609a      	str	r2, [r3, #8]

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(p_hi2c, DS3231_ADDRESS, 1, 1000);
 8007fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	21d0      	movs	r1, #208	; 0xd0
 8007fd8:	6838      	ldr	r0, [r7, #0]
 8007fda:	f7fd f897 	bl	800510c <HAL_I2C_IsDeviceReady>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	73fb      	strb	r3, [r7, #15]
}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <DS3231_Set_Time>:

void DS3231_Set_Time(DS3231_HandleTypeDef *p_ds3231, uint8_t p_hour, uint8_t p_minute, uint8_t p_second, uint8_t p_day){
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b088      	sub	sp, #32
 8007fee:	af04      	add	r7, sp, #16
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	4608      	mov	r0, r1
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	70fb      	strb	r3, [r7, #3]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70bb      	strb	r3, [r7, #2]
 8008000:	4613      	mov	r3, r2
 8008002:	707b      	strb	r3, [r7, #1]
	uint8_t t_i2c_buffer[4];
	t_i2c_buffer[0] = DEC_To_BCD(p_second);
 8008004:	787b      	ldrb	r3, [r7, #1]
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff ffb6 	bl	8007f78 <DEC_To_BCD>
 800800c:	4603      	mov	r3, r0
 800800e:	733b      	strb	r3, [r7, #12]
	t_i2c_buffer[1] = DEC_To_BCD(p_minute);
 8008010:	78bb      	ldrb	r3, [r7, #2]
 8008012:	4618      	mov	r0, r3
 8008014:	f7ff ffb0 	bl	8007f78 <DEC_To_BCD>
 8008018:	4603      	mov	r3, r0
 800801a:	737b      	strb	r3, [r7, #13]
	t_i2c_buffer[2] = DEC_To_BCD(p_hour) & (~USING_12_HOURS_TIME);
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff ffaa 	bl	8007f78 <DEC_To_BCD>
 8008024:	4603      	mov	r3, r0
 8008026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800802a:	b2db      	uxtb	r3, r3
 800802c:	73bb      	strb	r3, [r7, #14]
	t_i2c_buffer[3] = DEC_To_BCD(p_day);
 800802e:	7e3b      	ldrb	r3, [r7, #24]
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff ffa1 	bl	8007f78 <DEC_To_BCD>
 8008036:	4603      	mov	r3, r0
 8008038:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6898      	ldr	r0, [r3, #8]
 800803e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	2304      	movs	r3, #4
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	f107 030c 	add.w	r3, r7, #12
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	2301      	movs	r3, #1
 8008050:	2200      	movs	r2, #0
 8008052:	21d0      	movs	r1, #208	; 0xd0
 8008054:	f7fc fcf8 	bl	8004a48 <HAL_I2C_Mem_Write>
}
 8008058:	bf00      	nop
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <DS3231_Get_Time>:

uint8_t DS3231_Get_Time(DS3231_HandleTypeDef *p_ds3231){
 8008060:	b580      	push	{r7, lr}
 8008062:	b088      	sub	sp, #32
 8008064:	af04      	add	r7, sp, #16
 8008066:	6078      	str	r0, [r7, #4]
	uint8_t t_i2c_buffer[4];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000) != HAL_OK){
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6898      	ldr	r0, [r3, #8]
 800806c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008070:	9302      	str	r3, [sp, #8]
 8008072:	2304      	movs	r3, #4
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	f107 030c 	add.w	r3, r7, #12
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	2301      	movs	r3, #1
 800807e:	2200      	movs	r2, #0
 8008080:	21d0      	movs	r1, #208	; 0xd0
 8008082:	f7fc fddb 	bl	8004c3c <HAL_I2C_Mem_Read>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <DS3231_Get_Time+0x30>
		return DS3231_FAIL;
 800808c:	2300      	movs	r3, #0
 800808e:	e020      	b.n	80080d2 <DS3231_Get_Time+0x72>
	}
	p_ds3231->current_second = BCD_To_DEC(t_i2c_buffer[0]);
 8008090:	7b3b      	ldrb	r3, [r7, #12]
 8008092:	4618      	mov	r0, r3
 8008094:	f7ff ff57 	bl	8007f46 <BCD_To_DEC>
 8008098:	4603      	mov	r3, r0
 800809a:	461a      	mov	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	709a      	strb	r2, [r3, #2]
	p_ds3231->current_minute = BCD_To_DEC(t_i2c_buffer[1]);
 80080a0:	7b7b      	ldrb	r3, [r7, #13]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff ff4f 	bl	8007f46 <BCD_To_DEC>
 80080a8:	4603      	mov	r3, r0
 80080aa:	461a      	mov	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	705a      	strb	r2, [r3, #1]
	p_ds3231->current_hour = BCD_To_DEC(t_i2c_buffer[2]);
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff ff47 	bl	8007f46 <BCD_To_DEC>
 80080b8:	4603      	mov	r3, r0
 80080ba:	461a      	mov	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	701a      	strb	r2, [r3, #0]
	p_ds3231->current_day = BCD_To_DEC(t_i2c_buffer[3]);
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7ff ff3f 	bl	8007f46 <BCD_To_DEC>
 80080c8:	4603      	mov	r3, r0
 80080ca:	461a      	mov	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	70da      	strb	r2, [r3, #3]
	return DS3231_OK;
 80080d0:	2301      	movs	r3, #1
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <DS3231_Set_Date>:

void DS3231_Set_Date(DS3231_HandleTypeDef *p_ds3231, uint8_t p_date, uint8_t p_month, uint8_t p_year){
 80080da:	b580      	push	{r7, lr}
 80080dc:	b088      	sub	sp, #32
 80080de:	af04      	add	r7, sp, #16
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	4608      	mov	r0, r1
 80080e4:	4611      	mov	r1, r2
 80080e6:	461a      	mov	r2, r3
 80080e8:	4603      	mov	r3, r0
 80080ea:	70fb      	strb	r3, [r7, #3]
 80080ec:	460b      	mov	r3, r1
 80080ee:	70bb      	strb	r3, [r7, #2]
 80080f0:	4613      	mov	r3, r2
 80080f2:	707b      	strb	r3, [r7, #1]
	uint8_t t_i2c_buffer[3];
	t_i2c_buffer[0] = DEC_To_BCD(p_date);
 80080f4:	78fb      	ldrb	r3, [r7, #3]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff ff3e 	bl	8007f78 <DEC_To_BCD>
 80080fc:	4603      	mov	r3, r0
 80080fe:	733b      	strb	r3, [r7, #12]
	t_i2c_buffer[1] = DEC_To_BCD(p_month);
 8008100:	78bb      	ldrb	r3, [r7, #2]
 8008102:	4618      	mov	r0, r3
 8008104:	f7ff ff38 	bl	8007f78 <DEC_To_BCD>
 8008108:	4603      	mov	r3, r0
 800810a:	737b      	strb	r3, [r7, #13]
	t_i2c_buffer[2] = DEC_To_BCD(p_year);
 800810c:	787b      	ldrb	r3, [r7, #1]
 800810e:	4618      	mov	r0, r3
 8008110:	f7ff ff32 	bl	8007f78 <DEC_To_BCD>
 8008114:	4603      	mov	r3, r0
 8008116:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6898      	ldr	r0, [r3, #8]
 800811c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008120:	9302      	str	r3, [sp, #8]
 8008122:	2303      	movs	r3, #3
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	f107 030c 	add.w	r3, r7, #12
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	2301      	movs	r3, #1
 800812e:	2204      	movs	r2, #4
 8008130:	21d0      	movs	r1, #208	; 0xd0
 8008132:	f7fc fc89 	bl	8004a48 <HAL_I2C_Mem_Write>
}
 8008136:	bf00      	nop
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <DS3231_Get_Date>:

uint8_t DS3231_Get_Date(DS3231_HandleTypeDef *p_ds3231){
 800813e:	b580      	push	{r7, lr}
 8008140:	b088      	sub	sp, #32
 8008142:	af04      	add	r7, sp, #16
 8008144:	6078      	str	r0, [r7, #4]
	uint8_t t_i2c_buffer[3];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000) != HAL_OK){
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6898      	ldr	r0, [r3, #8]
 800814a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800814e:	9302      	str	r3, [sp, #8]
 8008150:	2303      	movs	r3, #3
 8008152:	9301      	str	r3, [sp, #4]
 8008154:	f107 030c 	add.w	r3, r7, #12
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	2301      	movs	r3, #1
 800815c:	2204      	movs	r2, #4
 800815e:	21d0      	movs	r1, #208	; 0xd0
 8008160:	f7fc fd6c 	bl	8004c3c <HAL_I2C_Mem_Read>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <DS3231_Get_Date+0x30>
		return DS3231_FAIL;
 800816a:	2300      	movs	r3, #0
 800816c:	e018      	b.n	80081a0 <DS3231_Get_Date+0x62>
	}
	p_ds3231->current_date = BCD_To_DEC(t_i2c_buffer[0]);
 800816e:	7b3b      	ldrb	r3, [r7, #12]
 8008170:	4618      	mov	r0, r3
 8008172:	f7ff fee8 	bl	8007f46 <BCD_To_DEC>
 8008176:	4603      	mov	r3, r0
 8008178:	461a      	mov	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	711a      	strb	r2, [r3, #4]
	p_ds3231->current_month = BCD_To_DEC(t_i2c_buffer[1]);
 800817e:	7b7b      	ldrb	r3, [r7, #13]
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff fee0 	bl	8007f46 <BCD_To_DEC>
 8008186:	4603      	mov	r3, r0
 8008188:	461a      	mov	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	715a      	strb	r2, [r3, #5]
	p_ds3231->current_year = BCD_To_DEC(t_i2c_buffer[2]);
 800818e:	7bbb      	ldrb	r3, [r7, #14]
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff fed8 	bl	8007f46 <BCD_To_DEC>
 8008196:	4603      	mov	r3, r0
 8008198:	b29a      	uxth	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	80da      	strh	r2, [r3, #6]
	return DS3231_OK;
 800819e:	2301      	movs	r3, #1
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <DELAY_US_Init>:
#include "Delay_us.h"

TIM_HandleTypeDef *delay_timer;

void DELAY_US_Init(TIM_HandleTypeDef *p_htim){
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
	delay_timer = p_htim;
 80081b0:	4a03      	ldr	r2, [pc, #12]	; (80081c0 <DELAY_US_Init+0x18>)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6013      	str	r3, [r2, #0]
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bc80      	pop	{r7}
 80081be:	4770      	bx	lr
 80081c0:	200003b0 	.word	0x200003b0

080081c4 <DELAY_US_Run>:

void DELAY_US_Run(uint32_t p_delay_time){
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
	delay_timer->Instance->CNT = 0;
 80081cc:	4b0d      	ldr	r3, [pc, #52]	; (8008204 <DELAY_US_Run+0x40>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2200      	movs	r2, #0
 80081d4:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(delay_timer);
 80081d6:	4b0b      	ldr	r3, [pc, #44]	; (8008204 <DELAY_US_Run+0x40>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe fb1c 	bl	8006818 <HAL_TIM_Base_Start>
	while(delay_timer->Instance->CNT < p_delay_time);
 80081e0:	bf00      	nop
 80081e2:	4b08      	ldr	r3, [pc, #32]	; (8008204 <DELAY_US_Run+0x40>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d8f8      	bhi.n	80081e2 <DELAY_US_Run+0x1e>
	HAL_TIM_Base_Stop(delay_timer);
 80081f0:	4b04      	ldr	r3, [pc, #16]	; (8008204 <DELAY_US_Run+0x40>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fe fb59 	bl	80068ac <HAL_TIM_Base_Stop>
}
 80081fa:	bf00      	nop
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	200003b0 	.word	0x200003b0

08008208 <HAL_TIM_IC_CaptureCallback>:
encoder_callback_function_t __ENCODER_Forward_Callback = NULL;
encoder_callback_function_t __ENCODER_Backward_Callback = NULL;

#ifdef _USING_LIBRARY_ENCODER_IT_FUNCTION_
extern ENCODER_HandleTypeDef h_encoder;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	if(h_encoder.encoder_timer->Instance == htim->Instance){
 8008210:	4b06      	ldr	r3, [pc, #24]	; (800822c <HAL_TIM_IC_CaptureCallback+0x24>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	429a      	cmp	r2, r3
 800821c:	d102      	bne.n	8008224 <HAL_TIM_IC_CaptureCallback+0x1c>
		ENCODER_IT_Handle(&h_encoder);
 800821e:	4803      	ldr	r0, [pc, #12]	; (800822c <HAL_TIM_IC_CaptureCallback+0x24>)
 8008220:	f000 f82e 	bl	8008280 <ENCODER_IT_Handle>
	}
}
 8008224:	bf00      	nop
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	2000015c 	.word	0x2000015c

08008230 <ENCODER_Init>:
#endif

void ENCODER_Init(ENCODER_HandleTypeDef *p_encoder, TIM_HandleTypeDef *p_encoder_timer){
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
	p_encoder->encoder_timer = p_encoder_timer;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	601a      	str	r2, [r3, #0]
	p_encoder->current_possition = 0;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	809a      	strh	r2, [r3, #4]
	p_encoder->last_position = 0;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	80da      	strh	r2, [r3, #6]
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	bc80      	pop	{r7}
 8008254:	4770      	bx	lr
	...

08008258 <ENCODER_Set_Callback_Function>:

void ENCODER_Set_Callback_Function(encoder_callback_function_t p_forward_callback_function, encoder_callback_function_t p_backward_callback_function){
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
	__ENCODER_Forward_Callback = p_forward_callback_function;
 8008262:	4a05      	ldr	r2, [pc, #20]	; (8008278 <ENCODER_Set_Callback_Function+0x20>)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6013      	str	r3, [r2, #0]
	__ENCODER_Backward_Callback = p_backward_callback_function;
 8008268:	4a04      	ldr	r2, [pc, #16]	; (800827c <ENCODER_Set_Callback_Function+0x24>)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	6013      	str	r3, [r2, #0]
}
 800826e:	bf00      	nop
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	bc80      	pop	{r7}
 8008276:	4770      	bx	lr
 8008278:	200003b4 	.word	0x200003b4
 800827c:	200003b8 	.word	0x200003b8

08008280 <ENCODER_IT_Handle>:

void ENCODER_IT_Handle(ENCODER_HandleTypeDef *p_encoder){
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
	uint32_t t_counter = __HAL_TIM_GET_COUNTER(p_encoder->encoder_timer);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	60fb      	str	r3, [r7, #12]
	p_encoder->current_possition =  (int16_t)t_counter / 4;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	b21b      	sxth	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	da00      	bge.n	800829c <ENCODER_IT_Handle+0x1c>
 800829a:	3303      	adds	r3, #3
 800829c:	109b      	asrs	r3, r3, #2
 800829e:	b21a      	sxth	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	809a      	strh	r2, [r3, #4]
}
 80082a4:	bf00      	nop
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bc80      	pop	{r7}
 80082ac:	4770      	bx	lr
	...

080082b0 <ENCODER_Handle>:

void ENCODER_Handle(ENCODER_HandleTypeDef *p_encoder){
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
	if(p_encoder->current_possition > p_encoder->last_position){
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	dd0c      	ble.n	80082e2 <ENCODER_Handle+0x32>
		if(__ENCODER_Forward_Callback != NULL){
 80082c8:	4b12      	ldr	r3, [pc, #72]	; (8008314 <ENCODER_Handle+0x64>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <ENCODER_Handle+0x28>
			__ENCODER_Forward_Callback(p_encoder);
 80082d0:	4b10      	ldr	r3, [pc, #64]	; (8008314 <ENCODER_Handle+0x64>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	4798      	blx	r3
		}
		p_encoder->last_position = p_encoder->current_possition;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	80da      	strh	r2, [r3, #6]
	}
	if(p_encoder->current_possition < p_encoder->last_position){
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	da0c      	bge.n	800830c <ENCODER_Handle+0x5c>
		if(__ENCODER_Backward_Callback != NULL){
 80082f2:	4b09      	ldr	r3, [pc, #36]	; (8008318 <ENCODER_Handle+0x68>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <ENCODER_Handle+0x52>
			__ENCODER_Backward_Callback(p_encoder);
 80082fa:	4b07      	ldr	r3, [pc, #28]	; (8008318 <ENCODER_Handle+0x68>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	4798      	blx	r3
		}
		p_encoder->last_position = p_encoder->current_possition;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	80da      	strh	r2, [r3, #6]
	}
}
 800830c:	bf00      	nop
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	200003b4 	.word	0x200003b4
 8008318:	200003b8 	.word	0x200003b8

0800831c <LCD_Init>:
#include "LCD_I2C.h"
#include "Delay_us.h"

void LCD_Init(LCD_I2C_HandleTypeDef *p_lcd, I2C_HandleTypeDef *p_hi2c, uint8_t p_cols, uint8_t p_rows, uint8_t p_SLAVE_ADDRESS){
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	4611      	mov	r1, r2
 8008328:	461a      	mov	r2, r3
 800832a:	460b      	mov	r3, r1
 800832c:	71fb      	strb	r3, [r7, #7]
 800832e:	4613      	mov	r3, r2
 8008330:	71bb      	strb	r3, [r7, #6]
	p_lcd->SLAVE_ADDRESS = p_SLAVE_ADDRESS;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	7e3a      	ldrb	r2, [r7, #24]
 8008336:	709a      	strb	r2, [r3, #2]
	p_lcd->LCD_Backlight_Value = LCD_BACKLIGHT;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2208      	movs	r2, #8
 800833c:	70da      	strb	r2, [r3, #3]
	p_lcd->LCD_Columns = p_cols;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	79fa      	ldrb	r2, [r7, #7]
 8008342:	701a      	strb	r2, [r3, #0]
	p_lcd->LCD_Rows = p_rows;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	79ba      	ldrb	r2, [r7, #6]
 8008348:	705a      	strb	r2, [r3, #1]
	p_lcd->hi2c = p_hi2c;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	609a      	str	r2, [r3, #8]
	p_lcd->LCD_Display_Option = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2204      	movs	r2, #4
 8008354:	711a      	strb	r2, [r3, #4]
//	HAL_Delay(1);
//	LCD_Send_Command(p_lcd, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
//	HAL_Delay(1);
//	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)

	HAL_Delay(50);
 8008356:	2032      	movs	r0, #50	; 0x32
 8008358:	f7fb f89a 	bl	8003490 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x33);
 800835c:	2133      	movs	r1, #51	; 0x33
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 f90a 	bl	8008578 <LCD_Send_Command>
	HAL_Delay(5);
 8008364:	2005      	movs	r0, #5
 8008366:	f7fb f893 	bl	8003490 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x33);
 800836a:	2133      	movs	r1, #51	; 0x33
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 f903 	bl	8008578 <LCD_Send_Command>
	HAL_Delay(5);
 8008372:	2005      	movs	r0, #5
 8008374:	f7fb f88c 	bl	8003490 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x32);
 8008378:	2132      	movs	r1, #50	; 0x32
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 f8fc 	bl	8008578 <LCD_Send_Command>
	HAL_Delay(5);
 8008380:	2005      	movs	r0, #5
 8008382:	f7fb f885 	bl	8003490 <HAL_Delay>

	LCD_Send_Command(p_lcd, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8008386:	2106      	movs	r1, #6
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 f8f5 	bl	8008578 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 800838e:	210c      	movs	r1, #12
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f8f1 	bl	8008578 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT);
 8008396:	2114      	movs	r1, #20
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 f8ed 	bl	8008578 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 800839e:	2128      	movs	r1, #40	; 0x28
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 f8e9 	bl	8008578 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 80083a6:	2101      	movs	r1, #1
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 f8e5 	bl	8008578 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_RETURNHOME);
 80083ae:	2102      	movs	r1, #2
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 f8e1 	bl	8008578 <LCD_Send_Command>

	HAL_Delay(500);
 80083b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80083ba:	f7fb f869 	bl	8003490 <HAL_Delay>
}
 80083be:	bf00      	nop
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <LCD_Write>:

void LCD_Write(LCD_I2C_HandleTypeDef *p_lcd, const char *p_str, ...){
 80083c6:	b40e      	push	{r1, r2, r3}
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08b      	sub	sp, #44	; 0x2c
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
	char t_stringArray[21] = {};
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	f107 0310 	add.w	r3, r7, #16
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	605a      	str	r2, [r3, #4]
 80083de:	609a      	str	r2, [r3, #8]
 80083e0:	60da      	str	r2, [r3, #12]
 80083e2:	741a      	strb	r2, [r3, #16]

	va_list t_args;
	va_start(t_args, p_str);
 80083e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80083e8:	60bb      	str	r3, [r7, #8]
	vsprintf(t_stringArray, p_str, t_args);
 80083ea:	f107 030c 	add.w	r3, r7, #12
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fc34 	bl	8008c60 <vsiprintf>
	va_end(t_args);

	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 80083f8:	2300      	movs	r3, #0
 80083fa:	627b      	str	r3, [r7, #36]	; 0x24
 80083fc:	e00b      	b.n	8008416 <LCD_Write+0x50>
		LCD_Send_Data(p_lcd, t_stringArray[i]);
 80083fe:	f107 020c 	add.w	r2, r7, #12
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	4413      	add	r3, r2
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f91a 	bl	8008644 <LCD_Send_Data>
	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	3301      	adds	r3, #1
 8008414:	627b      	str	r3, [r7, #36]	; 0x24
 8008416:	f107 030c 	add.w	r3, r7, #12
 800841a:	4618      	mov	r0, r3
 800841c:	f7f7 fe98 	bl	8000150 <strlen>
 8008420:	4602      	mov	r2, r0
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	429a      	cmp	r2, r3
 8008426:	d905      	bls.n	8008434 <LCD_Write+0x6e>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	4293      	cmp	r3, r2
 8008432:	dbe4      	blt.n	80083fe <LCD_Write+0x38>
	}
}
 8008434:	bf00      	nop
 8008436:	372c      	adds	r7, #44	; 0x2c
 8008438:	46bd      	mov	sp, r7
 800843a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800843e:	b003      	add	sp, #12
 8008440:	4770      	bx	lr

08008442 <LCD_Clear>:

void LCD_Write_Custom_Char(LCD_I2C_HandleTypeDef *p_lcd, char p_location){
	LCD_Send_Data(p_lcd, p_location);
}

void LCD_Clear(LCD_I2C_HandleTypeDef *p_lcd){
 8008442:	b580      	push	{r7, lr}
 8008444:	b082      	sub	sp, #8
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 800844a:	2101      	movs	r1, #1
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f893 	bl	8008578 <LCD_Send_Command>
	DELAY_US_Run(1600);
 8008452:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8008456:	f7ff feb5 	bl	80081c4 <DELAY_US_Run>
	LCD_Set_Cursor(p_lcd, 0, 0);
 800845a:	2200      	movs	r2, #0
 800845c:	2100      	movs	r1, #0
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f804 	bl	800846c <LCD_Set_Cursor>
}
 8008464:	bf00      	nop
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <LCD_Set_Cursor>:

void LCD_Set_Cursor(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_col, uint8_t p_row){
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	70fb      	strb	r3, [r7, #3]
 8008478:	4613      	mov	r3, r2
 800847a:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 800847c:	4b0f      	ldr	r3, [pc, #60]	; (80084bc <LCD_Set_Cursor+0x50>)
 800847e:	60fb      	str	r3, [r7, #12]
	if(p_row > p_lcd->LCD_Rows) p_row = p_lcd->LCD_Rows - 1;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	785b      	ldrb	r3, [r3, #1]
 8008484:	78ba      	ldrb	r2, [r7, #2]
 8008486:	429a      	cmp	r2, r3
 8008488:	d903      	bls.n	8008492 <LCD_Set_Cursor+0x26>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	785b      	ldrb	r3, [r3, #1]
 800848e:	3b01      	subs	r3, #1
 8008490:	70bb      	strb	r3, [r7, #2]
	LCD_Send_Command(p_lcd, LCD_SETDDRAMADDR | (p_col + t_row_Offets[p_row]));
 8008492:	78bb      	ldrb	r3, [r7, #2]
 8008494:	3310      	adds	r3, #16
 8008496:	443b      	add	r3, r7
 8008498:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800849c:	78fb      	ldrb	r3, [r7, #3]
 800849e:	4413      	add	r3, r2
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	b25b      	sxtb	r3, r3
 80084a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80084a8:	b25b      	sxtb	r3, r3
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f862 	bl	8008578 <LCD_Send_Command>
}
 80084b4:	bf00      	nop
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	54144000 	.word	0x54144000

080084c0 <LCD_Create_Char>:

void LCD_Create_Char(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_location, uint8_t p_charMap[]){
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	460b      	mov	r3, r1
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	72fb      	strb	r3, [r7, #11]
	p_location &= 7; // only have 8 locations 0-7.
 80084ce:	7afb      	ldrb	r3, [r7, #11]
 80084d0:	f003 0307 	and.w	r3, r3, #7
 80084d4:	72fb      	strb	r3, [r7, #11]
	p_location <<= 3;
 80084d6:	7afb      	ldrb	r3, [r7, #11]
 80084d8:	00db      	lsls	r3, r3, #3
 80084da:	72fb      	strb	r3, [r7, #11]
	LCD_Send_Command(p_lcd, LCD_SETCGRAMADDR | p_location);
 80084dc:	7afb      	ldrb	r3, [r7, #11]
 80084de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	4619      	mov	r1, r3
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 f846 	bl	8008578 <LCD_Send_Command>
	for(int i = 0; i < 8; i++) LCD_Send_Data(p_lcd, p_charMap[i]);
 80084ec:	2300      	movs	r3, #0
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	e00a      	b.n	8008508 <LCD_Create_Char+0x48>
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	4413      	add	r3, r2
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	4619      	mov	r1, r3
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 f8a1 	bl	8008644 <LCD_Send_Data>
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	3301      	adds	r3, #1
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	2b07      	cmp	r3, #7
 800850c:	ddf1      	ble.n	80084f2 <LCD_Create_Char+0x32>
}
 800850e:	bf00      	nop
 8008510:	bf00      	nop
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <LCD_Cursor_Blink>:
void LCD_No_Backlight(LCD_I2C_HandleTypeDef *p_lcd){
	p_lcd->LCD_Backlight_Value = LCD_NOBACKLIGHT;
	LCD_Send_Command(p_lcd, 0);
}

void LCD_Cursor_Blink(LCD_I2C_HandleTypeDef *p_lcd){
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
	p_lcd->LCD_Display_Option |= LCD_BLINKON;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	791b      	ldrb	r3, [r3, #4]
 8008524:	f043 0301 	orr.w	r3, r3, #1
 8008528:	b2da      	uxtb	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	711a      	strb	r2, [r3, #4]
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	791b      	ldrb	r3, [r3, #4]
 8008532:	f043 0308 	orr.w	r3, r3, #8
 8008536:	b2db      	uxtb	r3, r3
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f81c 	bl	8008578 <LCD_Send_Command>
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <LCD_Cursor_No_Blink>:

void LCD_Cursor_No_Blink(LCD_I2C_HandleTypeDef *p_lcd){
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
	p_lcd->LCD_Display_Option &= ~LCD_BLINKON;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	791b      	ldrb	r3, [r3, #4]
 8008554:	f023 0301 	bic.w	r3, r3, #1
 8008558:	b2da      	uxtb	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	711a      	strb	r2, [r3, #4]
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	791b      	ldrb	r3, [r3, #4]
 8008562:	f043 0308 	orr.w	r3, r3, #8
 8008566:	b2db      	uxtb	r3, r3
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f804 	bl	8008578 <LCD_Send_Command>
}
 8008570:	bf00      	nop
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <LCD_Send_Command>:
void LCD_Display_Off(LCD_I2C_HandleTypeDef *p_lcd){
	p_lcd->LCD_Display_Option &= ~LCD_DISPLAYON;
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
}

void LCD_Send_Command(LCD_I2C_HandleTypeDef *p_lcd, char cmd){
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	70fb      	strb	r3, [r7, #3]
#ifdef LCD_4BIT_CONTROL
	GPIOA->ODR &= ~0x0F00;
 8008584:	4b2d      	ldr	r3, [pc, #180]	; (800863c <LCD_Send_Command+0xc4>)
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	4a2c      	ldr	r2, [pc, #176]	; (800863c <LCD_Send_Command+0xc4>)
 800858a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800858e:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR |= ((uint16_t)(cmd & 0xF0) << 4);
 8008590:	4b2a      	ldr	r3, [pc, #168]	; (800863c <LCD_Send_Command+0xc4>)
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800859c:	4927      	ldr	r1, [pc, #156]	; (800863c <LCD_Send_Command+0xc4>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	60cb      	str	r3, [r1, #12]
	GPIOB->ODR &= ~0xF000;
 80085a2:	4b27      	ldr	r3, [pc, #156]	; (8008640 <LCD_Send_Command+0xc8>)
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	4a26      	ldr	r2, [pc, #152]	; (8008640 <LCD_Send_Command+0xc8>)
 80085a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085ac:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= (SENDING_CMD_MASK | p_lcd->LCD_Backlight_Value) << 12;
 80085ae:	4b24      	ldr	r3, [pc, #144]	; (8008640 <LCD_Send_Command+0xc8>)
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	78d2      	ldrb	r2, [r2, #3]
 80085b6:	f042 0204 	orr.w	r2, r2, #4
 80085ba:	b2d2      	uxtb	r2, r2
 80085bc:	0312      	lsls	r2, r2, #12
 80085be:	4611      	mov	r1, r2
 80085c0:	4a1f      	ldr	r2, [pc, #124]	; (8008640 <LCD_Send_Command+0xc8>)
 80085c2:	430b      	orrs	r3, r1
 80085c4:	60d3      	str	r3, [r2, #12]
	DELAY_US_Run(40);
 80085c6:	2028      	movs	r0, #40	; 0x28
 80085c8:	f7ff fdfc 	bl	80081c4 <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 80085cc:	4b1c      	ldr	r3, [pc, #112]	; (8008640 <LCD_Send_Command+0xc8>)
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	4a1b      	ldr	r2, [pc, #108]	; (8008640 <LCD_Send_Command+0xc8>)
 80085d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085d6:	60d3      	str	r3, [r2, #12]
	DELAY_US_Run(40);
 80085d8:	2028      	movs	r0, #40	; 0x28
 80085da:	f7ff fdf3 	bl	80081c4 <DELAY_US_Run>

	GPIOA->ODR &= ~0x0F00;
 80085de:	4b17      	ldr	r3, [pc, #92]	; (800863c <LCD_Send_Command+0xc4>)
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	4a16      	ldr	r2, [pc, #88]	; (800863c <LCD_Send_Command+0xc4>)
 80085e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80085e8:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR |= ((uint16_t)(cmd & 0x0F) << 8);
 80085ea:	4b14      	ldr	r3, [pc, #80]	; (800863c <LCD_Send_Command+0xc4>)
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	78fb      	ldrb	r3, [r7, #3]
 80085f0:	021b      	lsls	r3, r3, #8
 80085f2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80085f6:	4911      	ldr	r1, [pc, #68]	; (800863c <LCD_Send_Command+0xc4>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60cb      	str	r3, [r1, #12]
	GPIOB->ODR &= ~0xF000;
 80085fc:	4b10      	ldr	r3, [pc, #64]	; (8008640 <LCD_Send_Command+0xc8>)
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	4a0f      	ldr	r2, [pc, #60]	; (8008640 <LCD_Send_Command+0xc8>)
 8008602:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008606:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= (SENDING_CMD_MASK | p_lcd->LCD_Backlight_Value) << 12;
 8008608:	4b0d      	ldr	r3, [pc, #52]	; (8008640 <LCD_Send_Command+0xc8>)
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	78d2      	ldrb	r2, [r2, #3]
 8008610:	f042 0204 	orr.w	r2, r2, #4
 8008614:	b2d2      	uxtb	r2, r2
 8008616:	0312      	lsls	r2, r2, #12
 8008618:	4611      	mov	r1, r2
 800861a:	4a09      	ldr	r2, [pc, #36]	; (8008640 <LCD_Send_Command+0xc8>)
 800861c:	430b      	orrs	r3, r1
 800861e:	60d3      	str	r3, [r2, #12]
	DELAY_US_Run(40);
 8008620:	2028      	movs	r0, #40	; 0x28
 8008622:	f7ff fdcf 	bl	80081c4 <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 8008626:	4b06      	ldr	r3, [pc, #24]	; (8008640 <LCD_Send_Command+0xc8>)
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	4a05      	ldr	r2, [pc, #20]	; (8008640 <LCD_Send_Command+0xc8>)
 800862c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008630:	60d3      	str	r3, [r2, #12]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En;
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value;

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
#endif
}
 8008632:	bf00      	nop
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	40010800 	.word	0x40010800
 8008640:	40010c00 	.word	0x40010c00

08008644 <LCD_Send_Data>:

void LCD_Send_Data(LCD_I2C_HandleTypeDef *p_lcd, char data){
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	460b      	mov	r3, r1
 800864e:	70fb      	strb	r3, [r7, #3]
#ifdef LCD_4BIT_CONTROL
	GPIOA->ODR &= ~0x0F00;
 8008650:	4b2d      	ldr	r3, [pc, #180]	; (8008708 <LCD_Send_Data+0xc4>)
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	4a2c      	ldr	r2, [pc, #176]	; (8008708 <LCD_Send_Data+0xc4>)
 8008656:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800865a:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR |= ((uint16_t)(data & 0xF0) << 4);
 800865c:	4b2a      	ldr	r3, [pc, #168]	; (8008708 <LCD_Send_Data+0xc4>)
 800865e:	68da      	ldr	r2, [r3, #12]
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008668:	4927      	ldr	r1, [pc, #156]	; (8008708 <LCD_Send_Data+0xc4>)
 800866a:	4313      	orrs	r3, r2
 800866c:	60cb      	str	r3, [r1, #12]
	GPIOB->ODR &= ~0xF000;
 800866e:	4b27      	ldr	r3, [pc, #156]	; (800870c <LCD_Send_Data+0xc8>)
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	4a26      	ldr	r2, [pc, #152]	; (800870c <LCD_Send_Data+0xc8>)
 8008674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008678:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= (SENDING_DATA_MASK | p_lcd->LCD_Backlight_Value) << 12;
 800867a:	4b24      	ldr	r3, [pc, #144]	; (800870c <LCD_Send_Data+0xc8>)
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	78d2      	ldrb	r2, [r2, #3]
 8008682:	f042 0205 	orr.w	r2, r2, #5
 8008686:	b2d2      	uxtb	r2, r2
 8008688:	0312      	lsls	r2, r2, #12
 800868a:	4611      	mov	r1, r2
 800868c:	4a1f      	ldr	r2, [pc, #124]	; (800870c <LCD_Send_Data+0xc8>)
 800868e:	430b      	orrs	r3, r1
 8008690:	60d3      	str	r3, [r2, #12]
	DELAY_US_Run(40);
 8008692:	2028      	movs	r0, #40	; 0x28
 8008694:	f7ff fd96 	bl	80081c4 <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 8008698:	4b1c      	ldr	r3, [pc, #112]	; (800870c <LCD_Send_Data+0xc8>)
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	4a1b      	ldr	r2, [pc, #108]	; (800870c <LCD_Send_Data+0xc8>)
 800869e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086a2:	60d3      	str	r3, [r2, #12]
	DELAY_US_Run(40);
 80086a4:	2028      	movs	r0, #40	; 0x28
 80086a6:	f7ff fd8d 	bl	80081c4 <DELAY_US_Run>

	GPIOA->ODR &= ~0x0F00;
 80086aa:	4b17      	ldr	r3, [pc, #92]	; (8008708 <LCD_Send_Data+0xc4>)
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	4a16      	ldr	r2, [pc, #88]	; (8008708 <LCD_Send_Data+0xc4>)
 80086b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80086b4:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR |= ((uint16_t)(data & 0x0F) << 8);
 80086b6:	4b14      	ldr	r3, [pc, #80]	; (8008708 <LCD_Send_Data+0xc4>)
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	78fb      	ldrb	r3, [r7, #3]
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80086c2:	4911      	ldr	r1, [pc, #68]	; (8008708 <LCD_Send_Data+0xc4>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	60cb      	str	r3, [r1, #12]
	GPIOB->ODR &= ~0xF000;
 80086c8:	4b10      	ldr	r3, [pc, #64]	; (800870c <LCD_Send_Data+0xc8>)
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	4a0f      	ldr	r2, [pc, #60]	; (800870c <LCD_Send_Data+0xc8>)
 80086ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086d2:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= (SENDING_DATA_MASK | p_lcd->LCD_Backlight_Value) << 12;
 80086d4:	4b0d      	ldr	r3, [pc, #52]	; (800870c <LCD_Send_Data+0xc8>)
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	78d2      	ldrb	r2, [r2, #3]
 80086dc:	f042 0205 	orr.w	r2, r2, #5
 80086e0:	b2d2      	uxtb	r2, r2
 80086e2:	0312      	lsls	r2, r2, #12
 80086e4:	4611      	mov	r1, r2
 80086e6:	4a09      	ldr	r2, [pc, #36]	; (800870c <LCD_Send_Data+0xc8>)
 80086e8:	430b      	orrs	r3, r1
 80086ea:	60d3      	str	r3, [r2, #12]
	DELAY_US_Run(40);
 80086ec:	2028      	movs	r0, #40	; 0x28
 80086ee:	f7ff fd69 	bl	80081c4 <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 80086f2:	4b06      	ldr	r3, [pc, #24]	; (800870c <LCD_Send_Data+0xc8>)
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	4a05      	ldr	r2, [pc, #20]	; (800870c <LCD_Send_Data+0xc8>)
 80086f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086fc:	60d3      	str	r3, [r2, #12]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En | Rs;
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value | Rs;

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
#endif
}
 80086fe:	bf00      	nop
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	40010800 	.word	0x40010800
 800870c:	40010c00 	.word	0x40010c00

08008710 <BUTTON_Handle>:
button_callback_function_t __BUTTON_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Releasing_Callback = NULL;
button_callback_function_t __BUTTON_Short_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Long_Pressing_Callback = NULL;

void BUTTON_Handle(BUTTON_HandleTypedef *ButtonX){
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	uint8_t state = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	691a      	ldr	r2, [r3, #16]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	8a9b      	ldrh	r3, [r3, #20]
 8008720:	4619      	mov	r1, r3
 8008722:	4610      	mov	r0, r2
 8008724:	f7fc f81c 	bl	8004760 <HAL_GPIO_ReadPin>
 8008728:	4603      	mov	r3, r0
 800872a:	73fb      	strb	r3, [r7, #15]
	if(state != ButtonX->BTN_Filter){
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	789b      	ldrb	r3, [r3, #2]
 8008730:	7bfa      	ldrb	r2, [r7, #15]
 8008732:	429a      	cmp	r2, r3
 8008734:	d00a      	beq.n	800874c <BUTTON_Handle+0x3c>
		ButtonX->BTN_Filter = state;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	7bfa      	ldrb	r2, [r7, #15]
 800873a:	709a      	strb	r2, [r3, #2]
		ButtonX->is_debouncing = 1;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	70da      	strb	r2, [r3, #3]
		ButtonX->time_debounce = HAL_GetTick();
 8008742:	f7fa fe9b 	bl	800347c <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	609a      	str	r2, [r3, #8]
	}

	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->time_debounce >= 15)){
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	78db      	ldrb	r3, [r3, #3]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00e      	beq.n	8008772 <BUTTON_Handle+0x62>
 8008754:	f7fa fe92 	bl	800347c <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	2b0e      	cmp	r3, #14
 8008762:	d906      	bls.n	8008772 <BUTTON_Handle+0x62>
		ButtonX->BTN_Current = ButtonX->BTN_Filter;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	789a      	ldrb	r2, [r3, #2]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	701a      	strb	r2, [r3, #0]
		ButtonX->is_debouncing = 0;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	70da      	strb	r2, [r3, #3]
	}

	if(ButtonX->BTN_Current != ButtonX->BTN_Last){
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	781a      	ldrb	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	785b      	ldrb	r3, [r3, #1]
 800877a:	429a      	cmp	r2, r3
 800877c:	d034      	beq.n	80087e8 <BUTTON_Handle+0xd8>
		if(ButtonX->BTN_Current == 0){
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d110      	bne.n	80087a8 <BUTTON_Handle+0x98>
			if(__BUTTON_Pressing_Callback != NULL){
 8008786:	4b26      	ldr	r3, [pc, #152]	; (8008820 <BUTTON_Handle+0x110>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <BUTTON_Handle+0x86>
				__BUTTON_Pressing_Callback(ButtonX);
 800878e:	4b24      	ldr	r3, [pc, #144]	; (8008820 <BUTTON_Handle+0x110>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	4798      	blx	r3
			}
			ButtonX->is_press = 1;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	711a      	strb	r2, [r3, #4]
			ButtonX->time_start_press = HAL_GetTick();
 800879c:	f7fa fe6e 	bl	800347c <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	60da      	str	r2, [r3, #12]
 80087a6:	e01b      	b.n	80087e0 <BUTTON_Handle+0xd0>
		}
		else{
			ButtonX->is_press = 0;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	711a      	strb	r2, [r3, #4]
			if(HAL_GetTick() - ButtonX->time_start_press <= 1000){
 80087ae:	f7fa fe65 	bl	800347c <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087be:	d807      	bhi.n	80087d0 <BUTTON_Handle+0xc0>
				if(__BUTTON_Short_Pressing_Callback != NULL){
 80087c0:	4b18      	ldr	r3, [pc, #96]	; (8008824 <BUTTON_Handle+0x114>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d003      	beq.n	80087d0 <BUTTON_Handle+0xc0>
					__BUTTON_Short_Pressing_Callback(ButtonX);
 80087c8:	4b16      	ldr	r3, [pc, #88]	; (8008824 <BUTTON_Handle+0x114>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	4798      	blx	r3
				}
			}
			if(__BUTTON_Releasing_Callback != NULL){
 80087d0:	4b15      	ldr	r3, [pc, #84]	; (8008828 <BUTTON_Handle+0x118>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d003      	beq.n	80087e0 <BUTTON_Handle+0xd0>
				__BUTTON_Releasing_Callback(ButtonX);
 80087d8:	4b13      	ldr	r3, [pc, #76]	; (8008828 <BUTTON_Handle+0x118>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	4798      	blx	r3
			}
		}
		ButtonX->BTN_Last = ButtonX->BTN_Current;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	781a      	ldrb	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	705a      	strb	r2, [r3, #1]
	}

	if(ButtonX->is_press && (HAL_GetTick() - ButtonX->time_start_press >= TIME_FOR_LONG_PRESSING)){
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	791b      	ldrb	r3, [r3, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d013      	beq.n	8008818 <BUTTON_Handle+0x108>
 80087f0:	f7fa fe44 	bl	800347c <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008800:	d30a      	bcc.n	8008818 <BUTTON_Handle+0x108>
		if(__BUTTON_Long_Pressing_Callback != NULL){
 8008802:	4b0a      	ldr	r3, [pc, #40]	; (800882c <BUTTON_Handle+0x11c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <BUTTON_Handle+0x102>
			__BUTTON_Long_Pressing_Callback(ButtonX);
 800880a:	4b08      	ldr	r3, [pc, #32]	; (800882c <BUTTON_Handle+0x11c>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	4798      	blx	r3
		}
		ButtonX->is_press = 0;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	711a      	strb	r2, [r3, #4]
	}
}
 8008818:	bf00      	nop
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	200003bc 	.word	0x200003bc
 8008824:	200003c4 	.word	0x200003c4
 8008828:	200003c0 	.word	0x200003c0
 800882c:	200003c8 	.word	0x200003c8

08008830 <BUTTON_Init>:

void BUTTON_Init(BUTTON_HandleTypedef *ButtonX, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	4613      	mov	r3, r2
 800883c:	80fb      	strh	r3, [r7, #6]
	ButtonX->GPIOx = GPIOx;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	611a      	str	r2, [r3, #16]
	ButtonX->GPIO_Pin = GPIO_Pin;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	88fa      	ldrh	r2, [r7, #6]
 8008848:	829a      	strh	r2, [r3, #20]
	ButtonX->BTN_Current = 1;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2201      	movs	r2, #1
 800884e:	701a      	strb	r2, [r3, #0]
	ButtonX->BTN_Last = 1;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	705a      	strb	r2, [r3, #1]
	ButtonX->BTN_Filter = 1;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2201      	movs	r2, #1
 800885a:	709a      	strb	r2, [r3, #2]
	ButtonX->is_debouncing = 0;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	70da      	strb	r2, [r3, #3]
	ButtonX->is_press = 0;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	711a      	strb	r2, [r3, #4]
}
 8008868:	bf00      	nop
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	bc80      	pop	{r7}
 8008870:	4770      	bx	lr
	...

08008874 <BUTTON_Set_Callback_Function>:

void BUTTON_Set_Callback_Function(button_callback_function_t p_pressing_callback_function,
								button_callback_function_t p_releasing_callback_function,
								button_callback_function_t p_short_pressing_callback_function,
								button_callback_function_t p_long_pressing_callback_function){
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	603b      	str	r3, [r7, #0]
	__BUTTON_Pressing_Callback = p_pressing_callback_function;
 8008882:	4a08      	ldr	r2, [pc, #32]	; (80088a4 <BUTTON_Set_Callback_Function+0x30>)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6013      	str	r3, [r2, #0]
	__BUTTON_Releasing_Callback = p_releasing_callback_function;
 8008888:	4a07      	ldr	r2, [pc, #28]	; (80088a8 <BUTTON_Set_Callback_Function+0x34>)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	6013      	str	r3, [r2, #0]
	__BUTTON_Short_Pressing_Callback = p_short_pressing_callback_function;
 800888e:	4a07      	ldr	r2, [pc, #28]	; (80088ac <BUTTON_Set_Callback_Function+0x38>)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6013      	str	r3, [r2, #0]
	__BUTTON_Long_Pressing_Callback = p_long_pressing_callback_function;
 8008894:	4a06      	ldr	r2, [pc, #24]	; (80088b0 <BUTTON_Set_Callback_Function+0x3c>)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	6013      	str	r3, [r2, #0]
}
 800889a:	bf00      	nop
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	bc80      	pop	{r7}
 80088a2:	4770      	bx	lr
 80088a4:	200003bc 	.word	0x200003bc
 80088a8:	200003c0 	.word	0x200003c0
 80088ac:	200003c4 	.word	0x200003c4
 80088b0:	200003c8 	.word	0x200003c8

080088b4 <FLASH_Erase>:
#include "flash.h"

void FLASH_Erase(uint32_t p_page){
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b088      	sub	sp, #32
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80088bc:	f7fb fc3c 	bl	8004138 <HAL_FLASH_Unlock>
	eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
#endif

#ifdef __STM32F1xx_HAL_H
	eraseInit.Banks = 1;
 80088c0:	2301      	movs	r3, #1
 80088c2:	613b      	str	r3, [r7, #16]
	eraseInit.NbPages = 1;
 80088c4:	2301      	movs	r3, #1
 80088c6:	61bb      	str	r3, [r7, #24]
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80088ce:	029b      	lsls	r3, r3, #10
 80088d0:	617b      	str	r3, [r7, #20]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80088d2:	2300      	movs	r3, #0
 80088d4:	60fb      	str	r3, [r7, #12]
	eraseInit.NbPages = 1;
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
#endif

	HAL_FLASHEx_Erase(&eraseInit, &t_PageError);
 80088d6:	f107 021c 	add.w	r2, r7, #28
 80088da:	f107 030c 	add.w	r3, r7, #12
 80088de:	4611      	mov	r1, r2
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fb fd11 	bl	8004308 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80088e6:	f7fb fc4d 	bl	8004184 <HAL_FLASH_Lock>
//	while(FLASH->CR & FLASH_SR_BSY);
//	FLASH->CR &= ~FLASH_CR_PER;
//	FLASH->CR &= ~FLASH_CR_STRT;
//
//	FLASH->CR |= FLASH_CR_LOCK;
}
 80088ea:	bf00      	nop
 80088ec:	3720      	adds	r7, #32
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <FLASH_Write>:

void FLASH_Write(uint32_t p_page, uint8_t *p_data, uint16_t p_len){
 80088f2:	b5b0      	push	{r4, r5, r7, lr}
 80088f4:	b086      	sub	sp, #24
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	4613      	mov	r3, r2
 80088fe:	80fb      	strh	r3, [r7, #6]
	FLASH_Erase(63);
 8008900:	203f      	movs	r0, #63	; 0x3f
 8008902:	f7ff ffd7 	bl	80088b4 <FLASH_Erase>
#ifdef __STM32F4xx_HAL_H
	uint32_t t_add = SECTOR_7_ADD;
#endif
#ifdef __STM32F1xx_HAL_H
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800890c:	029b      	lsls	r3, r3, #10
 800890e:	613b      	str	r3, [r7, #16]
#endif
#ifdef __STM32F0xx_HAL_H
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
#endif
	HAL_FLASH_Unlock();
 8008910:	f7fb fc12 	bl	8004138 <HAL_FLASH_Unlock>
	for(int i = 0; i < p_len; i += 2){
 8008914:	2300      	movs	r3, #0
 8008916:	617b      	str	r3, [r7, #20]
 8008918:	e021      	b.n	800895e <FLASH_Write+0x6c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, t_add + i, p_data[i] | ((uint16_t)((i+1 >= p_len) ? 0xFF : p_data[i+1]) << 8));
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	18d1      	adds	r1, r2, r3
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	4413      	add	r3, r2
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	4618      	mov	r0, r3
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	88fb      	ldrh	r3, [r7, #6]
 8008930:	429a      	cmp	r2, r3
 8008932:	da06      	bge.n	8008942 <FLASH_Write+0x50>
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	3301      	adds	r3, #1
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	4413      	add	r3, r2
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	021b      	lsls	r3, r3, #8
 8008940:	e001      	b.n	8008946 <FLASH_Write+0x54>
 8008942:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8008946:	4303      	orrs	r3, r0
 8008948:	17da      	asrs	r2, r3, #31
 800894a:	461c      	mov	r4, r3
 800894c:	4615      	mov	r5, r2
 800894e:	4622      	mov	r2, r4
 8008950:	462b      	mov	r3, r5
 8008952:	2001      	movs	r0, #1
 8008954:	f7fb fb80 	bl	8004058 <HAL_FLASH_Program>
	for(int i = 0; i < p_len; i += 2){
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	3302      	adds	r3, #2
 800895c:	617b      	str	r3, [r7, #20]
 800895e:	88fb      	ldrh	r3, [r7, #6]
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	429a      	cmp	r2, r3
 8008964:	dbd9      	blt.n	800891a <FLASH_Write+0x28>
	}
	HAL_FLASH_Lock();
 8008966:	f7fb fc0d 	bl	8004184 <HAL_FLASH_Lock>
//	}
//	FLASH->CR |= FLASH_CR_PG;
//	for(int i = 0; i < p_len; i += 2){
//		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, t_add + i, p_data[i] | (uint16_t)((i+1 >= p_len) ? 0xFF : p_data[i+1]) << 8);
//	}
}
 800896a:	bf00      	nop
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bdb0      	pop	{r4, r5, r7, pc}

08008972 <FLASH_Read>:

void FLASH_Read(uint32_t add, uint8_t *p_data, uint16_t p_len){
 8008972:	b480      	push	{r7}
 8008974:	b087      	sub	sp, #28
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	4613      	mov	r3, r2
 800897e:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < p_len; i += 2){
 8008980:	2300      	movs	r3, #0
 8008982:	617b      	str	r3, [r7, #20]
 8008984:	e016      	b.n	80089b4 <FLASH_Read+0x42>
		uint16_t t_data = *(volatile uint16_t *)(add + i);
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4413      	add	r3, r2
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	827b      	strh	r3, [r7, #18]
		p_data[i] = t_data;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	4413      	add	r3, r2
 8008996:	8a7a      	ldrh	r2, [r7, #18]
 8008998:	b2d2      	uxtb	r2, r2
 800899a:	701a      	strb	r2, [r3, #0]
		p_data[i+1] = t_data >> 8;
 800899c:	8a7b      	ldrh	r3, [r7, #18]
 800899e:	0a1b      	lsrs	r3, r3, #8
 80089a0:	b299      	uxth	r1, r3
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	3301      	adds	r3, #1
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	4413      	add	r3, r2
 80089aa:	b2ca      	uxtb	r2, r1
 80089ac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < p_len; i += 2){
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	3302      	adds	r3, #2
 80089b2:	617b      	str	r3, [r7, #20]
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	dbe4      	blt.n	8008986 <FLASH_Read+0x14>
	}
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bc80      	pop	{r7}
 80089c6:	4770      	bx	lr

080089c8 <__errno>:
 80089c8:	4b01      	ldr	r3, [pc, #4]	; (80089d0 <__errno+0x8>)
 80089ca:	6818      	ldr	r0, [r3, #0]
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	20000098 	.word	0x20000098

080089d4 <__libc_init_array>:
 80089d4:	b570      	push	{r4, r5, r6, lr}
 80089d6:	2600      	movs	r6, #0
 80089d8:	4d0c      	ldr	r5, [pc, #48]	; (8008a0c <__libc_init_array+0x38>)
 80089da:	4c0d      	ldr	r4, [pc, #52]	; (8008a10 <__libc_init_array+0x3c>)
 80089dc:	1b64      	subs	r4, r4, r5
 80089de:	10a4      	asrs	r4, r4, #2
 80089e0:	42a6      	cmp	r6, r4
 80089e2:	d109      	bne.n	80089f8 <__libc_init_array+0x24>
 80089e4:	f000 fcb4 	bl	8009350 <_init>
 80089e8:	2600      	movs	r6, #0
 80089ea:	4d0a      	ldr	r5, [pc, #40]	; (8008a14 <__libc_init_array+0x40>)
 80089ec:	4c0a      	ldr	r4, [pc, #40]	; (8008a18 <__libc_init_array+0x44>)
 80089ee:	1b64      	subs	r4, r4, r5
 80089f0:	10a4      	asrs	r4, r4, #2
 80089f2:	42a6      	cmp	r6, r4
 80089f4:	d105      	bne.n	8008a02 <__libc_init_array+0x2e>
 80089f6:	bd70      	pop	{r4, r5, r6, pc}
 80089f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089fc:	4798      	blx	r3
 80089fe:	3601      	adds	r6, #1
 8008a00:	e7ee      	b.n	80089e0 <__libc_init_array+0xc>
 8008a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a06:	4798      	blx	r3
 8008a08:	3601      	adds	r6, #1
 8008a0a:	e7f2      	b.n	80089f2 <__libc_init_array+0x1e>
 8008a0c:	080095ac 	.word	0x080095ac
 8008a10:	080095ac 	.word	0x080095ac
 8008a14:	080095ac 	.word	0x080095ac
 8008a18:	080095b0 	.word	0x080095b0

08008a1c <malloc>:
 8008a1c:	4b02      	ldr	r3, [pc, #8]	; (8008a28 <malloc+0xc>)
 8008a1e:	4601      	mov	r1, r0
 8008a20:	6818      	ldr	r0, [r3, #0]
 8008a22:	f000 b87b 	b.w	8008b1c <_malloc_r>
 8008a26:	bf00      	nop
 8008a28:	20000098 	.word	0x20000098

08008a2c <free>:
 8008a2c:	4b02      	ldr	r3, [pc, #8]	; (8008a38 <free+0xc>)
 8008a2e:	4601      	mov	r1, r0
 8008a30:	6818      	ldr	r0, [r3, #0]
 8008a32:	f000 b80b 	b.w	8008a4c <_free_r>
 8008a36:	bf00      	nop
 8008a38:	20000098 	.word	0x20000098

08008a3c <memset>:
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	4402      	add	r2, r0
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d100      	bne.n	8008a46 <memset+0xa>
 8008a44:	4770      	bx	lr
 8008a46:	f803 1b01 	strb.w	r1, [r3], #1
 8008a4a:	e7f9      	b.n	8008a40 <memset+0x4>

08008a4c <_free_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4605      	mov	r5, r0
 8008a50:	2900      	cmp	r1, #0
 8008a52:	d040      	beq.n	8008ad6 <_free_r+0x8a>
 8008a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a58:	1f0c      	subs	r4, r1, #4
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bfb8      	it	lt
 8008a5e:	18e4      	addlt	r4, r4, r3
 8008a60:	f000 f908 	bl	8008c74 <__malloc_lock>
 8008a64:	4a1c      	ldr	r2, [pc, #112]	; (8008ad8 <_free_r+0x8c>)
 8008a66:	6813      	ldr	r3, [r2, #0]
 8008a68:	b933      	cbnz	r3, 8008a78 <_free_r+0x2c>
 8008a6a:	6063      	str	r3, [r4, #4]
 8008a6c:	6014      	str	r4, [r2, #0]
 8008a6e:	4628      	mov	r0, r5
 8008a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a74:	f000 b904 	b.w	8008c80 <__malloc_unlock>
 8008a78:	42a3      	cmp	r3, r4
 8008a7a:	d908      	bls.n	8008a8e <_free_r+0x42>
 8008a7c:	6820      	ldr	r0, [r4, #0]
 8008a7e:	1821      	adds	r1, r4, r0
 8008a80:	428b      	cmp	r3, r1
 8008a82:	bf01      	itttt	eq
 8008a84:	6819      	ldreq	r1, [r3, #0]
 8008a86:	685b      	ldreq	r3, [r3, #4]
 8008a88:	1809      	addeq	r1, r1, r0
 8008a8a:	6021      	streq	r1, [r4, #0]
 8008a8c:	e7ed      	b.n	8008a6a <_free_r+0x1e>
 8008a8e:	461a      	mov	r2, r3
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	b10b      	cbz	r3, 8008a98 <_free_r+0x4c>
 8008a94:	42a3      	cmp	r3, r4
 8008a96:	d9fa      	bls.n	8008a8e <_free_r+0x42>
 8008a98:	6811      	ldr	r1, [r2, #0]
 8008a9a:	1850      	adds	r0, r2, r1
 8008a9c:	42a0      	cmp	r0, r4
 8008a9e:	d10b      	bne.n	8008ab8 <_free_r+0x6c>
 8008aa0:	6820      	ldr	r0, [r4, #0]
 8008aa2:	4401      	add	r1, r0
 8008aa4:	1850      	adds	r0, r2, r1
 8008aa6:	4283      	cmp	r3, r0
 8008aa8:	6011      	str	r1, [r2, #0]
 8008aaa:	d1e0      	bne.n	8008a6e <_free_r+0x22>
 8008aac:	6818      	ldr	r0, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	4401      	add	r1, r0
 8008ab2:	6011      	str	r1, [r2, #0]
 8008ab4:	6053      	str	r3, [r2, #4]
 8008ab6:	e7da      	b.n	8008a6e <_free_r+0x22>
 8008ab8:	d902      	bls.n	8008ac0 <_free_r+0x74>
 8008aba:	230c      	movs	r3, #12
 8008abc:	602b      	str	r3, [r5, #0]
 8008abe:	e7d6      	b.n	8008a6e <_free_r+0x22>
 8008ac0:	6820      	ldr	r0, [r4, #0]
 8008ac2:	1821      	adds	r1, r4, r0
 8008ac4:	428b      	cmp	r3, r1
 8008ac6:	bf01      	itttt	eq
 8008ac8:	6819      	ldreq	r1, [r3, #0]
 8008aca:	685b      	ldreq	r3, [r3, #4]
 8008acc:	1809      	addeq	r1, r1, r0
 8008ace:	6021      	streq	r1, [r4, #0]
 8008ad0:	6063      	str	r3, [r4, #4]
 8008ad2:	6054      	str	r4, [r2, #4]
 8008ad4:	e7cb      	b.n	8008a6e <_free_r+0x22>
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	200003cc 	.word	0x200003cc

08008adc <sbrk_aligned>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	4e0e      	ldr	r6, [pc, #56]	; (8008b18 <sbrk_aligned+0x3c>)
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	6831      	ldr	r1, [r6, #0]
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	b911      	cbnz	r1, 8008aee <sbrk_aligned+0x12>
 8008ae8:	f000 f88c 	bl	8008c04 <_sbrk_r>
 8008aec:	6030      	str	r0, [r6, #0]
 8008aee:	4621      	mov	r1, r4
 8008af0:	4628      	mov	r0, r5
 8008af2:	f000 f887 	bl	8008c04 <_sbrk_r>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	d00a      	beq.n	8008b10 <sbrk_aligned+0x34>
 8008afa:	1cc4      	adds	r4, r0, #3
 8008afc:	f024 0403 	bic.w	r4, r4, #3
 8008b00:	42a0      	cmp	r0, r4
 8008b02:	d007      	beq.n	8008b14 <sbrk_aligned+0x38>
 8008b04:	1a21      	subs	r1, r4, r0
 8008b06:	4628      	mov	r0, r5
 8008b08:	f000 f87c 	bl	8008c04 <_sbrk_r>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d101      	bne.n	8008b14 <sbrk_aligned+0x38>
 8008b10:	f04f 34ff 	mov.w	r4, #4294967295
 8008b14:	4620      	mov	r0, r4
 8008b16:	bd70      	pop	{r4, r5, r6, pc}
 8008b18:	200003d0 	.word	0x200003d0

08008b1c <_malloc_r>:
 8008b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b20:	1ccd      	adds	r5, r1, #3
 8008b22:	f025 0503 	bic.w	r5, r5, #3
 8008b26:	3508      	adds	r5, #8
 8008b28:	2d0c      	cmp	r5, #12
 8008b2a:	bf38      	it	cc
 8008b2c:	250c      	movcc	r5, #12
 8008b2e:	2d00      	cmp	r5, #0
 8008b30:	4607      	mov	r7, r0
 8008b32:	db01      	blt.n	8008b38 <_malloc_r+0x1c>
 8008b34:	42a9      	cmp	r1, r5
 8008b36:	d905      	bls.n	8008b44 <_malloc_r+0x28>
 8008b38:	230c      	movs	r3, #12
 8008b3a:	2600      	movs	r6, #0
 8008b3c:	603b      	str	r3, [r7, #0]
 8008b3e:	4630      	mov	r0, r6
 8008b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b44:	4e2e      	ldr	r6, [pc, #184]	; (8008c00 <_malloc_r+0xe4>)
 8008b46:	f000 f895 	bl	8008c74 <__malloc_lock>
 8008b4a:	6833      	ldr	r3, [r6, #0]
 8008b4c:	461c      	mov	r4, r3
 8008b4e:	bb34      	cbnz	r4, 8008b9e <_malloc_r+0x82>
 8008b50:	4629      	mov	r1, r5
 8008b52:	4638      	mov	r0, r7
 8008b54:	f7ff ffc2 	bl	8008adc <sbrk_aligned>
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	d14d      	bne.n	8008bfa <_malloc_r+0xde>
 8008b5e:	6834      	ldr	r4, [r6, #0]
 8008b60:	4626      	mov	r6, r4
 8008b62:	2e00      	cmp	r6, #0
 8008b64:	d140      	bne.n	8008be8 <_malloc_r+0xcc>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4638      	mov	r0, r7
 8008b6c:	eb04 0803 	add.w	r8, r4, r3
 8008b70:	f000 f848 	bl	8008c04 <_sbrk_r>
 8008b74:	4580      	cmp	r8, r0
 8008b76:	d13a      	bne.n	8008bee <_malloc_r+0xd2>
 8008b78:	6821      	ldr	r1, [r4, #0]
 8008b7a:	3503      	adds	r5, #3
 8008b7c:	1a6d      	subs	r5, r5, r1
 8008b7e:	f025 0503 	bic.w	r5, r5, #3
 8008b82:	3508      	adds	r5, #8
 8008b84:	2d0c      	cmp	r5, #12
 8008b86:	bf38      	it	cc
 8008b88:	250c      	movcc	r5, #12
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	f7ff ffa5 	bl	8008adc <sbrk_aligned>
 8008b92:	3001      	adds	r0, #1
 8008b94:	d02b      	beq.n	8008bee <_malloc_r+0xd2>
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	442b      	add	r3, r5
 8008b9a:	6023      	str	r3, [r4, #0]
 8008b9c:	e00e      	b.n	8008bbc <_malloc_r+0xa0>
 8008b9e:	6822      	ldr	r2, [r4, #0]
 8008ba0:	1b52      	subs	r2, r2, r5
 8008ba2:	d41e      	bmi.n	8008be2 <_malloc_r+0xc6>
 8008ba4:	2a0b      	cmp	r2, #11
 8008ba6:	d916      	bls.n	8008bd6 <_malloc_r+0xba>
 8008ba8:	1961      	adds	r1, r4, r5
 8008baa:	42a3      	cmp	r3, r4
 8008bac:	6025      	str	r5, [r4, #0]
 8008bae:	bf18      	it	ne
 8008bb0:	6059      	strne	r1, [r3, #4]
 8008bb2:	6863      	ldr	r3, [r4, #4]
 8008bb4:	bf08      	it	eq
 8008bb6:	6031      	streq	r1, [r6, #0]
 8008bb8:	5162      	str	r2, [r4, r5]
 8008bba:	604b      	str	r3, [r1, #4]
 8008bbc:	4638      	mov	r0, r7
 8008bbe:	f104 060b 	add.w	r6, r4, #11
 8008bc2:	f000 f85d 	bl	8008c80 <__malloc_unlock>
 8008bc6:	f026 0607 	bic.w	r6, r6, #7
 8008bca:	1d23      	adds	r3, r4, #4
 8008bcc:	1af2      	subs	r2, r6, r3
 8008bce:	d0b6      	beq.n	8008b3e <_malloc_r+0x22>
 8008bd0:	1b9b      	subs	r3, r3, r6
 8008bd2:	50a3      	str	r3, [r4, r2]
 8008bd4:	e7b3      	b.n	8008b3e <_malloc_r+0x22>
 8008bd6:	6862      	ldr	r2, [r4, #4]
 8008bd8:	42a3      	cmp	r3, r4
 8008bda:	bf0c      	ite	eq
 8008bdc:	6032      	streq	r2, [r6, #0]
 8008bde:	605a      	strne	r2, [r3, #4]
 8008be0:	e7ec      	b.n	8008bbc <_malloc_r+0xa0>
 8008be2:	4623      	mov	r3, r4
 8008be4:	6864      	ldr	r4, [r4, #4]
 8008be6:	e7b2      	b.n	8008b4e <_malloc_r+0x32>
 8008be8:	4634      	mov	r4, r6
 8008bea:	6876      	ldr	r6, [r6, #4]
 8008bec:	e7b9      	b.n	8008b62 <_malloc_r+0x46>
 8008bee:	230c      	movs	r3, #12
 8008bf0:	4638      	mov	r0, r7
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	f000 f844 	bl	8008c80 <__malloc_unlock>
 8008bf8:	e7a1      	b.n	8008b3e <_malloc_r+0x22>
 8008bfa:	6025      	str	r5, [r4, #0]
 8008bfc:	e7de      	b.n	8008bbc <_malloc_r+0xa0>
 8008bfe:	bf00      	nop
 8008c00:	200003cc 	.word	0x200003cc

08008c04 <_sbrk_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	2300      	movs	r3, #0
 8008c08:	4d05      	ldr	r5, [pc, #20]	; (8008c20 <_sbrk_r+0x1c>)
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	602b      	str	r3, [r5, #0]
 8008c10:	f7fa fb7a 	bl	8003308 <_sbrk>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_sbrk_r+0x1a>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_sbrk_r+0x1a>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	200003d4 	.word	0x200003d4

08008c24 <strcpy>:
 8008c24:	4603      	mov	r3, r0
 8008c26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c2a:	f803 2b01 	strb.w	r2, [r3], #1
 8008c2e:	2a00      	cmp	r2, #0
 8008c30:	d1f9      	bne.n	8008c26 <strcpy+0x2>
 8008c32:	4770      	bx	lr

08008c34 <_vsiprintf_r>:
 8008c34:	b500      	push	{lr}
 8008c36:	b09b      	sub	sp, #108	; 0x6c
 8008c38:	9100      	str	r1, [sp, #0]
 8008c3a:	9104      	str	r1, [sp, #16]
 8008c3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c40:	9105      	str	r1, [sp, #20]
 8008c42:	9102      	str	r1, [sp, #8]
 8008c44:	4905      	ldr	r1, [pc, #20]	; (8008c5c <_vsiprintf_r+0x28>)
 8008c46:	9103      	str	r1, [sp, #12]
 8008c48:	4669      	mov	r1, sp
 8008c4a:	f000 f87b 	bl	8008d44 <_svfiprintf_r>
 8008c4e:	2200      	movs	r2, #0
 8008c50:	9b00      	ldr	r3, [sp, #0]
 8008c52:	701a      	strb	r2, [r3, #0]
 8008c54:	b01b      	add	sp, #108	; 0x6c
 8008c56:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c5a:	bf00      	nop
 8008c5c:	ffff0208 	.word	0xffff0208

08008c60 <vsiprintf>:
 8008c60:	4613      	mov	r3, r2
 8008c62:	460a      	mov	r2, r1
 8008c64:	4601      	mov	r1, r0
 8008c66:	4802      	ldr	r0, [pc, #8]	; (8008c70 <vsiprintf+0x10>)
 8008c68:	6800      	ldr	r0, [r0, #0]
 8008c6a:	f7ff bfe3 	b.w	8008c34 <_vsiprintf_r>
 8008c6e:	bf00      	nop
 8008c70:	20000098 	.word	0x20000098

08008c74 <__malloc_lock>:
 8008c74:	4801      	ldr	r0, [pc, #4]	; (8008c7c <__malloc_lock+0x8>)
 8008c76:	f000 bafb 	b.w	8009270 <__retarget_lock_acquire_recursive>
 8008c7a:	bf00      	nop
 8008c7c:	200003d8 	.word	0x200003d8

08008c80 <__malloc_unlock>:
 8008c80:	4801      	ldr	r0, [pc, #4]	; (8008c88 <__malloc_unlock+0x8>)
 8008c82:	f000 baf6 	b.w	8009272 <__retarget_lock_release_recursive>
 8008c86:	bf00      	nop
 8008c88:	200003d8 	.word	0x200003d8

08008c8c <__ssputs_r>:
 8008c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c90:	688e      	ldr	r6, [r1, #8]
 8008c92:	4682      	mov	sl, r0
 8008c94:	429e      	cmp	r6, r3
 8008c96:	460c      	mov	r4, r1
 8008c98:	4690      	mov	r8, r2
 8008c9a:	461f      	mov	r7, r3
 8008c9c:	d838      	bhi.n	8008d10 <__ssputs_r+0x84>
 8008c9e:	898a      	ldrh	r2, [r1, #12]
 8008ca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ca4:	d032      	beq.n	8008d0c <__ssputs_r+0x80>
 8008ca6:	6825      	ldr	r5, [r4, #0]
 8008ca8:	6909      	ldr	r1, [r1, #16]
 8008caa:	3301      	adds	r3, #1
 8008cac:	eba5 0901 	sub.w	r9, r5, r1
 8008cb0:	6965      	ldr	r5, [r4, #20]
 8008cb2:	444b      	add	r3, r9
 8008cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cbc:	106d      	asrs	r5, r5, #1
 8008cbe:	429d      	cmp	r5, r3
 8008cc0:	bf38      	it	cc
 8008cc2:	461d      	movcc	r5, r3
 8008cc4:	0553      	lsls	r3, r2, #21
 8008cc6:	d531      	bpl.n	8008d2c <__ssputs_r+0xa0>
 8008cc8:	4629      	mov	r1, r5
 8008cca:	f7ff ff27 	bl	8008b1c <_malloc_r>
 8008cce:	4606      	mov	r6, r0
 8008cd0:	b950      	cbnz	r0, 8008ce8 <__ssputs_r+0x5c>
 8008cd2:	230c      	movs	r3, #12
 8008cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd8:	f8ca 3000 	str.w	r3, [sl]
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce2:	81a3      	strh	r3, [r4, #12]
 8008ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce8:	464a      	mov	r2, r9
 8008cea:	6921      	ldr	r1, [r4, #16]
 8008cec:	f000 fad0 	bl	8009290 <memcpy>
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cfa:	81a3      	strh	r3, [r4, #12]
 8008cfc:	6126      	str	r6, [r4, #16]
 8008cfe:	444e      	add	r6, r9
 8008d00:	6026      	str	r6, [r4, #0]
 8008d02:	463e      	mov	r6, r7
 8008d04:	6165      	str	r5, [r4, #20]
 8008d06:	eba5 0509 	sub.w	r5, r5, r9
 8008d0a:	60a5      	str	r5, [r4, #8]
 8008d0c:	42be      	cmp	r6, r7
 8008d0e:	d900      	bls.n	8008d12 <__ssputs_r+0x86>
 8008d10:	463e      	mov	r6, r7
 8008d12:	4632      	mov	r2, r6
 8008d14:	4641      	mov	r1, r8
 8008d16:	6820      	ldr	r0, [r4, #0]
 8008d18:	f000 fac8 	bl	80092ac <memmove>
 8008d1c:	68a3      	ldr	r3, [r4, #8]
 8008d1e:	2000      	movs	r0, #0
 8008d20:	1b9b      	subs	r3, r3, r6
 8008d22:	60a3      	str	r3, [r4, #8]
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	4433      	add	r3, r6
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	e7db      	b.n	8008ce4 <__ssputs_r+0x58>
 8008d2c:	462a      	mov	r2, r5
 8008d2e:	f000 fad7 	bl	80092e0 <_realloc_r>
 8008d32:	4606      	mov	r6, r0
 8008d34:	2800      	cmp	r0, #0
 8008d36:	d1e1      	bne.n	8008cfc <__ssputs_r+0x70>
 8008d38:	4650      	mov	r0, sl
 8008d3a:	6921      	ldr	r1, [r4, #16]
 8008d3c:	f7ff fe86 	bl	8008a4c <_free_r>
 8008d40:	e7c7      	b.n	8008cd2 <__ssputs_r+0x46>
	...

08008d44 <_svfiprintf_r>:
 8008d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	4698      	mov	r8, r3
 8008d4a:	898b      	ldrh	r3, [r1, #12]
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	061b      	lsls	r3, r3, #24
 8008d50:	460d      	mov	r5, r1
 8008d52:	4614      	mov	r4, r2
 8008d54:	b09d      	sub	sp, #116	; 0x74
 8008d56:	d50e      	bpl.n	8008d76 <_svfiprintf_r+0x32>
 8008d58:	690b      	ldr	r3, [r1, #16]
 8008d5a:	b963      	cbnz	r3, 8008d76 <_svfiprintf_r+0x32>
 8008d5c:	2140      	movs	r1, #64	; 0x40
 8008d5e:	f7ff fedd 	bl	8008b1c <_malloc_r>
 8008d62:	6028      	str	r0, [r5, #0]
 8008d64:	6128      	str	r0, [r5, #16]
 8008d66:	b920      	cbnz	r0, 8008d72 <_svfiprintf_r+0x2e>
 8008d68:	230c      	movs	r3, #12
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d70:	e0d1      	b.n	8008f16 <_svfiprintf_r+0x1d2>
 8008d72:	2340      	movs	r3, #64	; 0x40
 8008d74:	616b      	str	r3, [r5, #20]
 8008d76:	2300      	movs	r3, #0
 8008d78:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7a:	2320      	movs	r3, #32
 8008d7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d80:	2330      	movs	r3, #48	; 0x30
 8008d82:	f04f 0901 	mov.w	r9, #1
 8008d86:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f30 <_svfiprintf_r+0x1ec>
 8008d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d92:	4623      	mov	r3, r4
 8008d94:	469a      	mov	sl, r3
 8008d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d9a:	b10a      	cbz	r2, 8008da0 <_svfiprintf_r+0x5c>
 8008d9c:	2a25      	cmp	r2, #37	; 0x25
 8008d9e:	d1f9      	bne.n	8008d94 <_svfiprintf_r+0x50>
 8008da0:	ebba 0b04 	subs.w	fp, sl, r4
 8008da4:	d00b      	beq.n	8008dbe <_svfiprintf_r+0x7a>
 8008da6:	465b      	mov	r3, fp
 8008da8:	4622      	mov	r2, r4
 8008daa:	4629      	mov	r1, r5
 8008dac:	4638      	mov	r0, r7
 8008dae:	f7ff ff6d 	bl	8008c8c <__ssputs_r>
 8008db2:	3001      	adds	r0, #1
 8008db4:	f000 80aa 	beq.w	8008f0c <_svfiprintf_r+0x1c8>
 8008db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dba:	445a      	add	r2, fp
 8008dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 80a2 	beq.w	8008f0c <_svfiprintf_r+0x1c8>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f04f 32ff 	mov.w	r2, #4294967295
 8008dce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dd2:	f10a 0a01 	add.w	sl, sl, #1
 8008dd6:	9304      	str	r3, [sp, #16]
 8008dd8:	9307      	str	r3, [sp, #28]
 8008dda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dde:	931a      	str	r3, [sp, #104]	; 0x68
 8008de0:	4654      	mov	r4, sl
 8008de2:	2205      	movs	r2, #5
 8008de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de8:	4851      	ldr	r0, [pc, #324]	; (8008f30 <_svfiprintf_r+0x1ec>)
 8008dea:	f000 fa43 	bl	8009274 <memchr>
 8008dee:	9a04      	ldr	r2, [sp, #16]
 8008df0:	b9d8      	cbnz	r0, 8008e2a <_svfiprintf_r+0xe6>
 8008df2:	06d0      	lsls	r0, r2, #27
 8008df4:	bf44      	itt	mi
 8008df6:	2320      	movmi	r3, #32
 8008df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dfc:	0711      	lsls	r1, r2, #28
 8008dfe:	bf44      	itt	mi
 8008e00:	232b      	movmi	r3, #43	; 0x2b
 8008e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e06:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e0c:	d015      	beq.n	8008e3a <_svfiprintf_r+0xf6>
 8008e0e:	4654      	mov	r4, sl
 8008e10:	2000      	movs	r0, #0
 8008e12:	f04f 0c0a 	mov.w	ip, #10
 8008e16:	9a07      	ldr	r2, [sp, #28]
 8008e18:	4621      	mov	r1, r4
 8008e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e1e:	3b30      	subs	r3, #48	; 0x30
 8008e20:	2b09      	cmp	r3, #9
 8008e22:	d94e      	bls.n	8008ec2 <_svfiprintf_r+0x17e>
 8008e24:	b1b0      	cbz	r0, 8008e54 <_svfiprintf_r+0x110>
 8008e26:	9207      	str	r2, [sp, #28]
 8008e28:	e014      	b.n	8008e54 <_svfiprintf_r+0x110>
 8008e2a:	eba0 0308 	sub.w	r3, r0, r8
 8008e2e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e32:	4313      	orrs	r3, r2
 8008e34:	46a2      	mov	sl, r4
 8008e36:	9304      	str	r3, [sp, #16]
 8008e38:	e7d2      	b.n	8008de0 <_svfiprintf_r+0x9c>
 8008e3a:	9b03      	ldr	r3, [sp, #12]
 8008e3c:	1d19      	adds	r1, r3, #4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	9103      	str	r1, [sp, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bfbb      	ittet	lt
 8008e46:	425b      	neglt	r3, r3
 8008e48:	f042 0202 	orrlt.w	r2, r2, #2
 8008e4c:	9307      	strge	r3, [sp, #28]
 8008e4e:	9307      	strlt	r3, [sp, #28]
 8008e50:	bfb8      	it	lt
 8008e52:	9204      	strlt	r2, [sp, #16]
 8008e54:	7823      	ldrb	r3, [r4, #0]
 8008e56:	2b2e      	cmp	r3, #46	; 0x2e
 8008e58:	d10c      	bne.n	8008e74 <_svfiprintf_r+0x130>
 8008e5a:	7863      	ldrb	r3, [r4, #1]
 8008e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e5e:	d135      	bne.n	8008ecc <_svfiprintf_r+0x188>
 8008e60:	9b03      	ldr	r3, [sp, #12]
 8008e62:	3402      	adds	r4, #2
 8008e64:	1d1a      	adds	r2, r3, #4
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	9203      	str	r2, [sp, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	bfb8      	it	lt
 8008e6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e72:	9305      	str	r3, [sp, #20]
 8008e74:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008f34 <_svfiprintf_r+0x1f0>
 8008e78:	2203      	movs	r2, #3
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	7821      	ldrb	r1, [r4, #0]
 8008e7e:	f000 f9f9 	bl	8009274 <memchr>
 8008e82:	b140      	cbz	r0, 8008e96 <_svfiprintf_r+0x152>
 8008e84:	2340      	movs	r3, #64	; 0x40
 8008e86:	eba0 000a 	sub.w	r0, r0, sl
 8008e8a:	fa03 f000 	lsl.w	r0, r3, r0
 8008e8e:	9b04      	ldr	r3, [sp, #16]
 8008e90:	3401      	adds	r4, #1
 8008e92:	4303      	orrs	r3, r0
 8008e94:	9304      	str	r3, [sp, #16]
 8008e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e9a:	2206      	movs	r2, #6
 8008e9c:	4826      	ldr	r0, [pc, #152]	; (8008f38 <_svfiprintf_r+0x1f4>)
 8008e9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ea2:	f000 f9e7 	bl	8009274 <memchr>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d038      	beq.n	8008f1c <_svfiprintf_r+0x1d8>
 8008eaa:	4b24      	ldr	r3, [pc, #144]	; (8008f3c <_svfiprintf_r+0x1f8>)
 8008eac:	bb1b      	cbnz	r3, 8008ef6 <_svfiprintf_r+0x1b2>
 8008eae:	9b03      	ldr	r3, [sp, #12]
 8008eb0:	3307      	adds	r3, #7
 8008eb2:	f023 0307 	bic.w	r3, r3, #7
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	9303      	str	r3, [sp, #12]
 8008eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ebc:	4433      	add	r3, r6
 8008ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec0:	e767      	b.n	8008d92 <_svfiprintf_r+0x4e>
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eca:	e7a5      	b.n	8008e18 <_svfiprintf_r+0xd4>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f04f 0c0a 	mov.w	ip, #10
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	3401      	adds	r4, #1
 8008ed6:	9305      	str	r3, [sp, #20]
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ede:	3a30      	subs	r2, #48	; 0x30
 8008ee0:	2a09      	cmp	r2, #9
 8008ee2:	d903      	bls.n	8008eec <_svfiprintf_r+0x1a8>
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d0c5      	beq.n	8008e74 <_svfiprintf_r+0x130>
 8008ee8:	9105      	str	r1, [sp, #20]
 8008eea:	e7c3      	b.n	8008e74 <_svfiprintf_r+0x130>
 8008eec:	4604      	mov	r4, r0
 8008eee:	2301      	movs	r3, #1
 8008ef0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ef4:	e7f0      	b.n	8008ed8 <_svfiprintf_r+0x194>
 8008ef6:	ab03      	add	r3, sp, #12
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	462a      	mov	r2, r5
 8008efc:	4638      	mov	r0, r7
 8008efe:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <_svfiprintf_r+0x1fc>)
 8008f00:	a904      	add	r1, sp, #16
 8008f02:	f3af 8000 	nop.w
 8008f06:	1c42      	adds	r2, r0, #1
 8008f08:	4606      	mov	r6, r0
 8008f0a:	d1d6      	bne.n	8008eba <_svfiprintf_r+0x176>
 8008f0c:	89ab      	ldrh	r3, [r5, #12]
 8008f0e:	065b      	lsls	r3, r3, #25
 8008f10:	f53f af2c 	bmi.w	8008d6c <_svfiprintf_r+0x28>
 8008f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f16:	b01d      	add	sp, #116	; 0x74
 8008f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	ab03      	add	r3, sp, #12
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	462a      	mov	r2, r5
 8008f22:	4638      	mov	r0, r7
 8008f24:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <_svfiprintf_r+0x1fc>)
 8008f26:	a904      	add	r1, sp, #16
 8008f28:	f000 f87c 	bl	8009024 <_printf_i>
 8008f2c:	e7eb      	b.n	8008f06 <_svfiprintf_r+0x1c2>
 8008f2e:	bf00      	nop
 8008f30:	08009578 	.word	0x08009578
 8008f34:	0800957e 	.word	0x0800957e
 8008f38:	08009582 	.word	0x08009582
 8008f3c:	00000000 	.word	0x00000000
 8008f40:	08008c8d 	.word	0x08008c8d

08008f44 <_printf_common>:
 8008f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f48:	4616      	mov	r6, r2
 8008f4a:	4699      	mov	r9, r3
 8008f4c:	688a      	ldr	r2, [r1, #8]
 8008f4e:	690b      	ldr	r3, [r1, #16]
 8008f50:	4607      	mov	r7, r0
 8008f52:	4293      	cmp	r3, r2
 8008f54:	bfb8      	it	lt
 8008f56:	4613      	movlt	r3, r2
 8008f58:	6033      	str	r3, [r6, #0]
 8008f5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f5e:	460c      	mov	r4, r1
 8008f60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f64:	b10a      	cbz	r2, 8008f6a <_printf_common+0x26>
 8008f66:	3301      	adds	r3, #1
 8008f68:	6033      	str	r3, [r6, #0]
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	0699      	lsls	r1, r3, #26
 8008f6e:	bf42      	ittt	mi
 8008f70:	6833      	ldrmi	r3, [r6, #0]
 8008f72:	3302      	addmi	r3, #2
 8008f74:	6033      	strmi	r3, [r6, #0]
 8008f76:	6825      	ldr	r5, [r4, #0]
 8008f78:	f015 0506 	ands.w	r5, r5, #6
 8008f7c:	d106      	bne.n	8008f8c <_printf_common+0x48>
 8008f7e:	f104 0a19 	add.w	sl, r4, #25
 8008f82:	68e3      	ldr	r3, [r4, #12]
 8008f84:	6832      	ldr	r2, [r6, #0]
 8008f86:	1a9b      	subs	r3, r3, r2
 8008f88:	42ab      	cmp	r3, r5
 8008f8a:	dc28      	bgt.n	8008fde <_printf_common+0x9a>
 8008f8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f90:	1e13      	subs	r3, r2, #0
 8008f92:	6822      	ldr	r2, [r4, #0]
 8008f94:	bf18      	it	ne
 8008f96:	2301      	movne	r3, #1
 8008f98:	0692      	lsls	r2, r2, #26
 8008f9a:	d42d      	bmi.n	8008ff8 <_printf_common+0xb4>
 8008f9c:	4649      	mov	r1, r9
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fa4:	47c0      	blx	r8
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	d020      	beq.n	8008fec <_printf_common+0xa8>
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	68e5      	ldr	r5, [r4, #12]
 8008fae:	f003 0306 	and.w	r3, r3, #6
 8008fb2:	2b04      	cmp	r3, #4
 8008fb4:	bf18      	it	ne
 8008fb6:	2500      	movne	r5, #0
 8008fb8:	6832      	ldr	r2, [r6, #0]
 8008fba:	f04f 0600 	mov.w	r6, #0
 8008fbe:	68a3      	ldr	r3, [r4, #8]
 8008fc0:	bf08      	it	eq
 8008fc2:	1aad      	subeq	r5, r5, r2
 8008fc4:	6922      	ldr	r2, [r4, #16]
 8008fc6:	bf08      	it	eq
 8008fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	bfc4      	itt	gt
 8008fd0:	1a9b      	subgt	r3, r3, r2
 8008fd2:	18ed      	addgt	r5, r5, r3
 8008fd4:	341a      	adds	r4, #26
 8008fd6:	42b5      	cmp	r5, r6
 8008fd8:	d11a      	bne.n	8009010 <_printf_common+0xcc>
 8008fda:	2000      	movs	r0, #0
 8008fdc:	e008      	b.n	8008ff0 <_printf_common+0xac>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	4652      	mov	r2, sl
 8008fe2:	4649      	mov	r1, r9
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	47c0      	blx	r8
 8008fe8:	3001      	adds	r0, #1
 8008fea:	d103      	bne.n	8008ff4 <_printf_common+0xb0>
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff4:	3501      	adds	r5, #1
 8008ff6:	e7c4      	b.n	8008f82 <_printf_common+0x3e>
 8008ff8:	2030      	movs	r0, #48	; 0x30
 8008ffa:	18e1      	adds	r1, r4, r3
 8008ffc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009000:	1c5a      	adds	r2, r3, #1
 8009002:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009006:	4422      	add	r2, r4
 8009008:	3302      	adds	r3, #2
 800900a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800900e:	e7c5      	b.n	8008f9c <_printf_common+0x58>
 8009010:	2301      	movs	r3, #1
 8009012:	4622      	mov	r2, r4
 8009014:	4649      	mov	r1, r9
 8009016:	4638      	mov	r0, r7
 8009018:	47c0      	blx	r8
 800901a:	3001      	adds	r0, #1
 800901c:	d0e6      	beq.n	8008fec <_printf_common+0xa8>
 800901e:	3601      	adds	r6, #1
 8009020:	e7d9      	b.n	8008fd6 <_printf_common+0x92>
	...

08009024 <_printf_i>:
 8009024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009028:	7e0f      	ldrb	r7, [r1, #24]
 800902a:	4691      	mov	r9, r2
 800902c:	2f78      	cmp	r7, #120	; 0x78
 800902e:	4680      	mov	r8, r0
 8009030:	460c      	mov	r4, r1
 8009032:	469a      	mov	sl, r3
 8009034:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009036:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800903a:	d807      	bhi.n	800904c <_printf_i+0x28>
 800903c:	2f62      	cmp	r7, #98	; 0x62
 800903e:	d80a      	bhi.n	8009056 <_printf_i+0x32>
 8009040:	2f00      	cmp	r7, #0
 8009042:	f000 80d9 	beq.w	80091f8 <_printf_i+0x1d4>
 8009046:	2f58      	cmp	r7, #88	; 0x58
 8009048:	f000 80a4 	beq.w	8009194 <_printf_i+0x170>
 800904c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009054:	e03a      	b.n	80090cc <_printf_i+0xa8>
 8009056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800905a:	2b15      	cmp	r3, #21
 800905c:	d8f6      	bhi.n	800904c <_printf_i+0x28>
 800905e:	a101      	add	r1, pc, #4	; (adr r1, 8009064 <_printf_i+0x40>)
 8009060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009064:	080090bd 	.word	0x080090bd
 8009068:	080090d1 	.word	0x080090d1
 800906c:	0800904d 	.word	0x0800904d
 8009070:	0800904d 	.word	0x0800904d
 8009074:	0800904d 	.word	0x0800904d
 8009078:	0800904d 	.word	0x0800904d
 800907c:	080090d1 	.word	0x080090d1
 8009080:	0800904d 	.word	0x0800904d
 8009084:	0800904d 	.word	0x0800904d
 8009088:	0800904d 	.word	0x0800904d
 800908c:	0800904d 	.word	0x0800904d
 8009090:	080091df 	.word	0x080091df
 8009094:	08009101 	.word	0x08009101
 8009098:	080091c1 	.word	0x080091c1
 800909c:	0800904d 	.word	0x0800904d
 80090a0:	0800904d 	.word	0x0800904d
 80090a4:	08009201 	.word	0x08009201
 80090a8:	0800904d 	.word	0x0800904d
 80090ac:	08009101 	.word	0x08009101
 80090b0:	0800904d 	.word	0x0800904d
 80090b4:	0800904d 	.word	0x0800904d
 80090b8:	080091c9 	.word	0x080091c9
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	1d1a      	adds	r2, r3, #4
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	602a      	str	r2, [r5, #0]
 80090c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090cc:	2301      	movs	r3, #1
 80090ce:	e0a4      	b.n	800921a <_printf_i+0x1f6>
 80090d0:	6820      	ldr	r0, [r4, #0]
 80090d2:	6829      	ldr	r1, [r5, #0]
 80090d4:	0606      	lsls	r6, r0, #24
 80090d6:	f101 0304 	add.w	r3, r1, #4
 80090da:	d50a      	bpl.n	80090f2 <_printf_i+0xce>
 80090dc:	680e      	ldr	r6, [r1, #0]
 80090de:	602b      	str	r3, [r5, #0]
 80090e0:	2e00      	cmp	r6, #0
 80090e2:	da03      	bge.n	80090ec <_printf_i+0xc8>
 80090e4:	232d      	movs	r3, #45	; 0x2d
 80090e6:	4276      	negs	r6, r6
 80090e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090ec:	230a      	movs	r3, #10
 80090ee:	485e      	ldr	r0, [pc, #376]	; (8009268 <_printf_i+0x244>)
 80090f0:	e019      	b.n	8009126 <_printf_i+0x102>
 80090f2:	680e      	ldr	r6, [r1, #0]
 80090f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80090f8:	602b      	str	r3, [r5, #0]
 80090fa:	bf18      	it	ne
 80090fc:	b236      	sxthne	r6, r6
 80090fe:	e7ef      	b.n	80090e0 <_printf_i+0xbc>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	6820      	ldr	r0, [r4, #0]
 8009104:	1d19      	adds	r1, r3, #4
 8009106:	6029      	str	r1, [r5, #0]
 8009108:	0601      	lsls	r1, r0, #24
 800910a:	d501      	bpl.n	8009110 <_printf_i+0xec>
 800910c:	681e      	ldr	r6, [r3, #0]
 800910e:	e002      	b.n	8009116 <_printf_i+0xf2>
 8009110:	0646      	lsls	r6, r0, #25
 8009112:	d5fb      	bpl.n	800910c <_printf_i+0xe8>
 8009114:	881e      	ldrh	r6, [r3, #0]
 8009116:	2f6f      	cmp	r7, #111	; 0x6f
 8009118:	bf0c      	ite	eq
 800911a:	2308      	moveq	r3, #8
 800911c:	230a      	movne	r3, #10
 800911e:	4852      	ldr	r0, [pc, #328]	; (8009268 <_printf_i+0x244>)
 8009120:	2100      	movs	r1, #0
 8009122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009126:	6865      	ldr	r5, [r4, #4]
 8009128:	2d00      	cmp	r5, #0
 800912a:	bfa8      	it	ge
 800912c:	6821      	ldrge	r1, [r4, #0]
 800912e:	60a5      	str	r5, [r4, #8]
 8009130:	bfa4      	itt	ge
 8009132:	f021 0104 	bicge.w	r1, r1, #4
 8009136:	6021      	strge	r1, [r4, #0]
 8009138:	b90e      	cbnz	r6, 800913e <_printf_i+0x11a>
 800913a:	2d00      	cmp	r5, #0
 800913c:	d04d      	beq.n	80091da <_printf_i+0x1b6>
 800913e:	4615      	mov	r5, r2
 8009140:	fbb6 f1f3 	udiv	r1, r6, r3
 8009144:	fb03 6711 	mls	r7, r3, r1, r6
 8009148:	5dc7      	ldrb	r7, [r0, r7]
 800914a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800914e:	4637      	mov	r7, r6
 8009150:	42bb      	cmp	r3, r7
 8009152:	460e      	mov	r6, r1
 8009154:	d9f4      	bls.n	8009140 <_printf_i+0x11c>
 8009156:	2b08      	cmp	r3, #8
 8009158:	d10b      	bne.n	8009172 <_printf_i+0x14e>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	07de      	lsls	r6, r3, #31
 800915e:	d508      	bpl.n	8009172 <_printf_i+0x14e>
 8009160:	6923      	ldr	r3, [r4, #16]
 8009162:	6861      	ldr	r1, [r4, #4]
 8009164:	4299      	cmp	r1, r3
 8009166:	bfde      	ittt	le
 8009168:	2330      	movle	r3, #48	; 0x30
 800916a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800916e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009172:	1b52      	subs	r2, r2, r5
 8009174:	6122      	str	r2, [r4, #16]
 8009176:	464b      	mov	r3, r9
 8009178:	4621      	mov	r1, r4
 800917a:	4640      	mov	r0, r8
 800917c:	f8cd a000 	str.w	sl, [sp]
 8009180:	aa03      	add	r2, sp, #12
 8009182:	f7ff fedf 	bl	8008f44 <_printf_common>
 8009186:	3001      	adds	r0, #1
 8009188:	d14c      	bne.n	8009224 <_printf_i+0x200>
 800918a:	f04f 30ff 	mov.w	r0, #4294967295
 800918e:	b004      	add	sp, #16
 8009190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009194:	4834      	ldr	r0, [pc, #208]	; (8009268 <_printf_i+0x244>)
 8009196:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800919a:	6829      	ldr	r1, [r5, #0]
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	f851 6b04 	ldr.w	r6, [r1], #4
 80091a2:	6029      	str	r1, [r5, #0]
 80091a4:	061d      	lsls	r5, r3, #24
 80091a6:	d514      	bpl.n	80091d2 <_printf_i+0x1ae>
 80091a8:	07df      	lsls	r7, r3, #31
 80091aa:	bf44      	itt	mi
 80091ac:	f043 0320 	orrmi.w	r3, r3, #32
 80091b0:	6023      	strmi	r3, [r4, #0]
 80091b2:	b91e      	cbnz	r6, 80091bc <_printf_i+0x198>
 80091b4:	6823      	ldr	r3, [r4, #0]
 80091b6:	f023 0320 	bic.w	r3, r3, #32
 80091ba:	6023      	str	r3, [r4, #0]
 80091bc:	2310      	movs	r3, #16
 80091be:	e7af      	b.n	8009120 <_printf_i+0xfc>
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	f043 0320 	orr.w	r3, r3, #32
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	2378      	movs	r3, #120	; 0x78
 80091ca:	4828      	ldr	r0, [pc, #160]	; (800926c <_printf_i+0x248>)
 80091cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091d0:	e7e3      	b.n	800919a <_printf_i+0x176>
 80091d2:	0659      	lsls	r1, r3, #25
 80091d4:	bf48      	it	mi
 80091d6:	b2b6      	uxthmi	r6, r6
 80091d8:	e7e6      	b.n	80091a8 <_printf_i+0x184>
 80091da:	4615      	mov	r5, r2
 80091dc:	e7bb      	b.n	8009156 <_printf_i+0x132>
 80091de:	682b      	ldr	r3, [r5, #0]
 80091e0:	6826      	ldr	r6, [r4, #0]
 80091e2:	1d18      	adds	r0, r3, #4
 80091e4:	6961      	ldr	r1, [r4, #20]
 80091e6:	6028      	str	r0, [r5, #0]
 80091e8:	0635      	lsls	r5, r6, #24
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	d501      	bpl.n	80091f2 <_printf_i+0x1ce>
 80091ee:	6019      	str	r1, [r3, #0]
 80091f0:	e002      	b.n	80091f8 <_printf_i+0x1d4>
 80091f2:	0670      	lsls	r0, r6, #25
 80091f4:	d5fb      	bpl.n	80091ee <_printf_i+0x1ca>
 80091f6:	8019      	strh	r1, [r3, #0]
 80091f8:	2300      	movs	r3, #0
 80091fa:	4615      	mov	r5, r2
 80091fc:	6123      	str	r3, [r4, #16]
 80091fe:	e7ba      	b.n	8009176 <_printf_i+0x152>
 8009200:	682b      	ldr	r3, [r5, #0]
 8009202:	2100      	movs	r1, #0
 8009204:	1d1a      	adds	r2, r3, #4
 8009206:	602a      	str	r2, [r5, #0]
 8009208:	681d      	ldr	r5, [r3, #0]
 800920a:	6862      	ldr	r2, [r4, #4]
 800920c:	4628      	mov	r0, r5
 800920e:	f000 f831 	bl	8009274 <memchr>
 8009212:	b108      	cbz	r0, 8009218 <_printf_i+0x1f4>
 8009214:	1b40      	subs	r0, r0, r5
 8009216:	6060      	str	r0, [r4, #4]
 8009218:	6863      	ldr	r3, [r4, #4]
 800921a:	6123      	str	r3, [r4, #16]
 800921c:	2300      	movs	r3, #0
 800921e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009222:	e7a8      	b.n	8009176 <_printf_i+0x152>
 8009224:	462a      	mov	r2, r5
 8009226:	4649      	mov	r1, r9
 8009228:	4640      	mov	r0, r8
 800922a:	6923      	ldr	r3, [r4, #16]
 800922c:	47d0      	blx	sl
 800922e:	3001      	adds	r0, #1
 8009230:	d0ab      	beq.n	800918a <_printf_i+0x166>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	079b      	lsls	r3, r3, #30
 8009236:	d413      	bmi.n	8009260 <_printf_i+0x23c>
 8009238:	68e0      	ldr	r0, [r4, #12]
 800923a:	9b03      	ldr	r3, [sp, #12]
 800923c:	4298      	cmp	r0, r3
 800923e:	bfb8      	it	lt
 8009240:	4618      	movlt	r0, r3
 8009242:	e7a4      	b.n	800918e <_printf_i+0x16a>
 8009244:	2301      	movs	r3, #1
 8009246:	4632      	mov	r2, r6
 8009248:	4649      	mov	r1, r9
 800924a:	4640      	mov	r0, r8
 800924c:	47d0      	blx	sl
 800924e:	3001      	adds	r0, #1
 8009250:	d09b      	beq.n	800918a <_printf_i+0x166>
 8009252:	3501      	adds	r5, #1
 8009254:	68e3      	ldr	r3, [r4, #12]
 8009256:	9903      	ldr	r1, [sp, #12]
 8009258:	1a5b      	subs	r3, r3, r1
 800925a:	42ab      	cmp	r3, r5
 800925c:	dcf2      	bgt.n	8009244 <_printf_i+0x220>
 800925e:	e7eb      	b.n	8009238 <_printf_i+0x214>
 8009260:	2500      	movs	r5, #0
 8009262:	f104 0619 	add.w	r6, r4, #25
 8009266:	e7f5      	b.n	8009254 <_printf_i+0x230>
 8009268:	08009589 	.word	0x08009589
 800926c:	0800959a 	.word	0x0800959a

08009270 <__retarget_lock_acquire_recursive>:
 8009270:	4770      	bx	lr

08009272 <__retarget_lock_release_recursive>:
 8009272:	4770      	bx	lr

08009274 <memchr>:
 8009274:	4603      	mov	r3, r0
 8009276:	b510      	push	{r4, lr}
 8009278:	b2c9      	uxtb	r1, r1
 800927a:	4402      	add	r2, r0
 800927c:	4293      	cmp	r3, r2
 800927e:	4618      	mov	r0, r3
 8009280:	d101      	bne.n	8009286 <memchr+0x12>
 8009282:	2000      	movs	r0, #0
 8009284:	e003      	b.n	800928e <memchr+0x1a>
 8009286:	7804      	ldrb	r4, [r0, #0]
 8009288:	3301      	adds	r3, #1
 800928a:	428c      	cmp	r4, r1
 800928c:	d1f6      	bne.n	800927c <memchr+0x8>
 800928e:	bd10      	pop	{r4, pc}

08009290 <memcpy>:
 8009290:	440a      	add	r2, r1
 8009292:	4291      	cmp	r1, r2
 8009294:	f100 33ff 	add.w	r3, r0, #4294967295
 8009298:	d100      	bne.n	800929c <memcpy+0xc>
 800929a:	4770      	bx	lr
 800929c:	b510      	push	{r4, lr}
 800929e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092a2:	4291      	cmp	r1, r2
 80092a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092a8:	d1f9      	bne.n	800929e <memcpy+0xe>
 80092aa:	bd10      	pop	{r4, pc}

080092ac <memmove>:
 80092ac:	4288      	cmp	r0, r1
 80092ae:	b510      	push	{r4, lr}
 80092b0:	eb01 0402 	add.w	r4, r1, r2
 80092b4:	d902      	bls.n	80092bc <memmove+0x10>
 80092b6:	4284      	cmp	r4, r0
 80092b8:	4623      	mov	r3, r4
 80092ba:	d807      	bhi.n	80092cc <memmove+0x20>
 80092bc:	1e43      	subs	r3, r0, #1
 80092be:	42a1      	cmp	r1, r4
 80092c0:	d008      	beq.n	80092d4 <memmove+0x28>
 80092c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092ca:	e7f8      	b.n	80092be <memmove+0x12>
 80092cc:	4601      	mov	r1, r0
 80092ce:	4402      	add	r2, r0
 80092d0:	428a      	cmp	r2, r1
 80092d2:	d100      	bne.n	80092d6 <memmove+0x2a>
 80092d4:	bd10      	pop	{r4, pc}
 80092d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092de:	e7f7      	b.n	80092d0 <memmove+0x24>

080092e0 <_realloc_r>:
 80092e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e4:	4680      	mov	r8, r0
 80092e6:	4614      	mov	r4, r2
 80092e8:	460e      	mov	r6, r1
 80092ea:	b921      	cbnz	r1, 80092f6 <_realloc_r+0x16>
 80092ec:	4611      	mov	r1, r2
 80092ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092f2:	f7ff bc13 	b.w	8008b1c <_malloc_r>
 80092f6:	b92a      	cbnz	r2, 8009304 <_realloc_r+0x24>
 80092f8:	f7ff fba8 	bl	8008a4c <_free_r>
 80092fc:	4625      	mov	r5, r4
 80092fe:	4628      	mov	r0, r5
 8009300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009304:	f000 f81b 	bl	800933e <_malloc_usable_size_r>
 8009308:	4284      	cmp	r4, r0
 800930a:	4607      	mov	r7, r0
 800930c:	d802      	bhi.n	8009314 <_realloc_r+0x34>
 800930e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009312:	d812      	bhi.n	800933a <_realloc_r+0x5a>
 8009314:	4621      	mov	r1, r4
 8009316:	4640      	mov	r0, r8
 8009318:	f7ff fc00 	bl	8008b1c <_malloc_r>
 800931c:	4605      	mov	r5, r0
 800931e:	2800      	cmp	r0, #0
 8009320:	d0ed      	beq.n	80092fe <_realloc_r+0x1e>
 8009322:	42bc      	cmp	r4, r7
 8009324:	4622      	mov	r2, r4
 8009326:	4631      	mov	r1, r6
 8009328:	bf28      	it	cs
 800932a:	463a      	movcs	r2, r7
 800932c:	f7ff ffb0 	bl	8009290 <memcpy>
 8009330:	4631      	mov	r1, r6
 8009332:	4640      	mov	r0, r8
 8009334:	f7ff fb8a 	bl	8008a4c <_free_r>
 8009338:	e7e1      	b.n	80092fe <_realloc_r+0x1e>
 800933a:	4635      	mov	r5, r6
 800933c:	e7df      	b.n	80092fe <_realloc_r+0x1e>

0800933e <_malloc_usable_size_r>:
 800933e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009342:	1f18      	subs	r0, r3, #4
 8009344:	2b00      	cmp	r3, #0
 8009346:	bfbc      	itt	lt
 8009348:	580b      	ldrlt	r3, [r1, r0]
 800934a:	18c0      	addlt	r0, r0, r3
 800934c:	4770      	bx	lr
	...

08009350 <_init>:
 8009350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009352:	bf00      	nop
 8009354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009356:	bc08      	pop	{r3}
 8009358:	469e      	mov	lr, r3
 800935a:	4770      	bx	lr

0800935c <_fini>:
 800935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935e:	bf00      	nop
 8009360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009362:	bc08      	pop	{r3}
 8009364:	469e      	mov	lr, r3
 8009366:	4770      	bx	lr
