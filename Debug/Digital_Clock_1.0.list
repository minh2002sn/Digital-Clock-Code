
Digital_Clock_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  0800540c  0800540c  0001540c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005630  08005630  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08005630  08005630  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005630  08005630  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005634  08005634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08005638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200000a8  080056dc  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  080056dc  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f491  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058e7  00000000  00000000  0003f55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000eb75  00000000  00000000  00044e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  000539c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e90  00000000  00000000  00054b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ce0d  00000000  00000000  000569c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002475b  00000000  00000000  000737cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093fef  00000000  00000000  00097f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012bf17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037d0  00000000  00000000  0012bf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a8 	.word	0x200000a8
 800012c:	00000000 	.word	0x00000000
 8000130:	080053f4 	.word	0x080053f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ac 	.word	0x200000ac
 800014c:	080053f4 	.word	0x080053f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <__aeabi_d2f>:
 800076c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000770:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000774:	bf24      	itt	cs
 8000776:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800077a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800077e:	d90d      	bls.n	800079c <__aeabi_d2f+0x30>
 8000780:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000784:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000788:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800078c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000790:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000794:	bf08      	it	eq
 8000796:	f020 0001 	biceq.w	r0, r0, #1
 800079a:	4770      	bx	lr
 800079c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007a0:	d121      	bne.n	80007e6 <__aeabi_d2f+0x7a>
 80007a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007a6:	bfbc      	itt	lt
 80007a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007ac:	4770      	bxlt	lr
 80007ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007b6:	f1c2 0218 	rsb	r2, r2, #24
 80007ba:	f1c2 0c20 	rsb	ip, r2, #32
 80007be:	fa10 f30c 	lsls.w	r3, r0, ip
 80007c2:	fa20 f002 	lsr.w	r0, r0, r2
 80007c6:	bf18      	it	ne
 80007c8:	f040 0001 	orrne.w	r0, r0, #1
 80007cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007d8:	ea40 000c 	orr.w	r0, r0, ip
 80007dc:	fa23 f302 	lsr.w	r3, r3, r2
 80007e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007e4:	e7cc      	b.n	8000780 <__aeabi_d2f+0x14>
 80007e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007ea:	d107      	bne.n	80007fc <__aeabi_d2f+0x90>
 80007ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007f0:	bf1e      	ittt	ne
 80007f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007fa:	4770      	bxne	lr
 80007fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000800:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000804:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop

0800080c <__aeabi_f2uiz>:
 800080c:	0042      	lsls	r2, r0, #1
 800080e:	d20e      	bcs.n	800082e <__aeabi_f2uiz+0x22>
 8000810:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000814:	d30b      	bcc.n	800082e <__aeabi_f2uiz+0x22>
 8000816:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800081a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800081e:	d409      	bmi.n	8000834 <__aeabi_f2uiz+0x28>
 8000820:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000824:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000828:	fa23 f002 	lsr.w	r0, r3, r2
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr
 8000834:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000838:	d101      	bne.n	800083e <__aeabi_f2uiz+0x32>
 800083a:	0242      	lsls	r2, r0, #9
 800083c:	d102      	bne.n	8000844 <__aeabi_f2uiz+0x38>
 800083e:	f04f 30ff 	mov.w	r0, #4294967295
 8000842:	4770      	bx	lr
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop

0800084c <__buzzer_off>:
static void __buzzer_on(){
	HAL_GPIO_WritePin(ALARM_Data.buzzer_port, ALARM_Data.buzzer_pin, 1);
}

static void __buzzer_off(){
	HAL_GPIO_WritePin(ALARM_Data.buzzer_port, ALARM_Data.buzzer_pin, 0);
 800084c:	4b02      	ldr	r3, [pc, #8]	; (8000858 <__buzzer_off+0xc>)
 800084e:	2200      	movs	r2, #0
 8000850:	8a19      	ldrh	r1, [r3, #16]
 8000852:	68d8      	ldr	r0, [r3, #12]
 8000854:	f002 b980 	b.w	8002b58 <HAL_GPIO_WritePin>
 8000858:	200000c4 	.word	0x200000c4

0800085c <ALARM_Init>:
		__buzzer_off();
	}
}

void ALARM_Init(GPIO_TypeDef *p_buzzer_port, uint16_t p_buzzer_pin){
	ALARM_Data.state = FINDING_NEXT_TIMELINE;
 800085c:	2200      	movs	r2, #0
 800085e:	4b03      	ldr	r3, [pc, #12]	; (800086c <ALARM_Init+0x10>)
 8000860:	701a      	strb	r2, [r3, #0]
	ALARM_Data.buzzer_port = p_buzzer_port;
 8000862:	60d8      	str	r0, [r3, #12]
	ALARM_Data.buzzer_pin = p_buzzer_pin;
 8000864:	8219      	strh	r1, [r3, #16]
	__buzzer_off();
 8000866:	f7ff bff1 	b.w	800084c <__buzzer_off>
 800086a:	bf00      	nop
 800086c:	200000c4 	.word	0x200000c4

08000870 <ALARM_Handle>:
}

void ALARM_Handle(){
 8000870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(ALARM_Data.state){
 8000872:	4c43      	ldr	r4, [pc, #268]	; (8000980 <ALARM_Handle+0x110>)
 8000874:	7823      	ldrb	r3, [r4, #0]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d02a      	beq.n	80008d0 <ALARM_Handle+0x60>
 800087a:	2b02      	cmp	r3, #2
 800087c:	d049      	beq.n	8000912 <ALARM_Handle+0xa2>
 800087e:	bb33      	cbnz	r3, 80008ce <ALARM_Handle+0x5e>
	if(TIMELINE_Data.len != 0){
 8000880:	4a40      	ldr	r2, [pc, #256]	; (8000984 <ALARM_Handle+0x114>)
 8000882:	f892 603c 	ldrb.w	r6, [r2, #60]	; 0x3c
 8000886:	b316      	cbz	r6, 80008ce <ALARM_Handle+0x5e>
			uint8_t t_system_time = REALTIME_Data.system_hour * 60 + REALTIME_Data.system_minute;
 8000888:	483f      	ldr	r0, [pc, #252]	; (8000988 <ALARM_Handle+0x118>)
			if(t_system_time < t_alarm_time && ((0x01 << (REALTIME_Data.system_day - 1)) & TIMELINE_Data.flash_data[i].day) != 0){
 800088a:	7887      	ldrb	r7, [r0, #2]
			uint8_t t_system_time = REALTIME_Data.system_hour * 60 + REALTIME_Data.system_minute;
 800088c:	7801      	ldrb	r1, [r0, #0]
 800088e:	7845      	ldrb	r5, [r0, #1]
			if(t_system_time < t_alarm_time && ((0x01 << (REALTIME_Data.system_day - 1)) & TIMELINE_Data.flash_data[i].day) != 0){
 8000890:	1e78      	subs	r0, r7, #1
 8000892:	2701      	movs	r7, #1
			uint8_t t_system_time = REALTIME_Data.system_hour * 60 + REALTIME_Data.system_minute;
 8000894:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8000898:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800089c:	b2c9      	uxtb	r1, r1
 800089e:	4087      	lsls	r7, r0
			if(TIMELINE_Data.flash_data[i].timeline_state == TIMELINE_OFF) continue;
 80008a0:	79d0      	ldrb	r0, [r2, #7]
 80008a2:	b178      	cbz	r0, 80008c4 <ALARM_Handle+0x54>
			uint8_t t_alarm_time = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 80008a4:	7910      	ldrb	r0, [r2, #4]
 80008a6:	ebc0 1500 	rsb	r5, r0, r0, lsl #4
 80008aa:	7950      	ldrb	r0, [r2, #5]
 80008ac:	eb00 0085 	add.w	r0, r0, r5, lsl #2
			if(t_system_time < t_alarm_time && ((0x01 << (REALTIME_Data.system_day - 1)) & TIMELINE_Data.flash_data[i].day) != 0){
 80008b0:	b2c0      	uxtb	r0, r0
 80008b2:	4281      	cmp	r1, r0
 80008b4:	d206      	bcs.n	80008c4 <ALARM_Handle+0x54>
 80008b6:	7990      	ldrb	r0, [r2, #6]
 80008b8:	4238      	tst	r0, r7
 80008ba:	d003      	beq.n	80008c4 <ALARM_Handle+0x54>
				ALARM_Data.next_timeline_index = i;
 80008bc:	7063      	strb	r3, [r4, #1]
				ALARM_Data.state = WAITING_FOR_TIMELINE;
 80008be:	2301      	movs	r3, #1
		ALARM_Data.state = FINDING_NEXT_TIMELINE;
 80008c0:	7023      	strb	r3, [r4, #0]
		return;
 80008c2:	e004      	b.n	80008ce <ALARM_Handle+0x5e>
		for(int i = 0; i < TIMELINE_Data.len; i++){
 80008c4:	3301      	adds	r3, #1
 80008c6:	42b3      	cmp	r3, r6
 80008c8:	f102 0204 	add.w	r2, r2, #4
 80008cc:	dbe8      	blt.n	80008a0 <ALARM_Handle+0x30>
			__alarm_running();
			break;
		default:
			break;
	}
}
 80008ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t t_alarm_time = TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].hour * 60 + TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].minute;
 80008d0:	7863      	ldrb	r3, [r4, #1]
	if(TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].timeline_state == TIMELINE_OFF){
 80008d2:	492c      	ldr	r1, [pc, #176]	; (8000984 <ALARM_Handle+0x114>)
 80008d4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80008d8:	79cb      	ldrb	r3, [r1, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d0f0      	beq.n	80008c0 <ALARM_Handle+0x50>
	uint8_t t_system_time = REALTIME_Data.system_hour * 60 + REALTIME_Data.system_minute;
 80008de:	482a      	ldr	r0, [pc, #168]	; (8000988 <ALARM_Handle+0x118>)
 80008e0:	7802      	ldrb	r2, [r0, #0]
 80008e2:	ebc2 1302 	rsb	r3, r2, r2, lsl #4
 80008e6:	7842      	ldrb	r2, [r0, #1]
 80008e8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	uint8_t t_alarm_time = TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].hour * 60 + TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].minute;
 80008ec:	790b      	ldrb	r3, [r1, #4]
	if(t_system_time == t_alarm_time){
 80008ee:	b2d2      	uxtb	r2, r2
	uint8_t t_alarm_time = TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].hour * 60 + TIMELINE_Data.flash_data[ALARM_Data.next_timeline_index].minute;
 80008f0:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
 80008f4:	794b      	ldrb	r3, [r1, #5]
 80008f6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	if(t_system_time == t_alarm_time){
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d1e6      	bne.n	80008ce <ALARM_Handle+0x5e>
		ALARM_Data.state = ALARM_RUNNING;
 8000900:	2302      	movs	r3, #2
 8000902:	7023      	strb	r3, [r4, #0]
		ALARM_Data.buzzer_running_timer = HAL_GetTick();
 8000904:	f001 fc66 	bl	80021d4 <HAL_GetTick>
 8000908:	6060      	str	r0, [r4, #4]
				ALARM_Data.buzzer_cycle_timer = HAL_GetTick();
 800090a:	f001 fc63 	bl	80021d4 <HAL_GetTick>
 800090e:	60a0      	str	r0, [r4, #8]
 8000910:	e7dd      	b.n	80008ce <ALARM_Handle+0x5e>
	if(HAL_GetTick() - ALARM_Data.buzzer_running_timer < BUZZER_RUNNING_TIME){
 8000912:	f001 fc5f 	bl	80021d4 <HAL_GetTick>
 8000916:	6863      	ldr	r3, [r4, #4]
 8000918:	1ac0      	subs	r0, r0, r3
 800091a:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800091e:	4298      	cmp	r0, r3
 8000920:	d828      	bhi.n	8000974 <ALARM_Handle+0x104>
		if(buzzer_counter <= 2){
 8000922:	4d1a      	ldr	r5, [pc, #104]	; (800098c <ALARM_Handle+0x11c>)
 8000924:	782b      	ldrb	r3, [r5, #0]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d812      	bhi.n	8000950 <ALARM_Handle+0xe0>
			if(buzzer_counter % 2 == 0)
 800092a:	07db      	lsls	r3, r3, #31
 800092c:	d41f      	bmi.n	800096e <ALARM_Handle+0xfe>
	HAL_GPIO_WritePin(ALARM_Data.buzzer_port, ALARM_Data.buzzer_pin, 1);
 800092e:	2201      	movs	r2, #1
 8000930:	8a21      	ldrh	r1, [r4, #16]
 8000932:	68e0      	ldr	r0, [r4, #12]
 8000934:	f002 f910 	bl	8002b58 <HAL_GPIO_WritePin>
			if(HAL_GetTick() - ALARM_Data.buzzer_cycle_timer >= BUZZER_SHORT_CYCLE){
 8000938:	f001 fc4c 	bl	80021d4 <HAL_GetTick>
 800093c:	68a3      	ldr	r3, [r4, #8]
 800093e:	1ac0      	subs	r0, r0, r3
 8000940:	2863      	cmp	r0, #99	; 0x63
 8000942:	d905      	bls.n	8000950 <ALARM_Handle+0xe0>
				buzzer_counter++;
 8000944:	782b      	ldrb	r3, [r5, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	702b      	strb	r3, [r5, #0]
				ALARM_Data.buzzer_cycle_timer = HAL_GetTick();
 800094a:	f001 fc43 	bl	80021d4 <HAL_GetTick>
 800094e:	60a0      	str	r0, [r4, #8]
		if(buzzer_counter == 3){
 8000950:	782b      	ldrb	r3, [r5, #0]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d1bb      	bne.n	80008ce <ALARM_Handle+0x5e>
			__buzzer_off();
 8000956:	f7ff ff79 	bl	800084c <__buzzer_off>
			if(HAL_GetTick() - ALARM_Data.buzzer_cycle_timer >= BUZZER_LONG_CYCLE){
 800095a:	f001 fc3b 	bl	80021d4 <HAL_GetTick>
 800095e:	68a3      	ldr	r3, [r4, #8]
 8000960:	1ac0      	subs	r0, r0, r3
 8000962:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000966:	d3b2      	bcc.n	80008ce <ALARM_Handle+0x5e>
				buzzer_counter = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	702b      	strb	r3, [r5, #0]
 800096c:	e7cd      	b.n	800090a <ALARM_Handle+0x9a>
				__buzzer_off();
 800096e:	f7ff ff6d 	bl	800084c <__buzzer_off>
 8000972:	e7e1      	b.n	8000938 <ALARM_Handle+0xc8>
		ALARM_Data.state = FINDING_NEXT_TIMELINE;
 8000974:	2300      	movs	r3, #0
 8000976:	7023      	strb	r3, [r4, #0]
}
 8000978:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		__buzzer_off();
 800097c:	f7ff bf66 	b.w	800084c <__buzzer_off>
 8000980:	200000c4 	.word	0x200000c4
 8000984:	2000010c 	.word	0x2000010c
 8000988:	2000014c 	.word	0x2000014c
 800098c:	200000d8 	.word	0x200000d8

08000990 <ALARM_Stop_Buzzer>:

void ALARM_Stop_Buzzer(){
	if(ALARM_Data.state == ALARM_RUNNING){
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <ALARM_Stop_Buzzer+0x10>)
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	2a02      	cmp	r2, #2
		ALARM_Data.state = FINDING_NEXT_TIMELINE;
 8000996:	bf04      	itt	eq
 8000998:	2200      	moveq	r2, #0
 800099a:	701a      	strbeq	r2, [r3, #0]
	}
}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	200000c4 	.word	0x200000c4

080009a4 <ALARM_Is_Buzzer_Running>:

uint8_t ALARM_Is_Buzzer_Running(){
	return (ALARM_Data.state == ALARM_RUNNING) ? 1 : 0;
 80009a4:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <ALARM_Is_Buzzer_Running+0xc>)
 80009a6:	7818      	ldrb	r0, [r3, #0]
}
 80009a8:	1e83      	subs	r3, r0, #2
 80009aa:	4258      	negs	r0, r3
 80009ac:	4158      	adcs	r0, r3
 80009ae:	4770      	bx	lr
 80009b0:	200000c4 	.word	0x200000c4
 80009b4:	00000000 	.word	0x00000000

080009b8 <HAL_ADC_ConvCpltCallback>:
extern ADC_HandleTypeDef hadc1;

BATTERY_LEVEL_DATA_t BATTERY_LEVEL_Data;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
	if(hadc->Instance == hadc1.Instance){
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <HAL_ADC_ConvCpltCallback+0x78>)
 80009ba:	6801      	ldr	r1, [r0, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80009be:	b510      	push	{r4, lr}
	if(hadc->Instance == hadc1.Instance){
 80009c0:	4291      	cmp	r1, r2
 80009c2:	d127      	bne.n	8000a14 <HAL_ADC_ConvCpltCallback+0x5c>
		BATTERY_LEVEL_Data.ADC_Value = HAL_ADC_GetValue(&hadc1);
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fc1d 	bl	8002204 <HAL_ADC_GetValue>
 80009ca:	4c1a      	ldr	r4, [pc, #104]	; (8000a34 <HAL_ADC_ConvCpltCallback+0x7c>)
 80009cc:	60a0      	str	r0, [r4, #8]
		BATTERY_LEVEL_Data.batterry_voltage = BATTERY_LEVEL_Data.ADC_Value * 3.3 / 4096.0 * 3.2;
 80009ce:	f7ff fe33 	bl	8000638 <__aeabi_ui2d>
 80009d2:	a311      	add	r3, pc, #68	; (adr r3, 8000a18 <HAL_ADC_ConvCpltCallback+0x60>)
 80009d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009d8:	f7ff fbc2 	bl	8000160 <__aeabi_dmul>
 80009dc:	2200      	movs	r2, #0
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <HAL_ADC_ConvCpltCallback+0x80>)
 80009e0:	f7ff fbbe 	bl	8000160 <__aeabi_dmul>
 80009e4:	a30e      	add	r3, pc, #56	; (adr r3, 8000a20 <HAL_ADC_ConvCpltCallback+0x68>)
 80009e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ea:	f7ff fbb9 	bl	8000160 <__aeabi_dmul>
 80009ee:	f7ff febd 	bl	800076c <__aeabi_d2f>
 80009f2:	6020      	str	r0, [r4, #0]
		BATTERY_LEVEL_Data.battery_level = (8.4 - BATTERY_LEVEL_Data.batterry_voltage) / 1.0 * 100;
 80009f4:	f7ff fe42 	bl	800067c <__aeabi_f2d>
 80009f8:	4602      	mov	r2, r0
 80009fa:	460b      	mov	r3, r1
 80009fc:	a10a      	add	r1, pc, #40	; (adr r1, 8000a28 <HAL_ADC_ConvCpltCallback+0x70>)
 80009fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a02:	f7ff fcdb 	bl	80003bc <__aeabi_dsub>
 8000a06:	2200      	movs	r2, #0
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <HAL_ADC_ConvCpltCallback+0x84>)
 8000a0a:	f7ff fba9 	bl	8000160 <__aeabi_dmul>
 8000a0e:	f7ff fe8d 	bl	800072c <__aeabi_d2uiz>
 8000a12:	7120      	strb	r0, [r4, #4]
	}
}
 8000a14:	bd10      	pop	{r4, pc}
 8000a16:	bf00      	nop
 8000a18:	66666666 	.word	0x66666666
 8000a1c:	400a6666 	.word	0x400a6666
 8000a20:	9999999a 	.word	0x9999999a
 8000a24:	40099999 	.word	0x40099999
 8000a28:	cccccccd 	.word	0xcccccccd
 8000a2c:	4020cccc 	.word	0x4020cccc
 8000a30:	2000018c 	.word	0x2000018c
 8000a34:	200000dc 	.word	0x200000dc
 8000a38:	3f300000 	.word	0x3f300000
 8000a3c:	40590000 	.word	0x40590000

08000a40 <BATTERY_LEVEL_Init>:

void BATTERY_LEVEL_Init(){
	BATTERY_LEVEL_Data.batterry_voltage = 0.0;
 8000a40:	2200      	movs	r2, #0
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <BATTERY_LEVEL_Init+0x14>)
	BATTERY_LEVEL_Data.battery_level = 100;
	BATTERY_LEVEL_Data.ADC_Value = 0;
	HAL_ADC_Start_IT(&hadc1);
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <BATTERY_LEVEL_Init+0x18>)
	BATTERY_LEVEL_Data.batterry_voltage = 0.0;
 8000a46:	601a      	str	r2, [r3, #0]
	BATTERY_LEVEL_Data.battery_level = 100;
 8000a48:	2264      	movs	r2, #100	; 0x64
 8000a4a:	711a      	strb	r2, [r3, #4]
	BATTERY_LEVEL_Data.ADC_Value = 0;
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
	HAL_ADC_Start_IT(&hadc1);
 8000a50:	f001 bd0c 	b.w	800246c <HAL_ADC_Start_IT>
 8000a54:	200000dc 	.word	0x200000dc
 8000a58:	2000018c 	.word	0x2000018c

08000a5c <BATTERY_LEVEL_Handle>:
}

void BATTERY_LEVEL_Handle(){
 8000a5c:	b510      	push	{r4, lr}
	static uint32_t adc_conversion_timer = 0;
	if(HAL_GetTick() - adc_conversion_timer > 10000){
 8000a5e:	f001 fbb9 	bl	80021d4 <HAL_GetTick>
 8000a62:	4c07      	ldr	r4, [pc, #28]	; (8000a80 <BATTERY_LEVEL_Handle+0x24>)
 8000a64:	6823      	ldr	r3, [r4, #0]
 8000a66:	1ac0      	subs	r0, r0, r3
 8000a68:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a6c:	4298      	cmp	r0, r3
 8000a6e:	d905      	bls.n	8000a7c <BATTERY_LEVEL_Handle+0x20>
		HAL_ADC_Start_IT(&hadc1);
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <BATTERY_LEVEL_Handle+0x28>)
 8000a72:	f001 fcfb 	bl	800246c <HAL_ADC_Start_IT>
		adc_conversion_timer = HAL_GetTick();
 8000a76:	f001 fbad 	bl	80021d4 <HAL_GetTick>
 8000a7a:	6020      	str	r0, [r4, #0]
	}
}
 8000a7c:	bd10      	pop	{r4, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000e8 	.word	0x200000e8
 8000a84:	2000018c 	.word	0x2000018c

08000a88 <BTN_Short_Pressing_Callback>:

BUTTON_HandleTypedef h_encoder_button;
ENCODER_HandleTypeDef h_encoder;
extern TIM_HandleTypeDef htim2;

void BTN_Short_Pressing_Callback(BUTTON_HandleTypedef *p_ButtonX){
 8000a88:	b508      	push	{r3, lr}
	if(p_ButtonX == &h_encoder_button){
 8000a8a:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <BTN_Short_Pressing_Callback+0x98>)
 8000a8c:	4283      	cmp	r3, r0
 8000a8e:	d145      	bne.n	8000b1c <BTN_Short_Pressing_Callback+0x94>
		if(ALARM_Is_Buzzer_Running()){
 8000a90:	f7ff ff88 	bl	80009a4 <ALARM_Is_Buzzer_Running>
 8000a94:	b388      	cbz	r0, 8000afa <BTN_Short_Pressing_Callback+0x72>
				break;
			default:
				break;
		}
	}
}
 8000a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			ALARM_Stop_Buzzer();
 8000a9a:	f7ff bf79 	b.w	8000990 <ALARM_Stop_Buzzer>
}
 8000a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				SETTING_MENU_Set_State();
 8000aa2:	f000 bc17 	b.w	80012d4 <SETTING_MENU_Set_State>
				if(SETTING_MENU_Data.current_pointer == 0){
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <BTN_Short_Pressing_Callback+0x9c>)
 8000aa8:	f993 3000 	ldrsb.w	r3, [r3]
 8000aac:	b91b      	cbnz	r3, 8000ab6 <BTN_Short_Pressing_Callback+0x2e>
}
 8000aae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					SETTING_MENU_Change_Working_State();
 8000ab2:	f000 bc49 	b.w	8001348 <SETTING_MENU_Change_Working_State>
				} else if(SETTING_MENU_Data.current_pointer == 1){
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d103      	bne.n	8000ac2 <BTN_Short_Pressing_Callback+0x3a>
}
 8000aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					TL_MENU_Set_State();
 8000abe:	f000 beaf 	b.w	8001820 <TL_MENU_Set_State>
				} else if(SETTING_MENU_Data.current_pointer == 2){
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d12a      	bne.n	8000b1c <BTN_Short_Pressing_Callback+0x94>
}
 8000ac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					SR_MENU_Set_State();
 8000aca:	f000 bcc3 	b.w	8001454 <SR_MENU_Set_State>
				SR_MENU_Change_Setting_State(INCREASE);
 8000ace:	2001      	movs	r0, #1
}
 8000ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				SR_MENU_Change_Setting_State(INCREASE);
 8000ad4:	f000 bcd2 	b.w	800147c <SR_MENU_Change_Setting_State>
				if(TL_MENU_Data.current_pointer == 0){
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <BTN_Short_Pressing_Callback+0xa0>)
 8000ada:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ade:	b91b      	cbnz	r3, 8000ae8 <BTN_Short_Pressing_Callback+0x60>
}
 8000ae0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					ST_MENU_Set_State();
 8000ae4:	f000 bdb4 	b.w	8001650 <ST_MENU_Set_State>
}
 8000ae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					TL_MENU_Change_Working_State();
 8000aec:	f000 beb0 	b.w	8001850 <TL_MENU_Change_Working_State>
				ST_MENU_Change_Setting_State(INCREASE);
 8000af0:	2001      	movs	r0, #1
}
 8000af2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				ST_MENU_Change_Setting_State(INCREASE);
 8000af6:	f000 bdbf 	b.w	8001678 <ST_MENU_Change_Setting_State>
		switch(MENU_Data.menu_type){
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <BTN_Short_Pressing_Callback+0xa4>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d80c      	bhi.n	8000b1c <BTN_Short_Pressing_Callback+0x94>
 8000b02:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <BTN_Short_Pressing_Callback+0x80>)
 8000b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b08:	08000a9f 	.word	0x08000a9f
 8000b0c:	08000aa7 	.word	0x08000aa7
 8000b10:	08000acf 	.word	0x08000acf
 8000b14:	08000ad9 	.word	0x08000ad9
 8000b18:	08000af1 	.word	0x08000af1
}
 8000b1c:	bd08      	pop	{r3, pc}
 8000b1e:	bf00      	nop
 8000b20:	200000f4 	.word	0x200000f4
 8000b24:	20000178 	.word	0x20000178
 8000b28:	20000187 	.word	0x20000187
 8000b2c:	20000164 	.word	0x20000164

08000b30 <BTN_Long_Pressing_Callback>:

void BTN_Long_Pressing_Callback(BUTTON_HandleTypedef *p_ButtonX){
 8000b30:	b508      	push	{r3, lr}
	if(p_ButtonX == &h_encoder_button){
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <BTN_Long_Pressing_Callback+0x7c>)
 8000b34:	4283      	cmp	r3, r0
 8000b36:	d137      	bne.n	8000ba8 <BTN_Long_Pressing_Callback+0x78>
		if(ALARM_Is_Buzzer_Running()){
 8000b38:	f7ff ff34 	bl	80009a4 <ALARM_Is_Buzzer_Running>
 8000b3c:	b320      	cbz	r0, 8000b88 <BTN_Long_Pressing_Callback+0x58>
				break;
			default:
				break;
		}
	}
}
 8000b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			ALARM_Stop_Buzzer();
 8000b42:	f7ff bf25 	b.w	8000990 <ALARM_Stop_Buzzer>
				if(SETTING_MENU_Data.is_setting_time_format == 1){
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <BTN_Long_Pressing_Callback+0x80>)
 8000b48:	785b      	ldrb	r3, [r3, #1]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d103      	bne.n	8000b56 <BTN_Long_Pressing_Callback+0x26>
}
 8000b4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					SETTING_MENU_Change_Working_State();
 8000b52:	f000 bbf9 	b.w	8001348 <SETTING_MENU_Change_Working_State>
}
 8000b56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					MAIN_MENU_Set_State();
 8000b5a:	f000 bb5f 	b.w	800121c <MAIN_MENU_Set_State>
				SR_MENU_Change_Setting_State(DECREASE);
 8000b5e:	2000      	movs	r0, #0
}
 8000b60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				SR_MENU_Change_Setting_State(DECREASE);
 8000b64:	f000 bc8a 	b.w	800147c <SR_MENU_Change_Setting_State>
				if(TL_MENU_Data.woking_state == NORMAL_STATE){
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <BTN_Long_Pressing_Callback+0x84>)
 8000b6a:	78db      	ldrb	r3, [r3, #3]
 8000b6c:	b91b      	cbnz	r3, 8000b76 <BTN_Long_Pressing_Callback+0x46>
}
 8000b6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					SETTING_MENU_Set_State();
 8000b72:	f000 bbaf 	b.w	80012d4 <SETTING_MENU_Set_State>
}
 8000b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					TL_MENU_Change_Working_State();
 8000b7a:	f000 be69 	b.w	8001850 <TL_MENU_Change_Working_State>
				ST_MENU_Change_Setting_State(DECREASE);
 8000b7e:	2000      	movs	r0, #0
}
 8000b80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				ST_MENU_Change_Setting_State(DECREASE);
 8000b84:	f000 bd78 	b.w	8001678 <ST_MENU_Change_Setting_State>
		switch(MENU_Data.menu_type){
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <BTN_Long_Pressing_Callback+0x88>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d80a      	bhi.n	8000ba8 <BTN_Long_Pressing_Callback+0x78>
 8000b92:	a201      	add	r2, pc, #4	; (adr r2, 8000b98 <BTN_Long_Pressing_Callback+0x68>)
 8000b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b98:	08000b47 	.word	0x08000b47
 8000b9c:	08000b5f 	.word	0x08000b5f
 8000ba0:	08000b69 	.word	0x08000b69
 8000ba4:	08000b7f 	.word	0x08000b7f
}
 8000ba8:	bd08      	pop	{r3, pc}
 8000baa:	bf00      	nop
 8000bac:	200000f4 	.word	0x200000f4
 8000bb0:	20000178 	.word	0x20000178
 8000bb4:	20000187 	.word	0x20000187
 8000bb8:	20000164 	.word	0x20000164

08000bbc <ENCODER_Forward_Callback>:

void ENCODER_Forward_Callback(ENCODER_HandleTypeDef *p_encoder){
	if(p_encoder == &h_encoder){
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <ENCODER_Forward_Callback+0x48>)
 8000bbe:	4283      	cmp	r3, r0
 8000bc0:	d11f      	bne.n	8000c02 <ENCODER_Forward_Callback+0x46>
		switch(MENU_Data.menu_type){
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <ENCODER_Forward_Callback+0x4c>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d81a      	bhi.n	8000c02 <ENCODER_Forward_Callback+0x46>
 8000bcc:	e8df f003 	tbb	[pc, r3]
 8000bd0:	160e0b02 	.word	0x160e0b02
			case MAIN_MENU:

				break;
			case SETTING_MENU:
				if(SETTING_MENU_Data.is_setting_time_format == 1){
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <ENCODER_Forward_Callback+0x50>)
 8000bd6:	785b      	ldrb	r3, [r3, #1]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d101      	bne.n	8000be0 <ENCODER_Forward_Callback+0x24>
					SETTING_MENU_Config_Time_Format();
 8000bdc:	f000 bb8a 	b.w	80012f4 <SETTING_MENU_Config_Time_Format>
				} else{
					SETTING_MENU_Change_Pointer(INCREASE);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f000 bb97 	b.w	8001314 <SETTING_MENU_Change_Pointer>
				}
				break;
			case SETTING_REALTIME_MENU:
				SR_MENU_Set_Value(INCREASE);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f000 bc6a 	b.w	80014c0 <SR_MENU_Set_Value>
				break;
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.woking_state == NORMAL_STATE)
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <ENCODER_Forward_Callback+0x54>)
					TL_MENU_Change_Pointer(INCREASE);
 8000bee:	2001      	movs	r0, #1
				if(TL_MENU_Data.woking_state == NORMAL_STATE)
 8000bf0:	78db      	ldrb	r3, [r3, #3]
 8000bf2:	b90b      	cbnz	r3, 8000bf8 <ENCODER_Forward_Callback+0x3c>
					TL_MENU_Change_Pointer(INCREASE);
 8000bf4:	f000 be68 	b.w	80018c8 <TL_MENU_Change_Pointer>
				else
					TL_MENU_Config_Timeline(INCREASE);
 8000bf8:	f000 be8e 	b.w	8001918 <TL_MENU_Config_Timeline>
				break;
			case SETTING_TIMELINE_MENU:
				ST_MENU_Set_Value(INCREASE);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 bd61 	b.w	80016c4 <ST_MENU_Set_Value>
				break;
			default:
				break;
		}
	}
}
 8000c02:	4770      	bx	lr
 8000c04:	200000ec 	.word	0x200000ec
 8000c08:	20000164 	.word	0x20000164
 8000c0c:	20000178 	.word	0x20000178
 8000c10:	20000187 	.word	0x20000187

08000c14 <ENCODER_Backward_Callback>:

void ENCODER_Backward_Callback(ENCODER_HandleTypeDef *p_encoder){
	if(p_encoder == &h_encoder){
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <ENCODER_Backward_Callback+0x48>)
 8000c16:	4283      	cmp	r3, r0
 8000c18:	d11f      	bne.n	8000c5a <ENCODER_Backward_Callback+0x46>
		switch(MENU_Data.menu_type){
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <ENCODER_Backward_Callback+0x4c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d81a      	bhi.n	8000c5a <ENCODER_Backward_Callback+0x46>
 8000c24:	e8df f003 	tbb	[pc, r3]
 8000c28:	160e0b02 	.word	0x160e0b02
			case MAIN_MENU:

				break;
			case SETTING_MENU:
				if(SETTING_MENU_Data.is_setting_time_format == 1){
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <ENCODER_Backward_Callback+0x50>)
 8000c2e:	785b      	ldrb	r3, [r3, #1]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d101      	bne.n	8000c38 <ENCODER_Backward_Callback+0x24>
					SETTING_MENU_Config_Time_Format();
 8000c34:	f000 bb5e 	b.w	80012f4 <SETTING_MENU_Config_Time_Format>
				} else{
					SETTING_MENU_Change_Pointer(DECREASE);
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 bb6b 	b.w	8001314 <SETTING_MENU_Change_Pointer>
				}
				break;
			case SETTING_REALTIME_MENU:
				SR_MENU_Set_Value(DECREASE);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 bc3e 	b.w	80014c0 <SR_MENU_Set_Value>
				break;
			case TIMELINE_LIST_MENU:
				if(TL_MENU_Data.woking_state == NORMAL_STATE)
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <ENCODER_Backward_Callback+0x54>)
 8000c46:	78d8      	ldrb	r0, [r3, #3]
 8000c48:	b908      	cbnz	r0, 8000c4e <ENCODER_Backward_Callback+0x3a>
					TL_MENU_Change_Pointer(DECREASE);
 8000c4a:	f000 be3d 	b.w	80018c8 <TL_MENU_Change_Pointer>
				else
					TL_MENU_Config_Timeline(DECREASE);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 be62 	b.w	8001918 <TL_MENU_Config_Timeline>
				break;
			case SETTING_TIMELINE_MENU:
				ST_MENU_Set_Value(DECREASE);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f000 bd35 	b.w	80016c4 <ST_MENU_Set_Value>
				break;
			default:
				break;
		}
	}
}
 8000c5a:	4770      	bx	lr
 8000c5c:	200000ec 	.word	0x200000ec
 8000c60:	20000164 	.word	0x20000164
 8000c64:	20000178 	.word	0x20000178
 8000c68:	20000187 	.word	0x20000187

08000c6c <ROTARY_ENCODER_Init>:

void ROTARY_ENCODER_Init(){
 8000c6c:	b508      	push	{r3, lr}
	BUTTON_Init(&h_encoder_button, GPIOB, GPIO_PIN_4);
 8000c6e:	2210      	movs	r2, #16
 8000c70:	4909      	ldr	r1, [pc, #36]	; (8000c98 <ROTARY_ENCODER_Init+0x2c>)
 8000c72:	480a      	ldr	r0, [pc, #40]	; (8000c9c <ROTARY_ENCODER_Init+0x30>)
 8000c74:	f003 fe94 	bl	80049a0 <BUTTON_Init>
	BUTTON_Set_Callback_Function(NULL, NULL, BTN_Short_Pressing_Callback, BTN_Long_Pressing_Callback);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <ROTARY_ENCODER_Init+0x34>)
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	4a09      	ldr	r2, [pc, #36]	; (8000ca4 <ROTARY_ENCODER_Init+0x38>)
 8000c80:	f003 fe98 	bl	80049b4 <BUTTON_Set_Callback_Function>
	ENCODER_Init(&h_encoder, &htim2);
 8000c84:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <ROTARY_ENCODER_Init+0x3c>)
 8000c86:	4809      	ldr	r0, [pc, #36]	; (8000cac <ROTARY_ENCODER_Init+0x40>)
 8000c88:	f003 fcb2 	bl	80045f0 <ENCODER_Init>
	ENCODER_Set_Callback_Function(ENCODER_Forward_Callback, ENCODER_Backward_Callback);
}
 8000c8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ENCODER_Set_Callback_Function(ENCODER_Forward_Callback, ENCODER_Backward_Callback);
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <ROTARY_ENCODER_Init+0x44>)
 8000c92:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <ROTARY_ENCODER_Init+0x48>)
 8000c94:	f003 bcb0 	b.w	80045f8 <ENCODER_Set_Callback_Function>
 8000c98:	40010c00 	.word	0x40010c00
 8000c9c:	200000f4 	.word	0x200000f4
 8000ca0:	08000b31 	.word	0x08000b31
 8000ca4:	08000a89 	.word	0x08000a89
 8000ca8:	2000028c 	.word	0x2000028c
 8000cac:	200000ec 	.word	0x200000ec
 8000cb0:	08000c15 	.word	0x08000c15
 8000cb4:	08000bbd 	.word	0x08000bbd

08000cb8 <ROTARY_ENCODER_Handle>:

void ROTARY_ENCODER_Handle(){
 8000cb8:	b508      	push	{r3, lr}
	BUTTON_Handle(&h_encoder_button);
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <ROTARY_ENCODER_Handle+0x14>)
 8000cbc:	f003 fe16 	bl	80048ec <BUTTON_Handle>
	ENCODER_Handle(&h_encoder);
}
 8000cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ENCODER_Handle(&h_encoder);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <ROTARY_ENCODER_Handle+0x18>)
 8000cc6:	f003 bcb7 	b.w	8004638 <ENCODER_Handle>
 8000cca:	bf00      	nop
 8000ccc:	200000f4 	.word	0x200000f4
 8000cd0:	200000ec 	.word	0x200000ec

08000cd4 <TIMELINE_Init>:
//			HAL_UART_Transmit(&huart2, (uint8_t *)Tx_Buffer, strlen(Tx_Buffer), 1000);
//		}
//	}
}

void TIMELINE_Init(){
 8000cd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
#ifdef __STM32F0xx_HAL_H
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63;
#endif
#ifdef __STM32F1xx_HAL_H
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63; // 0x0800FC00
 8000cd6:	4c11      	ldr	r4, [pc, #68]	; (8000d1c <TIMELINE_Init+0x48>)
#endif
#ifdef __STM32F4xx_HAL_H
	TIMELINE_Data.add = SECTOR_7_ADD;
#endif

	TIMELINE_Data.len = 0;
 8000cd8:	2500      	movs	r5, #0
 8000cda:	4626      	mov	r6, r4
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63; // 0x0800FC00
 8000cdc:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <TIMELINE_Init+0x4c>)
	TIMELINE_Data.len = 0;
 8000cde:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	TIMELINE_Data.add = FIRST_PAGE_ADD + BYTE_PER_PAGE * 63; // 0x0800FC00
 8000ce2:	6023      	str	r3, [r4, #0]
	for(int i = 0; i < MAX_OPTIONS; i++){
		uint8_t t_data[DATA_FRAME_SIZE_BYTE];
		FLASH_Read(TIMELINE_Data.add + i*DATA_FRAME_SIZE_BYTE, t_data, DATA_FRAME_SIZE_BYTE);
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	6830      	ldr	r0, [r6, #0]
 8000ce8:	eb0d 0102 	add.w	r1, sp, r2
 8000cec:	4428      	add	r0, r5
 8000cee:	f003 feb0 	bl	8004a52 <FLASH_Read>
		if(*(uint32_t *)t_data == 0xFFFFFFFF){
 8000cf2:	9b01      	ldr	r3, [sp, #4]
	for(int i = 0; i < MAX_OPTIONS; i++){
 8000cf4:	3504      	adds	r5, #4
		if(*(uint32_t *)t_data == 0xFFFFFFFF){
 8000cf6:	1c5a      	adds	r2, r3, #1
			*(uint32_t *)(TIMELINE_Data.flash_data + i) = 0xFFFFFFFF;
		} else{
			TIMELINE_Data.flash_data[i] = *((FLASH_DATA_t *)t_data);
 8000cf8:	bf17      	itett	ne
 8000cfa:	9801      	ldrne	r0, [sp, #4]
			*(uint32_t *)(TIMELINE_Data.flash_data + i) = 0xFFFFFFFF;
 8000cfc:	6063      	streq	r3, [r4, #4]
			TIMELINE_Data.flash_data[i] = *((FLASH_DATA_t *)t_data);
 8000cfe:	6060      	strne	r0, [r4, #4]
			TIMELINE_Data.len++;
 8000d00:	f896 303c 	ldrbne.w	r3, [r6, #60]	; 0x3c
 8000d04:	f104 0204 	add.w	r2, r4, #4
 8000d08:	bf1c      	itt	ne
 8000d0a:	3301      	addne	r3, #1
 8000d0c:	f886 303c 	strbne.w	r3, [r6, #60]	; 0x3c
	for(int i = 0; i < MAX_OPTIONS; i++){
 8000d10:	2d38      	cmp	r5, #56	; 0x38
 8000d12:	4614      	mov	r4, r2
 8000d14:	d1e6      	bne.n	8000ce4 <TIMELINE_Init+0x10>
		}
	}
}
 8000d16:	b002      	add	sp, #8
 8000d18:	bd70      	pop	{r4, r5, r6, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000010c 	.word	0x2000010c
 8000d20:	0800fc00 	.word	0x0800fc00

08000d24 <TIMELINE_Sort>:
		TIMELINE_Store_To_Flash();
	}
}

void TIMELINE_Sort(){
	for(int i = 0; i < TIMELINE_Data.len; i++){
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <TIMELINE_Sort+0x64>)
void TIMELINE_Sort(){
 8000d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(int i = 0; i < TIMELINE_Data.len; i++){
 8000d2a:	2400      	movs	r4, #0
 8000d2c:	469e      	mov	lr, r3
 8000d2e:	f89e 703c 	ldrb.w	r7, [lr, #60]	; 0x3c
 8000d32:	42a7      	cmp	r7, r4
 8000d34:	dc01      	bgt.n	8000d3a <TIMELINE_Sort+0x16>
				TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[j];
				TIMELINE_Data.flash_data[j] = t_temp;
			}
		}
	}
}
 8000d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for(int j = i + 1; j < TIMELINE_Data.len; j++){
 8000d3a:	3401      	adds	r4, #1
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4625      	mov	r5, r4
 8000d40:	42af      	cmp	r7, r5
 8000d42:	dc01      	bgt.n	8000d48 <TIMELINE_Sort+0x24>
 8000d44:	3304      	adds	r3, #4
 8000d46:	e7f2      	b.n	8000d2e <TIMELINE_Sort+0xa>
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 8000d48:	7a11      	ldrb	r1, [r2, #8]
			uint16_t t_data_i = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 8000d4a:	791e      	ldrb	r6, [r3, #4]
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 8000d4c:	ebc1 1801 	rsb	r8, r1, r1, lsl #4
			uint16_t t_data_i = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 8000d50:	f893 c005 	ldrb.w	ip, [r3, #5]
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 8000d54:	7a51      	ldrb	r1, [r2, #9]
			uint16_t t_data_i = TIMELINE_Data.flash_data[i].hour * 60 + TIMELINE_Data.flash_data[i].minute;
 8000d56:	ebc6 1006 	rsb	r0, r6, r6, lsl #4
 8000d5a:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
			uint16_t t_data_j = TIMELINE_Data.flash_data[j].hour * 60 + TIMELINE_Data.flash_data[j].minute;
 8000d5e:	eb01 0188 	add.w	r1, r1, r8, lsl #2
			if(t_data_i > t_data_j){
 8000d62:	b280      	uxth	r0, r0
 8000d64:	b289      	uxth	r1, r1
 8000d66:	4288      	cmp	r0, r1
 8000d68:	d90a      	bls.n	8000d80 <TIMELINE_Sort+0x5c>
				t_temp = TIMELINE_Data.flash_data[i];
 8000d6a:	7998      	ldrb	r0, [r3, #6]
 8000d6c:	79d9      	ldrb	r1, [r3, #7]
				TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[j];
 8000d6e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8000d72:	f8c3 8004 	str.w	r8, [r3, #4]
				TIMELINE_Data.flash_data[j] = t_temp;
 8000d76:	7216      	strb	r6, [r2, #8]
 8000d78:	f882 c009 	strb.w	ip, [r2, #9]
 8000d7c:	7290      	strb	r0, [r2, #10]
 8000d7e:	72d1      	strb	r1, [r2, #11]
		for(int j = i + 1; j < TIMELINE_Data.len; j++){
 8000d80:	3501      	adds	r5, #1
 8000d82:	3204      	adds	r2, #4
 8000d84:	e7dc      	b.n	8000d40 <TIMELINE_Sort+0x1c>
 8000d86:	bf00      	nop
 8000d88:	2000010c 	.word	0x2000010c

08000d8c <TIMELINE_Store_To_Flash>:

void TIMELINE_Store_To_Flash(){
 8000d8c:	b570      	push	{r4, r5, r6, lr}
	FLASH_DATA_t *t_flash_data;
	t_flash_data = (FLASH_DATA_t *)malloc(TIMELINE_Data.len * DATA_FRAME_SIZE_BIT);
 8000d8e:	4e0b      	ldr	r6, [pc, #44]	; (8000dbc <TIMELINE_Store_To_Flash+0x30>)
 8000d90:	f896 403c 	ldrb.w	r4, [r6, #60]	; 0x3c
 8000d94:	0160      	lsls	r0, r4, #5
 8000d96:	f003 fe93 	bl	8004ac0 <malloc>
 8000d9a:	4605      	mov	r5, r0
	for(int i = 0; i < TIMELINE_Data.len; i++){
		*(t_flash_data + i) = *(TIMELINE_Data.flash_data + i);
 8000d9c:	00a4      	lsls	r4, r4, #2
 8000d9e:	4622      	mov	r2, r4
 8000da0:	1d31      	adds	r1, r6, #4
 8000da2:	f003 fe9d 	bl	8004ae0 <memcpy>
	}
	FLASH_Write(63, (uint8_t *)t_flash_data, TIMELINE_Data.len * DATA_FRAME_SIZE_BYTE);
 8000da6:	4622      	mov	r2, r4
 8000da8:	4629      	mov	r1, r5
 8000daa:	203f      	movs	r0, #63	; 0x3f
 8000dac:	f003 fe2a 	bl	8004a04 <FLASH_Write>
	free(t_flash_data);
 8000db0:	4628      	mov	r0, r5
}
 8000db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free(t_flash_data);
 8000db6:	f003 be8b 	b.w	8004ad0 <free>
 8000dba:	bf00      	nop
 8000dbc:	2000010c 	.word	0x2000010c

08000dc0 <TIMELINE_Add>:
void TIMELINE_Add(FLASH_DATA_t *p_new_timeline){
 8000dc0:	b508      	push	{r3, lr}
	if(TIMELINE_Data.len < MAX_OPTIONS){
 8000dc2:	4a09      	ldr	r2, [pc, #36]	; (8000de8 <TIMELINE_Add+0x28>)
 8000dc4:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8000dc8:	2b0d      	cmp	r3, #13
 8000dca:	d80c      	bhi.n	8000de6 <TIMELINE_Add+0x26>
		TIMELINE_Data.flash_data[TIMELINE_Data.len] = *p_new_timeline;
 8000dcc:	6800      	ldr	r0, [r0, #0]
 8000dce:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8000dd2:	6048      	str	r0, [r1, #4]
		TIMELINE_Data.len++;
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
		TIMELINE_Sort();
 8000dda:	f7ff ffa3 	bl	8000d24 <TIMELINE_Sort>
}
 8000dde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		TIMELINE_Store_To_Flash();
 8000de2:	f7ff bfd3 	b.w	8000d8c <TIMELINE_Store_To_Flash>
}
 8000de6:	bd08      	pop	{r3, pc}
 8000de8:	2000010c 	.word	0x2000010c

08000dec <TIMELINE_Delete>:
void TIMELINE_Delete(uint8_t p_index){
 8000dec:	b4f0      	push	{r4, r5, r6, r7}
 8000dee:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <TIMELINE_Delete+0x40>)
 8000df0:	eb02 0380 	add.w	r3, r2, r0, lsl #2
		for(int i = p_index; i < TIMELINE_Data.len - 1; i++){
 8000df4:	f892 403c 	ldrb.w	r4, [r2, #60]	; 0x3c
 8000df8:	1e61      	subs	r1, r4, #1
 8000dfa:	4281      	cmp	r1, r0
 8000dfc:	dc08      	bgt.n	8000e10 <TIMELINE_Delete+0x24>
		*(uint32_t *)(TIMELINE_Data.flash_data + TIMELINE_Data.len - 1) = 0xFFFFFFFF;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		TIMELINE_Data.len--;
 8000e06:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8000e0a:	bcf0      	pop	{r4, r5, r6, r7}
		TIMELINE_Store_To_Flash();
 8000e0c:	f7ff bfbe 	b.w	8000d8c <TIMELINE_Store_To_Flash>
			TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[i+1];
 8000e10:	689f      	ldr	r7, [r3, #8]
			FLASH_DATA_t t_temp = TIMELINE_Data.flash_data[i];
 8000e12:	791e      	ldrb	r6, [r3, #4]
 8000e14:	795d      	ldrb	r5, [r3, #5]
 8000e16:	799c      	ldrb	r4, [r3, #6]
 8000e18:	79d9      	ldrb	r1, [r3, #7]
			TIMELINE_Data.flash_data[i+1] = t_temp;
 8000e1a:	721e      	strb	r6, [r3, #8]
			TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[i+1];
 8000e1c:	605f      	str	r7, [r3, #4]
			TIMELINE_Data.flash_data[i+1] = t_temp;
 8000e1e:	725d      	strb	r5, [r3, #9]
 8000e20:	729c      	strb	r4, [r3, #10]
 8000e22:	72d9      	strb	r1, [r3, #11]
			TIMELINE_Data.flash_data[i] = TIMELINE_Data.flash_data[i+1];
 8000e24:	3001      	adds	r0, #1
 8000e26:	3304      	adds	r3, #4
 8000e28:	e7e4      	b.n	8000df4 <TIMELINE_Delete+0x8>
 8000e2a:	bf00      	nop
 8000e2c:	2000010c 	.word	0x2000010c

08000e30 <REALTIME_Init>:
extern RTC_HandleTypeDef hrtc;
#endif

static uint32_t timer = 0;

void REALTIME_Init(){
 8000e30:	b538      	push	{r3, r4, r5, lr}
	DS3231_Init(&hds3231, &hi2c2);
 8000e32:	4d11      	ldr	r5, [pc, #68]	; (8000e78 <REALTIME_Init+0x48>)
 8000e34:	4911      	ldr	r1, [pc, #68]	; (8000e7c <REALTIME_Init+0x4c>)
 8000e36:	4628      	mov	r0, r5
 8000e38:	f003 faeb 	bl	8004412 <DS3231_Init>
	REALTIME_Data.system_day = 1;
 8000e3c:	2201      	movs	r2, #1
	REALTIME_Data.system_hour = 0;
 8000e3e:	2300      	movs	r3, #0
	REALTIME_Data.system_day = 1;
 8000e40:	4c0f      	ldr	r4, [pc, #60]	; (8000e80 <REALTIME_Init+0x50>)
	REALTIME_Data.system_minute = Time.Minutes;
	REALTIME_Data.system_date = Date.Date;
	REALTIME_Data.system_month = Date.Month;
	REALTIME_Data.system_year = Date.Year;
#else
	if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8000e42:	4628      	mov	r0, r5
	REALTIME_Data.system_day = 1;
 8000e44:	70a2      	strb	r2, [r4, #2]
	REALTIME_Data.system_hour = 0;
 8000e46:	7023      	strb	r3, [r4, #0]
	REALTIME_Data.system_minute = 0;
 8000e48:	7063      	strb	r3, [r4, #1]
	REALTIME_Data.system_date = 1;
 8000e4a:	70e2      	strb	r2, [r4, #3]
	REALTIME_Data.system_month = 1;
 8000e4c:	7122      	strb	r2, [r4, #4]
	REALTIME_Data.system_year = 0;
 8000e4e:	7163      	strb	r3, [r4, #5]
	if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8000e50:	f003 fb17 	bl	8004482 <DS3231_Get_Time>
 8000e54:	b178      	cbz	r0, 8000e76 <REALTIME_Init+0x46>
 8000e56:	4628      	mov	r0, r5
 8000e58:	f003 fb7b 	bl	8004552 <DS3231_Get_Date>
 8000e5c:	b158      	cbz	r0, 8000e76 <REALTIME_Init+0x46>
		return;
	}

	REALTIME_Data.system_day = hds3231.current_day;
 8000e5e:	78eb      	ldrb	r3, [r5, #3]
 8000e60:	70a3      	strb	r3, [r4, #2]
	REALTIME_Data.system_hour = hds3231.current_hour;
 8000e62:	782b      	ldrb	r3, [r5, #0]
 8000e64:	7023      	strb	r3, [r4, #0]
	REALTIME_Data.system_minute = hds3231.current_minute;
 8000e66:	786b      	ldrb	r3, [r5, #1]
 8000e68:	7063      	strb	r3, [r4, #1]
	REALTIME_Data.system_date = hds3231.current_date;
 8000e6a:	792b      	ldrb	r3, [r5, #4]
 8000e6c:	70e3      	strb	r3, [r4, #3]
	REALTIME_Data.system_month = hds3231.current_month;
 8000e6e:	796b      	ldrb	r3, [r5, #5]
 8000e70:	7123      	strb	r3, [r4, #4]
	REALTIME_Data.system_year = hds3231.current_year;
 8000e72:	88eb      	ldrh	r3, [r5, #6]
 8000e74:	7163      	strb	r3, [r4, #5]
#endif
}
 8000e76:	bd38      	pop	{r3, r4, r5, pc}
 8000e78:	20000154 	.word	0x20000154
 8000e7c:	200001d0 	.word	0x200001d0
 8000e80:	2000014c 	.word	0x2000014c

08000e84 <REALTIME_Handle>:

void REALTIME_Handle(){
 8000e84:	b538      	push	{r3, r4, r5, lr}
	if(HAL_GetTick() - timer > CHECKING_REAL_TIME_CYCLE){
 8000e86:	f001 f9a5 	bl	80021d4 <HAL_GetTick>
 8000e8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e8e:	4298      	cmp	r0, r3
 8000e90:	d91e      	bls.n	8000ed0 <REALTIME_Handle+0x4c>
		REALTIME_Data.system_minute = Time.Minutes;
		REALTIME_Data.system_date = Date.Date;
		REALTIME_Data.system_month = Date.Month;
		REALTIME_Data.system_year = Date.Year;
#else
		if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8000e92:	4c10      	ldr	r4, [pc, #64]	; (8000ed4 <REALTIME_Handle+0x50>)
 8000e94:	4620      	mov	r0, r4
 8000e96:	f003 faf4 	bl	8004482 <DS3231_Get_Time>
 8000e9a:	b1c8      	cbz	r0, 8000ed0 <REALTIME_Handle+0x4c>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f003 fb58 	bl	8004552 <DS3231_Get_Date>
 8000ea2:	b1a8      	cbz	r0, 8000ed0 <REALTIME_Handle+0x4c>
			return;
		}

		if(REALTIME_Data.system_minute != hds3231.current_minute){
 8000ea4:	4d0c      	ldr	r5, [pc, #48]	; (8000ed8 <REALTIME_Handle+0x54>)
 8000ea6:	7863      	ldrb	r3, [r4, #1]
 8000ea8:	786a      	ldrb	r2, [r5, #1]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d004      	beq.n	8000eb8 <REALTIME_Handle+0x34>
			if(MENU_Data.menu_type == MAIN_MENU){
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <REALTIME_Handle+0x58>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b90b      	cbnz	r3, 8000eb8 <REALTIME_Handle+0x34>
				MAIN_MENU_Update_Value();
 8000eb4:	f000 f9bc 	bl	8001230 <MAIN_MENU_Update_Value>
			}
		}

		REALTIME_Data.system_day = hds3231.current_day;
 8000eb8:	78e3      	ldrb	r3, [r4, #3]
 8000eba:	70ab      	strb	r3, [r5, #2]
		REALTIME_Data.system_hour = hds3231.current_hour;
 8000ebc:	7823      	ldrb	r3, [r4, #0]
 8000ebe:	702b      	strb	r3, [r5, #0]
		REALTIME_Data.system_minute = hds3231.current_minute;
 8000ec0:	7863      	ldrb	r3, [r4, #1]
 8000ec2:	706b      	strb	r3, [r5, #1]
		REALTIME_Data.system_date = hds3231.current_date;
 8000ec4:	7923      	ldrb	r3, [r4, #4]
 8000ec6:	70eb      	strb	r3, [r5, #3]
		REALTIME_Data.system_month = hds3231.current_month;
 8000ec8:	7963      	ldrb	r3, [r4, #5]
 8000eca:	712b      	strb	r3, [r5, #4]
		REALTIME_Data.system_year = hds3231.current_year;
 8000ecc:	88e3      	ldrh	r3, [r4, #6]
 8000ece:	716b      	strb	r3, [r5, #5]
#endif
	}
}
 8000ed0:	bd38      	pop	{r3, r4, r5, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000154 	.word	0x20000154
 8000ed8:	2000014c 	.word	0x2000014c
 8000edc:	20000164 	.word	0x20000164

08000ee0 <REALTIME_Set_New_Realtime>:

void REALTIME_Set_New_Realtime(REALTIME_DATA_HandleTypeDef *p_new_realtime){
 8000ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ee2:	4604      	mov	r4, r0
	Date.Year = REALTIME_Data.system_year;

	if(HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
	if(HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
#else
	DS3231_Set_Time(&hds3231, p_new_realtime->system_hour, p_new_realtime->system_minute, 0, p_new_realtime->system_day);
 8000ee4:	7883      	ldrb	r3, [r0, #2]
 8000ee6:	4d0e      	ldr	r5, [pc, #56]	; (8000f20 <REALTIME_Set_New_Realtime+0x40>)
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	7842      	ldrb	r2, [r0, #1]
 8000eec:	7801      	ldrb	r1, [r0, #0]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f003 fa90 	bl	8004416 <DS3231_Set_Time>
	DS3231_Set_Date(&hds3231, p_new_realtime->system_date, p_new_realtime->system_month, p_new_realtime->system_year);
 8000ef6:	7963      	ldrb	r3, [r4, #5]
 8000ef8:	7922      	ldrb	r2, [r4, #4]
 8000efa:	4628      	mov	r0, r5
 8000efc:	78e1      	ldrb	r1, [r4, #3]
 8000efe:	f003 fafe 	bl	80044fe <DS3231_Set_Date>

	REALTIME_Data.system_day = p_new_realtime->system_day;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <REALTIME_Set_New_Realtime+0x44>)
 8000f04:	78a2      	ldrb	r2, [r4, #2]
 8000f06:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = p_new_realtime->system_hour;
 8000f08:	7822      	ldrb	r2, [r4, #0]
 8000f0a:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = p_new_realtime->system_minute;
 8000f0c:	7862      	ldrb	r2, [r4, #1]
 8000f0e:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = p_new_realtime->system_date;
 8000f10:	78e2      	ldrb	r2, [r4, #3]
 8000f12:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = p_new_realtime->system_month;
 8000f14:	7922      	ldrb	r2, [r4, #4]
 8000f16:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = p_new_realtime->system_year;
 8000f18:	7962      	ldrb	r2, [r4, #5]
 8000f1a:	715a      	strb	r2, [r3, #5]
#endif
}
 8000f1c:	b003      	add	sp, #12
 8000f1e:	bd30      	pop	{r4, r5, pc}
 8000f20:	20000154 	.word	0x20000154
 8000f24:	2000014c 	.word	0x2000014c

08000f28 <MAIN_MENU_Init>:
		{0xFF, 0x02, 0xFF, 0xFF, 0x01, 0xFF},	// 8
		{0xFF, 0x02, 0xFF, 0x01, 0x01, 0xFF},	// 9
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00},	// Nothing
};

void MAIN_MENU_Init(){
 8000f28:	b530      	push	{r4, r5, lr}
 8000f2a:	b091      	sub	sp, #68	; 0x44
	uint8_t num_char_0[] = {
 8000f2c:	466b      	mov	r3, sp
 8000f2e:	4d29      	ldr	r5, [pc, #164]	; (8000fd4 <MAIN_MENU_Init+0xac>)
			0b00000,
			0b00000,
			0b00000,
			0b00000,
	};
	LCD_Create_Char(MENU_Data.hlcd, 0, num_char_0);
 8000f30:	4c29      	ldr	r4, [pc, #164]	; (8000fd8 <MAIN_MENU_Init+0xb0>)
	uint8_t num_char_0[] = {
 8000f32:	6828      	ldr	r0, [r5, #0]
 8000f34:	6869      	ldr	r1, [r5, #4]
	LCD_Create_Char(MENU_Data.hlcd, 0, num_char_0);
 8000f36:	466a      	mov	r2, sp
	uint8_t num_char_0[] = {
 8000f38:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 0, num_char_0);
 8000f3a:	6860      	ldr	r0, [r4, #4]
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	f003 fcc0 	bl	80048c2 <LCD_Create_Char>

	uint8_t num_char_1[] = {
 8000f42:	68a8      	ldr	r0, [r5, #8]
 8000f44:	68e9      	ldr	r1, [r5, #12]
 8000f46:	ab02      	add	r3, sp, #8
 8000f48:	c303      	stmia	r3!, {r0, r1}
			0b00000,
			0b00000,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 1, num_char_1);
 8000f4a:	aa02      	add	r2, sp, #8
 8000f4c:	6860      	ldr	r0, [r4, #4]
 8000f4e:	2101      	movs	r1, #1
 8000f50:	f003 fcb7 	bl	80048c2 <LCD_Create_Char>

	uint8_t num_char_2[] = {
 8000f54:	6928      	ldr	r0, [r5, #16]
 8000f56:	6969      	ldr	r1, [r5, #20]
 8000f58:	ab04      	add	r3, sp, #16
 8000f5a:	c303      	stmia	r3!, {r0, r1}
			0b00000,
			0b00000,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 2, num_char_2);
 8000f5c:	aa04      	add	r2, sp, #16
 8000f5e:	6860      	ldr	r0, [r4, #4]
 8000f60:	2102      	movs	r1, #2
 8000f62:	f003 fcae 	bl	80048c2 <LCD_Create_Char>

	uint8_t thermometro[8] = {
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <MAIN_MENU_Init+0xb4>)
 8000f68:	ab06      	add	r3, sp, #24
 8000f6a:	6810      	ldr	r0, [r2, #0]
 8000f6c:	6851      	ldr	r1, [r2, #4]
			0b01110,
			0b11111,
			0b11111,
			0b01110
	};
	LCD_Create_Char(MENU_Data.hlcd, 3, thermometro);
 8000f6e:	aa06      	add	r2, sp, #24
	uint8_t thermometro[8] = {
 8000f70:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 3, thermometro);
 8000f72:	6860      	ldr	r0, [r4, #4]
 8000f74:	2103      	movs	r1, #3
 8000f76:	f003 fca4 	bl	80048c2 <LCD_Create_Char>

	uint8_t igrasia[8] = {
 8000f7a:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <MAIN_MENU_Init+0xb8>)
 8000f7c:	ab08      	add	r3, sp, #32
 8000f7e:	6810      	ldr	r0, [r2, #0]
 8000f80:	6851      	ldr	r1, [r2, #4]
			0b10001,
			0b10001,
			0b10001,
			0b01110,
	};
	LCD_Create_Char(MENU_Data.hlcd, 4, igrasia);
 8000f82:	aa08      	add	r2, sp, #32
	uint8_t igrasia[8] = {
 8000f84:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 4, igrasia);
 8000f86:	6860      	ldr	r0, [r4, #4]
 8000f88:	2104      	movs	r1, #4
 8000f8a:	f003 fc9a 	bl	80048c2 <LCD_Create_Char>

	uint8_t full_battery[8] = {
 8000f8e:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <MAIN_MENU_Init+0xbc>)
 8000f90:	ab0a      	add	r3, sp, #40	; 0x28
 8000f92:	6810      	ldr	r0, [r2, #0]
 8000f94:	6851      	ldr	r1, [r2, #4]
			0b11111,
			0b11111,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 5, full_battery);
 8000f96:	aa0a      	add	r2, sp, #40	; 0x28
	uint8_t full_battery[8] = {
 8000f98:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 5, full_battery);
 8000f9a:	6860      	ldr	r0, [r4, #4]
 8000f9c:	2105      	movs	r1, #5
 8000f9e:	f003 fc90 	bl	80048c2 <LCD_Create_Char>

	uint8_t half_battery[8] = {
 8000fa2:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <MAIN_MENU_Init+0xc0>)
 8000fa4:	ab0c      	add	r3, sp, #48	; 0x30
 8000fa6:	6810      	ldr	r0, [r2, #0]
 8000fa8:	6851      	ldr	r1, [r2, #4]
			0b11111,
			0b11111,
			0b11111,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 6, half_battery);
 8000faa:	aa0c      	add	r2, sp, #48	; 0x30
	uint8_t half_battery[8] = {
 8000fac:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 6, half_battery);
 8000fae:	6860      	ldr	r0, [r4, #4]
 8000fb0:	2106      	movs	r1, #6
 8000fb2:	f003 fc86 	bl	80048c2 <LCD_Create_Char>

	uint8_t low_battery[8] = {
 8000fb6:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <MAIN_MENU_Init+0xc4>)
 8000fb8:	ab0e      	add	r3, sp, #56	; 0x38
 8000fba:	6810      	ldr	r0, [r2, #0]
 8000fbc:	6851      	ldr	r1, [r2, #4]
			0b10001,
			0b10001,
			0b10001,
			0b11111,
	};
	LCD_Create_Char(MENU_Data.hlcd, 7, low_battery);
 8000fbe:	aa0e      	add	r2, sp, #56	; 0x38
	uint8_t low_battery[8] = {
 8000fc0:	c303      	stmia	r3!, {r0, r1}
	LCD_Create_Char(MENU_Data.hlcd, 7, low_battery);
 8000fc2:	2107      	movs	r1, #7
 8000fc4:	6860      	ldr	r0, [r4, #4]
 8000fc6:	f003 fc7c 	bl	80048c2 <LCD_Create_Char>

	MAIN_MENU_Data.time_format = FORMAT_24_HOURS;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MAIN_MENU_Init+0xc8>)
 8000fce:	701a      	strb	r2, [r3, #0]
}
 8000fd0:	b011      	add	sp, #68	; 0x44
 8000fd2:	bd30      	pop	{r4, r5, pc}
 8000fd4:	0800540c 	.word	0x0800540c
 8000fd8:	20000164 	.word	0x20000164
 8000fdc:	08005424 	.word	0x08005424
 8000fe0:	0800542d 	.word	0x0800542d
 8000fe4:	08005436 	.word	0x08005436
 8000fe8:	0800543f 	.word	0x0800543f
 8000fec:	08005448 	.word	0x08005448
 8000ff0:	20000160 	.word	0x20000160

08000ff4 <MAIN_MENU_Display_Num>:

void MAIN_MENU_Display_Num(uint8_t p_number, uint8_t p_col, uint8_t p_row){
	if(p_row > 2) return;
 8000ff4:	2a02      	cmp	r2, #2
void MAIN_MENU_Display_Num(uint8_t p_number, uint8_t p_col, uint8_t p_row){
 8000ff6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ffa:	4607      	mov	r7, r0
 8000ffc:	4689      	mov	r9, r1
 8000ffe:	4616      	mov	r6, r2
	if(p_row > 2) return;
 8001000:	d82b      	bhi.n	800105a <MAIN_MENU_Display_Num+0x66>

	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row);
 8001002:	f04f 0806 	mov.w	r8, #6
 8001006:	4c16      	ldr	r4, [pc, #88]	; (8001060 <MAIN_MENU_Display_Num+0x6c>)
	for(int i = 0; i < 3; i++){
 8001008:	f04f 0a00 	mov.w	sl, #0
	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row);
 800100c:	6860      	ldr	r0, [r4, #4]
 800100e:	f003 fbb1 	bl	8004774 <LCD_Set_Cursor>
	for(int i = 0; i < 3; i++){
 8001012:	4d14      	ldr	r5, [pc, #80]	; (8001064 <MAIN_MENU_Display_Num+0x70>)
 8001014:	fb08 5807 	mla	r8, r8, r7, r5
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i]);
 8001018:	f818 1b01 	ldrb.w	r1, [r8], #1
 800101c:	6860      	ldr	r0, [r4, #4]
	for(int i = 0; i < 3; i++){
 800101e:	f10a 0a01 	add.w	sl, sl, #1
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i]);
 8001022:	f003 fbdf 	bl	80047e4 <LCD_Send_Data>
	for(int i = 0; i < 3; i++){
 8001026:	f1ba 0f03 	cmp.w	sl, #3
 800102a:	d1f5      	bne.n	8001018 <MAIN_MENU_Display_Num+0x24>
	}

	LCD_Set_Cursor(MENU_Data.hlcd, p_col, p_row + 1);
 800102c:	1c72      	adds	r2, r6, #1
 800102e:	4649      	mov	r1, r9
 8001030:	6860      	ldr	r0, [r4, #4]
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	f003 fb9e 	bl	8004774 <LCD_Set_Cursor>
	for(int i = 0; i < 3; i++){
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i+3]);
 8001038:	2006      	movs	r0, #6
 800103a:	fb00 5507 	mla	r5, r0, r7, r5
 800103e:	6860      	ldr	r0, [r4, #4]
 8001040:	78e9      	ldrb	r1, [r5, #3]
 8001042:	f003 fbcf 	bl	80047e4 <LCD_Send_Data>
 8001046:	7929      	ldrb	r1, [r5, #4]
 8001048:	6860      	ldr	r0, [r4, #4]
 800104a:	f003 fbcb 	bl	80047e4 <LCD_Send_Data>
 800104e:	7969      	ldrb	r1, [r5, #5]
 8001050:	6860      	ldr	r0, [r4, #4]
	}

}
 8001052:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		LCD_Send_Data(MENU_Data.hlcd, (char)number_char[p_number][i+3]);
 8001056:	f003 bbc5 	b.w	80047e4 <LCD_Send_Data>
}
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	bf00      	nop
 8001060:	20000164 	.word	0x20000164
 8001064:	0800547f 	.word	0x0800547f

08001068 <MAIN_MENU_Display>:

void MAIN_MENU_Display(){
 8001068:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(MENU_Data.is_changing_menu){
 800106a:	4c5f      	ldr	r4, [pc, #380]	; (80011e8 <MAIN_MENU_Display+0x180>)
 800106c:	7a63      	ldrb	r3, [r4, #9]
 800106e:	b123      	cbz	r3, 800107a <MAIN_MENU_Display+0x12>
		LCD_Clear(MENU_Data.hlcd);
 8001070:	6860      	ldr	r0, [r4, #4]
 8001072:	f003 fb97 	bl	80047a4 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	7263      	strb	r3, [r4, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 0);
	char t_day_string[] = "SUN";
	if(REALTIME_Data.system_day > 0){
 800107a:	4d5c      	ldr	r5, [pc, #368]	; (80011ec <MAIN_MENU_Display+0x184>)
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 0);
 800107c:	2103      	movs	r1, #3
 800107e:	2200      	movs	r2, #0
 8001080:	6860      	ldr	r0, [r4, #4]
 8001082:	f003 fb77 	bl	8004774 <LCD_Set_Cursor>
	char t_day_string[] = "SUN";
 8001086:	4b5a      	ldr	r3, [pc, #360]	; (80011f0 <MAIN_MENU_Display+0x188>)
	if(REALTIME_Data.system_day > 0){
 8001088:	78a9      	ldrb	r1, [r5, #2]
	char t_day_string[] = "SUN";
 800108a:	9303      	str	r3, [sp, #12]
	if(REALTIME_Data.system_day > 0){
 800108c:	b131      	cbz	r1, 800109c <MAIN_MENU_Display+0x34>
		strcpy(t_day_string, DAY_Str[REALTIME_Data.system_day - 1]);
 800108e:	4b59      	ldr	r3, [pc, #356]	; (80011f4 <MAIN_MENU_Display+0x18c>)
 8001090:	3901      	subs	r1, #1
 8001092:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001096:	a803      	add	r0, sp, #12
 8001098:	f003 fe24 	bl	8004ce4 <strcpy>
	}
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 800109c:	796b      	ldrb	r3, [r5, #5]
 800109e:	4956      	ldr	r1, [pc, #344]	; (80011f8 <MAIN_MENU_Display+0x190>)
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	792b      	ldrb	r3, [r5, #4]
 80010a4:	aa03      	add	r2, sp, #12
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	6860      	ldr	r0, [r4, #4]
 80010aa:	78eb      	ldrb	r3, [r5, #3]
 80010ac:	f003 fbe0 	bl	8004870 <LCD_Write>
				REALTIME_Data.system_date, REALTIME_Data.system_month, REALTIME_Data.system_year);
	LCD_Set_Cursor(MENU_Data.hlcd, 2, 1);
	LCD_Send_Data(MENU_Data.hlcd, 3);
	LCD_Write(MENU_Data.hlcd, "%02dC  ", (uint8_t)hdht.temperature);
 80010b0:	4e52      	ldr	r6, [pc, #328]	; (80011fc <MAIN_MENU_Display+0x194>)
	LCD_Set_Cursor(MENU_Data.hlcd, 2, 1);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2102      	movs	r1, #2
 80010b6:	6860      	ldr	r0, [r4, #4]
 80010b8:	f003 fb5c 	bl	8004774 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, 3);
 80010bc:	2103      	movs	r1, #3
 80010be:	6860      	ldr	r0, [r4, #4]
 80010c0:	f003 fb90 	bl	80047e4 <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02dC  ", (uint8_t)hdht.temperature);
 80010c4:	68f0      	ldr	r0, [r6, #12]
 80010c6:	f7ff fba1 	bl	800080c <__aeabi_f2uiz>
 80010ca:	494d      	ldr	r1, [pc, #308]	; (8001200 <MAIN_MENU_Display+0x198>)
 80010cc:	b2c2      	uxtb	r2, r0
 80010ce:	6860      	ldr	r0, [r4, #4]
 80010d0:	f003 fbce 	bl	8004870 <LCD_Write>
	LCD_Send_Data(MENU_Data.hlcd, 4);
 80010d4:	2104      	movs	r1, #4
 80010d6:	6860      	ldr	r0, [r4, #4]
 80010d8:	f003 fb84 	bl	80047e4 <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02d%%  ", (uint8_t)hdht.huminity);
 80010dc:	6930      	ldr	r0, [r6, #16]
 80010de:	f7ff fb95 	bl	800080c <__aeabi_f2uiz>
 80010e2:	4948      	ldr	r1, [pc, #288]	; (8001204 <MAIN_MENU_Display+0x19c>)
 80010e4:	b2c2      	uxtb	r2, r0
 80010e6:	6860      	ldr	r0, [r4, #4]
 80010e8:	f003 fbc2 	bl	8004870 <LCD_Write>
	LCD_Send_Data(MENU_Data.hlcd, BATTERY_LEVEL_Data.battery_level / 30 + 4);
 80010ec:	231e      	movs	r3, #30
 80010ee:	4e46      	ldr	r6, [pc, #280]	; (8001208 <MAIN_MENU_Display+0x1a0>)
 80010f0:	6860      	ldr	r0, [r4, #4]
 80010f2:	7931      	ldrb	r1, [r6, #4]
 80010f4:	fbb1 f1f3 	udiv	r1, r1, r3
 80010f8:	3104      	adds	r1, #4
 80010fa:	b2c9      	uxtb	r1, r1
 80010fc:	f003 fb72 	bl	80047e4 <LCD_Send_Data>
	LCD_Write(MENU_Data.hlcd, "%02d%%  ", BATTERY_LEVEL_Data.battery_level);
 8001100:	7932      	ldrb	r2, [r6, #4]
 8001102:	6860      	ldr	r0, [r4, #4]
 8001104:	493f      	ldr	r1, [pc, #252]	; (8001204 <MAIN_MENU_Display+0x19c>)
 8001106:	f003 fbb3 	bl	8004870 <LCD_Write>


	if(MAIN_MENU_Data.time_format == FORMAT_24_HOURS){
 800110a:	4b40      	ldr	r3, [pc, #256]	; (800120c <MAIN_MENU_Display+0x1a4>)
 800110c:	260a      	movs	r6, #10
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	7828      	ldrb	r0, [r5, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d138      	bne.n	8001188 <MAIN_MENU_Display+0x120>
		MAIN_MENU_Display_Num(REALTIME_Data.system_hour / 10, 2, 2);
 8001116:	2202      	movs	r2, #2
 8001118:	fbb0 f0f6 	udiv	r0, r0, r6
 800111c:	4611      	mov	r1, r2
 800111e:	f7ff ff69 	bl	8000ff4 <MAIN_MENU_Display_Num>
		MAIN_MENU_Display_Num(REALTIME_Data.system_hour % 10, 6, 2);
 8001122:	7828      	ldrb	r0, [r5, #0]
 8001124:	2202      	movs	r2, #2
 8001126:	fbb0 f3f6 	udiv	r3, r0, r6
 800112a:	fb06 0013 	mls	r0, r6, r3, r0
 800112e:	2106      	movs	r1, #6
 8001130:	b2c0      	uxtb	r0, r0
 8001132:	f7ff ff5f 	bl	8000ff4 <MAIN_MENU_Display_Num>
		MAIN_MENU_Display_Num((REALTIME_Data.system_hour - 12) % 10, 6, 2);
		LCD_Set_Cursor(MENU_Data.hlcd, 18, 3);
		LCD_Write(MENU_Data.hlcd, "%s", (REALTIME_Data.system_hour > 12) ? "PM" : "AM");
	}

	if(MENU_Data.blink_state){
 8001136:	7c23      	ldrb	r3, [r4, #16]
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8001138:	2202      	movs	r2, #2
 800113a:	2109      	movs	r1, #9
 800113c:	6860      	ldr	r0, [r4, #4]
	if(MENU_Data.blink_state){
 800113e:	2b00      	cmp	r3, #0
 8001140:	d045      	beq.n	80011ce <MAIN_MENU_Display+0x166>
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 8001142:	f003 fb17 	bl	8004774 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, '.');
 8001146:	212e      	movs	r1, #46	; 0x2e
 8001148:	6860      	ldr	r0, [r4, #4]
 800114a:	f003 fb4b 	bl	80047e4 <LCD_Send_Data>
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 800114e:	2109      	movs	r1, #9
 8001150:	2203      	movs	r2, #3
 8001152:	6860      	ldr	r0, [r4, #4]
 8001154:	f003 fb0e 	bl	8004774 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, '.');
 8001158:	212e      	movs	r1, #46	; 0x2e
	} else{
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
		LCD_Send_Data(MENU_Data.hlcd, ' ');
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
		LCD_Send_Data(MENU_Data.hlcd, ' ');
 800115a:	6860      	ldr	r0, [r4, #4]
	}

	MAIN_MENU_Display_Num(REALTIME_Data.system_minute / 10, 10, 2);
 800115c:	240a      	movs	r4, #10
		LCD_Send_Data(MENU_Data.hlcd, ' ');
 800115e:	f003 fb41 	bl	80047e4 <LCD_Send_Data>
	MAIN_MENU_Display_Num(REALTIME_Data.system_minute / 10, 10, 2);
 8001162:	7868      	ldrb	r0, [r5, #1]
 8001164:	4621      	mov	r1, r4
 8001166:	fbb0 f0f4 	udiv	r0, r0, r4
 800116a:	2202      	movs	r2, #2
 800116c:	f7ff ff42 	bl	8000ff4 <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(REALTIME_Data.system_minute % 10, 14, 2);
 8001170:	7868      	ldrb	r0, [r5, #1]
 8001172:	2202      	movs	r2, #2
 8001174:	fbb0 f1f4 	udiv	r1, r0, r4
 8001178:	fb04 0011 	mls	r0, r4, r1, r0
 800117c:	210e      	movs	r1, #14
 800117e:	b2c0      	uxtb	r0, r0
 8001180:	f7ff ff38 	bl	8000ff4 <MAIN_MENU_Display_Num>
}
 8001184:	b004      	add	sp, #16
 8001186:	bd70      	pop	{r4, r5, r6, pc}
		MAIN_MENU_Display_Num((REALTIME_Data.system_hour - 12) / 10, 2, 2);
 8001188:	380c      	subs	r0, #12
 800118a:	2202      	movs	r2, #2
 800118c:	fb90 f0f6 	sdiv	r0, r0, r6
 8001190:	4611      	mov	r1, r2
 8001192:	b2c0      	uxtb	r0, r0
 8001194:	f7ff ff2e 	bl	8000ff4 <MAIN_MENU_Display_Num>
		MAIN_MENU_Display_Num((REALTIME_Data.system_hour - 12) % 10, 6, 2);
 8001198:	7828      	ldrb	r0, [r5, #0]
 800119a:	2202      	movs	r2, #2
 800119c:	380c      	subs	r0, #12
 800119e:	fb90 f3f6 	sdiv	r3, r0, r6
 80011a2:	fb06 0013 	mls	r0, r6, r3, r0
 80011a6:	2106      	movs	r1, #6
 80011a8:	b2c0      	uxtb	r0, r0
 80011aa:	f7ff ff23 	bl	8000ff4 <MAIN_MENU_Display_Num>
		LCD_Set_Cursor(MENU_Data.hlcd, 18, 3);
 80011ae:	6860      	ldr	r0, [r4, #4]
 80011b0:	2203      	movs	r2, #3
 80011b2:	2112      	movs	r1, #18
 80011b4:	f003 fade 	bl	8004774 <LCD_Set_Cursor>
		LCD_Write(MENU_Data.hlcd, "%s", (REALTIME_Data.system_hour > 12) ? "PM" : "AM");
 80011b8:	7829      	ldrb	r1, [r5, #0]
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MAIN_MENU_Display+0x1a8>)
 80011bc:	4a15      	ldr	r2, [pc, #84]	; (8001214 <MAIN_MENU_Display+0x1ac>)
 80011be:	6860      	ldr	r0, [r4, #4]
 80011c0:	290c      	cmp	r1, #12
 80011c2:	bf98      	it	ls
 80011c4:	461a      	movls	r2, r3
 80011c6:	4914      	ldr	r1, [pc, #80]	; (8001218 <MAIN_MENU_Display+0x1b0>)
 80011c8:	f003 fb52 	bl	8004870 <LCD_Write>
 80011cc:	e7b3      	b.n	8001136 <MAIN_MENU_Display+0xce>
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 80011ce:	f003 fad1 	bl	8004774 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, ' ');
 80011d2:	2120      	movs	r1, #32
 80011d4:	6860      	ldr	r0, [r4, #4]
 80011d6:	f003 fb05 	bl	80047e4 <LCD_Send_Data>
		LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 80011da:	2109      	movs	r1, #9
 80011dc:	2203      	movs	r2, #3
 80011de:	6860      	ldr	r0, [r4, #4]
 80011e0:	f003 fac8 	bl	8004774 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, ' ');
 80011e4:	2120      	movs	r1, #32
 80011e6:	e7b8      	b.n	800115a <MAIN_MENU_Display+0xf2>
 80011e8:	20000164 	.word	0x20000164
 80011ec:	2000014c 	.word	0x2000014c
 80011f0:	004e5553 	.word	0x004e5553
 80011f4:	20000000 	.word	0x20000000
 80011f8:	08005457 	.word	0x08005457
 80011fc:	200001bc 	.word	0x200001bc
 8001200:	0800546b 	.word	0x0800546b
 8001204:	08005473 	.word	0x08005473
 8001208:	200000dc 	.word	0x200000dc
 800120c:	20000160 	.word	0x20000160
 8001210:	08005454 	.word	0x08005454
 8001214:	08005451 	.word	0x08005451
 8001218:	0800547c 	.word	0x0800547c

0800121c <MAIN_MENU_Set_State>:

void MAIN_MENU_Set_State(){
	MENU_Data.menu_type = MAIN_MENU;
 800121c:	2200      	movs	r2, #0
 800121e:	4b03      	ldr	r3, [pc, #12]	; (800122c <MAIN_MENU_Set_State+0x10>)
 8001220:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001226:	811a      	strh	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000164 	.word	0x20000164

08001230 <MAIN_MENU_Update_Value>:

void MAIN_MENU_Update_Value(){
	MENU_Data.menu_type = MAIN_MENU;
 8001230:	2200      	movs	r2, #0
 8001232:	4b02      	ldr	r3, [pc, #8]	; (800123c <MAIN_MENU_Update_Value+0xc>)
 8001234:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001236:	721a      	strb	r2, [r3, #8]
}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000164 	.word	0x20000164

08001240 <MENU_Init>:

#define BLINKING_CYCLE		1000

void MENU_Init(LCD_I2C_HandleTypeDef *p_hlcd){
	MENU_Data.hlcd = p_hlcd;
	MENU_Data.changed = 0;
 8001240:	f44f 7280 	mov.w	r2, #256	; 0x100
void MENU_Init(LCD_I2C_HandleTypeDef *p_hlcd){
 8001244:	b508      	push	{r3, lr}
	MENU_Data.hlcd = p_hlcd;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MENU_Init+0x2c>)
	MENU_Data.changed = 0;
 8001248:	811a      	strh	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
	MENU_Data.menu_type = MAIN_MENU;
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
	MENU_Data.blinking_timer = 0;
 800124e:	60da      	str	r2, [r3, #12]
	MENU_Data.blink_state = 1;
 8001250:	2201      	movs	r2, #1
	MENU_Data.hlcd = p_hlcd;
 8001252:	6058      	str	r0, [r3, #4]
	MENU_Data.blink_state = 1;
 8001254:	741a      	strb	r2, [r3, #16]
	MAIN_MENU_Init();
 8001256:	f7ff fe67 	bl	8000f28 <MAIN_MENU_Init>
	SR_MENU_Init();
 800125a:	f000 f8ef 	bl	800143c <SR_MENU_Init>
	TL_MENU_Init();
 800125e:	f000 fad5 	bl	800180c <TL_MENU_Init>
	ST_MENU_Init();
}
 8001262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ST_MENU_Init();
 8001266:	f000 b9f1 	b.w	800164c <ST_MENU_Init>
 800126a:	bf00      	nop
 800126c:	20000164 	.word	0x20000164

08001270 <MENU_Handle>:
//		timer = HAL_GetTick();
//		count ++;
//	}
//}

void MENU_Handle(){
 8001270:	b510      	push	{r4, lr}
	if(!MENU_Data.changed){
 8001272:	4c17      	ldr	r4, [pc, #92]	; (80012d0 <MENU_Handle+0x60>)
 8001274:	7a23      	ldrb	r3, [r4, #8]
 8001276:	b95b      	cbnz	r3, 8001290 <MENU_Handle+0x20>
		switch(MENU_Data.menu_type){
 8001278:	7823      	ldrb	r3, [r4, #0]
 800127a:	2b04      	cmp	r3, #4
 800127c:	d806      	bhi.n	800128c <MENU_Handle+0x1c>
 800127e:	e8df f003 	tbb	[pc, r3]
 8001282:	1a03      	.short	0x1a03
 8001284:	201d      	.short	0x201d
 8001286:	23          	.byte	0x23
 8001287:	00          	.byte	0x00
			case MAIN_MENU:
				MAIN_MENU_Display();
 8001288:	f7ff feee 	bl	8001068 <MAIN_MENU_Display>
				ST_MENU_Display();
				break;
			default:
				break;
		}
		MENU_Data.changed = 1;
 800128c:	2301      	movs	r3, #1
 800128e:	7223      	strb	r3, [r4, #8]
	}

	if(HAL_GetTick() - MENU_Data.blinking_timer > BLINKING_CYCLE){
 8001290:	f000 ffa0 	bl	80021d4 <HAL_GetTick>
 8001294:	68e3      	ldr	r3, [r4, #12]
 8001296:	1ac0      	subs	r0, r0, r3
 8001298:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800129c:	d90a      	bls.n	80012b4 <MENU_Handle+0x44>
		if(MENU_Data.menu_type == MAIN_MENU){
 800129e:	7823      	ldrb	r3, [r4, #0]
 80012a0:	b92b      	cbnz	r3, 80012ae <MENU_Handle+0x3e>
			MENU_Data.changed = 0;
 80012a2:	7223      	strb	r3, [r4, #8]
			MENU_Data.blink_state = !MENU_Data.blink_state;
 80012a4:	7c23      	ldrb	r3, [r4, #16]
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	7423      	strb	r3, [r4, #16]
		}
		MENU_Data.blinking_timer = HAL_GetTick();
 80012ae:	f000 ff91 	bl	80021d4 <HAL_GetTick>
 80012b2:	60e0      	str	r0, [r4, #12]
	}

}
 80012b4:	bd10      	pop	{r4, pc}
				SETTING_MENU_Display();
 80012b6:	f000 f859 	bl	800136c <SETTING_MENU_Display>
				break;
 80012ba:	e7e7      	b.n	800128c <MENU_Handle+0x1c>
				SR_MENU_Display();
 80012bc:	f000 f946 	bl	800154c <SR_MENU_Display>
				break;
 80012c0:	e7e4      	b.n	800128c <MENU_Handle+0x1c>
				TL_MENU_Display();
 80012c2:	f000 fb43 	bl	800194c <TL_MENU_Display>
				break;
 80012c6:	e7e1      	b.n	800128c <MENU_Handle+0x1c>
				ST_MENU_Display();
 80012c8:	f000 fa34 	bl	8001734 <ST_MENU_Display>
				break;
 80012cc:	e7de      	b.n	800128c <MENU_Handle+0x1c>
 80012ce:	bf00      	nop
 80012d0:	20000164 	.word	0x20000164

080012d4 <SETTING_MENU_Set_State>:
	SETTING_MENU_Data.current_pointer = 0;
	SETTING_MENU_Data.is_setting_time_format = 0;
}

void SETTING_MENU_Set_State(){
	MENU_Data.menu_type = SETTING_MENU;
 80012d4:	2201      	movs	r2, #1
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <SETTING_MENU_Set_State+0x18>)
 80012d8:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80012da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012de:	811a      	strh	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
	SETTING_MENU_Data.current_pointer = 0;
 80012e0:	2200      	movs	r2, #0
 80012e2:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <SETTING_MENU_Set_State+0x1c>)
 80012e4:	701a      	strb	r2, [r3, #0]
	SETTING_MENU_Data.is_setting_time_format = 0;
 80012e6:	705a      	strb	r2, [r3, #1]
}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000164 	.word	0x20000164
 80012f0:	20000178 	.word	0x20000178

080012f4 <SETTING_MENU_Config_Time_Format>:

void SETTING_MENU_Config_Time_Format(){
	if(MAIN_MENU_Data.time_format == FORMAT_12_HOURS){
 80012f4:	4a05      	ldr	r2, [pc, #20]	; (800130c <SETTING_MENU_Config_Time_Format+0x18>)
 80012f6:	7813      	ldrb	r3, [r2, #0]
 80012f8:	fab3 f383 	clz	r3, r3
 80012fc:	095b      	lsrs	r3, r3, #5
 80012fe:	7013      	strb	r3, [r2, #0]
		MAIN_MENU_Data.time_format = FORMAT_24_HOURS;
	} else{
		MAIN_MENU_Data.time_format = FORMAT_12_HOURS;
	}
	MENU_Data.menu_type = SETTING_MENU;
 8001300:	2201      	movs	r2, #1
 8001302:	4b03      	ldr	r3, [pc, #12]	; (8001310 <SETTING_MENU_Config_Time_Format+0x1c>)
 8001304:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001306:	2200      	movs	r2, #0
 8001308:	721a      	strb	r2, [r3, #8]
}
 800130a:	4770      	bx	lr
 800130c:	20000160 	.word	0x20000160
 8001310:	20000164 	.word	0x20000164

08001314 <SETTING_MENU_Change_Pointer>:

void SETTING_MENU_Change_Pointer(uint8_t p_is_increase){
	SETTING_MENU_Data.current_pointer += (p_is_increase) ? 1 : -1;
 8001314:	2800      	cmp	r0, #0
 8001316:	bf14      	ite	ne
 8001318:	2101      	movne	r1, #1
 800131a:	21ff      	moveq	r1, #255	; 0xff
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <SETTING_MENU_Change_Pointer+0x2c>)
 800131e:	7813      	ldrb	r3, [r2, #0]
 8001320:	440b      	add	r3, r1
 8001322:	b25b      	sxtb	r3, r3
	if(SETTING_MENU_Data.current_pointer < 0){
 8001324:	2b00      	cmp	r3, #0
 8001326:	da07      	bge.n	8001338 <SETTING_MENU_Change_Pointer+0x24>
		SETTING_MENU_Data.current_pointer = 0;
 8001328:	2300      	movs	r3, #0
	}
	if(SETTING_MENU_Data.current_pointer > 2){
		SETTING_MENU_Data.current_pointer = 2;
 800132a:	7013      	strb	r3, [r2, #0]
	}
	MENU_Data.menu_type = SETTING_MENU;
 800132c:	2201      	movs	r2, #1
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SETTING_MENU_Change_Pointer+0x30>)
 8001330:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001332:	2200      	movs	r2, #0
 8001334:	721a      	strb	r2, [r3, #8]
}
 8001336:	4770      	bx	lr
	if(SETTING_MENU_Data.current_pointer > 2){
 8001338:	2b02      	cmp	r3, #2
		SETTING_MENU_Data.current_pointer = 2;
 800133a:	bfc8      	it	gt
 800133c:	2302      	movgt	r3, #2
 800133e:	e7f4      	b.n	800132a <SETTING_MENU_Change_Pointer+0x16>
 8001340:	20000178 	.word	0x20000178
 8001344:	20000164 	.word	0x20000164

08001348 <SETTING_MENU_Change_Working_State>:

void SETTING_MENU_Change_Working_State(){
	if(SETTING_MENU_Data.current_pointer == 0){
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <SETTING_MENU_Change_Working_State+0x1c>)
 800134a:	f992 1000 	ldrsb.w	r1, [r2]
 800134e:	b941      	cbnz	r1, 8001362 <SETTING_MENU_Change_Working_State+0x1a>
		SETTING_MENU_Data.is_setting_time_format = !SETTING_MENU_Data.is_setting_time_format;
 8001350:	7853      	ldrb	r3, [r2, #1]
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	7053      	strb	r3, [r2, #1]
		MENU_Data.menu_type = SETTING_MENU;
 800135a:	2201      	movs	r2, #1
 800135c:	4b02      	ldr	r3, [pc, #8]	; (8001368 <SETTING_MENU_Change_Working_State+0x20>)
 800135e:	701a      	strb	r2, [r3, #0]
		MENU_Data.changed = 0;
 8001360:	7219      	strb	r1, [r3, #8]
	}
}
 8001362:	4770      	bx	lr
 8001364:	20000178 	.word	0x20000178
 8001368:	20000164 	.word	0x20000164

0800136c <SETTING_MENU_Display>:

void SETTING_MENU_Display(){
 800136c:	b538      	push	{r3, r4, r5, lr}
	if(MENU_Data.is_changing_menu){
 800136e:	4c2a      	ldr	r4, [pc, #168]	; (8001418 <SETTING_MENU_Display+0xac>)
 8001370:	7a63      	ldrb	r3, [r4, #9]
 8001372:	b123      	cbz	r3, 800137e <SETTING_MENU_Display+0x12>
		LCD_Clear(MENU_Data.hlcd);
 8001374:	6860      	ldr	r0, [r4, #4]
 8001376:	f003 fa15 	bl	80047a4 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	7263      	strb	r3, [r4, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 4, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2104      	movs	r1, #4
 8001382:	6860      	ldr	r0, [r4, #4]
 8001384:	f003 f9f6 	bl	8004774 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Setting Menu");
 8001388:	4924      	ldr	r1, [pc, #144]	; (800141c <SETTING_MENU_Display+0xb0>)
 800138a:	6860      	ldr	r0, [r4, #4]
 800138c:	f003 fa70 	bl	8004870 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	2100      	movs	r1, #0
 8001394:	6860      	ldr	r0, [r4, #4]
 8001396:	f003 f9ed 	bl	8004774 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, " Time format:  %s ", (MAIN_MENU_Data.time_format == FORMAT_12_HOURS) ? "12" : "24");
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <SETTING_MENU_Display+0xb4>)
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <SETTING_MENU_Display+0xb8>)
 800139e:	7819      	ldrb	r1, [r3, #0]
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <SETTING_MENU_Display+0xbc>)
 80013a2:	6860      	ldr	r0, [r4, #4]
 80013a4:	2900      	cmp	r1, #0
 80013a6:	bf18      	it	ne
 80013a8:	461a      	movne	r2, r3
 80013aa:	4920      	ldr	r1, [pc, #128]	; (800142c <SETTING_MENU_Display+0xc0>)
 80013ac:	f003 fa60 	bl	8004870 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 2);
 80013b0:	2202      	movs	r2, #2
 80013b2:	2100      	movs	r1, #0
 80013b4:	6860      	ldr	r0, [r4, #4]
 80013b6:	f003 f9dd 	bl	8004774 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, " Alarm");
 80013ba:	491d      	ldr	r1, [pc, #116]	; (8001430 <SETTING_MENU_Display+0xc4>)
 80013bc:	6860      	ldr	r0, [r4, #4]
 80013be:	f003 fa57 	bl	8004870 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 3);
 80013c2:	2203      	movs	r2, #3
 80013c4:	2100      	movs	r1, #0
 80013c6:	6860      	ldr	r0, [r4, #4]
 80013c8:	f003 f9d4 	bl	8004774 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, " Setting real-time");
 80013cc:	4919      	ldr	r1, [pc, #100]	; (8001434 <SETTING_MENU_Display+0xc8>)
 80013ce:	6860      	ldr	r0, [r4, #4]
 80013d0:	f003 fa4e 	bl	8004870 <LCD_Write>
	if(SETTING_MENU_Data.is_setting_time_format == 1){
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <SETTING_MENU_Display+0xcc>)
 80013d6:	785d      	ldrb	r5, [r3, #1]
 80013d8:	2d01      	cmp	r5, #1
 80013da:	d113      	bne.n	8001404 <SETTING_MENU_Display+0x98>
		LCD_Set_Cursor(MENU_Data.hlcd, 14, 1);
 80013dc:	462a      	mov	r2, r5
 80013de:	210e      	movs	r1, #14
 80013e0:	6860      	ldr	r0, [r4, #4]
 80013e2:	f003 f9c7 	bl	8004774 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 80013e6:	217e      	movs	r1, #126	; 0x7e
 80013e8:	6860      	ldr	r0, [r4, #4]
 80013ea:	f003 f9fb 	bl	80047e4 <LCD_Send_Data>
		LCD_Set_Cursor(MENU_Data.hlcd, 17, 1);
 80013ee:	2111      	movs	r1, #17
 80013f0:	462a      	mov	r2, r5
 80013f2:	6860      	ldr	r0, [r4, #4]
 80013f4:	f003 f9be 	bl	8004774 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, 0x7F);
 80013f8:	217f      	movs	r1, #127	; 0x7f
	} else{
		LCD_Set_Cursor(MENU_Data.hlcd, 0, SETTING_MENU_Data.current_pointer + 1);
		LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 80013fa:	6860      	ldr	r0, [r4, #4]
	}
}
 80013fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 8001400:	f003 b9f0 	b.w	80047e4 <LCD_Send_Data>
		LCD_Set_Cursor(MENU_Data.hlcd, 0, SETTING_MENU_Data.current_pointer + 1);
 8001404:	781a      	ldrb	r2, [r3, #0]
 8001406:	2100      	movs	r1, #0
 8001408:	3201      	adds	r2, #1
 800140a:	6860      	ldr	r0, [r4, #4]
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	f003 f9b1 	bl	8004774 <LCD_Set_Cursor>
		LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 8001412:	217e      	movs	r1, #126	; 0x7e
 8001414:	e7f1      	b.n	80013fa <SETTING_MENU_Display+0x8e>
 8001416:	bf00      	nop
 8001418:	20000164 	.word	0x20000164
 800141c:	080054c7 	.word	0x080054c7
 8001420:	20000160 	.word	0x20000160
 8001424:	080054c1 	.word	0x080054c1
 8001428:	080054c4 	.word	0x080054c4
 800142c:	080054d4 	.word	0x080054d4
 8001430:	080054e7 	.word	0x080054e7
 8001434:	080054ee 	.word	0x080054ee
 8001438:	20000178 	.word	0x20000178

0800143c <SR_MENU_Init>:
};

extern char DAY_Str[7][4];

void SR_MENU_Init(){
	SR_MENU_Data.state = SETTING_HOUR;
 800143c:	2200      	movs	r2, #0
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SR_MENU_Init+0x14>)
 8001440:	701a      	strb	r2, [r3, #0]
	REALTIME_DATA_HandleTypeDef t_realtime = {0, 0, 0, 0, 0, 0};
	SR_MENU_Data.new_realtime = t_realtime;
 8001442:	705a      	strb	r2, [r3, #1]
 8001444:	709a      	strb	r2, [r3, #2]
 8001446:	70da      	strb	r2, [r3, #3]
 8001448:	711a      	strb	r2, [r3, #4]
 800144a:	715a      	strb	r2, [r3, #5]
 800144c:	719a      	strb	r2, [r3, #6]
}
 800144e:	4770      	bx	lr
 8001450:	2000017a 	.word	0x2000017a

08001454 <SR_MENU_Set_State>:

void SR_MENU_Set_State(){
	SR_MENU_Data.state = SETTING_HOUR;
 8001454:	2200      	movs	r2, #0
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <SR_MENU_Set_State+0x20>)
 8001458:	701a      	strb	r2, [r3, #0]
	REALTIME_DATA_HandleTypeDef t_realtime = {0, 0, 0, 0, 0, 0};
	SR_MENU_Data.new_realtime = t_realtime;
 800145a:	705a      	strb	r2, [r3, #1]
 800145c:	709a      	strb	r2, [r3, #2]
 800145e:	70da      	strb	r2, [r3, #3]
 8001460:	711a      	strb	r2, [r3, #4]
 8001462:	715a      	strb	r2, [r3, #5]
 8001464:	719a      	strb	r2, [r3, #6]
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 8001466:	2202      	movs	r2, #2
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <SR_MENU_Set_State+0x24>)
 800146a:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 800146c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001470:	811a      	strh	r2, [r3, #8]
	MENU_Data.is_changing_menu = 1;
}
 8001472:	4770      	bx	lr
 8001474:	2000017a 	.word	0x2000017a
 8001478:	20000164 	.word	0x20000164

0800147c <SR_MENU_Change_Setting_State>:

void SR_MENU_Change_Setting_State(uint8_t p_is_increase){
 800147c:	b508      	push	{r3, lr}
	if(SR_MENU_Data.state == CHECKING_AGAIN){
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <SR_MENU_Change_Setting_State+0x3c>)
 8001480:	7813      	ldrb	r3, [r2, #0]
 8001482:	2b06      	cmp	r3, #6
 8001484:	d106      	bne.n	8001494 <SR_MENU_Change_Setting_State+0x18>
		REALTIME_Set_New_Realtime(&SR_MENU_Data.new_realtime);
 8001486:	1c50      	adds	r0, r2, #1
 8001488:	f7ff fd2a 	bl	8000ee0 <REALTIME_Set_New_Realtime>
			return;
		}
		MENU_Data.menu_type = SETTING_REALTIME_MENU;
		MENU_Data.changed = 0;
	}
}
 800148c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			SETTING_MENU_Set_State();
 8001490:	f7ff bf20 	b.w	80012d4 <SETTING_MENU_Set_State>
		SR_MENU_Data.state += ((p_is_increase == INCREASE) ? 1 : -1);
 8001494:	2801      	cmp	r0, #1
 8001496:	bf18      	it	ne
 8001498:	20ff      	movne	r0, #255	; 0xff
 800149a:	4403      	add	r3, r0
 800149c:	b2db      	uxtb	r3, r3
		if((int8_t)SR_MENU_Data.state < 0){
 800149e:	f013 0f80 	tst.w	r3, #128	; 0x80
 80014a2:	f04f 0100 	mov.w	r1, #0
		SR_MENU_Data.state += ((p_is_increase == INCREASE) ? 1 : -1);
 80014a6:	7013      	strb	r3, [r2, #0]
		if((int8_t)SR_MENU_Data.state < 0){
 80014a8:	d001      	beq.n	80014ae <SR_MENU_Change_Setting_State+0x32>
			SR_MENU_Data.state = 0;
 80014aa:	7011      	strb	r1, [r2, #0]
 80014ac:	e7ee      	b.n	800148c <SR_MENU_Change_Setting_State+0x10>
		MENU_Data.menu_type = SETTING_REALTIME_MENU;
 80014ae:	2202      	movs	r2, #2
 80014b0:	4b02      	ldr	r3, [pc, #8]	; (80014bc <SR_MENU_Change_Setting_State+0x40>)
 80014b2:	701a      	strb	r2, [r3, #0]
		MENU_Data.changed = 0;
 80014b4:	7219      	strb	r1, [r3, #8]
}
 80014b6:	bd08      	pop	{r3, pc}
 80014b8:	2000017a 	.word	0x2000017a
 80014bc:	20000164 	.word	0x20000164

080014c0 <SR_MENU_Set_Value>:

void SR_MENU_Set_Value(uint8_t p_is_increase){
 80014c0:	b530      	push	{r4, r5, lr}
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <SR_MENU_Set_Value+0x80>)
 80014c4:	7819      	ldrb	r1, [r3, #0]
 80014c6:	2905      	cmp	r1, #5
 80014c8:	d828      	bhi.n	800151c <SR_MENU_Set_Value+0x5c>
		int8_t *t_data_ptr = (int8_t *)(&SR_MENU_Data.new_realtime) + SR_MENU_Data.state;
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 80014ca:	2801      	cmp	r0, #1
 80014cc:	bf18      	it	ne
 80014ce:	20ff      	movne	r0, #255	; 0xff
		int8_t *t_data_ptr = (int8_t *)(&SR_MENU_Data.new_realtime) + SR_MENU_Data.state;
 80014d0:	1c5c      	adds	r4, r3, #1
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 80014d2:	5c62      	ldrb	r2, [r4, r1]
		if(*t_data_ptr > __max_value[SR_MENU_Data.state]){
 80014d4:	4d1b      	ldr	r5, [pc, #108]	; (8001544 <SR_MENU_Set_Value+0x84>)
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 80014d6:	4410      	add	r0, r2
 80014d8:	b240      	sxtb	r0, r0
 80014da:	5460      	strb	r0, [r4, r1]
		if(*t_data_ptr > __max_value[SR_MENU_Data.state]){
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	5cad      	ldrb	r5, [r5, r2]
 80014e0:	42a8      	cmp	r0, r5
 80014e2:	dd12      	ble.n	800150a <SR_MENU_Set_Value+0x4a>
			*t_data_ptr = (SR_MENU_Data.state == SETTING_DATE) ? 1 : 0;
 80014e4:	1ed0      	subs	r0, r2, #3
 80014e6:	4242      	negs	r2, r0
 80014e8:	4142      	adcs	r2, r0
 80014ea:	5462      	strb	r2, [r4, r1]
		} else if(*t_data_ptr < 0){
			*t_data_ptr = __max_value[SR_MENU_Data.state];
		}
		if(SR_MENU_Data.state == SETTING_YEAR){
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	2a05      	cmp	r2, #5
 80014f0:	d114      	bne.n	800151c <SR_MENU_Set_Value+0x5c>
			uint8_t *t_date_ptr = &SR_MENU_Data.new_realtime.system_date;
			uint8_t *t_month_ptr = &SR_MENU_Data.new_realtime.system_month;
			uint8_t *t_year_ptr = &SR_MENU_Data.new_realtime.system_year;
			if(*t_month_ptr == 2){
 80014f2:	795a      	ldrb	r2, [r3, #5]
 80014f4:	2a02      	cmp	r2, #2
 80014f6:	d10c      	bne.n	8001512 <SR_MENU_Set_Value+0x52>
				if(*t_date_ptr > ((*t_year_ptr % 4 == 0) ? 29 : 28)){
 80014f8:	7999      	ldrb	r1, [r3, #6]
 80014fa:	791a      	ldrb	r2, [r3, #4]
 80014fc:	0789      	lsls	r1, r1, #30
 80014fe:	d01a      	beq.n	8001536 <SR_MENU_Set_Value+0x76>
 8001500:	2a1c      	cmp	r2, #28
 8001502:	dd0b      	ble.n	800151c <SR_MENU_Set_Value+0x5c>
					*t_date_ptr = (*t_year_ptr % 4 == 0) ? 29 : 28;
 8001504:	221c      	movs	r2, #28
				}
			} else if((*t_month_ptr <= 7 && *t_month_ptr % 2 == 0) || (*t_month_ptr >= 8 && *t_month_ptr % 2 == 1)){
				if(*t_date_ptr > 30){
					*t_date_ptr = 30;
 8001506:	711a      	strb	r2, [r3, #4]
 8001508:	e008      	b.n	800151c <SR_MENU_Set_Value+0x5c>
		} else if(*t_data_ptr < 0){
 800150a:	2800      	cmp	r0, #0
			*t_data_ptr = __max_value[SR_MENU_Data.state];
 800150c:	bfb8      	it	lt
 800150e:	5465      	strblt	r5, [r4, r1]
 8001510:	e7ec      	b.n	80014ec <SR_MENU_Set_Value+0x2c>
			} else if((*t_month_ptr <= 7 && *t_month_ptr % 2 == 0) || (*t_month_ptr >= 8 && *t_month_ptr % 2 == 1)){
 8001512:	2a07      	cmp	r2, #7
 8001514:	f002 0101 	and.w	r1, r2, #1
 8001518:	d806      	bhi.n	8001528 <SR_MENU_Set_Value+0x68>
 800151a:	b139      	cbz	r1, 800152c <SR_MENU_Set_Value+0x6c>
				}
			}
		}
	}
	MENU_Data.menu_type = SETTING_REALTIME_MENU;
 800151c:	2202      	movs	r2, #2
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <SR_MENU_Set_Value+0x88>)
 8001520:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001522:	2200      	movs	r2, #0
 8001524:	721a      	strb	r2, [r3, #8]
}
 8001526:	bd30      	pop	{r4, r5, pc}
			} else if((*t_month_ptr <= 7 && *t_month_ptr % 2 == 0) || (*t_month_ptr >= 8 && *t_month_ptr % 2 == 1)){
 8001528:	2900      	cmp	r1, #0
 800152a:	d0f7      	beq.n	800151c <SR_MENU_Set_Value+0x5c>
				if(*t_date_ptr > 30){
 800152c:	791a      	ldrb	r2, [r3, #4]
 800152e:	2a1e      	cmp	r2, #30
 8001530:	d9f4      	bls.n	800151c <SR_MENU_Set_Value+0x5c>
					*t_date_ptr = 30;
 8001532:	221e      	movs	r2, #30
 8001534:	e7e7      	b.n	8001506 <SR_MENU_Set_Value+0x46>
				if(*t_date_ptr > ((*t_year_ptr % 4 == 0) ? 29 : 28)){
 8001536:	2a1d      	cmp	r2, #29
 8001538:	ddf0      	ble.n	800151c <SR_MENU_Set_Value+0x5c>
					*t_date_ptr = (*t_year_ptr % 4 == 0) ? 29 : 28;
 800153a:	221d      	movs	r2, #29
 800153c:	e7e3      	b.n	8001506 <SR_MENU_Set_Value+0x46>
 800153e:	bf00      	nop
 8001540:	2000017a 	.word	0x2000017a
 8001544:	08005548 	.word	0x08005548
 8001548:	20000164 	.word	0x20000164

0800154c <SR_MENU_Display>:

void SR_MENU_Display(){
 800154c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(MENU_Data.is_changing_menu){
 800154e:	4c37      	ldr	r4, [pc, #220]	; (800162c <SR_MENU_Display+0xe0>)
 8001550:	7a63      	ldrb	r3, [r4, #9]
 8001552:	b123      	cbz	r3, 800155e <SR_MENU_Display+0x12>
		LCD_Clear(MENU_Data.hlcd);
 8001554:	6860      	ldr	r0, [r4, #4]
 8001556:	f003 f925 	bl	80047a4 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	7263      	strb	r3, [r4, #9]
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 800155e:	2200      	movs	r2, #0
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 8001560:	4d33      	ldr	r5, [pc, #204]	; (8001630 <SR_MENU_Display+0xe4>)
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 8001562:	4611      	mov	r1, r2
 8001564:	6860      	ldr	r0, [r4, #4]
 8001566:	f003 f905 	bl	8004774 <LCD_Set_Cursor>
	if(SR_MENU_Data.state < CHECKING_AGAIN){
 800156a:	782b      	ldrb	r3, [r5, #0]
 800156c:	2b05      	cmp	r3, #5
 800156e:	d857      	bhi.n	8001620 <SR_MENU_Display+0xd4>
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[SR_MENU_Data.state]);
 8001570:	4a30      	ldr	r2, [pc, #192]	; (8001634 <SR_MENU_Display+0xe8>)
 8001572:	4931      	ldr	r1, [pc, #196]	; (8001638 <SR_MENU_Display+0xec>)
 8001574:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001578:	6860      	ldr	r0, [r4, #4]
 800157a:	f003 f979 	bl	8004870 <LCD_Write>
	} else{
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
	}
	LCD_Set_Cursor(MENU_Data.hlcd, 3, 1);
 800157e:	2103      	movs	r1, #3
 8001580:	2201      	movs	r2, #1
 8001582:	6860      	ldr	r0, [r4, #4]
 8001584:	f003 f8f6 	bl	8004774 <LCD_Set_Cursor>
	char t_day_string[] = "SUN";
 8001588:	4b2c      	ldr	r3, [pc, #176]	; (800163c <SR_MENU_Display+0xf0>)
	if(SR_MENU_Data.new_realtime.system_day > 0){
 800158a:	78e9      	ldrb	r1, [r5, #3]
	char t_day_string[] = "SUN";
 800158c:	9303      	str	r3, [sp, #12]
	if(SR_MENU_Data.new_realtime.system_day > 0){
 800158e:	b131      	cbz	r1, 800159e <SR_MENU_Display+0x52>
		strcpy(t_day_string, DAY_Str[SR_MENU_Data.new_realtime.system_day - 1]);
 8001590:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <SR_MENU_Display+0xf4>)
 8001592:	3901      	subs	r1, #1
 8001594:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001598:	a803      	add	r0, sp, #12
 800159a:	f003 fba3 	bl	8004ce4 <strcpy>
	}
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 800159e:	79ab      	ldrb	r3, [r5, #6]
 80015a0:	6860      	ldr	r0, [r4, #4]
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	796b      	ldrb	r3, [r5, #5]
 80015a6:	aa03      	add	r2, sp, #12
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	4926      	ldr	r1, [pc, #152]	; (8001644 <SR_MENU_Display+0xf8>)
 80015ac:	792b      	ldrb	r3, [r5, #4]
			SR_MENU_Data.new_realtime.system_date, SR_MENU_Data.new_realtime.system_month, SR_MENU_Data.new_realtime.system_year);

	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour / 10, 2, 2);
 80015ae:	260a      	movs	r6, #10
	LCD_Write(MENU_Data.hlcd, "%s %02d-%02d-20%02d", t_day_string,
 80015b0:	f003 f95e 	bl	8004870 <LCD_Write>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour / 10, 2, 2);
 80015b4:	2202      	movs	r2, #2
 80015b6:	7868      	ldrb	r0, [r5, #1]
 80015b8:	4611      	mov	r1, r2
 80015ba:	fbb0 f0f6 	udiv	r0, r0, r6
 80015be:	f7ff fd19 	bl	8000ff4 <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_hour % 10, 6, 2);
 80015c2:	7868      	ldrb	r0, [r5, #1]
 80015c4:	2202      	movs	r2, #2
 80015c6:	fbb0 f3f6 	udiv	r3, r0, r6
 80015ca:	fb06 0013 	mls	r0, r6, r3, r0
 80015ce:	2106      	movs	r1, #6
 80015d0:	b2c0      	uxtb	r0, r0
 80015d2:	f7ff fd0f 	bl	8000ff4 <MAIN_MENU_Display_Num>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 2);
 80015d6:	2202      	movs	r2, #2
 80015d8:	6860      	ldr	r0, [r4, #4]
 80015da:	2109      	movs	r1, #9
 80015dc:	f003 f8ca 	bl	8004774 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 80015e0:	6860      	ldr	r0, [r4, #4]
 80015e2:	212e      	movs	r1, #46	; 0x2e
 80015e4:	f003 f8fe 	bl	80047e4 <LCD_Send_Data>
	LCD_Set_Cursor(MENU_Data.hlcd, 9, 3);
 80015e8:	2203      	movs	r2, #3
 80015ea:	6860      	ldr	r0, [r4, #4]
 80015ec:	2109      	movs	r1, #9
 80015ee:	f003 f8c1 	bl	8004774 <LCD_Set_Cursor>
	LCD_Send_Data(MENU_Data.hlcd, '.');
 80015f2:	6860      	ldr	r0, [r4, #4]
 80015f4:	212e      	movs	r1, #46	; 0x2e
 80015f6:	f003 f8f5 	bl	80047e4 <LCD_Send_Data>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_minute / 10, 10, 2);
 80015fa:	78a8      	ldrb	r0, [r5, #2]
 80015fc:	4631      	mov	r1, r6
 80015fe:	fbb0 f0f6 	udiv	r0, r0, r6
 8001602:	2202      	movs	r2, #2
 8001604:	f7ff fcf6 	bl	8000ff4 <MAIN_MENU_Display_Num>
	MAIN_MENU_Display_Num(SR_MENU_Data.new_realtime.system_minute % 10, 14, 2);
 8001608:	78a8      	ldrb	r0, [r5, #2]
 800160a:	2202      	movs	r2, #2
 800160c:	fbb0 f3f6 	udiv	r3, r0, r6
 8001610:	fb06 0013 	mls	r0, r6, r3, r0
 8001614:	210e      	movs	r1, #14
 8001616:	b2c0      	uxtb	r0, r0
 8001618:	f7ff fcec 	bl	8000ff4 <MAIN_MENU_Display_Num>
}
 800161c:	b004      	add	sp, #16
 800161e:	bd70      	pop	{r4, r5, r6, pc}
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
 8001620:	4909      	ldr	r1, [pc, #36]	; (8001648 <SR_MENU_Display+0xfc>)
 8001622:	6860      	ldr	r0, [r4, #4]
 8001624:	f003 f924 	bl	8004870 <LCD_Write>
 8001628:	e7a9      	b.n	800157e <SR_MENU_Display+0x32>
 800162a:	bf00      	nop
 800162c:	20000164 	.word	0x20000164
 8001630:	2000017a 	.word	0x2000017a
 8001634:	2000001c 	.word	0x2000001c
 8001638:	08005501 	.word	0x08005501
 800163c:	004e5553 	.word	0x004e5553
 8001640:	20000000 	.word	0x20000000
 8001644:	08005457 	.word	0x08005457
 8001648:	08005513 	.word	0x08005513

0800164c <ST_MENU_Init>:
static uint8_t __max_value[] = {23, 59, 1, 1, 1, 1, 1, 1, 1};
extern char *__setting_type_str[6];

void ST_MENU_Init(){

}
 800164c:	4770      	bx	lr
	...

08001650 <ST_MENU_Set_State>:

void ST_MENU_Set_State(){
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 8001650:	2204      	movs	r2, #4
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <ST_MENU_Set_State+0x20>)
	MENU_Data.changed = 0;
	MENU_Data.is_changing_menu = 1;
	ST_MENU_Data.state = SETTING_ALARM_HOUR;
	FLASH_DATA_t t_timeline = {0, 0, 0, 1};
	ST_MENU_Data.timeline_data = t_timeline;
 8001654:	2101      	movs	r1, #1
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 8001656:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800165c:	811a      	strh	r2, [r3, #8]
	ST_MENU_Data.state = SETTING_ALARM_HOUR;
 800165e:	2200      	movs	r2, #0
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <ST_MENU_Set_State+0x24>)
 8001662:	701a      	strb	r2, [r3, #0]
	ST_MENU_Data.timeline_data = t_timeline;
 8001664:	705a      	strb	r2, [r3, #1]
 8001666:	709a      	strb	r2, [r3, #2]
 8001668:	70da      	strb	r2, [r3, #3]
 800166a:	7119      	strb	r1, [r3, #4]
	ST_MENU_Data.current_day_state = 0;
 800166c:	715a      	strb	r2, [r3, #5]
}
 800166e:	4770      	bx	lr
 8001670:	20000164 	.word	0x20000164
 8001674:	20000181 	.word	0x20000181

08001678 <ST_MENU_Change_Setting_State>:

void ST_MENU_Change_Setting_State(uint8_t p_is_increase){
 8001678:	4602      	mov	r2, r0
	int8_t *t_value = (int8_t *)(&ST_MENU_Data.state);
	*t_value += ((p_is_increase == INCREASE) ? 1 : -1);
 800167a:	2a01      	cmp	r2, #1
 800167c:	bf18      	it	ne
 800167e:	22ff      	movne	r2, #255	; 0xff
void ST_MENU_Change_Setting_State(uint8_t p_is_increase){
 8001680:	b508      	push	{r3, lr}
	*t_value += ((p_is_increase == INCREASE) ? 1 : -1);
 8001682:	480e      	ldr	r0, [pc, #56]	; (80016bc <ST_MENU_Change_Setting_State+0x44>)
 8001684:	7803      	ldrb	r3, [r0, #0]
 8001686:	4413      	add	r3, r2
 8001688:	b25b      	sxtb	r3, r3
	if(*t_value > CHECKING_ALARM_AGAIN){
 800168a:	2b09      	cmp	r3, #9
	*t_value += ((p_is_increase == INCREASE) ? 1 : -1);
 800168c:	7003      	strb	r3, [r0, #0]
	if(*t_value > CHECKING_ALARM_AGAIN){
 800168e:	dd08      	ble.n	80016a2 <ST_MENU_Change_Setting_State+0x2a>
		*t_value = CHECKING_ALARM_AGAIN;
 8001690:	2309      	movs	r3, #9
 8001692:	f800 3b01 	strb.w	r3, [r0], #1
		TIMELINE_Add(&ST_MENU_Data.timeline_data);
 8001696:	f7ff fb93 	bl	8000dc0 <TIMELINE_Add>
		}
		ST_MENU_Data.current_day_state = 0;
		MENU_Data.menu_type = SETTING_TIMELINE_MENU;
		MENU_Data.changed = 0;
	}
}
 800169a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			TL_MENU_Set_State();
 800169e:	f000 b8bf 	b.w	8001820 <TL_MENU_Set_State>
		if(*t_value < 0){
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	da01      	bge.n	80016ae <ST_MENU_Change_Setting_State+0x36>
			*t_value = 0;
 80016aa:	7003      	strb	r3, [r0, #0]
 80016ac:	e7f5      	b.n	800169a <ST_MENU_Change_Setting_State+0x22>
		MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 80016ae:	2104      	movs	r1, #4
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <ST_MENU_Change_Setting_State+0x48>)
		ST_MENU_Data.current_day_state = 0;
 80016b2:	7143      	strb	r3, [r0, #5]
		MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 80016b4:	7011      	strb	r1, [r2, #0]
		MENU_Data.changed = 0;
 80016b6:	7213      	strb	r3, [r2, #8]
}
 80016b8:	bd08      	pop	{r3, pc}
 80016ba:	bf00      	nop
 80016bc:	20000181 	.word	0x20000181
 80016c0:	20000164 	.word	0x20000164

080016c4 <ST_MENU_Set_Value>:

void ST_MENU_Set_Value(uint8_t p_is_increase){
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 80016c4:	2204      	movs	r2, #4
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <ST_MENU_Set_Value+0x64>)
void ST_MENU_Set_Value(uint8_t p_is_increase){
 80016c8:	b510      	push	{r4, lr}
	MENU_Data.menu_type = SETTING_TIMELINE_MENU;
 80016ca:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80016cc:	2200      	movs	r2, #0
 80016ce:	721a      	strb	r2, [r3, #8]
	if(ST_MENU_Data.state < CHECKING_ALARM_AGAIN){
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <ST_MENU_Set_Value+0x68>)
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	2a08      	cmp	r2, #8
 80016d6:	d823      	bhi.n	8001720 <ST_MENU_Set_Value+0x5c>
		int8_t *t_data_ptr;
		if(ST_MENU_Data.state >= SETTING_ALARM_SUNDAY){
 80016d8:	2a01      	cmp	r2, #1
			t_data_ptr = (int8_t *)(&ST_MENU_Data.current_day_state);
		} else{
			t_data_ptr = (int8_t *)(&ST_MENU_Data.timeline_data) + ST_MENU_Data.state;
 80016da:	bf9a      	itte	ls
 80016dc:	1c59      	addls	r1, r3, #1
 80016de:	1852      	addls	r2, r2, r1
			t_data_ptr = (int8_t *)(&ST_MENU_Data.current_day_state);
 80016e0:	1d5a      	addhi	r2, r3, #5
		}
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 80016e2:	2801      	cmp	r0, #1
 80016e4:	bf18      	it	ne
 80016e6:	20ff      	movne	r0, #255	; 0xff
 80016e8:	7811      	ldrb	r1, [r2, #0]
		if(*t_data_ptr > __max_value[ST_MENU_Data.state]){
 80016ea:	4c11      	ldr	r4, [pc, #68]	; (8001730 <ST_MENU_Set_Value+0x6c>)
		*t_data_ptr += ((p_is_increase == INCREASE) ? 1 : -1);
 80016ec:	4408      	add	r0, r1
 80016ee:	b240      	sxtb	r0, r0
 80016f0:	7010      	strb	r0, [r2, #0]
		if(*t_data_ptr > __max_value[ST_MENU_Data.state]){
 80016f2:	7819      	ldrb	r1, [r3, #0]
 80016f4:	5c61      	ldrb	r1, [r4, r1]
 80016f6:	4288      	cmp	r0, r1
 80016f8:	dd02      	ble.n	8001700 <ST_MENU_Set_Value+0x3c>
			*t_data_ptr = 0;
 80016fa:	2100      	movs	r1, #0
		} else if(*t_data_ptr < 0){
			*t_data_ptr = __max_value[ST_MENU_Data.state];
 80016fc:	7011      	strb	r1, [r2, #0]
 80016fe:	e001      	b.n	8001704 <ST_MENU_Set_Value+0x40>
		} else if(*t_data_ptr < 0){
 8001700:	2800      	cmp	r0, #0
 8001702:	dbfb      	blt.n	80016fc <ST_MENU_Set_Value+0x38>
		}
		if(ST_MENU_Data.state >= SETTING_ALARM_SUNDAY){
 8001704:	7818      	ldrb	r0, [r3, #0]
 8001706:	2801      	cmp	r0, #1
 8001708:	d90a      	bls.n	8001720 <ST_MENU_Set_Value+0x5c>
			if(*t_data_ptr){
				ST_MENU_Data.timeline_data.day |= (0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 800170a:	1e84      	subs	r4, r0, #2
 800170c:	2001      	movs	r0, #1
			if(*t_data_ptr){
 800170e:	f992 2000 	ldrsb.w	r2, [r2]
				ST_MENU_Data.timeline_data.day |= (0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 8001712:	40a0      	lsls	r0, r4
 8001714:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8001718:	b240      	sxtb	r0, r0
			if(*t_data_ptr){
 800171a:	b112      	cbz	r2, 8001722 <ST_MENU_Set_Value+0x5e>
				ST_MENU_Data.timeline_data.day |= (0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 800171c:	4301      	orrs	r1, r0
			} else{
				ST_MENU_Data.timeline_data.day &= ~(0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 800171e:	70d9      	strb	r1, [r3, #3]
			}
		}
	}
}
 8001720:	bd10      	pop	{r4, pc}
				ST_MENU_Data.timeline_data.day &= ~(0x01 << (ST_MENU_Data.state - SETTING_ALARM_SUNDAY));
 8001722:	ea21 0100 	bic.w	r1, r1, r0
 8001726:	e7fa      	b.n	800171e <ST_MENU_Set_Value+0x5a>
 8001728:	20000164 	.word	0x20000164
 800172c:	20000181 	.word	0x20000181
 8001730:	0800557e 	.word	0x0800557e

08001734 <ST_MENU_Display>:

void ST_MENU_Display(){
 8001734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(MENU_Data.is_changing_menu){
 8001736:	4c2d      	ldr	r4, [pc, #180]	; (80017ec <ST_MENU_Display+0xb8>)
 8001738:	7a63      	ldrb	r3, [r4, #9]
 800173a:	b123      	cbz	r3, 8001746 <ST_MENU_Display+0x12>
		LCD_Clear(MENU_Data.hlcd);
 800173c:	6860      	ldr	r0, [r4, #4]
 800173e:	f003 f831 	bl	80047a4 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	7263      	strb	r3, [r4, #9]
	}

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 1);
	LCD_Write(MENU_Data.hlcd, "Time: %02d:%02d", ST_MENU_Data.timeline_data.hour, ST_MENU_Data.timeline_data.minute);
 8001746:	4d2a      	ldr	r5, [pc, #168]	; (80017f0 <ST_MENU_Display+0xbc>)
	LCD_Set_Cursor(MENU_Data.hlcd, 0, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	2100      	movs	r1, #0
 800174c:	6860      	ldr	r0, [r4, #4]
 800174e:	f003 f811 	bl	8004774 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Time: %02d:%02d", ST_MENU_Data.timeline_data.hour, ST_MENU_Data.timeline_data.minute);
 8001752:	78ab      	ldrb	r3, [r5, #2]
 8001754:	786a      	ldrb	r2, [r5, #1]
 8001756:	4927      	ldr	r1, [pc, #156]	; (80017f4 <ST_MENU_Display+0xc0>)
 8001758:	6860      	ldr	r0, [r4, #4]
 800175a:	f003 f889 	bl	8004870 <LCD_Write>

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 2);
 800175e:	2202      	movs	r2, #2
 8001760:	2100      	movs	r1, #0
 8001762:	6860      	ldr	r0, [r4, #4]
 8001764:	f003 f806 	bl	8004774 <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Day: C234567");
 8001768:	4923      	ldr	r1, [pc, #140]	; (80017f8 <ST_MENU_Display+0xc4>)
 800176a:	6860      	ldr	r0, [r4, #4]
 800176c:	f003 f880 	bl	8004870 <LCD_Write>
	LCD_Set_Cursor(MENU_Data.hlcd, 5, 3);
 8001770:	2203      	movs	r2, #3
 8001772:	2105      	movs	r1, #5
 8001774:	6860      	ldr	r0, [r4, #4]
 8001776:	f002 fffd 	bl	8004774 <LCD_Set_Cursor>
	for(int i = 0; i < 7; i++){
 800177a:	2600      	movs	r6, #0
		uint8_t t_day_value = ST_MENU_Data.timeline_data.day & (1 << i);
 800177c:	2701      	movs	r7, #1
 800177e:	78ea      	ldrb	r2, [r5, #3]
 8001780:	fa07 f306 	lsl.w	r3, r7, r6
		if(t_day_value){
 8001784:	421a      	tst	r2, r3
			LCD_Send_Data(MENU_Data.hlcd, 0x00);
 8001786:	bf14      	ite	ne
 8001788:	2100      	movne	r1, #0
		} else{
			LCD_Send_Data(MENU_Data.hlcd, 0xFE);
 800178a:	21fe      	moveq	r1, #254	; 0xfe
			LCD_Send_Data(MENU_Data.hlcd, 0x00);
 800178c:	6860      	ldr	r0, [r4, #4]
	for(int i = 0; i < 7; i++){
 800178e:	3601      	adds	r6, #1
			LCD_Send_Data(MENU_Data.hlcd, 0xFE);
 8001790:	f003 f828 	bl	80047e4 <LCD_Send_Data>
	for(int i = 0; i < 7; i++){
 8001794:	2e07      	cmp	r6, #7
 8001796:	d1f2      	bne.n	800177e <ST_MENU_Display+0x4a>
		}
	}

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	6860      	ldr	r0, [r4, #4]
 800179c:	4611      	mov	r1, r2
 800179e:	f002 ffe9 	bl	8004774 <LCD_Set_Cursor>
	if(ST_MENU_Data.state < SETTING_ALARM_SUNDAY){
 80017a2:	782b      	ldrb	r3, [r5, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d80b      	bhi.n	80017c0 <ST_MENU_Display+0x8c>
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[ST_MENU_Data.state]);
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <ST_MENU_Display+0xc8>)
 80017aa:	4915      	ldr	r1, [pc, #84]	; (8001800 <ST_MENU_Display+0xcc>)
 80017ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017b0:	6860      	ldr	r0, [r4, #4]
 80017b2:	f003 f85d 	bl	8004870 <LCD_Write>
		LCD_Write(MENU_Data.hlcd, "  Setting : DAY   ");
		LCD_Cursor_Blink(MENU_Data.hlcd);
		LCD_Set_Cursor(MENU_Data.hlcd, 5 + ST_MENU_Data.state - SETTING_ALARM_SUNDAY, 2);
	} else{
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
		LCD_Cursor_No_Blink(MENU_Data.hlcd);
 80017b6:	6860      	ldr	r0, [r4, #4]
	}
}
 80017b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LCD_Cursor_No_Blink(MENU_Data.hlcd);
 80017bc:	f003 b80a 	b.w	80047d4 <LCD_Cursor_No_Blink>
	} else if(ST_MENU_Data.state < CHECKING_ALARM_AGAIN){
 80017c0:	2b08      	cmp	r3, #8
		LCD_Write(MENU_Data.hlcd, "  Setting : %s   ", __setting_type_str[ST_MENU_Data.state]);
 80017c2:	6860      	ldr	r0, [r4, #4]
	} else if(ST_MENU_Data.state < CHECKING_ALARM_AGAIN){
 80017c4:	d80e      	bhi.n	80017e4 <ST_MENU_Display+0xb0>
		LCD_Write(MENU_Data.hlcd, "  Setting : DAY   ");
 80017c6:	490f      	ldr	r1, [pc, #60]	; (8001804 <ST_MENU_Display+0xd0>)
 80017c8:	f003 f852 	bl	8004870 <LCD_Write>
		LCD_Cursor_Blink(MENU_Data.hlcd);
 80017cc:	6860      	ldr	r0, [r4, #4]
 80017ce:	f002 fff9 	bl	80047c4 <LCD_Cursor_Blink>
		LCD_Set_Cursor(MENU_Data.hlcd, 5 + ST_MENU_Data.state - SETTING_ALARM_SUNDAY, 2);
 80017d2:	7829      	ldrb	r1, [r5, #0]
 80017d4:	6860      	ldr	r0, [r4, #4]
 80017d6:	3103      	adds	r1, #3
 80017d8:	2202      	movs	r2, #2
}
 80017da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LCD_Set_Cursor(MENU_Data.hlcd, 5 + ST_MENU_Data.state - SETTING_ALARM_SUNDAY, 2);
 80017de:	b2c9      	uxtb	r1, r1
 80017e0:	f002 bfc8 	b.w	8004774 <LCD_Set_Cursor>
		LCD_Write(MENU_Data.hlcd, "   Checking again   ");
 80017e4:	4908      	ldr	r1, [pc, #32]	; (8001808 <ST_MENU_Display+0xd4>)
 80017e6:	f003 f843 	bl	8004870 <LCD_Write>
 80017ea:	e7e4      	b.n	80017b6 <ST_MENU_Display+0x82>
 80017ec:	20000164 	.word	0x20000164
 80017f0:	20000181 	.word	0x20000181
 80017f4:	0800554e 	.word	0x0800554e
 80017f8:	0800555e 	.word	0x0800555e
 80017fc:	2000001c 	.word	0x2000001c
 8001800:	08005501 	.word	0x08005501
 8001804:	0800556b 	.word	0x0800556b
 8001808:	08005513 	.word	0x08005513

0800180c <TL_MENU_Init>:
		}
	}
}

void TL_MENU_Init(){
	TL_MENU_Data.first_line = 0;
 800180c:	2200      	movs	r2, #0
 800180e:	4b03      	ldr	r3, [pc, #12]	; (800181c <TL_MENU_Init+0x10>)
 8001810:	701a      	strb	r2, [r3, #0]
	TL_MENU_Data.numer_of_choices = 0;
 8001812:	705a      	strb	r2, [r3, #1]
	TL_MENU_Data.current_pointer = 0;
 8001814:	709a      	strb	r2, [r3, #2]
	TL_MENU_Data.woking_state = NORMAL_STATE;
 8001816:	70da      	strb	r2, [r3, #3]
	TIMELINE_Init();
 8001818:	f7ff ba5c 	b.w	8000cd4 <TIMELINE_Init>
 800181c:	20000187 	.word	0x20000187

08001820 <TL_MENU_Set_State>:
//		}
//	}
}

void TL_MENU_Set_State(){
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 8001820:	2203      	movs	r2, #3
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <TL_MENU_Set_State+0x24>)
	MENU_Data.changed = 0;
	MENU_Data.is_changing_menu = 1;
	TL_MENU_Data.first_line = 0;
	TL_MENU_Data.current_pointer = 0;
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 8001824:	4908      	ldr	r1, [pc, #32]	; (8001848 <TL_MENU_Set_State+0x28>)
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 8001826:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800182c:	811a      	strh	r2, [r3, #8]
	TL_MENU_Data.first_line = 0;
 800182e:	2200      	movs	r2, #0
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 8001830:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
	TL_MENU_Data.first_line = 0;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <TL_MENU_Set_State+0x2c>)
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 8001836:	3101      	adds	r1, #1
	TL_MENU_Data.first_line = 0;
 8001838:	701a      	strb	r2, [r3, #0]
	TL_MENU_Data.current_pointer = 0;
 800183a:	709a      	strb	r2, [r3, #2]
	TL_MENU_Data.numer_of_choices = TIMELINE_Data.len + 1;
 800183c:	7059      	strb	r1, [r3, #1]
	TL_MENU_Data.woking_state = NORMAL_STATE;
 800183e:	70da      	strb	r2, [r3, #3]
}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000164 	.word	0x20000164
 8001848:	2000010c 	.word	0x2000010c
 800184c:	20000187 	.word	0x20000187

08001850 <TL_MENU_Change_Working_State>:

void TL_MENU_Change_Working_State(){
 8001850:	b510      	push	{r4, lr}
	if(TL_MENU_Data.current_pointer == 0) return;
 8001852:	4c1a      	ldr	r4, [pc, #104]	; (80018bc <TL_MENU_Change_Working_State+0x6c>)
 8001854:	f994 2002 	ldrsb.w	r2, [r4, #2]
 8001858:	b16a      	cbz	r2, 8001876 <TL_MENU_Change_Working_State+0x26>
	if(TL_MENU_Data.woking_state == NORMAL_STATE){
 800185a:	78e3      	ldrb	r3, [r4, #3]
 800185c:	b963      	cbnz	r3, 8001878 <TL_MENU_Change_Working_State+0x28>
		TL_MENU_Data.woking_state = CONFIG_TIMELINE_STATE;
 800185e:	2301      	movs	r3, #1
 8001860:	70e3      	strb	r3, [r4, #3]
		TL_MENU_Data.timeline_state = TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <TL_MENU_Change_Working_State+0x70>)
 8001864:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001868:	78db      	ldrb	r3, [r3, #3]
 800186a:	7123      	strb	r3, [r4, #4]
		} else{
			TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state = TL_MENU_Data.timeline_state;
			TIMELINE_Store_To_Flash();
		}
	}
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 800186c:	2203      	movs	r2, #3
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <TL_MENU_Change_Working_State+0x74>)
 8001870:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001872:	2200      	movs	r2, #0
 8001874:	721a      	strb	r2, [r3, #8]
}
 8001876:	bd10      	pop	{r4, pc}
		TL_MENU_Data.woking_state = NORMAL_STATE;
 8001878:	2300      	movs	r3, #0
 800187a:	70e3      	strb	r3, [r4, #3]
		if(TL_MENU_Data.timeline_state == DELETE_TIMELINE && !ALARM_Is_Buzzer_Running()){
 800187c:	7923      	ldrb	r3, [r4, #4]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d112      	bne.n	80018a8 <TL_MENU_Change_Working_State+0x58>
 8001882:	f7ff f88f 	bl	80009a4 <ALARM_Is_Buzzer_Running>
 8001886:	b978      	cbnz	r0, 80018a8 <TL_MENU_Change_Working_State+0x58>
			TIMELINE_Delete(TL_MENU_Data.current_pointer - 1);
 8001888:	78a0      	ldrb	r0, [r4, #2]
 800188a:	3801      	subs	r0, #1
 800188c:	b2c0      	uxtb	r0, r0
 800188e:	f7ff faad 	bl	8000dec <TIMELINE_Delete>
			TL_MENU_Data.numer_of_choices--;
 8001892:	7863      	ldrb	r3, [r4, #1]
			if(TL_MENU_Data.current_pointer > TL_MENU_Data.numer_of_choices - 1){
 8001894:	f994 1002 	ldrsb.w	r1, [r4, #2]
			TL_MENU_Data.numer_of_choices--;
 8001898:	1e5a      	subs	r2, r3, #1
 800189a:	b2d2      	uxtb	r2, r2
			if(TL_MENU_Data.current_pointer > TL_MENU_Data.numer_of_choices - 1){
 800189c:	428a      	cmp	r2, r1
			TL_MENU_Data.numer_of_choices--;
 800189e:	7062      	strb	r2, [r4, #1]
			if(TL_MENU_Data.current_pointer > TL_MENU_Data.numer_of_choices - 1){
 80018a0:	dce4      	bgt.n	800186c <TL_MENU_Change_Working_State+0x1c>
				TL_MENU_Data.current_pointer = TL_MENU_Data.numer_of_choices - 1;
 80018a2:	3b02      	subs	r3, #2
 80018a4:	70a3      	strb	r3, [r4, #2]
 80018a6:	e7e1      	b.n	800186c <TL_MENU_Change_Working_State+0x1c>
			TIMELINE_Data.flash_data[TL_MENU_Data.current_pointer - 1].timeline_state = TL_MENU_Data.timeline_state;
 80018a8:	f994 2002 	ldrsb.w	r2, [r4, #2]
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <TL_MENU_Change_Working_State+0x70>)
 80018ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80018b2:	7922      	ldrb	r2, [r4, #4]
 80018b4:	70da      	strb	r2, [r3, #3]
			TIMELINE_Store_To_Flash();
 80018b6:	f7ff fa69 	bl	8000d8c <TIMELINE_Store_To_Flash>
 80018ba:	e7d7      	b.n	800186c <TL_MENU_Change_Working_State+0x1c>
 80018bc:	20000187 	.word	0x20000187
 80018c0:	2000010c 	.word	0x2000010c
 80018c4:	20000164 	.word	0x20000164

080018c8 <TL_MENU_Change_Pointer>:

void TL_MENU_Change_Pointer(uint8_t p_is_increase){
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 80018c8:	2203      	movs	r2, #3
	MENU_Data.changed = 0;
 80018ca:	2100      	movs	r1, #0
	TL_MENU_Data.current_pointer += (p_is_increase == INCREASE) ? 1 : -1;
 80018cc:	2801      	cmp	r0, #1
 80018ce:	bf18      	it	ne
 80018d0:	20ff      	movne	r0, #255	; 0xff
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <TL_MENU_Change_Pointer+0x48>)
 80018d4:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80018d6:	7219      	strb	r1, [r3, #8]
	TL_MENU_Data.current_pointer += (p_is_increase == INCREASE) ? 1 : -1;
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <TL_MENU_Change_Pointer+0x4c>)
 80018da:	789a      	ldrb	r2, [r3, #2]
 80018dc:	4410      	add	r0, r2
 80018de:	b240      	sxtb	r0, r0
	if(TL_MENU_Data.current_pointer < 0){
 80018e0:	4288      	cmp	r0, r1
	TL_MENU_Data.current_pointer += (p_is_increase == INCREASE) ? 1 : -1;
 80018e2:	7098      	strb	r0, [r3, #2]
	if(TL_MENU_Data.current_pointer < 0){
 80018e4:	da09      	bge.n	80018fa <TL_MENU_Change_Pointer+0x32>
		TL_MENU_Data.current_pointer = 0;
 80018e6:	7099      	strb	r1, [r3, #2]
	} else if(TL_MENU_Data.current_pointer >= TL_MENU_Data.numer_of_choices){
		TL_MENU_Data.current_pointer = TL_MENU_Data.numer_of_choices - 1;
	}

	if(TL_MENU_Data.current_pointer > TL_MENU_Data.first_line + 3){
 80018e8:	781a      	ldrb	r2, [r3, #0]
 80018ea:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80018ee:	1cd0      	adds	r0, r2, #3
 80018f0:	4281      	cmp	r1, r0
 80018f2:	dd09      	ble.n	8001908 <TL_MENU_Change_Pointer+0x40>
		TL_MENU_Data.first_line++;
 80018f4:	3201      	adds	r2, #1
	} else if(TL_MENU_Data.current_pointer < TL_MENU_Data.first_line){
		TL_MENU_Data.first_line--;
 80018f6:	701a      	strb	r2, [r3, #0]
	}
}
 80018f8:	4770      	bx	lr
	} else if(TL_MENU_Data.current_pointer >= TL_MENU_Data.numer_of_choices){
 80018fa:	785a      	ldrb	r2, [r3, #1]
 80018fc:	4290      	cmp	r0, r2
		TL_MENU_Data.current_pointer = TL_MENU_Data.numer_of_choices - 1;
 80018fe:	bfa4      	itt	ge
 8001900:	f102 32ff 	addge.w	r2, r2, #4294967295
 8001904:	709a      	strbge	r2, [r3, #2]
 8001906:	e7ef      	b.n	80018e8 <TL_MENU_Change_Pointer+0x20>
	} else if(TL_MENU_Data.current_pointer < TL_MENU_Data.first_line){
 8001908:	4291      	cmp	r1, r2
 800190a:	daf5      	bge.n	80018f8 <TL_MENU_Change_Pointer+0x30>
		TL_MENU_Data.first_line--;
 800190c:	3a01      	subs	r2, #1
 800190e:	e7f2      	b.n	80018f6 <TL_MENU_Change_Pointer+0x2e>
 8001910:	20000164 	.word	0x20000164
 8001914:	20000187 	.word	0x20000187

08001918 <TL_MENU_Config_Timeline>:

void TL_MENU_Config_Timeline(uint8_t p_is_increase){
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 8001918:	2203      	movs	r2, #3
	MENU_Data.changed = 0;
 800191a:	2100      	movs	r1, #0

	TL_MENU_Data.timeline_state += (p_is_increase == INCREASE) ? 1 : -1;
 800191c:	2801      	cmp	r0, #1
 800191e:	bf18      	it	ne
 8001920:	20ff      	movne	r0, #255	; 0xff
	MENU_Data.menu_type = TIMELINE_LIST_MENU;
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <TL_MENU_Config_Timeline+0x2c>)
 8001924:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8001926:	7219      	strb	r1, [r3, #8]
	TL_MENU_Data.timeline_state += (p_is_increase == INCREASE) ? 1 : -1;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <TL_MENU_Config_Timeline+0x30>)
 800192a:	791a      	ldrb	r2, [r3, #4]
 800192c:	4410      	add	r0, r2
 800192e:	b2c2      	uxtb	r2, r0
	if((int8_t)TL_MENU_Data.timeline_state < 0){
 8001930:	0600      	lsls	r0, r0, #24
 8001932:	d502      	bpl.n	800193a <TL_MENU_Config_Timeline+0x22>
		TL_MENU_Data.timeline_state = 2;
 8001934:	2202      	movs	r2, #2
	TL_MENU_Data.timeline_state += (p_is_increase == INCREASE) ? 1 : -1;
 8001936:	711a      	strb	r2, [r3, #4]
 8001938:	4770      	bx	lr
	} else if(TL_MENU_Data.timeline_state > 2){
 800193a:	2a02      	cmp	r2, #2
 800193c:	d9fb      	bls.n	8001936 <TL_MENU_Config_Timeline+0x1e>
		TL_MENU_Data.timeline_state = 0;
 800193e:	7119      	strb	r1, [r3, #4]
	}
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000164 	.word	0x20000164
 8001948:	20000187 	.word	0x20000187

0800194c <TL_MENU_Display>:

void TL_MENU_Display(){
 800194c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(MENU_Data.is_changing_menu == 1){
 8001950:	4c46      	ldr	r4, [pc, #280]	; (8001a6c <TL_MENU_Display+0x120>)
void TL_MENU_Display(){
 8001952:	b087      	sub	sp, #28
	if(MENU_Data.is_changing_menu == 1){
 8001954:	7a63      	ldrb	r3, [r4, #9]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d104      	bne.n	8001964 <TL_MENU_Display+0x18>
		LCD_Clear(MENU_Data.hlcd);
 800195a:	6860      	ldr	r0, [r4, #4]
 800195c:	f002 ff22 	bl	80047a4 <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	7263      	strb	r3, [r4, #9]
void TL_MENU_Display(){
 8001964:	2600      	movs	r6, #0
	}
	for(int i = 0; i < 4; i++){
		uint8_t t_index = TL_MENU_Data.first_line + i;
 8001966:	4f42      	ldr	r7, [pc, #264]	; (8001a70 <TL_MENU_Display+0x124>)
		LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
		if(t_index == 0){
			LCD_Write(MENU_Data.hlcd, " Add...             ");
		} else if(t_index - 1 < TIMELINE_Data.len){
 8001968:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8001a74 <TL_MENU_Display+0x128>
		uint8_t t_index = TL_MENU_Data.first_line + i;
 800196c:	783d      	ldrb	r5, [r7, #0]
 800196e:	fa5f f886 	uxtb.w	r8, r6
 8001972:	4445      	add	r5, r8
 8001974:	b2ed      	uxtb	r5, r5
		LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 8001976:	4642      	mov	r2, r8
 8001978:	2100      	movs	r1, #0
 800197a:	6860      	ldr	r0, [r4, #4]
 800197c:	f002 fefa 	bl	8004774 <LCD_Set_Cursor>
		if(t_index == 0){
 8001980:	b925      	cbnz	r5, 800198c <TL_MENU_Display+0x40>
			LCD_Write(MENU_Data.hlcd, " Add...             ");
 8001982:	493d      	ldr	r1, [pc, #244]	; (8001a78 <TL_MENU_Display+0x12c>)
 8001984:	6860      	ldr	r0, [r4, #4]
			char day_str[8] = {};
			__create_day_string(day_str, TIMELINE_Data.flash_data[t_index - 1].day);
			LCD_Write(MENU_Data.hlcd, " %02d:%02d %7s  %s ", TIMELINE_Data.flash_data[t_index - 1].hour, TIMELINE_Data.flash_data[t_index - 1].minute,
					day_str, (TIMELINE_Data.flash_data[t_index - 1].timeline_state == TIMELINE_ON) ? " ON" : "OFF");
		} else{
			LCD_Write(MENU_Data.hlcd, "                    ");
 8001986:	f002 ff73 	bl	8004870 <LCD_Write>
 800198a:	e03f      	b.n	8001a0c <TL_MENU_Display+0xc0>
			LCD_Write(MENU_Data.hlcd, " Add...             ");
 800198c:	6863      	ldr	r3, [r4, #4]
 800198e:	9302      	str	r3, [sp, #8]
		} else if(t_index - 1 < TIMELINE_Data.len){
 8001990:	f899 303c 	ldrb.w	r3, [r9, #60]	; 0x3c
 8001994:	42ab      	cmp	r3, r5
 8001996:	d34d      	bcc.n	8001a34 <TL_MENU_Display+0xe8>
			char day_str[8] = {};
 8001998:	2300      	movs	r3, #0
			__create_day_string(day_str, TIMELINE_Data.flash_data[t_index - 1].day);
 800199a:	1e6a      	subs	r2, r5, #1
 800199c:	0091      	lsls	r1, r2, #2
 800199e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80019a2:	7992      	ldrb	r2, [r2, #6]
		uint8_t t_day_value = day & (1 << i);
 80019a4:	f04f 0e01 	mov.w	lr, #1
			__create_day_string(day_str, TIMELINE_Data.flash_data[t_index - 1].day);
 80019a8:	4610      	mov	r0, r2
				str[t_num_of_day++] = 'C';
 80019aa:	f04f 0a43 	mov.w	sl, #67	; 0x43
	for(int i = 0; i < 7; i++){
 80019ae:	461a      	mov	r2, r3
			char day_str[8] = {};
 80019b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
			__create_day_string(day_str, TIMELINE_Data.flash_data[t_index - 1].day);
 80019b4:	9103      	str	r1, [sp, #12]
				str[t_num_of_day++] = 'C';
 80019b6:	f10d 0c10 	add.w	ip, sp, #16
		uint8_t t_day_value = day & (1 << i);
 80019ba:	fa0e f102 	lsl.w	r1, lr, r2
 80019be:	4001      	ands	r1, r0
 80019c0:	fa4f fb81 	sxtb.w	fp, r1
		if(t_day_value){
 80019c4:	b161      	cbz	r1, 80019e0 <TL_MENU_Display+0x94>
			if(t_day_value == 1){
 80019c6:	f1bb 0f01 	cmp.w	fp, #1
				str[t_num_of_day++] = 'C';
 80019ca:	f103 0101 	add.w	r1, r3, #1
 80019ce:	b2c9      	uxtb	r1, r1
				str[t_num_of_day++] = '1' + i;
 80019d0:	bf16      	itet	ne
 80019d2:	f102 0b31 	addne.w	fp, r2, #49	; 0x31
				str[t_num_of_day++] = 'C';
 80019d6:	f80c a003 	strbeq.w	sl, [ip, r3]
				str[t_num_of_day++] = '1' + i;
 80019da:	f80c b003 	strbne.w	fp, [ip, r3]
 80019de:	460b      	mov	r3, r1
	for(int i = 0; i < 7; i++){
 80019e0:	3201      	adds	r2, #1
 80019e2:	2a07      	cmp	r2, #7
 80019e4:	d1e9      	bne.n	80019ba <TL_MENU_Display+0x6e>
			LCD_Write(MENU_Data.hlcd, " %02d:%02d %7s  %s ", TIMELINE_Data.flash_data[t_index - 1].hour, TIMELINE_Data.flash_data[t_index - 1].minute,
 80019e6:	9a03      	ldr	r2, [sp, #12]
 80019e8:	4924      	ldr	r1, [pc, #144]	; (8001a7c <TL_MENU_Display+0x130>)
 80019ea:	444a      	add	r2, r9
 80019ec:	f892 c007 	ldrb.w	ip, [r2, #7]
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <TL_MENU_Display+0x134>)
 80019f2:	9802      	ldr	r0, [sp, #8]
 80019f4:	f1bc 0f01 	cmp.w	ip, #1
 80019f8:	bf18      	it	ne
 80019fa:	460b      	movne	r3, r1
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	ab04      	add	r3, sp, #16
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	7953      	ldrb	r3, [r2, #5]
 8001a04:	491f      	ldr	r1, [pc, #124]	; (8001a84 <TL_MENU_Display+0x138>)
 8001a06:	7912      	ldrb	r2, [r2, #4]
 8001a08:	f002 ff32 	bl	8004870 <LCD_Write>
		}
		if(TL_MENU_Data.current_pointer == t_index){
 8001a0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a10:	42ab      	cmp	r3, r5
 8001a12:	d109      	bne.n	8001a28 <TL_MENU_Display+0xdc>
			if(TL_MENU_Data.woking_state == NORMAL_STATE){
 8001a14:	78f9      	ldrb	r1, [r7, #3]
				LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 8001a16:	4642      	mov	r2, r8
 8001a18:	6860      	ldr	r0, [r4, #4]
			if(TL_MENU_Data.woking_state == NORMAL_STATE){
 8001a1a:	b971      	cbnz	r1, 8001a3a <TL_MENU_Display+0xee>
				LCD_Set_Cursor(MENU_Data.hlcd, 0, i);
 8001a1c:	f002 feaa 	bl	8004774 <LCD_Set_Cursor>
				LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 8001a20:	217e      	movs	r1, #126	; 0x7e
				} else if(TL_MENU_Data.timeline_state == TURN_ON_TIMELINE){
					LCD_Write(MENU_Data.hlcd, " ON");
				} else if(TL_MENU_Data.timeline_state == DELETE_TIMELINE){
					LCD_Write(MENU_Data.hlcd, "DEL");
				}
				LCD_Send_Data(MENU_Data.hlcd, 0x7F);
 8001a22:	6860      	ldr	r0, [r4, #4]
 8001a24:	f002 fede 	bl	80047e4 <LCD_Send_Data>
	for(int i = 0; i < 4; i++){
 8001a28:	3601      	adds	r6, #1
 8001a2a:	2e04      	cmp	r6, #4
 8001a2c:	d19e      	bne.n	800196c <TL_MENU_Display+0x20>
			}
		}
	}
}
 8001a2e:	b007      	add	sp, #28
 8001a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LCD_Write(MENU_Data.hlcd, "                    ");
 8001a34:	4914      	ldr	r1, [pc, #80]	; (8001a88 <TL_MENU_Display+0x13c>)
 8001a36:	9802      	ldr	r0, [sp, #8]
 8001a38:	e7a5      	b.n	8001986 <TL_MENU_Display+0x3a>
				LCD_Set_Cursor(MENU_Data.hlcd, 15, i);
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f002 fe9a 	bl	8004774 <LCD_Set_Cursor>
				LCD_Send_Data(MENU_Data.hlcd, 0x7E);
 8001a40:	217e      	movs	r1, #126	; 0x7e
 8001a42:	6860      	ldr	r0, [r4, #4]
 8001a44:	f002 fece 	bl	80047e4 <LCD_Send_Data>
				if(TL_MENU_Data.timeline_state == TURN_OFF_TIMELINE){
 8001a48:	793b      	ldrb	r3, [r7, #4]
 8001a4a:	b92b      	cbnz	r3, 8001a58 <TL_MENU_Display+0x10c>
					LCD_Write(MENU_Data.hlcd, "OFF");
 8001a4c:	490b      	ldr	r1, [pc, #44]	; (8001a7c <TL_MENU_Display+0x130>)
 8001a4e:	6860      	ldr	r0, [r4, #4]
					LCD_Write(MENU_Data.hlcd, "DEL");
 8001a50:	f002 ff0e 	bl	8004870 <LCD_Write>
				LCD_Send_Data(MENU_Data.hlcd, 0x7F);
 8001a54:	217f      	movs	r1, #127	; 0x7f
 8001a56:	e7e4      	b.n	8001a22 <TL_MENU_Display+0xd6>
				} else if(TL_MENU_Data.timeline_state == TURN_ON_TIMELINE){
 8001a58:	2b01      	cmp	r3, #1
					LCD_Write(MENU_Data.hlcd, "OFF");
 8001a5a:	6860      	ldr	r0, [r4, #4]
				} else if(TL_MENU_Data.timeline_state == TURN_ON_TIMELINE){
 8001a5c:	d101      	bne.n	8001a62 <TL_MENU_Display+0x116>
					LCD_Write(MENU_Data.hlcd, " ON");
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <TL_MENU_Display+0x134>)
 8001a60:	e7f6      	b.n	8001a50 <TL_MENU_Display+0x104>
				} else if(TL_MENU_Data.timeline_state == DELETE_TIMELINE){
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d1f6      	bne.n	8001a54 <TL_MENU_Display+0x108>
					LCD_Write(MENU_Data.hlcd, "DEL");
 8001a66:	4909      	ldr	r1, [pc, #36]	; (8001a8c <TL_MENU_Display+0x140>)
 8001a68:	e7f2      	b.n	8001a50 <TL_MENU_Display+0x104>
 8001a6a:	bf00      	nop
 8001a6c:	20000164 	.word	0x20000164
 8001a70:	20000187 	.word	0x20000187
 8001a74:	2000010c 	.word	0x2000010c
 8001a78:	0800558f 	.word	0x0800558f
 8001a7c:	0800558b 	.word	0x0800558b
 8001a80:	08005587 	.word	0x08005587
 8001a84:	080055a4 	.word	0x080055a4
 8001a88:	080055b8 	.word	0x080055b8
 8001a8c:	080055cd 	.word	0x080055cd

08001a90 <TEMP_AND_HUM_Handle>:

LCD_I2C_HandleTypeDef hlcd;
DHT_HandleTypeDef hdht;

#define CHECKING_SENSOR_TIME	2000
void TEMP_AND_HUM_Handle(){
 8001a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static uint32_t timer = 0;
	static uint8_t system_temperature = 0;
	static uint8_t system_huminity = 0;
	if(HAL_GetTick() - timer >= CHECKING_SENSOR_TIME){
 8001a94:	f000 fb9e 	bl	80021d4 <HAL_GetTick>
 8001a98:	4e19      	ldr	r6, [pc, #100]	; (8001b00 <TEMP_AND_HUM_Handle+0x70>)
 8001a9a:	6833      	ldr	r3, [r6, #0]
 8001a9c:	1ac0      	subs	r0, r0, r3
 8001a9e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8001aa2:	d32b      	bcc.n	8001afc <TEMP_AND_HUM_Handle+0x6c>
		HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
		DHT_Read_Value(&hdht);
 8001aa4:	4c17      	ldr	r4, [pc, #92]	; (8001b04 <TEMP_AND_HUM_Handle+0x74>)
		HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
 8001aa6:	213c      	movs	r1, #60	; 0x3c
 8001aa8:	4817      	ldr	r0, [pc, #92]	; (8001b08 <TEMP_AND_HUM_Handle+0x78>)
 8001aaa:	f002 f970 	bl	8003d8e <HAL_TIM_Encoder_Stop_IT>
		DHT_Read_Value(&hdht);
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f002 fbfd 	bl	80042ae <DHT_Read_Value>
		HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001ab4:	213c      	movs	r1, #60	; 0x3c
 8001ab6:	4814      	ldr	r0, [pc, #80]	; (8001b08 <TEMP_AND_HUM_Handle+0x78>)
 8001ab8:	f002 f8fa 	bl	8003cb0 <HAL_TIM_Encoder_Start_IT>
		if(system_huminity != (uint8_t)hdht.huminity || system_temperature != (uint8_t)hdht.temperature){
 8001abc:	6920      	ldr	r0, [r4, #16]
 8001abe:	f7fe fea5 	bl	800080c <__aeabi_f2uiz>
 8001ac2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8001b0c <TEMP_AND_HUM_Handle+0x7c>
 8001ac6:	b2c5      	uxtb	r5, r0
 8001ac8:	f898 3000 	ldrb.w	r3, [r8]
 8001acc:	4f10      	ldr	r7, [pc, #64]	; (8001b10 <TEMP_AND_HUM_Handle+0x80>)
 8001ace:	42ab      	cmp	r3, r5
 8001ad0:	d106      	bne.n	8001ae0 <TEMP_AND_HUM_Handle+0x50>
 8001ad2:	68e0      	ldr	r0, [r4, #12]
 8001ad4:	f7fe fe9a 	bl	800080c <__aeabi_f2uiz>
 8001ad8:	783b      	ldrb	r3, [r7, #0]
 8001ada:	b2c0      	uxtb	r0, r0
 8001adc:	4298      	cmp	r0, r3
 8001ade:	d00a      	beq.n	8001af6 <TEMP_AND_HUM_Handle+0x66>
			system_huminity = hdht.huminity;
			system_temperature = hdht.temperature;
 8001ae0:	68e0      	ldr	r0, [r4, #12]
			system_huminity = hdht.huminity;
 8001ae2:	f888 5000 	strb.w	r5, [r8]
			system_temperature = hdht.temperature;
 8001ae6:	f7fe fe91 	bl	800080c <__aeabi_f2uiz>
			if(MENU_Data.menu_type == MAIN_MENU){
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <TEMP_AND_HUM_Handle+0x84>)
			system_temperature = hdht.temperature;
 8001aec:	7038      	strb	r0, [r7, #0]
			if(MENU_Data.menu_type == MAIN_MENU){
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b90b      	cbnz	r3, 8001af6 <TEMP_AND_HUM_Handle+0x66>
				MAIN_MENU_Update_Value();
 8001af2:	f7ff fb9d 	bl	8001230 <MAIN_MENU_Update_Value>
			}
		}

		timer = HAL_GetTick();
 8001af6:	f000 fb6d 	bl	80021d4 <HAL_GetTick>
 8001afa:	6030      	str	r0, [r6, #0]
	}
}
 8001afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b00:	200002d8 	.word	0x200002d8
 8001b04:	200001bc 	.word	0x200001bc
 8001b08:	2000028c 	.word	0x2000028c
 8001b0c:	200002d4 	.word	0x200002d4
 8001b10:	200002d5 	.word	0x200002d5
 8001b14:	20000164 	.word	0x20000164

08001b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b18:	b510      	push	{r4, lr}
 8001b1a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1c:	2214      	movs	r2, #20
 8001b1e:	2100      	movs	r1, #0
 8001b20:	a80c      	add	r0, sp, #48	; 0x30
 8001b22:	f002 ffeb 	bl	8004afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b26:	2214      	movs	r2, #20
 8001b28:	2100      	movs	r1, #0
 8001b2a:	eb0d 0002 	add.w	r0, sp, r2
 8001b2e:	f002 ffe5 	bl	8004afc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b32:	2210      	movs	r2, #16
 8001b34:	2100      	movs	r1, #0
 8001b36:	a801      	add	r0, sp, #4
 8001b38:	f002 ffe0 	bl	8004afc <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b3c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b42:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b44:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b4c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b50:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b52:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b54:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b56:	f001 fc5b 	bl	8003410 <HAL_RCC_OscConfig>
 8001b5a:	b108      	cbz	r0, 8001b60 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b60:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b62:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b6a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b6c:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b70:	4621      	mov	r1, r4
 8001b72:	a805      	add	r0, sp, #20
 8001b74:	f001 fe22 	bl	80037bc <HAL_RCC_ClockConfig>
 8001b78:	b108      	cbz	r0, 8001b7e <SystemClock_Config+0x66>
 8001b7a:	b672      	cpsid	i
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <SystemClock_Config+0x64>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8001b7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b82:	2203      	movs	r2, #3
 8001b84:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b8c:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b8e:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b90:	f001 fed0 	bl	8003934 <HAL_RCCEx_PeriphCLKConfig>
 8001b94:	b108      	cbz	r0, 8001b9a <SystemClock_Config+0x82>
 8001b96:	b672      	cpsid	i
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <SystemClock_Config+0x80>
}
 8001b9a:	b014      	add	sp, #80	; 0x50
 8001b9c:	bd10      	pop	{r4, pc}
	...

08001ba0 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f04f 0810 	mov.w	r8, #16
{
 8001ba4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001ba8:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8001baa:	f000 faf5 	bl	8002198 <HAL_Init>
  SystemClock_Config();
 8001bae:	f7ff ffb3 	bl	8001b18 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb2:	4642      	mov	r2, r8
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	a809      	add	r0, sp, #36	; 0x24
 8001bb8:	f002 ffa0 	bl	8004afc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbc:	4b9d      	ldr	r3, [pc, #628]	; (8001e34 <main+0x294>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc2:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc4:	ea42 0208 	orr.w	r2, r2, r8
 8001bc8:	619a      	str	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001bd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	ea02 0208 	and.w	r2, r2, r8
 8001bda:	9203      	str	r2, [sp, #12]
 8001bdc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bde:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001be0:	4895      	ldr	r0, [pc, #596]	; (8001e38 <main+0x298>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be2:	f042 0220 	orr.w	r2, r2, #32
 8001be6:	619a      	str	r2, [r3, #24]
 8001be8:	699a      	ldr	r2, [r3, #24]
  htim2.Instance = TIM2;
 8001bea:	4d94      	ldr	r5, [pc, #592]	; (8001e3c <main+0x29c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bec:	f002 0220 	and.w	r2, r2, #32
 8001bf0:	9204      	str	r2, [sp, #16]
 8001bf2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf4:	699a      	ldr	r2, [r3, #24]
  htim2.Init.Period = 65535;
 8001bf6:	f64f 7aff 	movw	sl, #65535	; 0xffff
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	f042 0204 	orr.w	r2, r2, #4
 8001bfe:	619a      	str	r2, [r3, #24]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	f002 0204 	and.w	r2, r2, #4
 8001c06:	9205      	str	r2, [sp, #20]
 8001c08:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	699a      	ldr	r2, [r3, #24]
 8001c0c:	f042 0208 	orr.w	r2, r2, #8
 8001c10:	619a      	str	r2, [r3, #24]
 8001c12:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	9306      	str	r3, [sp, #24]
 8001c1c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c1e:	f000 ff9b 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 8001c22:	2200      	movs	r2, #0
 8001c24:	f640 7103 	movw	r1, #3843	; 0xf03
 8001c28:	4885      	ldr	r0, [pc, #532]	; (8001e40 <main+0x2a0>)
 8001c2a:	f000 ff95 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001c34:	4883      	ldr	r0, [pc, #524]	; (8001e44 <main+0x2a4>)
 8001c36:	f000 ff8f 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3a:	487f      	ldr	r0, [pc, #508]	; (8001e38 <main+0x298>)
 8001c3c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3e:	e9cd 9609 	strd	r9, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	e9cd 470b 	strd	r4, r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c46:	f000 fea7 	bl	8002998 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 8001c4a:	f640 7303 	movw	r3, #3843	; 0xf03
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	487c      	ldr	r0, [pc, #496]	; (8001e40 <main+0x2a0>)
 8001c50:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	e9cd 470b 	strd	r4, r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f000 fe9d 	bl	8002998 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c5e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	4878      	ldr	r0, [pc, #480]	; (8001e44 <main+0x2a4>)
 8001c64:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	e9cd 470b 	strd	r4, r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6e:	f000 fe93 	bl	8002998 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	4874      	ldr	r0, [pc, #464]	; (8001e44 <main+0x2a4>)
 8001c74:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c76:	e9cd 8409 	strd	r8, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f000 fe8c 	bl	8002998 <HAL_GPIO_Init>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c80:	4621      	mov	r1, r4
 8001c82:	221c      	movs	r2, #28
 8001c84:	a80a      	add	r0, sp, #40	; 0x28
 8001c86:	f002 ff39 	bl	8004afc <memset>
  htim2.Instance = TIM2;
 8001c8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8001c8e:	e9c5 3400 	strd	r3, r4, [r5]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c92:	2303      	movs	r3, #3
 8001c94:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC1Filter = 10;
 8001c96:	230a      	movs	r3, #10
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c98:	4628      	mov	r0, r5
 8001c9a:	a909      	add	r1, sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca0:	e9c5 a403 	strd	sl, r4, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca6:	61ac      	str	r4, [r5, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca8:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.IC1Filter = 10;
 8001caa:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cac:	960f      	str	r6, [sp, #60]	; 0x3c
  sConfig.IC2Filter = 10;
 8001cae:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001cb0:	f002 f9c4 	bl	800403c <HAL_TIM_Encoder_Init>
 8001cb4:	b108      	cbz	r0, 8001cba <main+0x11a>
 8001cb6:	b672      	cpsid	i
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <main+0x118>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cba:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cbe:	a907      	add	r1, sp, #28
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	f002 faaf 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	b108      	cbz	r0, 8001ccc <main+0x12c>
 8001cc8:	b672      	cpsid	i
  while (1)
 8001cca:	e7fe      	b.n	8001cca <main+0x12a>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance = RTC;
 8001cd0:	485d      	ldr	r0, [pc, #372]	; (8001e48 <main+0x2a8>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001cd2:	4c5e      	ldr	r4, [pc, #376]	; (8001e4c <main+0x2ac>)
 8001cd4:	e9c0 4300 	strd	r4, r3, [r0]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cdc:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cde:	f001 ff5f 	bl	8003ba0 <HAL_RTC_Init>
 8001ce2:	b108      	cbz	r0, 8001ce8 <main+0x148>
 8001ce4:	b672      	cpsid	i
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <main+0x146>
  hi2c2.Instance = I2C2;
 8001ce8:	4c59      	ldr	r4, [pc, #356]	; (8001e50 <main+0x2b0>)
  hi2c2.Init.ClockSpeed = 100000;
 8001cea:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <main+0x2b4>)
 8001cec:	495a      	ldr	r1, [pc, #360]	; (8001e58 <main+0x2b8>)
  hi2c2.Init.OwnAddress1 = 0;
 8001cee:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hi2c2.Init.ClockSpeed = 100000;
 8001cf2:	e9c4 1300 	strd	r1, r3, [r4]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cfa:	e9c4 0006 	strd	r0, r0, [r4, #24]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cfe:	e9c4 3004 	strd	r3, r0, [r4, #16]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d02:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d04:	4620      	mov	r0, r4
 8001d06:	f001 f907 	bl	8002f18 <HAL_I2C_Init>
 8001d0a:	b108      	cbz	r0, 8001d10 <main+0x170>
 8001d0c:	b672      	cpsid	i
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <main+0x16e>
  hadc1.Instance = ADC1;
 8001d10:	f8df b148 	ldr.w	fp, [pc, #328]	; 8001e5c <main+0x2bc>
 8001d14:	4b52      	ldr	r3, [pc, #328]	; (8001e60 <main+0x2c0>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d16:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  hadc1.Instance = ADC1;
 8001d1a:	f8cb 3000 	str.w	r3, [fp]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d1e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d22:	900b      	str	r0, [sp, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d24:	f8cb 0008 	str.w	r0, [fp, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d28:	f88b 000c 	strb.w	r0, [fp, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d2c:	f88b 0014 	strb.w	r0, [fp, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d30:	f8cb 0004 	str.w	r0, [fp, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d34:	4658      	mov	r0, fp
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d36:	f8cb 301c 	str.w	r3, [fp, #28]
  hadc1.Init.NbrOfConversion = 1;
 8001d3a:	f8cb 6010 	str.w	r6, [fp, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d3e:	f000 fc21 	bl	8002584 <HAL_ADC_Init>
 8001d42:	b108      	cbz	r0, 8001d48 <main+0x1a8>
 8001d44:	b672      	cpsid	i
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <main+0x1a6>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001d48:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d4a:	4658      	mov	r0, fp
 8001d4c:	a909      	add	r1, sp, #36	; 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d4e:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001d52:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d54:	f000 fad0 	bl	80022f8 <HAL_ADC_ConfigChannel>
 8001d58:	4683      	mov	fp, r0
 8001d5a:	b108      	cbz	r0, 8001d60 <main+0x1c0>
 8001d5c:	b672      	cpsid	i
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <main+0x1be>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d60:	4642      	mov	r2, r8
 8001d62:	4601      	mov	r1, r0
 8001d64:	a809      	add	r0, sp, #36	; 0x24
 8001d66:	f002 fec9 	bl	8004afc <memset>
  htim1.Init.Prescaler = 71;
 8001d6a:	2347      	movs	r3, #71	; 0x47
  htim1.Instance = TIM1;
 8001d6c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8001e64 <main+0x2c4>
  htim1.Init.Prescaler = 71;
 8001d70:	4a3d      	ldr	r2, [pc, #244]	; (8001e68 <main+0x2c8>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d72:	4640      	mov	r0, r8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d74:	e9cd bb07 	strd	fp, fp, [sp, #28]
  htim1.Init.Prescaler = 71;
 8001d78:	e9c8 2300 	strd	r2, r3, [r8]
  htim1.Init.Period = 65535;
 8001d7c:	e9c8 ba02 	strd	fp, sl, [r8, #8]
  htim1.Init.RepetitionCounter = 0;
 8001d80:	e9c8 bb04 	strd	fp, fp, [r8, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d84:	f8c8 b018 	str.w	fp, [r8, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d88:	f002 f92c 	bl	8003fe4 <HAL_TIM_Base_Init>
 8001d8c:	b108      	cbz	r0, 8001d92 <main+0x1f2>
 8001d8e:	b672      	cpsid	i
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <main+0x1f0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d96:	4640      	mov	r0, r8
 8001d98:	a909      	add	r1, sp, #36	; 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d9a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d9c:	f002 f9ad 	bl	80040fa <HAL_TIM_ConfigClockSource>
 8001da0:	b108      	cbz	r0, 8001da6 <main+0x206>
 8001da2:	b672      	cpsid	i
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <main+0x204>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da6:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001daa:	a907      	add	r1, sp, #28
 8001dac:	4640      	mov	r0, r8
 8001dae:	f002 fa39 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8001db2:	4682      	mov	sl, r0
 8001db4:	b108      	cbz	r0, 8001dba <main+0x21a>
 8001db6:	b672      	cpsid	i
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <main+0x218>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4649      	mov	r1, r9
 8001dbe:	481e      	ldr	r0, [pc, #120]	; (8001e38 <main+0x298>)
 8001dc0:	f000 feca 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001dc4:	4652      	mov	r2, sl
 8001dc6:	4631      	mov	r1, r6
 8001dc8:	481d      	ldr	r0, [pc, #116]	; (8001e40 <main+0x2a0>)
 8001dca:	f000 fec5 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001dce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dd2:	f000 fa05 	bl	80021e0 <HAL_Delay>
  DELAY_US_Init(&htim1);
 8001dd6:	4640      	mov	r0, r8
 8001dd8:	f002 fbf0 	bl	80045bc <DELAY_US_Init>
  REALTIME_Init();
 8001ddc:	f7ff f828 	bl	8000e30 <REALTIME_Init>
  DHT_Init(&hdht, DHT11, GPIOA, GPIO_PIN_0);
 8001de0:	4633      	mov	r3, r6
 8001de2:	4651      	mov	r1, sl
 8001de4:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <main+0x2a0>)
 8001de6:	4821      	ldr	r0, [pc, #132]	; (8001e6c <main+0x2cc>)
 8001de8:	f002 fa5a 	bl	80042a0 <DHT_Init>
  LCD_Init(&hlcd, &hi2c2, 20, 4, 0x4E);
 8001dec:	234e      	movs	r3, #78	; 0x4e
 8001dee:	2214      	movs	r2, #20
 8001df0:	4621      	mov	r1, r4
 8001df2:	481f      	ldr	r0, [pc, #124]	; (8001e70 <main+0x2d0>)
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2304      	movs	r3, #4
 8001df8:	f002 fc7a 	bl	80046f0 <LCD_Init>
  MENU_Init(&hlcd);
 8001dfc:	481c      	ldr	r0, [pc, #112]	; (8001e70 <main+0x2d0>)
 8001dfe:	f7ff fa1f 	bl	8001240 <MENU_Init>
  ROTARY_ENCODER_Init();
 8001e02:	f7fe ff33 	bl	8000c6c <ROTARY_ENCODER_Init>
  ALARM_Init(GPIOA, GPIO_PIN_1);
 8001e06:	4639      	mov	r1, r7
 8001e08:	480d      	ldr	r0, [pc, #52]	; (8001e40 <main+0x2a0>)
 8001e0a:	f7fe fd27 	bl	800085c <ALARM_Init>
  BATTERY_LEVEL_Init();
 8001e0e:	f7fe fe17 	bl	8000a40 <BATTERY_LEVEL_Init>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001e12:	213c      	movs	r1, #60	; 0x3c
 8001e14:	4628      	mov	r0, r5
 8001e16:	f001 ff4b 	bl	8003cb0 <HAL_TIM_Encoder_Start_IT>
	  REALTIME_Handle();
 8001e1a:	f7ff f833 	bl	8000e84 <REALTIME_Handle>
	  TEMP_AND_HUM_Handle();
 8001e1e:	f7ff fe37 	bl	8001a90 <TEMP_AND_HUM_Handle>
	  MENU_Handle();
 8001e22:	f7ff fa25 	bl	8001270 <MENU_Handle>
	  ROTARY_ENCODER_Handle();
 8001e26:	f7fe ff47 	bl	8000cb8 <ROTARY_ENCODER_Handle>
	  ALARM_Handle();
 8001e2a:	f7fe fd21 	bl	8000870 <ALARM_Handle>
	  BATTERY_LEVEL_Handle();
 8001e2e:	f7fe fe15 	bl	8000a5c <BATTERY_LEVEL_Handle>
  while (1)
 8001e32:	e7f2      	b.n	8001e1a <main+0x27a>
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40011000 	.word	0x40011000
 8001e3c:	2000028c 	.word	0x2000028c
 8001e40:	40010800 	.word	0x40010800
 8001e44:	40010c00 	.word	0x40010c00
 8001e48:	20000230 	.word	0x20000230
 8001e4c:	40002800 	.word	0x40002800
 8001e50:	200001d0 	.word	0x200001d0
 8001e54:	000186a0 	.word	0x000186a0
 8001e58:	40005800 	.word	0x40005800
 8001e5c:	2000018c 	.word	0x2000018c
 8001e60:	40012400 	.word	0x40012400
 8001e64:	20000244 	.word	0x20000244
 8001e68:	40012c00 	.word	0x40012c00
 8001e6c:	200001bc 	.word	0x200001bc
 8001e70:	20000224 	.word	0x20000224

08001e74 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_MspInit+0x3c>)
{
 8001e76:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	619a      	str	r2, [r3, #24]
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	f002 0201 	and.w	r2, r2, #1
 8001e86:	9200      	str	r2, [sp, #0]
 8001e88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e90:	61da      	str	r2, [r3, #28]
 8001e92:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e94:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e9e:	6853      	ldr	r3, [r2, #4]
 8001ea0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ea4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eaa:	b002      	add	sp, #8
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010000 	.word	0x40010000

08001eb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eb8:	b510      	push	{r4, lr}
 8001eba:	4604      	mov	r4, r0
 8001ebc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	a802      	add	r0, sp, #8
 8001ec4:	f002 fe1a 	bl	8004afc <memset>
  if(hadc->Instance==ADC1)
 8001ec8:	6822      	ldr	r2, [r4, #0]
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_ADC_MspInit+0x64>)
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d123      	bne.n	8001f18 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ed0:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001ed4:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	4812      	ldr	r0, [pc, #72]	; (8001f20 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001edc:	619a      	str	r2, [r3, #24]
 8001ede:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ee2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001ee6:	9200      	str	r2, [sp, #0]
 8001ee8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	f042 0204 	orr.w	r2, r2, #4
 8001ef0:	619a      	str	r2, [r3, #24]
 8001ef2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef4:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f000 fd48 	bl	8002998 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2012      	movs	r0, #18
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	f000 fbcb 	bl	80026a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f12:	2012      	movs	r0, #18
 8001f14:	f000 fbfa 	bl	800270c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f18:	b006      	add	sp, #24
 8001f1a:	bd10      	pop	{r4, pc}
 8001f1c:	40012400 	.word	0x40012400
 8001f20:	40010800 	.word	0x40010800

08001f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f24:	b510      	push	{r4, lr}
 8001f26:	4604      	mov	r4, r0
 8001f28:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	a802      	add	r0, sp, #8
 8001f30:	f002 fde4 	bl	8004afc <memset>
  if(hi2c->Instance==I2C2)
 8001f34:	6822      	ldr	r2, [r4, #0]
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_I2C_MspInit+0x58>)
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d11d      	bne.n	8001f78 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3c:	4c10      	ldr	r4, [pc, #64]	; (8001f80 <HAL_I2C_MspInit+0x5c>)
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f44:	480f      	ldr	r0, [pc, #60]	; (8001f84 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	f043 0308 	orr.w	r3, r3, #8
 8001f4a:	61a3      	str	r3, [r4, #24]
 8001f4c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f58:	2312      	movs	r3, #18
 8001f5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f62:	f000 fd19 	bl	8002998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f66:	69e3      	ldr	r3, [r4, #28]
 8001f68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f6c:	61e3      	str	r3, [r4, #28]
 8001f6e:	69e3      	ldr	r3, [r4, #28]
 8001f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f78:	b006      	add	sp, #24
 8001f7a:	bd10      	pop	{r4, pc}
 8001f7c:	40005800 	.word	0x40005800
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010c00 	.word	0x40010c00

08001f88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f88:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RTC_MspInit+0x30>)
 8001f8c:	6802      	ldr	r2, [r0, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d10f      	bne.n	8001fb2 <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001f92:	f001 fa37 	bl	8003404 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RTC_MspInit+0x34>)
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001f9e:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fa0:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <HAL_RTC_MspInit+0x38>)
 8001fae:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001fb2:	b003      	add	sp, #12
 8001fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fb8:	40002800 	.word	0x40002800
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	42420000 	.word	0x42420000

08001fc4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001fc4:	6802      	ldr	r2, [r0, #0]
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_TIM_Base_MspInit+0x24>)
{
 8001fc8:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d10a      	bne.n	8001fe4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fce:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fd8:	619a      	str	r2, [r3, #24]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fe4:	b002      	add	sp, #8
 8001fe6:	4770      	bx	lr
 8001fe8:	40012c00 	.word	0x40012c00

08001fec <HAL_TIM_Encoder_MspInit>:
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	2210      	movs	r2, #16
{
 8001fee:	b510      	push	{r4, lr}
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	eb0d 0002 	add.w	r0, sp, r2
 8001ffa:	f002 fd7f 	bl	8004afc <memset>
  if(htim_encoder->Instance==TIM2)
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002004:	d13d      	bne.n	8002082 <HAL_TIM_Encoder_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002006:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800200a:	69da      	ldr	r2, [r3, #28]
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	481e      	ldr	r0, [pc, #120]	; (8002088 <HAL_TIM_Encoder_MspInit+0x9c>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	61da      	str	r2, [r3, #28]
 8002014:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002018:	f002 0201 	and.w	r2, r2, #1
 800201c:	9201      	str	r2, [sp, #4]
 800201e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002022:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	f042 0204 	orr.w	r2, r2, #4
 8002028:	619a      	str	r2, [r3, #24]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	f002 0204 	and.w	r2, r2, #4
 8002030:	9202      	str	r2, [sp, #8]
 8002032:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002034:	699a      	ldr	r2, [r3, #24]
 8002036:	f042 0208 	orr.w	r2, r2, #8
 800203a:	619a      	str	r2, [r3, #24]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	9303      	str	r3, [sp, #12]
 8002044:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800204a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f000 fca4 	bl	8002998 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002050:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002052:	480e      	ldr	r0, [pc, #56]	; (800208c <HAL_TIM_Encoder_MspInit+0xa0>)
 8002054:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002056:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f000 fc9c 	bl	8002998 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002060:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <HAL_TIM_Encoder_MspInit+0xa4>)

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002062:	201c      	movs	r0, #28
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002064:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002066:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800206c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002074:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002076:	4622      	mov	r2, r4
 8002078:	f000 fb16 	bl	80026a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800207c:	201c      	movs	r0, #28
 800207e:	f000 fb45 	bl	800270c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002082:	b008      	add	sp, #32
 8002084:	bd10      	pop	{r4, pc}
 8002086:	bf00      	nop
 8002088:	40010800 	.word	0x40010800
 800208c:	40010c00 	.word	0x40010c00
 8002090:	40010000 	.word	0x40010000

08002094 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <NMI_Handler>

08002096 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <HardFault_Handler>

08002098 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <MemManage_Handler>

0800209a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <BusFault_Handler>

0800209c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800209c:	e7fe      	b.n	800209c <UsageFault_Handler>

0800209e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209e:	4770      	bx	lr

080020a0 <DebugMon_Handler>:
 80020a0:	4770      	bx	lr

080020a2 <PendSV_Handler>:
 80020a2:	4770      	bx	lr

080020a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a4:	f000 b88a 	b.w	80021bc <HAL_IncTick>

080020a8 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020a8:	4801      	ldr	r0, [pc, #4]	; (80020b0 <ADC1_2_IRQHandler+0x8>)
 80020aa:	f000 b8af 	b.w	800220c <HAL_ADC_IRQHandler>
 80020ae:	bf00      	nop
 80020b0:	2000018c 	.word	0x2000018c

080020b4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020b4:	4801      	ldr	r0, [pc, #4]	; (80020bc <TIM2_IRQHandler+0x8>)
 80020b6:	f001 beba 	b.w	8003e2e <HAL_TIM_IRQHandler>
 80020ba:	bf00      	nop
 80020bc:	2000028c 	.word	0x2000028c

080020c0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c0:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <_sbrk+0x30>)
{
 80020c2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80020c4:	6811      	ldr	r1, [r2, #0]
{
 80020c6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80020c8:	b909      	cbnz	r1, 80020ce <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80020ca:	490a      	ldr	r1, [pc, #40]	; (80020f4 <_sbrk+0x34>)
 80020cc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ce:	6810      	ldr	r0, [r2, #0]
 80020d0:	4909      	ldr	r1, [pc, #36]	; (80020f8 <_sbrk+0x38>)
 80020d2:	4c0a      	ldr	r4, [pc, #40]	; (80020fc <_sbrk+0x3c>)
 80020d4:	4403      	add	r3, r0
 80020d6:	1b09      	subs	r1, r1, r4
 80020d8:	428b      	cmp	r3, r1
 80020da:	d906      	bls.n	80020ea <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80020dc:	f002 fcc6 	bl	8004a6c <__errno>
 80020e0:	230c      	movs	r3, #12
 80020e2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80020e8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80020ea:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80020ec:	e7fc      	b.n	80020e8 <_sbrk+0x28>
 80020ee:	bf00      	nop
 80020f0:	200002dc 	.word	0x200002dc
 80020f4:	20000338 	.word	0x20000338
 80020f8:	20005000 	.word	0x20005000
 80020fc:	00000400 	.word	0x00000400

08002100 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002100:	4770      	bx	lr
	...

08002104 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002104:	480c      	ldr	r0, [pc, #48]	; (8002138 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002106:	490d      	ldr	r1, [pc, #52]	; (800213c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800211c:	4c0a      	ldr	r4, [pc, #40]	; (8002148 <LoopFillZerobss+0x22>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800212a:	f7ff ffe9 	bl	8002100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212e:	f002 fca3 	bl	8004a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002132:	f7ff fd35 	bl	8001ba0 <main>
  bx lr
 8002136:	4770      	bx	lr
  ldr r0, =_sdata
 8002138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800213c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002140:	08005638 	.word	0x08005638
  ldr r2, =_sbss
 8002144:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002148:	20000334 	.word	0x20000334

0800214c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800214c:	e7fe      	b.n	800214c <CAN1_RX1_IRQHandler>
	...

08002150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002150:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_InitTick+0x3c>)
{
 8002154:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002156:	7818      	ldrb	r0, [r3, #0]
 8002158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002160:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <HAL_InitTick+0x40>)
 8002162:	6810      	ldr	r0, [r2, #0]
 8002164:	fbb0 f0f3 	udiv	r0, r0, r3
 8002168:	f000 fade 	bl	8002728 <HAL_SYSTICK_Config>
 800216c:	4604      	mov	r4, r0
 800216e:	b958      	cbnz	r0, 8002188 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002170:	2d0f      	cmp	r5, #15
 8002172:	d809      	bhi.n	8002188 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002174:	4602      	mov	r2, r0
 8002176:	4629      	mov	r1, r5
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f000 fa94 	bl	80026a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002180:	4620      	mov	r0, r4
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_InitTick+0x44>)
 8002184:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002186:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002188:	2001      	movs	r0, #1
 800218a:	e7fc      	b.n	8002186 <HAL_InitTick+0x36>
 800218c:	20000038 	.word	0x20000038
 8002190:	20000034 	.word	0x20000034
 8002194:	2000003c 	.word	0x2000003c

08002198 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_Init+0x20>)
{
 800219a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800219c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a0:	f043 0310 	orr.w	r3, r3, #16
 80021a4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a6:	f000 fa6d 	bl	8002684 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80021aa:	200f      	movs	r0, #15
 80021ac:	f7ff ffd0 	bl	8002150 <HAL_InitTick>
  HAL_MspInit();
 80021b0:	f7ff fe60 	bl	8001e74 <HAL_MspInit>
}
 80021b4:	2000      	movs	r0, #0
 80021b6:	bd08      	pop	{r3, pc}
 80021b8:	40022000 	.word	0x40022000

080021bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80021bc:	4a03      	ldr	r2, [pc, #12]	; (80021cc <HAL_IncTick+0x10>)
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <HAL_IncTick+0x14>)
 80021c0:	6811      	ldr	r1, [r2, #0]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	440b      	add	r3, r1
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	200002e0 	.word	0x200002e0
 80021d0:	20000038 	.word	0x20000038

080021d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80021d4:	4b01      	ldr	r3, [pc, #4]	; (80021dc <HAL_GetTick+0x8>)
 80021d6:	6818      	ldr	r0, [r3, #0]
}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	200002e0 	.word	0x200002e0

080021e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e0:	b538      	push	{r3, r4, r5, lr}
 80021e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80021e4:	f7ff fff6 	bl	80021d4 <HAL_GetTick>
 80021e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ea:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80021ec:	bf1e      	ittt	ne
 80021ee:	4b04      	ldrne	r3, [pc, #16]	; (8002200 <HAL_Delay+0x20>)
 80021f0:	781b      	ldrbne	r3, [r3, #0]
 80021f2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021f4:	f7ff ffee 	bl	80021d4 <HAL_GetTick>
 80021f8:	1b43      	subs	r3, r0, r5
 80021fa:	42a3      	cmp	r3, r4
 80021fc:	d3fa      	bcc.n	80021f4 <HAL_Delay+0x14>
  {
  }
}
 80021fe:	bd38      	pop	{r3, r4, r5, pc}
 8002200:	20000038 	.word	0x20000038

08002204 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002204:	6803      	ldr	r3, [r0, #0]
 8002206:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002208:	4770      	bx	lr

0800220a <HAL_ADC_LevelOutOfWindowCallback>:
 800220a:	4770      	bx	lr

0800220c <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800220c:	6803      	ldr	r3, [r0, #0]
{
 800220e:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002210:	685a      	ldr	r2, [r3, #4]
{
 8002212:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002214:	0690      	lsls	r0, r2, #26
 8002216:	d527      	bpl.n	8002268 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	0791      	lsls	r1, r2, #30
 800221c:	d524      	bpl.n	8002268 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800221e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002220:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002222:	bf5e      	ittt	pl
 8002224:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8002226:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800222a:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002232:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002236:	d110      	bne.n	800225a <HAL_ADC_IRQHandler+0x4e>
 8002238:	7b22      	ldrb	r2, [r4, #12]
 800223a:	b972      	cbnz	r2, 800225a <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	f022 0220 	bic.w	r2, r2, #32
 8002242:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002244:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002246:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800224a:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800224c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800224e:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002250:	bf5e      	ittt	pl
 8002252:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8002254:	f043 0301 	orrpl.w	r3, r3, #1
 8002258:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800225a:	4620      	mov	r0, r4
 800225c:	f7fe fbac 	bl	80009b8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002260:	f06f 0212 	mvn.w	r2, #18
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002268:	6823      	ldr	r3, [r4, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	0610      	lsls	r0, r2, #24
 800226e:	d530      	bpl.n	80022d2 <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	0751      	lsls	r1, r2, #29
 8002274:	d52d      	bpl.n	80022d2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002276:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002278:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800227a:	bf5e      	ittt	pl
 800227c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800227e:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8002282:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 800228a:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 800228e:	d00a      	beq.n	80022a6 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002290:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002292:	0550      	lsls	r0, r2, #21
 8002294:	d416      	bmi.n	80022c4 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800229c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80022a0:	d110      	bne.n	80022c4 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80022a2:	7b22      	ldrb	r2, [r4, #12]
 80022a4:	b972      	cbnz	r2, 80022c4 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ac:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022b4:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022b8:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ba:	bf5e      	ittt	pl
 80022bc:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80022be:	f043 0301 	orrpl.w	r3, r3, #1
 80022c2:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022c4:	4620      	mov	r0, r4
 80022c6:	f000 f9db 	bl	8002680 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022ca:	f06f 020c 	mvn.w	r2, #12
 80022ce:	6823      	ldr	r3, [r4, #0]
 80022d0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	0652      	lsls	r2, r2, #25
 80022d8:	d50d      	bpl.n	80022f6 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	07db      	lsls	r3, r3, #31
 80022de:	d50a      	bpl.n	80022f6 <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022e2:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022ea:	f7ff ff8e 	bl	800220a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022ee:	f06f 0201 	mvn.w	r2, #1
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80022f6:	bd10      	pop	{r4, pc}

080022f8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80022f8:	2300      	movs	r3, #0
{ 
 80022fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80022fc:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022fe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8002302:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002304:	2b01      	cmp	r3, #1
 8002306:	d06c      	beq.n	80023e2 <HAL_ADC_ConfigChannel+0xea>
 8002308:	2301      	movs	r3, #1
 800230a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800230e:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002310:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8002312:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002314:	6808      	ldr	r0, [r1, #0]
 8002316:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 800231a:	d822      	bhi.n	8002362 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800231c:	261f      	movs	r6, #31
 800231e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8002320:	3b05      	subs	r3, #5
 8002322:	409e      	lsls	r6, r3
 8002324:	ea25 0506 	bic.w	r5, r5, r6
 8002328:	fa00 f303 	lsl.w	r3, r0, r3
 800232c:	432b      	orrs	r3, r5
 800232e:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002330:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002332:	688b      	ldr	r3, [r1, #8]
 8002334:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8002338:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800233c:	d929      	bls.n	8002392 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800233e:	68d6      	ldr	r6, [r2, #12]
 8002340:	3d1e      	subs	r5, #30
 8002342:	40a9      	lsls	r1, r5
 8002344:	ea26 0101 	bic.w	r1, r6, r1
 8002348:	40ab      	lsls	r3, r5
 800234a:	430b      	orrs	r3, r1
 800234c:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800234e:	f1a0 0310 	sub.w	r3, r0, #16
 8002352:	2b01      	cmp	r3, #1
 8002354:	d925      	bls.n	80023a2 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002356:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002358:	2300      	movs	r3, #0
 800235a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800235e:	b002      	add	sp, #8
 8002360:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8002362:	2d0c      	cmp	r5, #12
 8002364:	f04f 051f 	mov.w	r5, #31
 8002368:	d809      	bhi.n	800237e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800236a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800236c:	3b23      	subs	r3, #35	; 0x23
 800236e:	409d      	lsls	r5, r3
 8002370:	ea26 0505 	bic.w	r5, r6, r5
 8002374:	fa00 f303 	lsl.w	r3, r0, r3
 8002378:	432b      	orrs	r3, r5
 800237a:	6313      	str	r3, [r2, #48]	; 0x30
 800237c:	e7d8      	b.n	8002330 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800237e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8002380:	3b41      	subs	r3, #65	; 0x41
 8002382:	409d      	lsls	r5, r3
 8002384:	ea26 0505 	bic.w	r5, r6, r5
 8002388:	fa00 f303 	lsl.w	r3, r0, r3
 800238c:	432b      	orrs	r3, r5
 800238e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002390:	e7ce      	b.n	8002330 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002392:	6910      	ldr	r0, [r2, #16]
 8002394:	40a9      	lsls	r1, r5
 8002396:	ea20 0101 	bic.w	r1, r0, r1
 800239a:	40ab      	lsls	r3, r5
 800239c:	430b      	orrs	r3, r1
 800239e:	6113      	str	r3, [r2, #16]
 80023a0:	e7d9      	b.n	8002356 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <HAL_ADC_ConfigChannel+0xf0>)
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d116      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023a8:	6893      	ldr	r3, [r2, #8]
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	d4d3      	bmi.n	8002356 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023ae:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023b0:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023b6:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023b8:	d1cd      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <HAL_ADC_ConfigChannel+0xf4>)
 80023bc:	4a0c      	ldr	r2, [pc, #48]	; (80023f0 <HAL_ADC_ConfigChannel+0xf8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80023c4:	220a      	movs	r2, #10
 80023c6:	4353      	muls	r3, r2
            wait_loop_index--;
 80023c8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80023ca:	9b01      	ldr	r3, [sp, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0c2      	beq.n	8002356 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80023d0:	9b01      	ldr	r3, [sp, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	e7f8      	b.n	80023c8 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80023d8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023da:	f043 0320 	orr.w	r3, r3, #32
 80023de:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80023e0:	e7ba      	b.n	8002358 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80023e2:	2002      	movs	r0, #2
 80023e4:	e7bb      	b.n	800235e <HAL_ADC_ConfigChannel+0x66>
 80023e6:	bf00      	nop
 80023e8:	40012400 	.word	0x40012400
 80023ec:	20000034 	.word	0x20000034
 80023f0:	000f4240 	.word	0x000f4240

080023f4 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80023f4:	2300      	movs	r3, #0
{
 80023f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 80023f8:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023fa:	6803      	ldr	r3, [r0, #0]
{
 80023fc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	07d2      	lsls	r2, r2, #31
 8002402:	d502      	bpl.n	800240a <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002404:	2000      	movs	r0, #0
}
 8002406:	b003      	add	sp, #12
 8002408:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <ADC_Enable+0x70>)
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <ADC_Enable+0x74>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800241c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800241e:	9b01      	ldr	r3, [sp, #4]
 8002420:	b9e3      	cbnz	r3, 800245c <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8002422:	f7ff fed7 	bl	80021d4 <HAL_GetTick>
 8002426:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	07db      	lsls	r3, r3, #31
 800242e:	d4e9      	bmi.n	8002404 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002430:	f7ff fed0 	bl	80021d4 <HAL_GetTick>
 8002434:	1b40      	subs	r0, r0, r5
 8002436:	2802      	cmp	r0, #2
 8002438:	d9f6      	bls.n	8002428 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f013 0301 	ands.w	r3, r3, #1
 8002442:	d1f1      	bne.n	8002428 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002444:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 8002446:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002448:	f042 0210 	orr.w	r2, r2, #16
 800244c:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8002450:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002454:	f042 0201 	orr.w	r2, r2, #1
 8002458:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800245a:	e7d4      	b.n	8002406 <ADC_Enable+0x12>
      wait_loop_index--;
 800245c:	9b01      	ldr	r3, [sp, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	e7dc      	b.n	800241c <ADC_Enable+0x28>
 8002462:	bf00      	nop
 8002464:	20000034 	.word	0x20000034
 8002468:	000f4240 	.word	0x000f4240

0800246c <HAL_ADC_Start_IT>:
{
 800246c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800246e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8002472:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002474:	2b01      	cmp	r3, #1
 8002476:	d058      	beq.n	800252a <HAL_ADC_Start_IT+0xbe>
 8002478:	2301      	movs	r3, #1
 800247a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800247e:	f7ff ffb9 	bl	80023f4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002482:	2800      	cmp	r0, #0
 8002484:	d14d      	bne.n	8002522 <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 8002486:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002488:	4a29      	ldr	r2, [pc, #164]	; (8002530 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 800248a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002496:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	4293      	cmp	r3, r2
 800249c:	d104      	bne.n	80024a8 <HAL_ADC_Start_IT+0x3c>
 800249e:	4925      	ldr	r1, [pc, #148]	; (8002534 <HAL_ADC_Start_IT+0xc8>)
 80024a0:	684a      	ldr	r2, [r1, #4]
 80024a2:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80024a6:	d132      	bne.n	800250e <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024aa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80024ae:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024b0:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024b2:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024b4:	bf41      	itttt	mi
 80024b6:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80024b8:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80024bc:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80024c0:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024c8:	bf1c      	itt	ne
 80024ca:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80024cc:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80024d0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80024d2:	2200      	movs	r2, #0
 80024d4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80024d8:	f06f 0202 	mvn.w	r2, #2
 80024dc:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	f042 0220 	orr.w	r2, r2, #32
 80024e4:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80024ec:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80024f0:	d113      	bne.n	800251a <HAL_ADC_Start_IT+0xae>
 80024f2:	4a0f      	ldr	r2, [pc, #60]	; (8002530 <HAL_ADC_Start_IT+0xc4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d105      	bne.n	8002504 <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024f8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80024fc:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024fe:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8002502:	d10a      	bne.n	800251a <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800250a:	609a      	str	r2, [r3, #8]
}
 800250c:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800250e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002510:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002514:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002516:	684a      	ldr	r2, [r1, #4]
 8002518:	e7cb      	b.n	80024b2 <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002520:	e7f3      	b.n	800250a <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 8002522:	2300      	movs	r3, #0
 8002524:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002528:	e7f0      	b.n	800250c <HAL_ADC_Start_IT+0xa0>
  __HAL_LOCK(hadc);
 800252a:	2002      	movs	r0, #2
 800252c:	e7ee      	b.n	800250c <HAL_ADC_Start_IT+0xa0>
 800252e:	bf00      	nop
 8002530:	40012800 	.word	0x40012800
 8002534:	40012400 	.word	0x40012400

08002538 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002538:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800253a:	6803      	ldr	r3, [r0, #0]
{
 800253c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	07d1      	lsls	r1, r2, #31
 8002542:	d401      	bmi.n	8002548 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002544:	2000      	movs	r0, #0
}
 8002546:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002550:	f7ff fe40 	bl	80021d4 <HAL_GetTick>
 8002554:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	07db      	lsls	r3, r3, #31
 800255c:	d5f2      	bpl.n	8002544 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800255e:	f7ff fe39 	bl	80021d4 <HAL_GetTick>
 8002562:	1b40      	subs	r0, r0, r5
 8002564:	2802      	cmp	r0, #2
 8002566:	d9f6      	bls.n	8002556 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	07da      	lsls	r2, r3, #31
 800256e:	d5f2      	bpl.n	8002556 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002570:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8002572:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002574:	f043 0310 	orr.w	r3, r3, #16
 8002578:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002582:	e7e0      	b.n	8002546 <ADC_ConversionStop_Disable+0xe>

08002584 <HAL_ADC_Init>:
{
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8002586:	4604      	mov	r4, r0
 8002588:	2800      	cmp	r0, #0
 800258a:	d06e      	beq.n	800266a <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800258c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800258e:	b923      	cbnz	r3, 800259a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8002590:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002592:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002596:	f7ff fc8f 	bl	8001eb8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800259a:	4620      	mov	r0, r4
 800259c:	f7ff ffcc 	bl	8002538 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025a2:	f013 0310 	ands.w	r3, r3, #16
 80025a6:	d162      	bne.n	800266e <HAL_ADC_Init+0xea>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d160      	bne.n	800266e <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 80025ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025ae:	69e5      	ldr	r5, [r4, #28]
 80025b0:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80025b2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80025b6:	f022 0202 	bic.w	r2, r2, #2
 80025ba:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025be:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025c0:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80025c2:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025c4:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025c6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025ca:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025ce:	d037      	beq.n	8002640 <HAL_ADC_Init+0xbc>
 80025d0:	2d01      	cmp	r5, #1
 80025d2:	bf14      	ite	ne
 80025d4:	2700      	movne	r7, #0
 80025d6:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025da:	7d26      	ldrb	r6, [r4, #20]
 80025dc:	2e01      	cmp	r6, #1
 80025de:	d106      	bne.n	80025ee <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025e0:	bb82      	cbnz	r2, 8002644 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025e2:	69a2      	ldr	r2, [r4, #24]
 80025e4:	3a01      	subs	r2, #1
 80025e6:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 80025ea:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80025ee:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025f0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80025f4:	6856      	ldr	r6, [r2, #4]
 80025f6:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 80025fa:	ea46 0607 	orr.w	r6, r6, r7
 80025fe:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002600:	6897      	ldr	r7, [r2, #8]
 8002602:	4e1d      	ldr	r6, [pc, #116]	; (8002678 <HAL_ADC_Init+0xf4>)
 8002604:	ea06 0607 	and.w	r6, r6, r7
 8002608:	ea46 0601 	orr.w	r6, r6, r1
 800260c:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800260e:	d001      	beq.n	8002614 <HAL_ADC_Init+0x90>
 8002610:	2d01      	cmp	r5, #1
 8002612:	d102      	bne.n	800261a <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002614:	6923      	ldr	r3, [r4, #16]
 8002616:	3b01      	subs	r3, #1
 8002618:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800261a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800261c:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8002620:	432b      	orrs	r3, r5
 8002622:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002624:	6892      	ldr	r2, [r2, #8]
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_ADC_Init+0xf8>)
 8002628:	4013      	ands	r3, r2
 800262a:	4299      	cmp	r1, r3
 800262c:	d113      	bne.n	8002656 <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 800262e:	2300      	movs	r3, #0
 8002630:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002632:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002634:	f023 0303 	bic.w	r3, r3, #3
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800263e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002640:	462f      	mov	r7, r5
 8002642:	e7ca      	b.n	80025da <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002644:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002646:	f042 0220 	orr.w	r2, r2, #32
 800264a:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002654:	e7cb      	b.n	80025ee <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8002656:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002658:	f023 0312 	bic.w	r3, r3, #18
 800265c:	f043 0310 	orr.w	r3, r3, #16
 8002660:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002662:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800266a:	2001      	movs	r0, #1
 800266c:	e7e7      	b.n	800263e <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002670:	f043 0310 	orr.w	r3, r3, #16
 8002674:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002676:	e7f8      	b.n	800266a <HAL_ADC_Init+0xe6>
 8002678:	ffe1f7fd 	.word	0xffe1f7fd
 800267c:	ff1f0efe 	.word	0xff1f0efe

08002680 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002680:	4770      	bx	lr
	...

08002684 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002684:	4907      	ldr	r1, [pc, #28]	; (80026a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002686:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002688:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800268a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002692:	0412      	lsls	r2, r2, #16
 8002694:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800269c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80026a0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a8:	4b16      	ldr	r3, [pc, #88]	; (8002704 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026aa:	b530      	push	{r4, r5, lr}
 80026ac:	68dc      	ldr	r4, [r3, #12]
 80026ae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	bf28      	it	cs
 80026bc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026be:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c4:	bf98      	it	ls
 80026c6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026cc:	bf88      	it	hi
 80026ce:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	ea21 0303 	bic.w	r3, r1, r3
 80026d4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d6:	fa05 f404 	lsl.w	r4, r5, r4
 80026da:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80026de:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	bfac      	ite	ge
 80026e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ea:	4a07      	ldrlt	r2, [pc, #28]	; (8002708 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	bfab      	itete	ge
 80026f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002702:	bd30      	pop	{r4, r5, pc}
 8002704:	e000ed00 	.word	0xe000ed00
 8002708:	e000ed14 	.word	0xe000ed14

0800270c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800270c:	2800      	cmp	r0, #0
 800270e:	db08      	blt.n	8002722 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002710:	2301      	movs	r3, #1
 8002712:	0942      	lsrs	r2, r0, #5
 8002714:	f000 001f 	and.w	r0, r0, #31
 8002718:	fa03 f000 	lsl.w	r0, r3, r0
 800271c:	4b01      	ldr	r3, [pc, #4]	; (8002724 <HAL_NVIC_EnableIRQ+0x18>)
 800271e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100

08002728 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002728:	3801      	subs	r0, #1
 800272a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800272e:	d20b      	bcs.n	8002748 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002730:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	21f0      	movs	r1, #240	; 0xf0
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002738:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800273e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002740:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002742:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002744:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002746:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002748:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002750:	4a11      	ldr	r2, [pc, #68]	; (8002798 <FLASH_SetErrorCode+0x48>)
 8002752:	68d3      	ldr	r3, [r2, #12]
 8002754:	f013 0310 	ands.w	r3, r3, #16
 8002758:	d005      	beq.n	8002766 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800275a:	4910      	ldr	r1, [pc, #64]	; (800279c <FLASH_SetErrorCode+0x4c>)
 800275c:	69cb      	ldr	r3, [r1, #28]
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002764:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002766:	68d2      	ldr	r2, [r2, #12]
 8002768:	0750      	lsls	r0, r2, #29
 800276a:	d506      	bpl.n	800277a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800276c:	490b      	ldr	r1, [pc, #44]	; (800279c <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800276e:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002772:	69ca      	ldr	r2, [r1, #28]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800277a:	4a07      	ldr	r2, [pc, #28]	; (8002798 <FLASH_SetErrorCode+0x48>)
 800277c:	69d1      	ldr	r1, [r2, #28]
 800277e:	07c9      	lsls	r1, r1, #31
 8002780:	d508      	bpl.n	8002794 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002782:	4806      	ldr	r0, [pc, #24]	; (800279c <FLASH_SetErrorCode+0x4c>)
 8002784:	69c1      	ldr	r1, [r0, #28]
 8002786:	f041 0104 	orr.w	r1, r1, #4
 800278a:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800278c:	69d1      	ldr	r1, [r2, #28]
 800278e:	f021 0101 	bic.w	r1, r1, #1
 8002792:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002794:	60d3      	str	r3, [r2, #12]
}  
 8002796:	4770      	bx	lr
 8002798:	40022000 	.word	0x40022000
 800279c:	200002e8 	.word	0x200002e8

080027a0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_FLASH_Unlock+0x1c>)
 80027a2:	6918      	ldr	r0, [r3, #16]
 80027a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80027a8:	d007      	beq.n	80027ba <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <HAL_FLASH_Unlock+0x20>)
 80027ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80027ae:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80027b2:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027b4:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 80027ba:	4770      	bx	lr
 80027bc:	40022000 	.word	0x40022000
 80027c0:	45670123 	.word	0x45670123

080027c4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80027c4:	4a03      	ldr	r2, [pc, #12]	; (80027d4 <HAL_FLASH_Lock+0x10>)
}
 80027c6:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80027c8:	6913      	ldr	r3, [r2, #16]
 80027ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ce:	6113      	str	r3, [r2, #16]
}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40022000 	.word	0x40022000

080027d8 <FLASH_WaitForLastOperation>:
{
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff fcfa 	bl	80021d4 <HAL_GetTick>
 80027e0:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80027e2:	4c11      	ldr	r4, [pc, #68]	; (8002828 <FLASH_WaitForLastOperation+0x50>)
 80027e4:	68e3      	ldr	r3, [r4, #12]
 80027e6:	07d8      	lsls	r0, r3, #31
 80027e8:	d412      	bmi.n	8002810 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80027ea:	68e3      	ldr	r3, [r4, #12]
 80027ec:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80027ee:	bf44      	itt	mi
 80027f0:	2320      	movmi	r3, #32
 80027f2:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80027f4:	68e3      	ldr	r3, [r4, #12]
 80027f6:	06da      	lsls	r2, r3, #27
 80027f8:	d406      	bmi.n	8002808 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80027fa:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80027fc:	07db      	lsls	r3, r3, #31
 80027fe:	d403      	bmi.n	8002808 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002800:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002802:	f010 0004 	ands.w	r0, r0, #4
 8002806:	d007      	beq.n	8002818 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 8002808:	f7ff ffa2 	bl	8002750 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800280c:	2001      	movs	r0, #1
 800280e:	e003      	b.n	8002818 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8002810:	1c6b      	adds	r3, r5, #1
 8002812:	d0e7      	beq.n	80027e4 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002814:	b90d      	cbnz	r5, 800281a <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 8002816:	2003      	movs	r0, #3
}
 8002818:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800281a:	f7ff fcdb 	bl	80021d4 <HAL_GetTick>
 800281e:	1b80      	subs	r0, r0, r6
 8002820:	42a8      	cmp	r0, r5
 8002822:	d9df      	bls.n	80027e4 <FLASH_WaitForLastOperation+0xc>
 8002824:	e7f7      	b.n	8002816 <FLASH_WaitForLastOperation+0x3e>
 8002826:	bf00      	nop
 8002828:	40022000 	.word	0x40022000

0800282c <HAL_FLASH_Program>:
{
 800282c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8002830:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80028c4 <HAL_FLASH_Program+0x98>
{
 8002834:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8002836:	f899 3018 	ldrb.w	r3, [r9, #24]
{
 800283a:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 800283c:	2b01      	cmp	r3, #1
{
 800283e:	460f      	mov	r7, r1
 8002840:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8002842:	d03d      	beq.n	80028c0 <HAL_FLASH_Program+0x94>
 8002844:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002846:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800284a:	f889 3018 	strb.w	r3, [r9, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800284e:	f7ff ffc3 	bl	80027d8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002852:	bb80      	cbnz	r0, 80028b6 <HAL_FLASH_Program+0x8a>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002854:	2c01      	cmp	r4, #1
 8002856:	d003      	beq.n	8002860 <HAL_FLASH_Program+0x34>
      nbiterations = 4U;
 8002858:	2c02      	cmp	r4, #2
 800285a:	bf0c      	ite	eq
 800285c:	2402      	moveq	r4, #2
 800285e:	2404      	movne	r4, #4
 8002860:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002862:	46ab      	mov	fp, r5
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002864:	f8df a060 	ldr.w	sl, [pc, #96]	; 80028c8 <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002868:	0128      	lsls	r0, r5, #4
 800286a:	f1c0 0220 	rsb	r2, r0, #32
 800286e:	f1a0 0320 	sub.w	r3, r0, #32
 8002872:	fa06 f202 	lsl.w	r2, r6, r2
 8002876:	fa28 f000 	lsr.w	r0, r8, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800287a:	f8c9 b01c 	str.w	fp, [r9, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800287e:	4310      	orrs	r0, r2
 8002880:	fa26 f303 	lsr.w	r3, r6, r3
 8002884:	4318      	orrs	r0, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002886:	f8da 3010 	ldr.w	r3, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800288a:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	f8ca 3010 	str.w	r3, [sl, #16]
  *(__IO uint16_t*)Address = Data;
 8002894:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002898:	f24c 3050 	movw	r0, #50000	; 0xc350
 800289c:	f7ff ff9c 	bl	80027d8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80028a0:	f8da 3010 	ldr.w	r3, [sl, #16]
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 80028ac:	b918      	cbnz	r0, 80028b6 <HAL_FLASH_Program+0x8a>
    for (index = 0U; index < nbiterations; index++)
 80028ae:	3501      	adds	r5, #1
 80028b0:	b2eb      	uxtb	r3, r5
 80028b2:	429c      	cmp	r4, r3
 80028b4:	d8d8      	bhi.n	8002868 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 80028b6:	2300      	movs	r3, #0
 80028b8:	f889 3018 	strb.w	r3, [r9, #24]
}
 80028bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80028c0:	2002      	movs	r0, #2
 80028c2:	e7fb      	b.n	80028bc <HAL_FLASH_Program+0x90>
 80028c4:	200002e8 	.word	0x200002e8
 80028c8:	40022000 	.word	0x40022000

080028cc <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80028cc:	2200      	movs	r2, #0
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <FLASH_PageErase+0x1c>)
 80028d0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <FLASH_PageErase+0x20>)
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	f042 0202 	orr.w	r2, r2, #2
 80028da:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80028dc:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e4:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80028e6:	4770      	bx	lr
 80028e8:	200002e8 	.word	0x200002e8
 80028ec:	40022000 	.word	0x40022000

080028f0 <HAL_FLASHEx_Erase>:
{
 80028f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80028f4:	4f26      	ldr	r7, [pc, #152]	; (8002990 <HAL_FLASHEx_Erase+0xa0>)
{
 80028f6:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80028f8:	7e3b      	ldrb	r3, [r7, #24]
{
 80028fa:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d044      	beq.n	800298a <HAL_FLASHEx_Erase+0x9a>
 8002900:	2401      	movs	r4, #1
 8002902:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002904:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002906:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800290a:	2b02      	cmp	r3, #2
 800290c:	d11a      	bne.n	8002944 <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800290e:	f7ff ff63 	bl	80027d8 <FLASH_WaitForLastOperation>
 8002912:	b120      	cbz	r0, 800291e <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002914:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8002916:	2300      	movs	r3, #0
 8002918:	763b      	strb	r3, [r7, #24]
}
 800291a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800291e:	4c1d      	ldr	r4, [pc, #116]	; (8002994 <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002920:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002922:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002924:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002928:	f043 0304 	orr.w	r3, r3, #4
 800292c:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800292e:	6923      	ldr	r3, [r4, #16]
 8002930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002934:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002936:	f7ff ff4f 	bl	80027d8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800293a:	6923      	ldr	r3, [r4, #16]
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	6123      	str	r3, [r4, #16]
 8002942:	e7e8      	b.n	8002916 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002944:	f7ff ff48 	bl	80027d8 <FLASH_WaitForLastOperation>
 8002948:	2800      	cmp	r0, #0
 800294a:	d1e3      	bne.n	8002914 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 800294c:	f04f 33ff 	mov.w	r3, #4294967295
 8002950:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002954:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8002956:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002958:	4c0e      	ldr	r4, [pc, #56]	; (8002994 <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800295a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800295e:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8002962:	42b3      	cmp	r3, r6
 8002964:	d9d7      	bls.n	8002916 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8002966:	4630      	mov	r0, r6
 8002968:	f7ff ffb0 	bl	80028cc <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800296c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002970:	f7ff ff32 	bl	80027d8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002974:	6923      	ldr	r3, [r4, #16]
 8002976:	f023 0302 	bic.w	r3, r3, #2
 800297a:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 800297c:	b110      	cbz	r0, 8002984 <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 800297e:	f8c8 6000 	str.w	r6, [r8]
            break;
 8002982:	e7c8      	b.n	8002916 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8002984:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002988:	e7e7      	b.n	800295a <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 800298a:	2002      	movs	r0, #2
 800298c:	e7c5      	b.n	800291a <HAL_FLASHEx_Erase+0x2a>
 800298e:	bf00      	nop
 8002990:	200002e8 	.word	0x200002e8
 8002994:	40022000 	.word	0x40022000

08002998 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800299c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800299e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029a0:	4f64      	ldr	r7, [pc, #400]	; (8002b34 <HAL_GPIO_Init+0x19c>)
 80029a2:	4b65      	ldr	r3, [pc, #404]	; (8002b38 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 80029a4:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002b3c <HAL_GPIO_Init+0x1a4>
 80029a8:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002b40 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ac:	680d      	ldr	r5, [r1, #0]
 80029ae:	fa35 f406 	lsrs.w	r4, r5, r6
 80029b2:	d102      	bne.n	80029ba <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80029b4:	b003      	add	sp, #12
 80029b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80029ba:	f04f 0801 	mov.w	r8, #1
 80029be:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c2:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80029c6:	ea38 0505 	bics.w	r5, r8, r5
 80029ca:	d17b      	bne.n	8002ac4 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 80029cc:	684d      	ldr	r5, [r1, #4]
 80029ce:	2d03      	cmp	r5, #3
 80029d0:	d807      	bhi.n	80029e2 <HAL_GPIO_Init+0x4a>
 80029d2:	3d01      	subs	r5, #1
 80029d4:	2d02      	cmp	r5, #2
 80029d6:	f200 8088 	bhi.w	8002aea <HAL_GPIO_Init+0x152>
 80029da:	e8df f005 	tbb	[pc, r5]
 80029de:	9b96      	.short	0x9b96
 80029e0:	a1          	.byte	0xa1
 80029e1:	00          	.byte	0x00
 80029e2:	2d12      	cmp	r5, #18
 80029e4:	f000 8099 	beq.w	8002b1a <HAL_GPIO_Init+0x182>
 80029e8:	d86e      	bhi.n	8002ac8 <HAL_GPIO_Init+0x130>
 80029ea:	2d11      	cmp	r5, #17
 80029ec:	f000 808f 	beq.w	8002b0e <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029f0:	2cff      	cmp	r4, #255	; 0xff
 80029f2:	bf98      	it	ls
 80029f4:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029f6:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029fa:	bf88      	it	hi
 80029fc:	f100 0a04 	addhi.w	sl, r0, #4
 8002a00:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a04:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a08:	bf88      	it	hi
 8002a0a:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a0c:	fa09 fb05 	lsl.w	fp, r9, r5
 8002a10:	ea28 080b 	bic.w	r8, r8, fp
 8002a14:	fa02 f505 	lsl.w	r5, r2, r5
 8002a18:	ea48 0505 	orr.w	r5, r8, r5
 8002a1c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a20:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002a24:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002a28:	d04c      	beq.n	8002ac4 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a2a:	69bd      	ldr	r5, [r7, #24]
 8002a2c:	f026 0803 	bic.w	r8, r6, #3
 8002a30:	f045 0501 	orr.w	r5, r5, #1
 8002a34:	61bd      	str	r5, [r7, #24]
 8002a36:	69bd      	ldr	r5, [r7, #24]
 8002a38:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002a3c:	f005 0501 	and.w	r5, r5, #1
 8002a40:	9501      	str	r5, [sp, #4]
 8002a42:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a46:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a4a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a4c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002a50:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a54:	fa09 f90b 	lsl.w	r9, r9, fp
 8002a58:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a5c:	4d39      	ldr	r5, [pc, #228]	; (8002b44 <HAL_GPIO_Init+0x1ac>)
 8002a5e:	42a8      	cmp	r0, r5
 8002a60:	d062      	beq.n	8002b28 <HAL_GPIO_Init+0x190>
 8002a62:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a66:	42a8      	cmp	r0, r5
 8002a68:	d060      	beq.n	8002b2c <HAL_GPIO_Init+0x194>
 8002a6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a6e:	42a8      	cmp	r0, r5
 8002a70:	d05e      	beq.n	8002b30 <HAL_GPIO_Init+0x198>
 8002a72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a76:	42a8      	cmp	r0, r5
 8002a78:	bf0c      	ite	eq
 8002a7a:	2503      	moveq	r5, #3
 8002a7c:	2504      	movne	r5, #4
 8002a7e:	fa05 f50b 	lsl.w	r5, r5, fp
 8002a82:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002a86:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002a8a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a8c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002a90:	bf14      	ite	ne
 8002a92:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a94:	43a5      	biceq	r5, r4
 8002a96:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002a98:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a9a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002a9e:	bf14      	ite	ne
 8002aa0:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aa2:	43a5      	biceq	r5, r4
 8002aa4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aa6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aa8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aac:	bf14      	ite	ne
 8002aae:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ab0:	43a5      	biceq	r5, r4
 8002ab2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ab4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aba:	bf14      	ite	ne
 8002abc:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002abe:	ea25 0404 	biceq.w	r4, r5, r4
 8002ac2:	60dc      	str	r4, [r3, #12]
	position++;
 8002ac4:	3601      	adds	r6, #1
 8002ac6:	e771      	b.n	80029ac <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002ac8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002b48 <HAL_GPIO_Init+0x1b0>
 8002acc:	454d      	cmp	r5, r9
 8002ace:	d00c      	beq.n	8002aea <HAL_GPIO_Init+0x152>
 8002ad0:	d817      	bhi.n	8002b02 <HAL_GPIO_Init+0x16a>
 8002ad2:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002ad6:	454d      	cmp	r5, r9
 8002ad8:	d007      	beq.n	8002aea <HAL_GPIO_Init+0x152>
 8002ada:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002ade:	454d      	cmp	r5, r9
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x152>
 8002ae2:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002ae6:	454d      	cmp	r5, r9
 8002ae8:	d182      	bne.n	80029f0 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002aea:	688a      	ldr	r2, [r1, #8]
 8002aec:	b1d2      	cbz	r2, 8002b24 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002aee:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002af0:	bf08      	it	eq
 8002af2:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002af6:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002afa:	bf18      	it	ne
 8002afc:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002b00:	e776      	b.n	80029f0 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002b02:	4565      	cmp	r5, ip
 8002b04:	d0f1      	beq.n	8002aea <HAL_GPIO_Init+0x152>
 8002b06:	4575      	cmp	r5, lr
 8002b08:	e7ee      	b.n	8002ae8 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b0a:	68ca      	ldr	r2, [r1, #12]
          break;
 8002b0c:	e770      	b.n	80029f0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b0e:	68ca      	ldr	r2, [r1, #12]
 8002b10:	3204      	adds	r2, #4
          break;
 8002b12:	e76d      	b.n	80029f0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b14:	68ca      	ldr	r2, [r1, #12]
 8002b16:	3208      	adds	r2, #8
          break;
 8002b18:	e76a      	b.n	80029f0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b1a:	68ca      	ldr	r2, [r1, #12]
 8002b1c:	320c      	adds	r2, #12
          break;
 8002b1e:	e767      	b.n	80029f0 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002b20:	2200      	movs	r2, #0
 8002b22:	e765      	b.n	80029f0 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b24:	2204      	movs	r2, #4
 8002b26:	e763      	b.n	80029f0 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b28:	2500      	movs	r5, #0
 8002b2a:	e7a8      	b.n	8002a7e <HAL_GPIO_Init+0xe6>
 8002b2c:	2501      	movs	r5, #1
 8002b2e:	e7a6      	b.n	8002a7e <HAL_GPIO_Init+0xe6>
 8002b30:	2502      	movs	r5, #2
 8002b32:	e7a4      	b.n	8002a7e <HAL_GPIO_Init+0xe6>
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010400 	.word	0x40010400
 8002b3c:	10310000 	.word	0x10310000
 8002b40:	10320000 	.word	0x10320000
 8002b44:	40010800 	.word	0x40010800
 8002b48:	10220000 	.word	0x10220000

08002b4c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b4c:	6883      	ldr	r3, [r0, #8]
 8002b4e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002b50:	bf14      	ite	ne
 8002b52:	2001      	movne	r0, #1
 8002b54:	2000      	moveq	r0, #0
 8002b56:	4770      	bx	lr

08002b58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b58:	b10a      	cbz	r2, 8002b5e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b5a:	6101      	str	r1, [r0, #16]
  }
}
 8002b5c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b5e:	0409      	lsls	r1, r1, #16
 8002b60:	e7fb      	b.n	8002b5a <HAL_GPIO_WritePin+0x2>

08002b62 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b62:	6801      	ldr	r1, [r0, #0]
 8002b64:	2200      	movs	r2, #0
 8002b66:	694b      	ldr	r3, [r1, #20]
 8002b68:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002b6c:	d010      	beq.n	8002b90 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b6e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002b72:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b74:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b76:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b80:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b82:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	4770      	bx	lr
  }
  return HAL_OK;
 8002b90:	4618      	mov	r0, r3
}
 8002b92:	4770      	bx	lr

08002b94 <I2C_WaitOnFlagUntilTimeout>:
{
 8002b94:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8002b98:	4606      	mov	r6, r0
 8002b9a:	460f      	mov	r7, r1
 8002b9c:	4691      	mov	r9, r2
 8002b9e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8002ba4:	6833      	ldr	r3, [r6, #0]
 8002ba6:	f1ba 0f01 	cmp.w	sl, #1
 8002baa:	bf0c      	ite	eq
 8002bac:	695c      	ldreq	r4, [r3, #20]
 8002bae:	699c      	ldrne	r4, [r3, #24]
 8002bb0:	ea27 0404 	bic.w	r4, r7, r4
 8002bb4:	b2a4      	uxth	r4, r4
 8002bb6:	fab4 f484 	clz	r4, r4
 8002bba:	0964      	lsrs	r4, r4, #5
 8002bbc:	45a1      	cmp	r9, r4
 8002bbe:	d001      	beq.n	8002bc4 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	e017      	b.n	8002bf4 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8002bc4:	1c6a      	adds	r2, r5, #1
 8002bc6:	d0ee      	beq.n	8002ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc8:	f7ff fb04 	bl	80021d4 <HAL_GetTick>
 8002bcc:	9b08      	ldr	r3, [sp, #32]
 8002bce:	1ac0      	subs	r0, r0, r3
 8002bd0:	42a8      	cmp	r0, r5
 8002bd2:	d801      	bhi.n	8002bd8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002bd4:	2d00      	cmp	r5, #0
 8002bd6:	d1e5      	bne.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bd8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bda:	2220      	movs	r2, #32
        return HAL_ERROR;
 8002bdc:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bde:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002be0:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002be4:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002be8:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002bea:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bee:	f042 0220 	orr.w	r2, r2, #32
 8002bf2:	6432      	str	r2, [r6, #64]	; 0x40
}
 8002bf4:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	460f      	mov	r7, r1
 8002c00:	4616      	mov	r6, r2
 8002c02:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c04:	6825      	ldr	r5, [r4, #0]
 8002c06:	6968      	ldr	r0, [r5, #20]
 8002c08:	ea27 0000 	bic.w	r0, r7, r0
 8002c0c:	b280      	uxth	r0, r0
 8002c0e:	b1b8      	cbz	r0, 8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c10:	696b      	ldr	r3, [r5, #20]
 8002c12:	055a      	lsls	r2, r3, #21
 8002c14:	d516      	bpl.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c16:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c18:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c1e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c20:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002c24:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c2a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c32:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c34:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8002c38:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002c3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002c44:	1c73      	adds	r3, r6, #1
 8002c46:	d0de      	beq.n	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c48:	f7ff fac4 	bl	80021d4 <HAL_GetTick>
 8002c4c:	eba0 0008 	sub.w	r0, r0, r8
 8002c50:	42b0      	cmp	r0, r6
 8002c52:	d801      	bhi.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8002c54:	2e00      	cmp	r6, #0
 8002c56:	d1d5      	bne.n	8002c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c58:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c5a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c5e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c68:	f042 0220 	orr.w	r2, r2, #32
 8002c6c:	e7e4      	b.n	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08002c6e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002c6e:	b570      	push	{r4, r5, r6, lr}
 8002c70:	4604      	mov	r4, r0
 8002c72:	460d      	mov	r5, r1
 8002c74:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c76:	6821      	ldr	r1, [r4, #0]
 8002c78:	694b      	ldr	r3, [r1, #20]
 8002c7a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002c7e:	d001      	beq.n	8002c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8002c80:	2000      	movs	r0, #0
 8002c82:	e010      	b.n	8002ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c84:	694a      	ldr	r2, [r1, #20]
 8002c86:	06d2      	lsls	r2, r2, #27
 8002c88:	d50e      	bpl.n	8002ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c8a:	f06f 0210 	mvn.w	r2, #16
 8002c8e:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c90:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c92:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c94:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c98:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002c9e:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca0:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002ca2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002ca6:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca8:	f7ff fa94 	bl	80021d4 <HAL_GetTick>
 8002cac:	1b80      	subs	r0, r0, r6
 8002cae:	42a8      	cmp	r0, r5
 8002cb0:	d801      	bhi.n	8002cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8002cb2:	2d00      	cmp	r5, #0
 8002cb4:	d1df      	bne.n	8002c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb6:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cb8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cba:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cbc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002cc6:	f042 0220 	orr.w	r2, r2, #32
 8002cca:	e7e8      	b.n	8002c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08002ccc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	4604      	mov	r4, r0
 8002cd0:	460d      	mov	r5, r1
 8002cd2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	075b      	lsls	r3, r3, #29
 8002cda:	d501      	bpl.n	8002ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002cdc:	2000      	movs	r0, #0
}
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f7ff ff3e 	bl	8002b62 <I2C_IsAcknowledgeFailed>
 8002ce6:	b9a8      	cbnz	r0, 8002d14 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002ce8:	1c6a      	adds	r2, r5, #1
 8002cea:	d0f3      	beq.n	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cec:	f7ff fa72 	bl	80021d4 <HAL_GetTick>
 8002cf0:	1b80      	subs	r0, r0, r6
 8002cf2:	42a8      	cmp	r0, r5
 8002cf4:	d801      	bhi.n	8002cfa <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002cf6:	2d00      	cmp	r5, #0
 8002cf8:	d1ec      	bne.n	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfa:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cfc:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfe:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d00:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d04:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d08:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d0e:	f042 0220 	orr.w	r2, r2, #32
 8002d12:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002d14:	2001      	movs	r0, #1
 8002d16:	e7e2      	b.n	8002cde <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08002d18 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002d18:	b570      	push	{r4, r5, r6, lr}
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	460d      	mov	r5, r1
 8002d1e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	d501      	bpl.n	8002d2c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002d28:	2000      	movs	r0, #0
}
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7ff ff18 	bl	8002b62 <I2C_IsAcknowledgeFailed>
 8002d32:	b9a8      	cbnz	r0, 8002d60 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002d34:	1c6a      	adds	r2, r5, #1
 8002d36:	d0f3      	beq.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d38:	f7ff fa4c 	bl	80021d4 <HAL_GetTick>
 8002d3c:	1b80      	subs	r0, r0, r6
 8002d3e:	42a8      	cmp	r0, r5
 8002d40:	d801      	bhi.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002d42:	2d00      	cmp	r5, #0
 8002d44:	d1ec      	bne.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d46:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d48:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d4c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d54:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d5a:	f042 0220 	orr.w	r2, r2, #32
 8002d5e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002d60:	2001      	movs	r0, #1
 8002d62:	e7e2      	b.n	8002d2a <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08002d64 <I2C_RequestMemoryWrite>:
{
 8002d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d68:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6a:	6802      	ldr	r2, [r0, #0]
{
 8002d6c:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6e:	6813      	ldr	r3, [r2, #0]
{
 8002d70:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d76:	6013      	str	r3, [r2, #0]
{
 8002d78:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8002d7c:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7e:	463b      	mov	r3, r7
 8002d80:	2200      	movs	r2, #0
 8002d82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d86:	f8cd 8000 	str.w	r8, [sp]
{
 8002d8a:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8c:	f7ff ff02 	bl	8002b94 <I2C_WaitOnFlagUntilTimeout>
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	b138      	cbz	r0, 8002da4 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	05db      	lsls	r3, r3, #23
 8002d98:	d502      	bpl.n	8002da0 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d9e:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002da0:	2003      	movs	r0, #3
 8002da2:	e00a      	b.n	8002dba <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002da4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8002da8:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002daa:	463a      	mov	r2, r7
 8002dac:	4643      	mov	r3, r8
 8002dae:	4620      	mov	r0, r4
 8002db0:	4917      	ldr	r1, [pc, #92]	; (8002e10 <I2C_RequestMemoryWrite+0xac>)
 8002db2:	f7ff ff21 	bl	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db6:	b118      	cbz	r0, 8002dc0 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8002db8:	2001      	movs	r0, #1
}
 8002dba:	b005      	add	sp, #20
 8002dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	9003      	str	r0, [sp, #12]
 8002dc4:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc6:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc8:	9203      	str	r2, [sp, #12]
 8002dca:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dcc:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dce:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd0:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd4:	f7ff ffa0 	bl	8002d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd8:	b140      	cbz	r0, 8002dec <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ddc:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dde:	bf01      	itttt	eq
 8002de0:	6822      	ldreq	r2, [r4, #0]
 8002de2:	6813      	ldreq	r3, [r2, #0]
 8002de4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002de8:	6013      	streq	r3, [r2, #0]
 8002dea:	e7e5      	b.n	8002db8 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dec:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002df2:	d102      	bne.n	8002dfa <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002df4:	b2ed      	uxtb	r5, r5
 8002df6:	611d      	str	r5, [r3, #16]
 8002df8:	e7df      	b.n	8002dba <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dfa:	0a2a      	lsrs	r2, r5, #8
 8002dfc:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfe:	4639      	mov	r1, r7
 8002e00:	4642      	mov	r2, r8
 8002e02:	4620      	mov	r0, r4
 8002e04:	f7ff ff88 	bl	8002d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d1e6      	bne.n	8002dda <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	e7f1      	b.n	8002df4 <I2C_RequestMemoryWrite+0x90>
 8002e10:	00010002 	.word	0x00010002

08002e14 <I2C_RequestMemoryRead>:
{
 8002e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e18:	469a      	mov	sl, r3
 8002e1a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1e:	6803      	ldr	r3, [r0, #0]
{
 8002e20:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e22:	681a      	ldr	r2, [r3, #0]
{
 8002e24:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e2a:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e2c:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e36:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e38:	463b      	mov	r3, r7
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f8cd 8000 	str.w	r8, [sp]
{
 8002e40:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e42:	f7ff fea7 	bl	8002b94 <I2C_WaitOnFlagUntilTimeout>
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	b148      	cbz	r0, 8002e5e <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e4a:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e4c:	05db      	lsls	r3, r3, #23
 8002e4e:	d502      	bpl.n	8002e56 <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e54:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002e56:	2003      	movs	r0, #3
}
 8002e58:	b004      	add	sp, #16
 8002e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e5e:	fa5f f986 	uxtb.w	r9, r6
 8002e62:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8002e66:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e68:	463a      	mov	r2, r7
 8002e6a:	4643      	mov	r3, r8
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	4929      	ldr	r1, [pc, #164]	; (8002f14 <I2C_RequestMemoryRead+0x100>)
 8002e70:	f7ff fec2 	bl	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e74:	b108      	cbz	r0, 8002e7a <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8002e76:	2001      	movs	r0, #1
 8002e78:	e7ee      	b.n	8002e58 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7a:	6823      	ldr	r3, [r4, #0]
 8002e7c:	9003      	str	r0, [sp, #12]
 8002e7e:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e80:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e82:	9203      	str	r2, [sp, #12]
 8002e84:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e86:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e88:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8e:	f7ff ff43 	bl	8002d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e92:	b140      	cbz	r0, 8002ea6 <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e96:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e98:	bf01      	itttt	eq
 8002e9a:	6822      	ldreq	r2, [r4, #0]
 8002e9c:	6813      	ldreq	r3, [r2, #0]
 8002e9e:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002ea2:	6013      	streq	r3, [r2, #0]
 8002ea4:	e7e7      	b.n	8002e76 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ea6:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eaa:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eac:	d11a      	bne.n	8002ee4 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eae:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb0:	4642      	mov	r2, r8
 8002eb2:	4639      	mov	r1, r7
 8002eb4:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb6:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb8:	f7ff ff2e 	bl	8002d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d1e8      	bne.n	8002e94 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec2:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec4:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec6:	680b      	ldr	r3, [r1, #0]
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ecc:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ece:	463b      	mov	r3, r7
 8002ed0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ed4:	f8cd 8000 	str.w	r8, [sp]
 8002ed8:	f7ff fe5c 	bl	8002b94 <I2C_WaitOnFlagUntilTimeout>
 8002edc:	6822      	ldr	r2, [r4, #0]
 8002ede:	b160      	cbz	r0, 8002efa <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ee0:	6813      	ldr	r3, [r2, #0]
 8002ee2:	e7b3      	b.n	8002e4c <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ee4:	0a2a      	lsrs	r2, r5, #8
 8002ee6:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee8:	4639      	mov	r1, r7
 8002eea:	4642      	mov	r2, r8
 8002eec:	4620      	mov	r0, r4
 8002eee:	f7ff ff13 	bl	8002d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d1ce      	bne.n	8002e94 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	e7d9      	b.n	8002eae <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002efa:	f049 0301 	orr.w	r3, r9, #1
 8002efe:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f00:	4620      	mov	r0, r4
 8002f02:	4643      	mov	r3, r8
 8002f04:	463a      	mov	r2, r7
 8002f06:	4903      	ldr	r1, [pc, #12]	; (8002f14 <I2C_RequestMemoryRead+0x100>)
 8002f08:	f7ff fe76 	bl	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8002f0c:	3800      	subs	r0, #0
 8002f0e:	bf18      	it	ne
 8002f10:	2001      	movne	r0, #1
 8002f12:	e7a1      	b.n	8002e58 <I2C_RequestMemoryRead+0x44>
 8002f14:	00010002 	.word	0x00010002

08002f18 <HAL_I2C_Init>:
{
 8002f18:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	b908      	cbnz	r0, 8002f22 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002f1e:	2001      	movs	r0, #1
}
 8002f20:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f22:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f2a:	b91b      	cbnz	r3, 8002f34 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002f2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002f30:	f7fe fff8 	bl	8001f24 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f34:	2324      	movs	r3, #36	; 0x24
 8002f36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f52:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f54:	f000 fcce 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f58:	4a3f      	ldr	r2, [pc, #252]	; (8003058 <HAL_I2C_Init+0x140>)
 8002f5a:	6863      	ldr	r3, [r4, #4]
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	bf94      	ite	ls
 8002f60:	4a3e      	ldrls	r2, [pc, #248]	; (800305c <HAL_I2C_Init+0x144>)
 8002f62:	4a3f      	ldrhi	r2, [pc, #252]	; (8003060 <HAL_I2C_Init+0x148>)
 8002f64:	4290      	cmp	r0, r2
 8002f66:	bf8c      	ite	hi
 8002f68:	2200      	movhi	r2, #0
 8002f6a:	2201      	movls	r2, #1
 8002f6c:	2a00      	cmp	r2, #0
 8002f6e:	d1d6      	bne.n	8002f1e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f70:	4e39      	ldr	r6, [pc, #228]	; (8003058 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002f72:	493c      	ldr	r1, [pc, #240]	; (8003064 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f74:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8002f76:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f7a:	bf88      	it	hi
 8002f7c:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f80:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f82:	f100 30ff 	add.w	r0, r0, #4294967295
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f86:	6855      	ldr	r5, [r2, #4]
 8002f88:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002f8c:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f90:	bf82      	ittt	hi
 8002f92:	4371      	mulhi	r1, r6
 8002f94:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002f98:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f9c:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f9e:	6a15      	ldr	r5, [r2, #32]
 8002fa0:	3101      	adds	r1, #1
 8002fa2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002fa6:	4329      	orrs	r1, r5
 8002fa8:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002faa:	69d1      	ldr	r1, [r2, #28]
 8002fac:	4d2a      	ldr	r5, [pc, #168]	; (8003058 <HAL_I2C_Init+0x140>)
 8002fae:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002fb2:	42ab      	cmp	r3, r5
 8002fb4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002fb8:	d832      	bhi.n	8003020 <HAL_I2C_Init+0x108>
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002fc0:	1c43      	adds	r3, r0, #1
 8002fc2:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002fc6:	4203      	tst	r3, r0
 8002fc8:	d042      	beq.n	8003050 <HAL_I2C_Init+0x138>
 8002fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fd2:	6811      	ldr	r1, [r2, #0]
 8002fd4:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002fd8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002fdc:	4303      	orrs	r3, r0
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fe2:	6891      	ldr	r1, [r2, #8]
 8002fe4:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002fe8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002fec:	4303      	orrs	r3, r0
 8002fee:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ff6:	68d1      	ldr	r1, [r2, #12]
 8002ff8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002ffc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003000:	4303      	orrs	r3, r0
 8003002:	430b      	orrs	r3, r1
 8003004:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003006:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003008:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003010:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003012:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003014:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003018:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800301a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800301e:	e77f      	b.n	8002f20 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003020:	68a5      	ldr	r5, [r4, #8]
 8003022:	b955      	cbnz	r5, 800303a <HAL_I2C_Init+0x122>
 8003024:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003028:	fbb0 f3f3 	udiv	r3, r0, r3
 800302c:	3301      	adds	r3, #1
 800302e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003032:	b17b      	cbz	r3, 8003054 <HAL_I2C_Init+0x13c>
 8003034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003038:	e7c9      	b.n	8002fce <HAL_I2C_Init+0xb6>
 800303a:	2519      	movs	r5, #25
 800303c:	436b      	muls	r3, r5
 800303e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003042:	3301      	adds	r3, #1
 8003044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003048:	b123      	cbz	r3, 8003054 <HAL_I2C_Init+0x13c>
 800304a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800304e:	e7be      	b.n	8002fce <HAL_I2C_Init+0xb6>
 8003050:	2304      	movs	r3, #4
 8003052:	e7bc      	b.n	8002fce <HAL_I2C_Init+0xb6>
 8003054:	2301      	movs	r3, #1
 8003056:	e7ba      	b.n	8002fce <HAL_I2C_Init+0xb6>
 8003058:	000186a0 	.word	0x000186a0
 800305c:	001e847f 	.word	0x001e847f
 8003060:	003d08ff 	.word	0x003d08ff
 8003064:	000f4240 	.word	0x000f4240

08003068 <HAL_I2C_Mem_Write>:
{
 8003068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800306c:	4604      	mov	r4, r0
 800306e:	4699      	mov	r9, r3
 8003070:	460f      	mov	r7, r1
 8003072:	4690      	mov	r8, r2
 8003074:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003076:	f7ff f8ad 	bl	80021d4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800307a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 800307e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003080:	2b20      	cmp	r3, #32
 8003082:	d003      	beq.n	800308c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8003084:	2002      	movs	r0, #2
}
 8003086:	b003      	add	sp, #12
 8003088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800308c:	9000      	str	r0, [sp, #0]
 800308e:	2319      	movs	r3, #25
 8003090:	2201      	movs	r2, #1
 8003092:	4620      	mov	r0, r4
 8003094:	493a      	ldr	r1, [pc, #232]	; (8003180 <HAL_I2C_Mem_Write+0x118>)
 8003096:	f7ff fd7d 	bl	8002b94 <I2C_WaitOnFlagUntilTimeout>
 800309a:	2800      	cmp	r0, #0
 800309c:	d1f2      	bne.n	8003084 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800309e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d0ee      	beq.n	8003084 <HAL_I2C_Mem_Write+0x1c>
 80030a6:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030a8:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80030aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030ae:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030b0:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030b2:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80030b4:	bf58      	it	pl
 80030b6:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030b8:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 80030ba:	bf5c      	itt	pl
 80030bc:	f043 0301 	orrpl.w	r3, r3, #1
 80030c0:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030c2:	6803      	ldr	r3, [r0, #0]
 80030c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030c8:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030ca:	2321      	movs	r3, #33	; 0x21
 80030cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030d0:	2340      	movs	r3, #64	; 0x40
 80030d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80030da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030dc:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 80030de:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030e0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030e4:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 80030e8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030ec:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ee:	4b25      	ldr	r3, [pc, #148]	; (8003184 <HAL_I2C_Mem_Write+0x11c>)
 80030f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030f2:	464b      	mov	r3, r9
 80030f4:	f7ff fe36 	bl	8002d64 <I2C_RequestMemoryWrite>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d02a      	beq.n	8003152 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 80030fc:	2001      	movs	r0, #1
 80030fe:	e7c2      	b.n	8003086 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003100:	f7ff fe0a 	bl	8002d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003104:	b140      	cbz	r0, 8003118 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003108:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310a:	bf01      	itttt	eq
 800310c:	6822      	ldreq	r2, [r4, #0]
 800310e:	6813      	ldreq	r3, [r2, #0]
 8003110:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003114:	6013      	streq	r3, [r2, #0]
 8003116:	e7f1      	b.n	80030fc <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800311a:	6827      	ldr	r7, [r4, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003122:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8003124:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003126:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003128:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800312a:	3a01      	subs	r2, #1
 800312c:	b292      	uxth	r2, r2
 800312e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003130:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8003132:	1e48      	subs	r0, r1, #1
 8003134:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003136:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8003138:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800313a:	d50a      	bpl.n	8003152 <HAL_I2C_Mem_Write+0xea>
 800313c:	b148      	cbz	r0, 8003152 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800313e:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8003140:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003142:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8003144:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003146:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003148:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800314a:	3b01      	subs	r3, #1
 800314c:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800314e:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003150:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003152:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003154:	462a      	mov	r2, r5
 8003156:	4631      	mov	r1, r6
 8003158:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1d0      	bne.n	8003100 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315e:	f7ff fdb5 	bl	8002ccc <I2C_WaitOnBTFFlagUntilTimeout>
 8003162:	2800      	cmp	r0, #0
 8003164:	d1cf      	bne.n	8003106 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003166:	6822      	ldr	r2, [r4, #0]
 8003168:	6813      	ldr	r3, [r2, #0]
 800316a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800316e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003170:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8003172:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003176:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800317a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800317e:	e782      	b.n	8003086 <HAL_I2C_Mem_Write+0x1e>
 8003180:	00100002 	.word	0x00100002
 8003184:	ffff0000 	.word	0xffff0000

08003188 <HAL_I2C_Mem_Read>:
{
 8003188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800318c:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 800318e:	2300      	movs	r3, #0
{
 8003190:	4604      	mov	r4, r0
 8003192:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8003194:	9303      	str	r3, [sp, #12]
{
 8003196:	460d      	mov	r5, r1
 8003198:	4690      	mov	r8, r2
 800319a:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800319c:	f7ff f81a 	bl	80021d4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80031a4:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d004      	beq.n	80031b4 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 80031aa:	2502      	movs	r5, #2
}
 80031ac:	4628      	mov	r0, r5
 80031ae:	b009      	add	sp, #36	; 0x24
 80031b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b4:	9000      	str	r0, [sp, #0]
 80031b6:	2319      	movs	r3, #25
 80031b8:	2201      	movs	r2, #1
 80031ba:	4620      	mov	r0, r4
 80031bc:	498d      	ldr	r1, [pc, #564]	; (80033f4 <HAL_I2C_Mem_Read+0x26c>)
 80031be:	f7ff fce9 	bl	8002b94 <I2C_WaitOnFlagUntilTimeout>
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d1f1      	bne.n	80031aa <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 80031c6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d0ed      	beq.n	80031aa <HAL_I2C_Mem_Read+0x22>
 80031ce:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031d0:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80031d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031d6:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031d8:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031da:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80031dc:	bf58      	it	pl
 80031de:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031e0:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 80031e2:	bf5c      	itt	pl
 80031e4:	f043 0301 	orrpl.w	r3, r3, #1
 80031e8:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ea:	6803      	ldr	r3, [r0, #0]
 80031ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031f0:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031f2:	2322      	movs	r3, #34	; 0x22
 80031f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031f8:	2340      	movs	r3, #64	; 0x40
 80031fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fe:	2300      	movs	r3, #0
 8003200:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003202:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003204:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8003206:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003208:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800320c:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8003210:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003212:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003214:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003216:	4b78      	ldr	r3, [pc, #480]	; (80033f8 <HAL_I2C_Mem_Read+0x270>)
 8003218:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800321a:	464b      	mov	r3, r9
 800321c:	f7ff fdfa 	bl	8002e14 <I2C_RequestMemoryRead>
 8003220:	4605      	mov	r5, r0
 8003222:	b108      	cbz	r0, 8003228 <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 8003224:	2501      	movs	r5, #1
 8003226:	e7c1      	b.n	80031ac <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8003228:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322a:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800322c:	b9c2      	cbnz	r2, 8003260 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322e:	9004      	str	r0, [sp, #16]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	9204      	str	r2, [sp, #16]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	9204      	str	r2, [sp, #16]
 8003238:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003240:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003242:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80033fc <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003246:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8003400 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 800324a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	d137      	bne.n	80032c0 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8003250:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8003252:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003256:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800325a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800325e:	e7a5      	b.n	80031ac <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8003260:	2a01      	cmp	r2, #1
 8003262:	d111      	bne.n	8003288 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	9005      	str	r0, [sp, #20]
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	9205      	str	r2, [sp, #20]
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	9205      	str	r2, [sp, #20]
 800327a:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003282:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003284:	b662      	cpsie	i
}
 8003286:	e7dc      	b.n	8003242 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 8003288:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800328a:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 800328c:	d10e      	bne.n	80032ac <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800328e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003292:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003294:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	9006      	str	r0, [sp, #24]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	9206      	str	r2, [sp, #24]
 800329e:	699a      	ldr	r2, [r3, #24]
 80032a0:	9206      	str	r2, [sp, #24]
 80032a2:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032aa:	e7ea      	b.n	8003282 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032b0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b2:	9007      	str	r0, [sp, #28]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	9207      	str	r2, [sp, #28]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	9307      	str	r3, [sp, #28]
 80032bc:	9b07      	ldr	r3, [sp, #28]
 80032be:	e7c0      	b.n	8003242 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d878      	bhi.n	80033b6 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d115      	bne.n	80032f4 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c8:	4632      	mov	r2, r6
 80032ca:	4639      	mov	r1, r7
 80032cc:	4620      	mov	r0, r4
 80032ce:	f7ff fcce 	bl	8002c6e <I2C_WaitOnRXNEFlagUntilTimeout>
 80032d2:	2800      	cmp	r0, #0
 80032d4:	d1a6      	bne.n	8003224 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032dc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80032de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032e0:	3301      	adds	r3, #1
 80032e2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80032e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80032e6:	3b01      	subs	r3, #1
 80032e8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80032ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80032f2:	e7aa      	b.n	800324a <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 80032f4:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	463b      	mov	r3, r7
 80032fc:	4641      	mov	r1, r8
 80032fe:	4620      	mov	r0, r4
 8003300:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8003302:	d118      	bne.n	8003336 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003304:	f7ff fc46 	bl	8002b94 <I2C_WaitOnFlagUntilTimeout>
 8003308:	2800      	cmp	r0, #0
 800330a:	d18b      	bne.n	8003224 <HAL_I2C_Mem_Read+0x9c>
 800330c:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003316:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800331c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800331e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003320:	3301      	adds	r3, #1
 8003322:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003324:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003326:	3b01      	subs	r3, #1
 8003328:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800332a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800332c:	3b01      	subs	r3, #1
 800332e:	b29b      	uxth	r3, r3
 8003330:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003332:	b662      	cpsie	i
 8003334:	e7cf      	b.n	80032d6 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003336:	f7ff fc2d 	bl	8002b94 <I2C_WaitOnFlagUntilTimeout>
 800333a:	2800      	cmp	r0, #0
 800333c:	f47f af72 	bne.w	8003224 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003340:	6822      	ldr	r2, [r4, #0]
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003348:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800334a:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800334c:	f246 11a8 	movw	r1, #25000	; 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003356:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003358:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800335a:	1c53      	adds	r3, r2, #1
 800335c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800335e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003360:	3b01      	subs	r3, #1
 8003362:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003364:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003366:	3b01      	subs	r3, #1
 8003368:	b29b      	uxth	r3, r3
 800336a:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800336c:	f8d9 3000 	ldr.w	r3, [r9]
 8003370:	fbb3 f3f1 	udiv	r3, r3, r1
 8003374:	2123      	movs	r1, #35	; 0x23
 8003376:	434b      	muls	r3, r1
 8003378:	9303      	str	r3, [sp, #12]
            count--;
 800337a:	9b03      	ldr	r3, [sp, #12]
 800337c:	3b01      	subs	r3, #1
 800337e:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8003380:	9b03      	ldr	r3, [sp, #12]
 8003382:	b96b      	cbnz	r3, 80033a0 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003384:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003386:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003388:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003390:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003392:	f042 0220 	orr.w	r2, r2, #32
 8003396:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003398:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 800339a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800339e:	e741      	b.n	8003224 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	6959      	ldr	r1, [r3, #20]
 80033a4:	0748      	lsls	r0, r1, #29
 80033a6:	d5e8      	bpl.n	800337a <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80033ae:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	7053      	strb	r3, [r2, #1]
 80033b4:	e7b3      	b.n	800331e <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b6:	4632      	mov	r2, r6
 80033b8:	4639      	mov	r1, r7
 80033ba:	4620      	mov	r0, r4
 80033bc:	f7ff fc57 	bl	8002c6e <I2C_WaitOnRXNEFlagUntilTimeout>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	f47f af2f 	bne.w	8003224 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80033d0:	1c53      	adds	r3, r2, #1
 80033d2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80033d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80033d6:	3b01      	subs	r3, #1
 80033d8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80033da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29b      	uxth	r3, r3
 80033e0:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	6959      	ldr	r1, [r3, #20]
 80033e6:	0749      	lsls	r1, r1, #29
 80033e8:	f57f af2f 	bpl.w	800324a <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	7053      	strb	r3, [r2, #1]
 80033f0:	e775      	b.n	80032de <HAL_I2C_Mem_Read+0x156>
 80033f2:	bf00      	nop
 80033f4:	00100002 	.word	0x00100002
 80033f8:	ffff0000 	.word	0xffff0000
 80033fc:	00010004 	.word	0x00010004
 8003400:	20000034 	.word	0x20000034

08003404 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003404:	2201      	movs	r2, #1
 8003406:	4b01      	ldr	r3, [pc, #4]	; (800340c <HAL_PWR_EnableBkUpAccess+0x8>)
 8003408:	621a      	str	r2, [r3, #32]
}
 800340a:	4770      	bx	lr
 800340c:	420e0000 	.word	0x420e0000

08003410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003410:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003414:	4605      	mov	r5, r0
 8003416:	b338      	cbz	r0, 8003468 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003418:	6803      	ldr	r3, [r0, #0]
 800341a:	07db      	lsls	r3, r3, #31
 800341c:	d410      	bmi.n	8003440 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341e:	682b      	ldr	r3, [r5, #0]
 8003420:	079f      	lsls	r7, r3, #30
 8003422:	d45e      	bmi.n	80034e2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003424:	682b      	ldr	r3, [r5, #0]
 8003426:	0719      	lsls	r1, r3, #28
 8003428:	f100 8095 	bmi.w	8003556 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	075a      	lsls	r2, r3, #29
 8003430:	f100 80c1 	bmi.w	80035b6 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003434:	69e8      	ldr	r0, [r5, #28]
 8003436:	2800      	cmp	r0, #0
 8003438:	f040 812c 	bne.w	8003694 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800343c:	2000      	movs	r0, #0
 800343e:	e029      	b.n	8003494 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003440:	4c90      	ldr	r4, [pc, #576]	; (8003684 <HAL_RCC_OscConfig+0x274>)
 8003442:	6863      	ldr	r3, [r4, #4]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b04      	cmp	r3, #4
 800344a:	d007      	beq.n	800345c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800344c:	6863      	ldr	r3, [r4, #4]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b08      	cmp	r3, #8
 8003454:	d10a      	bne.n	800346c <HAL_RCC_OscConfig+0x5c>
 8003456:	6863      	ldr	r3, [r4, #4]
 8003458:	03de      	lsls	r6, r3, #15
 800345a:	d507      	bpl.n	800346c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	039c      	lsls	r4, r3, #14
 8003460:	d5dd      	bpl.n	800341e <HAL_RCC_OscConfig+0xe>
 8003462:	686b      	ldr	r3, [r5, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1da      	bne.n	800341e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8003468:	2001      	movs	r0, #1
 800346a:	e013      	b.n	8003494 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346c:	686b      	ldr	r3, [r5, #4]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003472:	d112      	bne.n	800349a <HAL_RCC_OscConfig+0x8a>
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800347c:	f7fe feaa 	bl	80021d4 <HAL_GetTick>
 8003480:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	0398      	lsls	r0, r3, #14
 8003486:	d4ca      	bmi.n	800341e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003488:	f7fe fea4 	bl	80021d4 <HAL_GetTick>
 800348c:	1b80      	subs	r0, r0, r6
 800348e:	2864      	cmp	r0, #100	; 0x64
 8003490:	d9f7      	bls.n	8003482 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8003492:	2003      	movs	r0, #3
}
 8003494:	b002      	add	sp, #8
 8003496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349a:	b99b      	cbnz	r3, 80034c4 <HAL_RCC_OscConfig+0xb4>
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a2:	6023      	str	r3, [r4, #0]
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80034ac:	f7fe fe92 	bl	80021d4 <HAL_GetTick>
 80034b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	0399      	lsls	r1, r3, #14
 80034b6:	d5b2      	bpl.n	800341e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fe fe8c 	bl	80021d4 <HAL_GetTick>
 80034bc:	1b80      	subs	r0, r0, r6
 80034be:	2864      	cmp	r0, #100	; 0x64
 80034c0:	d9f7      	bls.n	80034b2 <HAL_RCC_OscConfig+0xa2>
 80034c2:	e7e6      	b.n	8003492 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c8:	6823      	ldr	r3, [r4, #0]
 80034ca:	d103      	bne.n	80034d4 <HAL_RCC_OscConfig+0xc4>
 80034cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d0:	6023      	str	r3, [r4, #0]
 80034d2:	e7cf      	b.n	8003474 <HAL_RCC_OscConfig+0x64>
 80034d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d8:	6023      	str	r3, [r4, #0]
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e0:	e7cb      	b.n	800347a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034e2:	4c68      	ldr	r4, [pc, #416]	; (8003684 <HAL_RCC_OscConfig+0x274>)
 80034e4:	6863      	ldr	r3, [r4, #4]
 80034e6:	f013 0f0c 	tst.w	r3, #12
 80034ea:	d007      	beq.n	80034fc <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034ec:	6863      	ldr	r3, [r4, #4]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d110      	bne.n	8003518 <HAL_RCC_OscConfig+0x108>
 80034f6:	6863      	ldr	r3, [r4, #4]
 80034f8:	03da      	lsls	r2, r3, #15
 80034fa:	d40d      	bmi.n	8003518 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	079b      	lsls	r3, r3, #30
 8003500:	d502      	bpl.n	8003508 <HAL_RCC_OscConfig+0xf8>
 8003502:	692b      	ldr	r3, [r5, #16]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d1af      	bne.n	8003468 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	696a      	ldr	r2, [r5, #20]
 800350c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003510:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003514:	6023      	str	r3, [r4, #0]
 8003516:	e785      	b.n	8003424 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003518:	692a      	ldr	r2, [r5, #16]
 800351a:	4b5b      	ldr	r3, [pc, #364]	; (8003688 <HAL_RCC_OscConfig+0x278>)
 800351c:	b16a      	cbz	r2, 800353a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003522:	f7fe fe57 	bl	80021d4 <HAL_GetTick>
 8003526:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	079f      	lsls	r7, r3, #30
 800352c:	d4ec      	bmi.n	8003508 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352e:	f7fe fe51 	bl	80021d4 <HAL_GetTick>
 8003532:	1b80      	subs	r0, r0, r6
 8003534:	2802      	cmp	r0, #2
 8003536:	d9f7      	bls.n	8003528 <HAL_RCC_OscConfig+0x118>
 8003538:	e7ab      	b.n	8003492 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800353a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800353c:	f7fe fe4a 	bl	80021d4 <HAL_GetTick>
 8003540:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	0798      	lsls	r0, r3, #30
 8003546:	f57f af6d 	bpl.w	8003424 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800354a:	f7fe fe43 	bl	80021d4 <HAL_GetTick>
 800354e:	1b80      	subs	r0, r0, r6
 8003550:	2802      	cmp	r0, #2
 8003552:	d9f6      	bls.n	8003542 <HAL_RCC_OscConfig+0x132>
 8003554:	e79d      	b.n	8003492 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003556:	69aa      	ldr	r2, [r5, #24]
 8003558:	4e4a      	ldr	r6, [pc, #296]	; (8003684 <HAL_RCC_OscConfig+0x274>)
 800355a:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <HAL_RCC_OscConfig+0x278>)
 800355c:	b1e2      	cbz	r2, 8003598 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800355e:	2201      	movs	r2, #1
 8003560:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003564:	f7fe fe36 	bl	80021d4 <HAL_GetTick>
 8003568:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800356c:	079b      	lsls	r3, r3, #30
 800356e:	d50d      	bpl.n	800358c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003570:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003574:	4b45      	ldr	r3, [pc, #276]	; (800368c <HAL_RCC_OscConfig+0x27c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	fbb3 f3f2 	udiv	r3, r3, r2
 800357c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800357e:	bf00      	nop
  }
  while (Delay --);
 8003580:	9b01      	ldr	r3, [sp, #4]
 8003582:	1e5a      	subs	r2, r3, #1
 8003584:	9201      	str	r2, [sp, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f9      	bne.n	800357e <HAL_RCC_OscConfig+0x16e>
 800358a:	e74f      	b.n	800342c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358c:	f7fe fe22 	bl	80021d4 <HAL_GetTick>
 8003590:	1b00      	subs	r0, r0, r4
 8003592:	2802      	cmp	r0, #2
 8003594:	d9e9      	bls.n	800356a <HAL_RCC_OscConfig+0x15a>
 8003596:	e77c      	b.n	8003492 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8003598:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800359c:	f7fe fe1a 	bl	80021d4 <HAL_GetTick>
 80035a0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80035a4:	079f      	lsls	r7, r3, #30
 80035a6:	f57f af41 	bpl.w	800342c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035aa:	f7fe fe13 	bl	80021d4 <HAL_GetTick>
 80035ae:	1b00      	subs	r0, r0, r4
 80035b0:	2802      	cmp	r0, #2
 80035b2:	d9f6      	bls.n	80035a2 <HAL_RCC_OscConfig+0x192>
 80035b4:	e76d      	b.n	8003492 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b6:	4c33      	ldr	r4, [pc, #204]	; (8003684 <HAL_RCC_OscConfig+0x274>)
 80035b8:	69e3      	ldr	r3, [r4, #28]
 80035ba:	00d8      	lsls	r0, r3, #3
 80035bc:	d424      	bmi.n	8003608 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80035be:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c0:	69e3      	ldr	r3, [r4, #28]
 80035c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c6:	61e3      	str	r3, [r4, #28]
 80035c8:	69e3      	ldr	r3, [r4, #28]
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d2:	4e2f      	ldr	r6, [pc, #188]	; (8003690 <HAL_RCC_OscConfig+0x280>)
 80035d4:	6833      	ldr	r3, [r6, #0]
 80035d6:	05d9      	lsls	r1, r3, #23
 80035d8:	d518      	bpl.n	800360c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035da:	68eb      	ldr	r3, [r5, #12]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d126      	bne.n	800362e <HAL_RCC_OscConfig+0x21e>
 80035e0:	6a23      	ldr	r3, [r4, #32]
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80035e8:	f7fe fdf4 	bl	80021d4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80035f0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	6a23      	ldr	r3, [r4, #32]
 80035f4:	079b      	lsls	r3, r3, #30
 80035f6:	d53f      	bpl.n	8003678 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80035f8:	2f00      	cmp	r7, #0
 80035fa:	f43f af1b 	beq.w	8003434 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fe:	69e3      	ldr	r3, [r4, #28]
 8003600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003604:	61e3      	str	r3, [r4, #28]
 8003606:	e715      	b.n	8003434 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003608:	2700      	movs	r7, #0
 800360a:	e7e2      	b.n	80035d2 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360c:	6833      	ldr	r3, [r6, #0]
 800360e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003612:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003614:	f7fe fdde 	bl	80021d4 <HAL_GetTick>
 8003618:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	6833      	ldr	r3, [r6, #0]
 800361c:	05da      	lsls	r2, r3, #23
 800361e:	d4dc      	bmi.n	80035da <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003620:	f7fe fdd8 	bl	80021d4 <HAL_GetTick>
 8003624:	eba0 0008 	sub.w	r0, r0, r8
 8003628:	2864      	cmp	r0, #100	; 0x64
 800362a:	d9f6      	bls.n	800361a <HAL_RCC_OscConfig+0x20a>
 800362c:	e731      	b.n	8003492 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362e:	b9ab      	cbnz	r3, 800365c <HAL_RCC_OscConfig+0x24c>
 8003630:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003632:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	6223      	str	r3, [r4, #32]
 800363c:	6a23      	ldr	r3, [r4, #32]
 800363e:	f023 0304 	bic.w	r3, r3, #4
 8003642:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003644:	f7fe fdc6 	bl	80021d4 <HAL_GetTick>
 8003648:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364a:	6a23      	ldr	r3, [r4, #32]
 800364c:	0798      	lsls	r0, r3, #30
 800364e:	d5d3      	bpl.n	80035f8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003650:	f7fe fdc0 	bl	80021d4 <HAL_GetTick>
 8003654:	1b80      	subs	r0, r0, r6
 8003656:	4540      	cmp	r0, r8
 8003658:	d9f7      	bls.n	800364a <HAL_RCC_OscConfig+0x23a>
 800365a:	e71a      	b.n	8003492 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800365c:	2b05      	cmp	r3, #5
 800365e:	6a23      	ldr	r3, [r4, #32]
 8003660:	d103      	bne.n	800366a <HAL_RCC_OscConfig+0x25a>
 8003662:	f043 0304 	orr.w	r3, r3, #4
 8003666:	6223      	str	r3, [r4, #32]
 8003668:	e7ba      	b.n	80035e0 <HAL_RCC_OscConfig+0x1d0>
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	6223      	str	r3, [r4, #32]
 8003670:	6a23      	ldr	r3, [r4, #32]
 8003672:	f023 0304 	bic.w	r3, r3, #4
 8003676:	e7b6      	b.n	80035e6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003678:	f7fe fdac 	bl	80021d4 <HAL_GetTick>
 800367c:	1b80      	subs	r0, r0, r6
 800367e:	4540      	cmp	r0, r8
 8003680:	d9b7      	bls.n	80035f2 <HAL_RCC_OscConfig+0x1e2>
 8003682:	e706      	b.n	8003492 <HAL_RCC_OscConfig+0x82>
 8003684:	40021000 	.word	0x40021000
 8003688:	42420000 	.word	0x42420000
 800368c:	20000034 	.word	0x20000034
 8003690:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003694:	4c2a      	ldr	r4, [pc, #168]	; (8003740 <HAL_RCC_OscConfig+0x330>)
 8003696:	6863      	ldr	r3, [r4, #4]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b08      	cmp	r3, #8
 800369e:	d03e      	beq.n	800371e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a0:	2200      	movs	r2, #0
 80036a2:	4b28      	ldr	r3, [pc, #160]	; (8003744 <HAL_RCC_OscConfig+0x334>)
 80036a4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80036a6:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a8:	d12c      	bne.n	8003704 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80036aa:	f7fe fd93 	bl	80021d4 <HAL_GetTick>
 80036ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	0199      	lsls	r1, r3, #6
 80036b4:	d420      	bmi.n	80036f8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036b6:	6a2b      	ldr	r3, [r5, #32]
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036bc:	d105      	bne.n	80036ca <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036be:	6862      	ldr	r2, [r4, #4]
 80036c0:	68a9      	ldr	r1, [r5, #8]
 80036c2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80036c6:	430a      	orrs	r2, r1
 80036c8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ca:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80036cc:	6862      	ldr	r2, [r4, #4]
 80036ce:	430b      	orrs	r3, r1
 80036d0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80036d4:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80036d6:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80036da:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <HAL_RCC_OscConfig+0x334>)
 80036dc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80036de:	f7fe fd79 	bl	80021d4 <HAL_GetTick>
 80036e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	019a      	lsls	r2, r3, #6
 80036e8:	f53f aea8 	bmi.w	800343c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe fd72 	bl	80021d4 <HAL_GetTick>
 80036f0:	1b40      	subs	r0, r0, r5
 80036f2:	2802      	cmp	r0, #2
 80036f4:	d9f6      	bls.n	80036e4 <HAL_RCC_OscConfig+0x2d4>
 80036f6:	e6cc      	b.n	8003492 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe fd6c 	bl	80021d4 <HAL_GetTick>
 80036fc:	1b80      	subs	r0, r0, r6
 80036fe:	2802      	cmp	r0, #2
 8003700:	d9d6      	bls.n	80036b0 <HAL_RCC_OscConfig+0x2a0>
 8003702:	e6c6      	b.n	8003492 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8003704:	f7fe fd66 	bl	80021d4 <HAL_GetTick>
 8003708:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	019b      	lsls	r3, r3, #6
 800370e:	f57f ae95 	bpl.w	800343c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003712:	f7fe fd5f 	bl	80021d4 <HAL_GetTick>
 8003716:	1b40      	subs	r0, r0, r5
 8003718:	2802      	cmp	r0, #2
 800371a:	d9f6      	bls.n	800370a <HAL_RCC_OscConfig+0x2fa>
 800371c:	e6b9      	b.n	8003492 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800371e:	2801      	cmp	r0, #1
 8003720:	f43f aeb8 	beq.w	8003494 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8003724:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	6a2a      	ldr	r2, [r5, #32]
 8003728:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800372c:	4291      	cmp	r1, r2
 800372e:	f47f ae9b 	bne.w	8003468 <HAL_RCC_OscConfig+0x58>
 8003732:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003734:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003738:	4293      	cmp	r3, r2
 800373a:	f43f ae7f 	beq.w	800343c <HAL_RCC_OscConfig+0x2c>
 800373e:	e693      	b.n	8003468 <HAL_RCC_OscConfig+0x58>
 8003740:	40021000 	.word	0x40021000
 8003744:	42420000 	.word	0x42420000

08003748 <HAL_RCC_GetSysClockFreq>:
{
 8003748:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800374a:	4b18      	ldr	r3, [pc, #96]	; (80037ac <HAL_RCC_GetSysClockFreq+0x64>)
{
 800374c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800374e:	ac02      	add	r4, sp, #8
 8003750:	f103 0510 	add.w	r5, r3, #16
 8003754:	4622      	mov	r2, r4
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	3308      	adds	r3, #8
 800375c:	c203      	stmia	r2!, {r0, r1}
 800375e:	42ab      	cmp	r3, r5
 8003760:	4614      	mov	r4, r2
 8003762:	d1f7      	bne.n	8003754 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003764:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8003768:	4911      	ldr	r1, [pc, #68]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800376a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800376e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003770:	f003 020c 	and.w	r2, r3, #12
 8003774:	2a08      	cmp	r2, #8
 8003776:	d117      	bne.n	80037a8 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003778:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800377c:	3218      	adds	r2, #24
 800377e:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003780:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003782:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003786:	d50c      	bpl.n	80037a2 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003788:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800378a:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800378c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003790:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003792:	3318      	adds	r3, #24
 8003794:	446b      	add	r3, sp
 8003796:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800379a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800379e:	b007      	add	sp, #28
 80037a0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x70>)
 80037a4:	4358      	muls	r0, r3
 80037a6:	e7fa      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80037a8:	4802      	ldr	r0, [pc, #8]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80037aa:	e7f8      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x56>
 80037ac:	080055e9 	.word	0x080055e9
 80037b0:	40021000 	.word	0x40021000
 80037b4:	007a1200 	.word	0x007a1200
 80037b8:	003d0900 	.word	0x003d0900

080037bc <HAL_RCC_ClockConfig>:
{
 80037bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037c0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80037c2:	4604      	mov	r4, r0
 80037c4:	b910      	cbnz	r0, 80037cc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80037c6:	2001      	movs	r0, #1
}
 80037c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037cc:	4a44      	ldr	r2, [pc, #272]	; (80038e0 <HAL_RCC_ClockConfig+0x124>)
 80037ce:	6813      	ldr	r3, [r2, #0]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	428b      	cmp	r3, r1
 80037d6:	d328      	bcc.n	800382a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d8:	6821      	ldr	r1, [r4, #0]
 80037da:	078e      	lsls	r6, r1, #30
 80037dc:	d430      	bmi.n	8003840 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037de:	07ca      	lsls	r2, r1, #31
 80037e0:	d443      	bmi.n	800386a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e2:	4a3f      	ldr	r2, [pc, #252]	; (80038e0 <HAL_RCC_ClockConfig+0x124>)
 80037e4:	6813      	ldr	r3, [r2, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	42ab      	cmp	r3, r5
 80037ec:	d865      	bhi.n	80038ba <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ee:	6822      	ldr	r2, [r4, #0]
 80037f0:	4d3c      	ldr	r5, [pc, #240]	; (80038e4 <HAL_RCC_ClockConfig+0x128>)
 80037f2:	f012 0f04 	tst.w	r2, #4
 80037f6:	d16c      	bne.n	80038d2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f8:	0713      	lsls	r3, r2, #28
 80037fa:	d506      	bpl.n	800380a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037fc:	686b      	ldr	r3, [r5, #4]
 80037fe:	6922      	ldr	r2, [r4, #16]
 8003800:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003804:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003808:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800380a:	f7ff ff9d 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 800380e:	686b      	ldr	r3, [r5, #4]
 8003810:	4a35      	ldr	r2, [pc, #212]	; (80038e8 <HAL_RCC_ClockConfig+0x12c>)
 8003812:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003816:	5cd3      	ldrb	r3, [r2, r3]
 8003818:	40d8      	lsrs	r0, r3
 800381a:	4b34      	ldr	r3, [pc, #208]	; (80038ec <HAL_RCC_ClockConfig+0x130>)
 800381c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800381e:	4b34      	ldr	r3, [pc, #208]	; (80038f0 <HAL_RCC_ClockConfig+0x134>)
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	f7fe fc95 	bl	8002150 <HAL_InitTick>
  return HAL_OK;
 8003826:	2000      	movs	r0, #0
 8003828:	e7ce      	b.n	80037c8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	6813      	ldr	r3, [r2, #0]
 800382c:	f023 0307 	bic.w	r3, r3, #7
 8003830:	430b      	orrs	r3, r1
 8003832:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003834:	6813      	ldr	r3, [r2, #0]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	428b      	cmp	r3, r1
 800383c:	d1c3      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xa>
 800383e:	e7cb      	b.n	80037d8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <HAL_RCC_ClockConfig+0x128>)
 8003842:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003846:	bf1e      	ittt	ne
 8003848:	685a      	ldrne	r2, [r3, #4]
 800384a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800384e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003852:	bf42      	ittt	mi
 8003854:	685a      	ldrmi	r2, [r3, #4]
 8003856:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800385a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	68a0      	ldr	r0, [r4, #8]
 8003860:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003864:	4302      	orrs	r2, r0
 8003866:	605a      	str	r2, [r3, #4]
 8003868:	e7b9      	b.n	80037de <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386a:	6862      	ldr	r2, [r4, #4]
 800386c:	4e1d      	ldr	r6, [pc, #116]	; (80038e4 <HAL_RCC_ClockConfig+0x128>)
 800386e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003870:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003872:	d11a      	bne.n	80038aa <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003874:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	d0a5      	beq.n	80037c6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003880:	f023 0303 	bic.w	r3, r3, #3
 8003884:	4313      	orrs	r3, r2
 8003886:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003888:	f7fe fca4 	bl	80021d4 <HAL_GetTick>
 800388c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	6873      	ldr	r3, [r6, #4]
 8003890:	6862      	ldr	r2, [r4, #4]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800389a:	d0a2      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800389c:	f7fe fc9a 	bl	80021d4 <HAL_GetTick>
 80038a0:	1bc0      	subs	r0, r0, r7
 80038a2:	4540      	cmp	r0, r8
 80038a4:	d9f3      	bls.n	800388e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80038a6:	2003      	movs	r0, #3
 80038a8:	e78e      	b.n	80037c8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038aa:	2a02      	cmp	r2, #2
 80038ac:	d102      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038b2:	e7e1      	b.n	8003878 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b4:	f013 0f02 	tst.w	r3, #2
 80038b8:	e7de      	b.n	8003878 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	6813      	ldr	r3, [r2, #0]
 80038bc:	f023 0307 	bic.w	r3, r3, #7
 80038c0:	432b      	orrs	r3, r5
 80038c2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c4:	6813      	ldr	r3, [r2, #0]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	42ab      	cmp	r3, r5
 80038cc:	f47f af7b 	bne.w	80037c6 <HAL_RCC_ClockConfig+0xa>
 80038d0:	e78d      	b.n	80037ee <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d2:	686b      	ldr	r3, [r5, #4]
 80038d4:	68e1      	ldr	r1, [r4, #12]
 80038d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038da:	430b      	orrs	r3, r1
 80038dc:	606b      	str	r3, [r5, #4]
 80038de:	e78b      	b.n	80037f8 <HAL_RCC_ClockConfig+0x3c>
 80038e0:	40022000 	.word	0x40022000
 80038e4:	40021000 	.word	0x40021000
 80038e8:	080055d1 	.word	0x080055d1
 80038ec:	20000034 	.word	0x20000034
 80038f0:	2000003c 	.word	0x2000003c

080038f4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038f4:	4b04      	ldr	r3, [pc, #16]	; (8003908 <HAL_RCC_GetPCLK1Freq+0x14>)
 80038f6:	4a05      	ldr	r2, [pc, #20]	; (800390c <HAL_RCC_GetPCLK1Freq+0x18>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80038fe:	5cd3      	ldrb	r3, [r2, r3]
 8003900:	4a03      	ldr	r2, [pc, #12]	; (8003910 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003902:	6810      	ldr	r0, [r2, #0]
}
 8003904:	40d8      	lsrs	r0, r3
 8003906:	4770      	bx	lr
 8003908:	40021000 	.word	0x40021000
 800390c:	080055e1 	.word	0x080055e1
 8003910:	20000034 	.word	0x20000034

08003914 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003914:	4b04      	ldr	r3, [pc, #16]	; (8003928 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003916:	4a05      	ldr	r2, [pc, #20]	; (800392c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800391e:	5cd3      	ldrb	r3, [r2, r3]
 8003920:	4a03      	ldr	r2, [pc, #12]	; (8003930 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003922:	6810      	ldr	r0, [r2, #0]
}
 8003924:	40d8      	lsrs	r0, r3
 8003926:	4770      	bx	lr
 8003928:	40021000 	.word	0x40021000
 800392c:	080055e1 	.word	0x080055e1
 8003930:	20000034 	.word	0x20000034

08003934 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003934:	6803      	ldr	r3, [r0, #0]
{
 8003936:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800393a:	07d9      	lsls	r1, r3, #31
{
 800393c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800393e:	d520      	bpl.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003940:	4c36      	ldr	r4, [pc, #216]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003942:	69e3      	ldr	r3, [r4, #28]
 8003944:	00da      	lsls	r2, r3, #3
 8003946:	d432      	bmi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003948:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	69e3      	ldr	r3, [r4, #28]
 800394c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003950:	61e3      	str	r3, [r4, #28]
 8003952:	69e3      	ldr	r3, [r4, #28]
 8003954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395c:	4f30      	ldr	r7, [pc, #192]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	05db      	lsls	r3, r3, #23
 8003962:	d526      	bpl.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003964:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003966:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800396a:	d136      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800396c:	6a23      	ldr	r3, [r4, #32]
 800396e:	686a      	ldr	r2, [r5, #4]
 8003970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003974:	4313      	orrs	r3, r2
 8003976:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003978:	b11e      	cbz	r6, 8003982 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397a:	69e3      	ldr	r3, [r4, #28]
 800397c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003980:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003982:	6828      	ldr	r0, [r5, #0]
 8003984:	0783      	lsls	r3, r0, #30
 8003986:	d506      	bpl.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003988:	4924      	ldr	r1, [pc, #144]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800398a:	68ab      	ldr	r3, [r5, #8]
 800398c:	684a      	ldr	r2, [r1, #4]
 800398e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003992:	431a      	orrs	r2, r3
 8003994:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003996:	f010 0010 	ands.w	r0, r0, #16
 800399a:	d01b      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800399c:	4a1f      	ldr	r2, [pc, #124]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800399e:	68e9      	ldr	r1, [r5, #12]
 80039a0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039a2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6053      	str	r3, [r2, #4]
 80039ac:	e012      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 80039ae:	2600      	movs	r6, #0
 80039b0:	e7d4      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80039ba:	f7fe fc0b 	bl	80021d4 <HAL_GetTick>
 80039be:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	05d8      	lsls	r0, r3, #23
 80039c4:	d4ce      	bmi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c6:	f7fe fc05 	bl	80021d4 <HAL_GetTick>
 80039ca:	eba0 0008 	sub.w	r0, r0, r8
 80039ce:	2864      	cmp	r0, #100	; 0x64
 80039d0:	d9f6      	bls.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80039d2:	2003      	movs	r0, #3
}
 80039d4:	b002      	add	sp, #8
 80039d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039da:	686a      	ldr	r2, [r5, #4]
 80039dc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d0c3      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80039e4:	2001      	movs	r0, #1
 80039e6:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ea:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ee:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039f4:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80039f8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039fa:	07d9      	lsls	r1, r3, #31
 80039fc:	d5b6      	bpl.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80039fe:	f7fe fbe9 	bl	80021d4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a02:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003a06:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a08:	6a23      	ldr	r3, [r4, #32]
 8003a0a:	079a      	lsls	r2, r3, #30
 8003a0c:	d4ae      	bmi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fe fbe1 	bl	80021d4 <HAL_GetTick>
 8003a12:	1bc0      	subs	r0, r0, r7
 8003a14:	4540      	cmp	r0, r8
 8003a16:	d9f7      	bls.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a18:	e7db      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40007000 	.word	0x40007000
 8003a24:	42420000 	.word	0x42420000

08003a28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a28:	4602      	mov	r2, r0
 8003a2a:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a2c:	4b33      	ldr	r3, [pc, #204]	; (8003afc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
{
 8003a2e:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a30:	ad02      	add	r5, sp, #8
 8003a32:	f103 0610 	add.w	r6, r3, #16
 8003a36:	462c      	mov	r4, r5
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	c403      	stmia	r4!, {r0, r1}
 8003a40:	42b3      	cmp	r3, r6
 8003a42:	4625      	mov	r5, r4
 8003a44:	d1f7      	bne.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a46:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003a4a:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a4c:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8003a50:	d047      	beq.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8003a52:	2a10      	cmp	r2, #16
 8003a54:	d003      	beq.n	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8003a56:	2a01      	cmp	r2, #1
 8003a58:	d024      	beq.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  uint32_t temp_reg = 0U, frequency = 0U;
 8003a5a:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8003a5c:	e036      	b.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      temp_reg = RCC->CFGR;
 8003a5e:	4a28      	ldr	r2, [pc, #160]	; (8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8003a60:	6851      	ldr	r1, [r2, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a62:	6810      	ldr	r0, [r2, #0]
 8003a64:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003a68:	d030      	beq.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a6a:	f3c1 4383 	ubfx	r3, r1, #18, #4
 8003a6e:	3318      	adds	r3, #24
 8003a70:	446b      	add	r3, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a72:	03c9      	lsls	r1, r1, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a74:	f813 0c10 	ldrb.w	r0, [r3, #-16]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a78:	bf49      	itett	mi
 8003a7a:	6853      	ldrmi	r3, [r2, #4]
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a7c:	4b21      	ldrpl	r3, [pc, #132]	; (8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a7e:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
 8003a82:	3318      	addmi	r3, #24
 8003a84:	bf41      	itttt	mi
 8003a86:	446b      	addmi	r3, sp
 8003a88:	f813 1c14 	ldrbmi.w	r1, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a8c:	4b1e      	ldrmi	r3, [pc, #120]	; (8003b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8003a8e:	fbb3 f3f1 	udivmi	r3, r3, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a92:	4358      	muls	r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003a94:	6853      	ldr	r3, [r2, #4]
 8003a96:	025b      	lsls	r3, r3, #9
 8003a98:	d418      	bmi.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          frequency = (pllclk * 2) / 3;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a9e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003aa2:	e013      	b.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003aa4:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8003aa8:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8003aaa:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003aac:	4019      	ands	r1, r3
 8003aae:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8003ab2:	d01f      	beq.n	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003abc:	d108      	bne.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        frequency = LSI_VALUE;
 8003abe:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003ac2:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8003ac4:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8003ac8:	bf18      	it	ne
 8003aca:	4618      	movne	r0, r3
}
 8003acc:	b006      	add	sp, #24
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003ad0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ad4:	d1c1      	bne.n	8003a5a <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 8003ad6:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8003ad8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003adc:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003ae0:	e7f2      	b.n	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003ae2:	f7ff ff17 	bl	8003914 <HAL_RCC_GetPCLK2Freq>
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003aee:	3301      	adds	r3, #1
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	e7d4      	b.n	8003a9e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSE_VALUE;
 8003af4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003af8:	e7e8      	b.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8003afa:	bf00      	nop
 8003afc:	080055e9 	.word	0x080055e9
 8003b00:	40021000 	.word	0x40021000
 8003b04:	003d0900 	.word	0x003d0900
 8003b08:	007a1200 	.word	0x007a1200

08003b0c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8003b10:	f7fe fb60 	bl	80021d4 <HAL_GetTick>
 8003b14:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	0692      	lsls	r2, r2, #26
 8003b1c:	d505      	bpl.n	8003b2a <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 8003b1e:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	f042 0210 	orr.w	r2, r2, #16
 8003b26:	605a      	str	r2, [r3, #4]
}
 8003b28:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b2a:	f7fe fb53 	bl	80021d4 <HAL_GetTick>
 8003b2e:	1b40      	subs	r0, r0, r5
 8003b30:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003b34:	d9ef      	bls.n	8003b16 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8003b36:	2003      	movs	r0, #3
 8003b38:	e7f6      	b.n	8003b28 <RTC_EnterInitMode+0x1c>

08003b3a <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b3a:	6802      	ldr	r2, [r0, #0]
{
 8003b3c:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b3e:	6853      	ldr	r3, [r2, #4]
{
 8003b40:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b42:	f023 0310 	bic.w	r3, r3, #16
 8003b46:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 8003b48:	f7fe fb44 	bl	80021d4 <HAL_GetTick>
 8003b4c:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	069b      	lsls	r3, r3, #26
 8003b54:	d501      	bpl.n	8003b5a <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8003b56:	2000      	movs	r0, #0
}
 8003b58:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b5a:	f7fe fb3b 	bl	80021d4 <HAL_GetTick>
 8003b5e:	1b40      	subs	r0, r0, r5
 8003b60:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003b64:	d9f3      	bls.n	8003b4e <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8003b66:	2003      	movs	r0, #3
 8003b68:	e7f6      	b.n	8003b58 <RTC_ExitInitMode+0x1e>

08003b6a <HAL_RTC_WaitForSynchro>:
{
 8003b6a:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	b1a8      	cbz	r0, 8003b9c <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003b70:	6802      	ldr	r2, [r0, #0]
 8003b72:	6853      	ldr	r3, [r2, #4]
 8003b74:	f023 0308 	bic.w	r3, r3, #8
 8003b78:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8003b7a:	f7fe fb2b 	bl	80021d4 <HAL_GetTick>
 8003b7e:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	071b      	lsls	r3, r3, #28
 8003b86:	d501      	bpl.n	8003b8c <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8003b88:	2000      	movs	r0, #0
}
 8003b8a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b8c:	f7fe fb22 	bl	80021d4 <HAL_GetTick>
 8003b90:	1b40      	subs	r0, r0, r5
 8003b92:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003b96:	d9f3      	bls.n	8003b80 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8003b98:	2003      	movs	r0, #3
 8003b9a:	e7f6      	b.n	8003b8a <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	e7f4      	b.n	8003b8a <HAL_RTC_WaitForSynchro+0x20>

08003ba0 <HAL_RTC_Init>:
{
 8003ba0:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	b170      	cbz	r0, 8003bc4 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ba6:	7c43      	ldrb	r3, [r0, #17]
 8003ba8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003bac:	b913      	cbnz	r3, 8003bb4 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8003bae:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8003bb0:	f7fe f9ea 	bl	8001f88 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bb4:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bb6:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bb8:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bba:	f7ff ffd6 	bl	8003b6a <HAL_RTC_WaitForSynchro>
 8003bbe:	b118      	cbz	r0, 8003bc8 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	e036      	b.n	8003c36 <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f7ff ff9f 	bl	8003b0c <RTC_EnterInitMode>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d1f6      	bne.n	8003bc0 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003bd2:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003bd4:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003bd6:	6853      	ldr	r3, [r2, #4]
 8003bd8:	f023 0307 	bic.w	r3, r3, #7
 8003bdc:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003bde:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <HAL_RTC_Init+0x98>)
 8003be0:	b118      	cbz	r0, 8003bea <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003be2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003be4:	f021 0101 	bic.w	r1, r1, #1
 8003be8:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003bea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003bec:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8003bf0:	4303      	orrs	r3, r0
 8003bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003bf4:	6860      	ldr	r0, [r4, #4]
 8003bf6:	1c43      	adds	r3, r0, #1
 8003bf8:	d105      	bne.n	8003c06 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f7ff ff14 	bl	8003a28 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d0dd      	beq.n	8003bc0 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8003c04:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003c06:	6822      	ldr	r2, [r4, #0]
 8003c08:	6893      	ldr	r3, [r2, #8]
 8003c0a:	f023 030f 	bic.w	r3, r3, #15
 8003c0e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003c12:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003c14:	68d3      	ldr	r3, [r2, #12]
 8003c16:	b280      	uxth	r0, r0
 8003c18:	0c1b      	lsrs	r3, r3, #16
 8003c1a:	041b      	lsls	r3, r3, #16
 8003c1c:	4318      	orrs	r0, r3
 8003c1e:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003c20:	4620      	mov	r0, r4
 8003c22:	f7ff ff8a 	bl	8003b3a <RTC_ExitInitMode>
 8003c26:	2301      	movs	r3, #1
 8003c28:	b110      	cbz	r0, 8003c30 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8003c2e:	e7c9      	b.n	8003bc4 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003c30:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003c32:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8003c34:	7463      	strb	r3, [r4, #17]
}
 8003c36:	bd10      	pop	{r4, pc}
 8003c38:	40006c00 	.word	0x40006c00

08003c3c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c3c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d11c      	bne.n	8003c7e <HAL_TIM_Base_Start+0x42>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c46:	4a0f      	ldr	r2, [pc, #60]	; (8003c84 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4c:	6803      	ldr	r3, [r0, #0]
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00a      	beq.n	8003c68 <HAL_TIM_Base_Start+0x2c>
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d007      	beq.n	8003c68 <HAL_TIM_Base_Start+0x2c>
 8003c58:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <HAL_TIM_Base_Start+0x2c>
 8003c60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6e:	2a06      	cmp	r2, #6
 8003c70:	d003      	beq.n	8003c7a <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	f042 0201 	orr.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c7a:	2000      	movs	r0, #0
}
 8003c7c:	4770      	bx	lr
    return HAL_ERROR;
 8003c7e:	2001      	movs	r0, #1
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40012c00 	.word	0x40012c00

08003c88 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c88:	f241 1211 	movw	r2, #4369	; 0x1111
 8003c8c:	6803      	ldr	r3, [r0, #0]
 8003c8e:	6a19      	ldr	r1, [r3, #32]
 8003c90:	4211      	tst	r1, r2
 8003c92:	d108      	bne.n	8003ca6 <HAL_TIM_Base_Stop+0x1e>
 8003c94:	f240 4244 	movw	r2, #1092	; 0x444
 8003c98:	6a19      	ldr	r1, [r3, #32]
 8003c9a:	4211      	tst	r1, r2
 8003c9c:	bf02      	ittt	eq
 8003c9e:	681a      	ldreq	r2, [r3, #0]
 8003ca0:	f022 0201 	biceq.w	r2, r2, #1
 8003ca4:	601a      	streq	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8003cac:	2000      	movs	r0, #0
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003cb4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003cb8:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003cbc:	f893 5042 	ldrb.w	r5, [r3, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003cc0:	f893 4043 	ldrb.w	r4, [r3, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003cc4:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003cc6:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003cc8:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003cca:	b2e4      	uxtb	r4, r4

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003ccc:	b9e1      	cbnz	r1, 8003d08 <HAL_TIM_Encoder_Start_IT+0x58>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cce:	2a01      	cmp	r2, #1
 8003cd0:	d159      	bne.n	8003d86 <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cd2:	2d01      	cmp	r5, #1
 8003cd4:	d159      	bne.n	8003d8a <HAL_TIM_Encoder_Start_IT+0xda>
    {
      return HAL_ERROR;
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ce0:	681a      	ldr	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ce2:	6a11      	ldr	r1, [r2, #32]
 8003ce4:	f021 0101 	bic.w	r1, r1, #1
 8003ce8:	6211      	str	r1, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cea:	6a11      	ldr	r1, [r2, #32]
 8003cec:	f041 0101 	orr.w	r1, r1, #1
 8003cf0:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003cf2:	68d1      	ldr	r1, [r2, #12]
 8003cf4:	f041 0102 	orr.w	r1, r1, #2
  return HAL_OK;
 8003cf8:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cfa:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	6813      	ldr	r3, [r2, #0]
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6013      	str	r3, [r2, #0]
}
 8003d06:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 8003d08:	2904      	cmp	r1, #4
 8003d0a:	d115      	bne.n	8003d38 <HAL_TIM_Encoder_Start_IT+0x88>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d0c:	2801      	cmp	r0, #1
 8003d0e:	d13a      	bne.n	8003d86 <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d10:	2c01      	cmp	r4, #1
 8003d12:	d1f8      	bne.n	8003d06 <HAL_TIM_Encoder_Start_IT+0x56>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d14:	2202      	movs	r2, #2
 8003d16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d1e:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8003d20:	6a11      	ldr	r1, [r2, #32]
 8003d22:	f021 0110 	bic.w	r1, r1, #16
 8003d26:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d28:	6a11      	ldr	r1, [r2, #32]
 8003d2a:	f041 0110 	orr.w	r1, r1, #16
 8003d2e:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d30:	68d1      	ldr	r1, [r2, #12]
 8003d32:	f041 0104 	orr.w	r1, r1, #4
 8003d36:	e7df      	b.n	8003cf8 <HAL_TIM_Encoder_Start_IT+0x48>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d38:	2a01      	cmp	r2, #1
 8003d3a:	d124      	bne.n	8003d86 <HAL_TIM_Encoder_Start_IT+0xd6>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d3c:	2801      	cmp	r0, #1
 8003d3e:	d124      	bne.n	8003d8a <HAL_TIM_Encoder_Start_IT+0xda>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d40:	2d01      	cmp	r5, #1
 8003d42:	d1e0      	bne.n	8003d06 <HAL_TIM_Encoder_Start_IT+0x56>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d44:	2c01      	cmp	r4, #1
 8003d46:	d1de      	bne.n	8003d06 <HAL_TIM_Encoder_Start_IT+0x56>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d48:	2202      	movs	r2, #2
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d5a:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8003d5c:	6a11      	ldr	r1, [r2, #32]
 8003d5e:	f021 0101 	bic.w	r1, r1, #1
 8003d62:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d64:	6a11      	ldr	r1, [r2, #32]
 8003d66:	f041 0101 	orr.w	r1, r1, #1
 8003d6a:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 8003d6c:	6a11      	ldr	r1, [r2, #32]
 8003d6e:	f021 0110 	bic.w	r1, r1, #16
 8003d72:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d74:	6a11      	ldr	r1, [r2, #32]
 8003d76:	f041 0110 	orr.w	r1, r1, #16
 8003d7a:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d7c:	68d1      	ldr	r1, [r2, #12]
 8003d7e:	f041 0102 	orr.w	r1, r1, #2
 8003d82:	60d1      	str	r1, [r2, #12]
 8003d84:	e7d4      	b.n	8003d30 <HAL_TIM_Encoder_Start_IT+0x80>
      return HAL_ERROR;
 8003d86:	2001      	movs	r0, #1
 8003d88:	e7bd      	b.n	8003d06 <HAL_TIM_Encoder_Start_IT+0x56>
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	e7bb      	b.n	8003d06 <HAL_TIM_Encoder_Start_IT+0x56>

08003d8e <HAL_TIM_Encoder_Stop_IT>:
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8003d8e:	6803      	ldr	r3, [r0, #0]
{
 8003d90:	b510      	push	{r4, lr}
  TIMx->CCER &= ~tmp;
 8003d92:	6a1a      	ldr	r2, [r3, #32]
  if (Channel == TIM_CHANNEL_1)
 8003d94:	b9f9      	cbnz	r1, 8003dd6 <HAL_TIM_Encoder_Stop_IT+0x48>
  TIMx->CCER &= ~tmp;
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d9c:	6a1a      	ldr	r2, [r3, #32]
 8003d9e:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	f022 0202 	bic.w	r2, r2, #2
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003da6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8003da8:	f241 1211 	movw	r2, #4369	; 0x1111
 8003dac:	6a1c      	ldr	r4, [r3, #32]
 8003dae:	4214      	tst	r4, r2
 8003db0:	d108      	bne.n	8003dc4 <HAL_TIM_Encoder_Stop_IT+0x36>
 8003db2:	f240 4244 	movw	r2, #1092	; 0x444
 8003db6:	6a1c      	ldr	r4, [r3, #32]
 8003db8:	4214      	tst	r4, r2
 8003dba:	bf02      	ittt	eq
 8003dbc:	681a      	ldreq	r2, [r3, #0]
 8003dbe:	f022 0201 	biceq.w	r2, r2, #1
 8003dc2:	601a      	streq	r2, [r3, #0]
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	b309      	cbz	r1, 8003e0c <HAL_TIM_Encoder_Stop_IT+0x7e>
 8003dc8:	2904      	cmp	r1, #4
 8003dca:	d125      	bne.n	8003e18 <HAL_TIM_Encoder_Stop_IT+0x8a>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003dcc:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dd0:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8003dd4:	e01e      	b.n	8003e14 <HAL_TIM_Encoder_Stop_IT+0x86>
  else if (Channel == TIM_CHANNEL_2)
 8003dd6:	2904      	cmp	r1, #4
 8003dd8:	d108      	bne.n	8003dec <HAL_TIM_Encoder_Stop_IT+0x5e>
  TIMx->CCER &= ~tmp;
 8003dda:	f022 0210 	bic.w	r2, r2, #16
 8003dde:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003de0:	6a1a      	ldr	r2, [r3, #32]
 8003de2:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	f022 0204 	bic.w	r2, r2, #4
 8003dea:	e7dc      	b.n	8003da6 <HAL_TIM_Encoder_Stop_IT+0x18>
  TIMx->CCER &= ~tmp;
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003df2:	6a1a      	ldr	r2, [r3, #32]
 8003df4:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8003df6:	6a1a      	ldr	r2, [r3, #32]
 8003df8:	f022 0210 	bic.w	r2, r2, #16
 8003dfc:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	f022 0202 	bic.w	r2, r2, #2
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	e7eb      	b.n	8003de4 <HAL_TIM_Encoder_Stop_IT+0x56>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e0c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e10:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
}
 8003e14:	2000      	movs	r0, #0
 8003e16:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8003e24:	e7d4      	b.n	8003dd0 <HAL_TIM_Encoder_Stop_IT+0x42>

08003e26 <HAL_TIM_PeriodElapsedCallback>:
 8003e26:	4770      	bx	lr

08003e28 <HAL_TIM_OC_DelayElapsedCallback>:
 8003e28:	4770      	bx	lr

08003e2a <HAL_TIM_PWM_PulseFinishedCallback>:
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIM_TriggerCallback>:
 8003e2c:	4770      	bx	lr

08003e2e <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e2e:	6803      	ldr	r3, [r0, #0]
{
 8003e30:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e32:	691a      	ldr	r2, [r3, #16]
{
 8003e34:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e36:	0791      	lsls	r1, r2, #30
 8003e38:	d50e      	bpl.n	8003e58 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	0792      	lsls	r2, r2, #30
 8003e3e:	d50b      	bpl.n	8003e58 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e40:	f06f 0202 	mvn.w	r2, #2
 8003e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e46:	2201      	movs	r2, #1
 8003e48:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	079b      	lsls	r3, r3, #30
 8003e4e:	d077      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003e50:	f000 fbe6 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e54:	2300      	movs	r3, #0
 8003e56:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	0750      	lsls	r0, r2, #29
 8003e5e:	d510      	bpl.n	8003e82 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	0751      	lsls	r1, r2, #29
 8003e64:	d50d      	bpl.n	8003e82 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e66:	f06f 0204 	mvn.w	r2, #4
 8003e6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e70:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8003e72:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e74:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003e78:	d068      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	f000 fbd1 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	0712      	lsls	r2, r2, #28
 8003e88:	d50f      	bpl.n	8003eaa <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	0710      	lsls	r0, r2, #28
 8003e8e:	d50c      	bpl.n	8003eaa <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e90:	f06f 0208 	mvn.w	r2, #8
 8003e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e96:	2204      	movs	r2, #4
 8003e98:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e9a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e9e:	0799      	lsls	r1, r3, #30
 8003ea0:	d05a      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea2:	f000 fbbd 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	06d2      	lsls	r2, r2, #27
 8003eb0:	d510      	bpl.n	8003ed4 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	06d0      	lsls	r0, r2, #27
 8003eb6:	d50d      	bpl.n	8003ed4 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eb8:	f06f 0210 	mvn.w	r2, #16
 8003ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ec2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ec6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003eca:	d04b      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ecc:	f000 fba8 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	07d1      	lsls	r1, r2, #31
 8003eda:	d508      	bpl.n	8003eee <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	07d2      	lsls	r2, r2, #31
 8003ee0:	d505      	bpl.n	8003eee <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ee2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ee6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ee8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eea:	f7ff ff9c 	bl	8003e26 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	0610      	lsls	r0, r2, #24
 8003ef4:	d508      	bpl.n	8003f08 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	0611      	lsls	r1, r2, #24
 8003efa:	d505      	bpl.n	8003f08 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003efc:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003f00:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f02:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003f04:	f000 f9bd 	bl	8004282 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	0652      	lsls	r2, r2, #25
 8003f0e:	d508      	bpl.n	8003f22 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	0650      	lsls	r0, r2, #25
 8003f14:	d505      	bpl.n	8003f22 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f16:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8003f1a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f1c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003f1e:	f7ff ff85 	bl	8003e2c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	0691      	lsls	r1, r2, #26
 8003f28:	d522      	bpl.n	8003f70 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	0692      	lsls	r2, r2, #26
 8003f2e:	d51f      	bpl.n	8003f70 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f30:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003f34:	4620      	mov	r0, r4
}
 8003f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f3a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003f3c:	f000 b9a0 	b.w	8004280 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f40:	f7ff ff72 	bl	8003e28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f44:	4620      	mov	r0, r4
 8003f46:	f7ff ff70 	bl	8003e2a <HAL_TIM_PWM_PulseFinishedCallback>
 8003f4a:	e783      	b.n	8003e54 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4c:	f7ff ff6c 	bl	8003e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f50:	4620      	mov	r0, r4
 8003f52:	f7ff ff6a 	bl	8003e2a <HAL_TIM_PWM_PulseFinishedCallback>
 8003f56:	e792      	b.n	8003e7e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f58:	f7ff ff66 	bl	8003e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f7ff ff64 	bl	8003e2a <HAL_TIM_PWM_PulseFinishedCallback>
 8003f62:	e7a0      	b.n	8003ea6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f64:	f7ff ff60 	bl	8003e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	4620      	mov	r0, r4
 8003f6a:	f7ff ff5e 	bl	8003e2a <HAL_TIM_PWM_PulseFinishedCallback>
 8003f6e:	e7af      	b.n	8003ed0 <HAL_TIM_IRQHandler+0xa2>
}
 8003f70:	bd10      	pop	{r4, pc}
	...

08003f74 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f74:	4a1a      	ldr	r2, [pc, #104]	; (8003fe0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003f76:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f78:	4290      	cmp	r0, r2
 8003f7a:	d00a      	beq.n	8003f92 <TIM_Base_SetConfig+0x1e>
 8003f7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003f80:	d007      	beq.n	8003f92 <TIM_Base_SetConfig+0x1e>
 8003f82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f86:	4290      	cmp	r0, r2
 8003f88:	d003      	beq.n	8003f92 <TIM_Base_SetConfig+0x1e>
 8003f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f8e:	4290      	cmp	r0, r2
 8003f90:	d115      	bne.n	8003fbe <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8003f92:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f98:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f9a:	4a11      	ldr	r2, [pc, #68]	; (8003fe0 <TIM_Base_SetConfig+0x6c>)
 8003f9c:	4290      	cmp	r0, r2
 8003f9e:	d00a      	beq.n	8003fb6 <TIM_Base_SetConfig+0x42>
 8003fa0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003fa4:	d007      	beq.n	8003fb6 <TIM_Base_SetConfig+0x42>
 8003fa6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003faa:	4290      	cmp	r0, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_Base_SetConfig+0x42>
 8003fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fb2:	4290      	cmp	r0, r2
 8003fb4:	d103      	bne.n	8003fbe <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fbc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fbe:	694a      	ldr	r2, [r1, #20]
 8003fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003fc6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc8:	688b      	ldr	r3, [r1, #8]
 8003fca:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003fcc:	680b      	ldr	r3, [r1, #0]
 8003fce:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <TIM_Base_SetConfig+0x6c>)
 8003fd2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd4:	bf04      	itt	eq
 8003fd6:	690b      	ldreq	r3, [r1, #16]
 8003fd8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	6143      	str	r3, [r0, #20]
}
 8003fde:	4770      	bx	lr
 8003fe0:	40012c00 	.word	0x40012c00

08003fe4 <HAL_TIM_Base_Init>:
{
 8003fe4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	b330      	cbz	r0, 8004038 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ff2:	b91b      	cbnz	r3, 8003ffc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003ff4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003ff8:	f7fd ffe4 	bl	8001fc4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffe:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004004:	1d21      	adds	r1, r4, #4
 8004006:	f7ff ffb5 	bl	8003f74 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800400a:	2301      	movs	r3, #1
  return HAL_OK;
 800400c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800400e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004012:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004016:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800401a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800401e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004022:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800402a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800402e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004032:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004036:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004038:	2001      	movs	r0, #1
 800403a:	e7fc      	b.n	8004036 <HAL_TIM_Base_Init+0x52>

0800403c <HAL_TIM_Encoder_Init>:
{
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	460d      	mov	r5, r1
  if (htim == NULL)
 8004040:	4604      	mov	r4, r0
 8004042:	2800      	cmp	r0, #0
 8004044:	d04d      	beq.n	80040e2 <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004046:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800404a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800404e:	b91b      	cbnz	r3, 8004058 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8004050:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8004054:	f7fd ffca 	bl	8001fec <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800405a:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004060:	f851 0b04 	ldr.w	r0, [r1], #4
 8004064:	6883      	ldr	r3, [r0, #8]
 8004066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800406a:	f023 0307 	bic.w	r3, r3, #7
 800406e:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004070:	f7ff ff80 	bl	8003f74 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8004074:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8004076:	682a      	ldr	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004078:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800407a:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800407c:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 800407e:	4316      	orrs	r6, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004080:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004086:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800408a:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800408e:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004090:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004094:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004096:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800409e:	68e9      	ldr	r1, [r5, #12]
  tmpccer = htim->Instance->CCER;
 80040a0:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80040a2:	430b      	orrs	r3, r1
 80040a4:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80040a6:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80040aa:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80040ae:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040b0:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80040b2:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040b6:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 80040b8:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040ba:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 80040be:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040c0:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c2:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80040c4:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 80040c6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80040e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80040e2:	2001      	movs	r0, #1
 80040e4:	e7fc      	b.n	80040e0 <HAL_TIM_Encoder_Init+0xa4>

080040e6 <TIM_ETR_SetConfig>:
{
 80040e6:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 80040e8:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040ea:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ec:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040f0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80040f4:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80040f6:	6082      	str	r2, [r0, #8]
}
 80040f8:	bd10      	pop	{r4, pc}

080040fa <HAL_TIM_ConfigClockSource>:
{
 80040fa:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80040fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004100:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004102:	2b01      	cmp	r3, #1
 8004104:	f04f 0002 	mov.w	r0, #2
 8004108:	d027      	beq.n	800415a <HAL_TIM_ConfigClockSource+0x60>
 800410a:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004110:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8004112:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004116:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004118:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800411c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004120:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004122:	680b      	ldr	r3, [r1, #0]
 8004124:	2b60      	cmp	r3, #96	; 0x60
 8004126:	d04d      	beq.n	80041c4 <HAL_TIM_ConfigClockSource+0xca>
 8004128:	d832      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x96>
 800412a:	2b40      	cmp	r3, #64	; 0x40
 800412c:	d062      	beq.n	80041f4 <HAL_TIM_ConfigClockSource+0xfa>
 800412e:	d815      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x62>
 8004130:	2b20      	cmp	r3, #32
 8004132:	d003      	beq.n	800413c <HAL_TIM_ConfigClockSource+0x42>
 8004134:	d809      	bhi.n	800414a <HAL_TIM_ConfigClockSource+0x50>
 8004136:	f033 0210 	bics.w	r2, r3, #16
 800413a:	d108      	bne.n	800414e <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 800413c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800413e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004142:	4313      	orrs	r3, r2
 8004144:	f043 0307 	orr.w	r3, r3, #7
 8004148:	e020      	b.n	800418c <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800414a:	2b30      	cmp	r3, #48	; 0x30
 800414c:	d0f6      	beq.n	800413c <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 800414e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004150:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004152:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004156:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800415a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800415c:	2b50      	cmp	r3, #80	; 0x50
 800415e:	d1f6      	bne.n	800414e <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004160:	684a      	ldr	r2, [r1, #4]
 8004162:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004164:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004166:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004168:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416c:	f025 0501 	bic.w	r5, r5, #1
 8004170:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004172:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8004174:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800417a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800417e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004180:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004182:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004188:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800418c:	6083      	str	r3, [r0, #8]
}
 800418e:	e7de      	b.n	800414e <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 8004190:	2b70      	cmp	r3, #112	; 0x70
 8004192:	d00c      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0xb4>
 8004194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004198:	d1d9      	bne.n	800414e <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 800419a:	68cb      	ldr	r3, [r1, #12]
 800419c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80041a0:	f7ff ffa1 	bl	80040e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041a4:	6822      	ldr	r2, [r4, #0]
 80041a6:	6893      	ldr	r3, [r2, #8]
 80041a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041ac:	e008      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80041ae:	68cb      	ldr	r3, [r1, #12]
 80041b0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80041b4:	f7ff ff97 	bl	80040e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041b8:	6822      	ldr	r2, [r4, #0]
 80041ba:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041c0:	6093      	str	r3, [r2, #8]
      break;
 80041c2:	e7c4      	b.n	800414e <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041c4:	684d      	ldr	r5, [r1, #4]
 80041c6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c8:	6a01      	ldr	r1, [r0, #32]
 80041ca:	f021 0110 	bic.w	r1, r1, #16
 80041ce:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d0:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80041d2:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041d4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80041dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041e0:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80041e4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80041e6:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80041e8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ee:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80041f2:	e7cb      	b.n	800418c <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f4:	684a      	ldr	r2, [r1, #4]
 80041f6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80041f8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fa:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041fc:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004200:	f025 0501 	bic.w	r5, r5, #1
 8004204:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004206:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8004208:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800420a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800420e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004212:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004214:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004216:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800421c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004220:	e7b4      	b.n	800418c <HAL_TIM_ConfigClockSource+0x92>
	...

08004224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004224:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004226:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800422a:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800422c:	2b01      	cmp	r3, #1
 800422e:	f04f 0002 	mov.w	r0, #2
 8004232:	d022      	beq.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004234:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004236:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800423a:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800423c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800423e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004242:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8004244:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004246:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004248:	4c0c      	ldr	r4, [pc, #48]	; (800427c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800424a:	42a3      	cmp	r3, r4
 800424c:	d00a      	beq.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800424e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004252:	d007      	beq.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004254:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8004258:	42a3      	cmp	r3, r4
 800425a:	d003      	beq.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800425c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004260:	42a3      	cmp	r3, r4
 8004262:	d104      	bne.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004264:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004266:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800426a:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800426c:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800426e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004270:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004272:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004276:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 800427a:	bd30      	pop	{r4, r5, pc}
 800427c:	40012c00 	.word	0x40012c00

08004280 <HAL_TIMEx_CommutCallback>:
 8004280:	4770      	bx	lr

08004282 <HAL_TIMEx_BreakCallback>:
 8004282:	4770      	bx	lr

08004284 <DHT_Set_Pin_Input>:
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
}

static void DHT_Set_Pin_Input(DHT_HandleTypeDef* p_DHT){
 8004284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004286:	2300      	movs	r3, #0
 8004288:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800428c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 800428e:	8903      	ldrh	r3, [r0, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8004290:	4669      	mov	r1, sp
 8004292:	6840      	ldr	r0, [r0, #4]
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 8004294:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 8004296:	f7fe fb7f 	bl	8002998 <HAL_GPIO_Init>
}
 800429a:	b005      	add	sp, #20
 800429c:	f85d fb04 	ldr.w	pc, [sp], #4

080042a0 <DHT_Init>:
}

void DHT_Init(DHT_HandleTypeDef* p_DHT, uint8_t p_sensor_type, GPIO_TypeDef* p_Port, uint16_t p_Pin){
	p_DHT->sensor_type = p_sensor_type;
	p_DHT->DHT_Port = p_Port;
	p_DHT->DHT_Pin = p_Pin;
 80042a0:	8103      	strh	r3, [r0, #8]
	p_DHT->temperature = 0.0;
 80042a2:	2300      	movs	r3, #0
	p_DHT->sensor_type = p_sensor_type;
 80042a4:	7001      	strb	r1, [r0, #0]
	p_DHT->DHT_Port = p_Port;
 80042a6:	6042      	str	r2, [r0, #4]
	p_DHT->temperature = 0.0;
 80042a8:	60c3      	str	r3, [r0, #12]
	p_DHT->huminity = 0.0;
 80042aa:	6103      	str	r3, [r0, #16]
}
 80042ac:	4770      	bx	lr

080042ae <DHT_Read_Value>:

uint8_t DHT_Read_Value(DHT_HandleTypeDef* p_DHT){
 80042ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 80042b2:	8903      	ldrh	r3, [r0, #8]
uint8_t DHT_Read_Value(DHT_HandleTypeDef* p_DHT){
 80042b4:	b087      	sub	sp, #28
 80042b6:	4604      	mov	r4, r0
	uint8_t t_data[5] = {};
 80042b8:	2500      	movs	r5, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ba:	2601      	movs	r6, #1
	GPIO_InitStruct.Pin = p_DHT->DHT_Pin;
 80042bc:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042be:	2302      	movs	r3, #2
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 80042c0:	6840      	ldr	r0, [r0, #4]
 80042c2:	a902      	add	r1, sp, #8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c4:	9305      	str	r3, [sp, #20]
	uint8_t t_data[5] = {};
 80042c6:	9500      	str	r5, [sp, #0]
 80042c8:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042cc:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ce:	9603      	str	r6, [sp, #12]
	HAL_GPIO_Init(p_DHT->DHT_Port, &GPIO_InitStruct);
 80042d0:	f7fe fb62 	bl	8002998 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(p_DHT->DHT_Port, p_DHT->DHT_Pin, 0);
 80042d4:	8921      	ldrh	r1, [r4, #8]
 80042d6:	462a      	mov	r2, r5
 80042d8:	6860      	ldr	r0, [r4, #4]
 80042da:	f7fe fc3d 	bl	8002b58 <HAL_GPIO_WritePin>
	DELAY_US_Run((p_DHT->sensor_type == DHT11) ? DHT11_STARTTIME : DHT22_STARTTIME);
 80042de:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80042e2:	f244 6250 	movw	r2, #18000	; 0x4650
 80042e6:	7820      	ldrb	r0, [r4, #0]
 80042e8:	42a8      	cmp	r0, r5
 80042ea:	bf0c      	ite	eq
 80042ec:	4610      	moveq	r0, r2
 80042ee:	4618      	movne	r0, r3
 80042f0:	f000 f96a 	bl	80045c8 <DELAY_US_Run>
	HAL_GPIO_WritePin(p_DHT->DHT_Port, p_DHT->DHT_Pin, 1);
 80042f4:	8921      	ldrh	r1, [r4, #8]
 80042f6:	4632      	mov	r2, r6
 80042f8:	6860      	ldr	r0, [r4, #4]
 80042fa:	f7fe fc2d 	bl	8002b58 <HAL_GPIO_WritePin>
	DHT_Set_Pin_Input(p_DHT);
 80042fe:	4620      	mov	r0, r4
 8004300:	f7ff ffc0 	bl	8004284 <DHT_Set_Pin_Input>
	DELAY_US_Run(40);
 8004304:	2028      	movs	r0, #40	; 0x28
 8004306:	f000 f95f 	bl	80045c8 <DELAY_US_Run>
	if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 800430a:	8921      	ldrh	r1, [r4, #8]
 800430c:	6860      	ldr	r0, [r4, #4]
 800430e:	f7fe fc1d 	bl	8002b4c <HAL_GPIO_ReadPin>
 8004312:	b118      	cbz	r0, 800431c <DHT_Read_Value+0x6e>
	DHT_Start(p_DHT);
	if(DHT_Check_Response(p_DHT) == DHT_FAIL)
		return DHT_FAIL;
 8004314:	2000      	movs	r0, #0
		p_DHT->temperature = t_data[2] / 1.0;
	else
		return DHT_FAIL;

	return DHT_OK;
}
 8004316:	b007      	add	sp, #28
 8004318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		DELAY_US_Run(80);
 800431c:	2050      	movs	r0, #80	; 0x50
 800431e:	f000 f953 	bl	80045c8 <DELAY_US_Run>
		if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8004322:	8921      	ldrh	r1, [r4, #8]
 8004324:	6860      	ldr	r0, [r4, #4]
 8004326:	f7fe fc11 	bl	8002b4c <HAL_GPIO_ReadPin>
 800432a:	2800      	cmp	r0, #0
 800432c:	d0f2      	beq.n	8004314 <DHT_Read_Value+0x66>
	uint32_t timer_out = HAL_GetTick();
 800432e:	f7fd ff51 	bl	80021d4 <HAL_GetTick>
 8004332:	4606      	mov	r6, r0
	while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8004334:	8921      	ldrh	r1, [r4, #8]
 8004336:	6860      	ldr	r0, [r4, #4]
 8004338:	f7fe fc08 	bl	8002b4c <HAL_GPIO_ReadPin>
 800433c:	4605      	mov	r5, r0
 800433e:	b930      	cbnz	r0, 800434e <DHT_Read_Value+0xa0>
	DHT_Set_Pin_Input(p_DHT);
 8004340:	4620      	mov	r0, r4
 8004342:	f7ff ff9f 	bl	8004284 <DHT_Set_Pin_Input>
	for(int i = 0; i < 5; i++){
 8004346:	466e      	mov	r6, sp
				*(p_data + i) &= ~(1 << (7-j));
 8004348:	f04f 0801 	mov.w	r8, #1
 800434c:	e02c      	b.n	80043a8 <DHT_Read_Value+0xfa>
		if(HAL_GetTick() - timer_out > TIME_OUT){
 800434e:	f7fd ff41 	bl	80021d4 <HAL_GetTick>
 8004352:	1b80      	subs	r0, r0, r6
 8004354:	280a      	cmp	r0, #10
 8004356:	d9ed      	bls.n	8004334 <DHT_Read_Value+0x86>
 8004358:	e7dc      	b.n	8004314 <DHT_Read_Value+0x66>
			uint32_t timer_out = HAL_GetTick();
 800435a:	f7fd ff3b 	bl	80021d4 <HAL_GetTick>
 800435e:	4681      	mov	r9, r0
			while(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8004360:	8921      	ldrh	r1, [r4, #8]
 8004362:	6860      	ldr	r0, [r4, #4]
 8004364:	f7fe fbf2 	bl	8002b4c <HAL_GPIO_ReadPin>
 8004368:	b300      	cbz	r0, 80043ac <DHT_Read_Value+0xfe>
			DELAY_US_Run(40);
 800436a:	2028      	movs	r0, #40	; 0x28
 800436c:	f000 f92c 	bl	80045c8 <DELAY_US_Run>
			if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin))
 8004370:	8921      	ldrh	r1, [r4, #8]
 8004372:	6860      	ldr	r0, [r4, #4]
 8004374:	f7fe fbea 	bl	8002b4c <HAL_GPIO_ReadPin>
				*(p_data + i) &= ~(1 << (7-j));
 8004378:	fa08 f207 	lsl.w	r2, r8, r7
 800437c:	f996 3000 	ldrsb.w	r3, [r6]
 8004380:	b252      	sxtb	r2, r2
			if(!HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin))
 8004382:	b9d0      	cbnz	r0, 80043ba <DHT_Read_Value+0x10c>
				*(p_data + i) &= ~(1 << (7-j));
 8004384:	ea23 0302 	bic.w	r3, r3, r2
				*(p_data + i) |= (1 << (7-j));
 8004388:	7033      	strb	r3, [r6, #0]
			timer_out = HAL_GetTick();
 800438a:	f7fd ff23 	bl	80021d4 <HAL_GetTick>
 800438e:	4681      	mov	r9, r0
			while(HAL_GPIO_ReadPin(p_DHT->DHT_Port, p_DHT->DHT_Pin)){
 8004390:	8921      	ldrh	r1, [r4, #8]
 8004392:	6860      	ldr	r0, [r4, #4]
 8004394:	f7fe fbda 	bl	8002b4c <HAL_GPIO_ReadPin>
 8004398:	b988      	cbnz	r0, 80043be <DHT_Read_Value+0x110>
		for(int j = 0; j < 8; j++)
 800439a:	3f01      	subs	r7, #1
 800439c:	d2dd      	bcs.n	800435a <DHT_Read_Value+0xac>
	for(int i = 0; i < 5; i++){
 800439e:	3501      	adds	r5, #1
 80043a0:	2d05      	cmp	r5, #5
 80043a2:	f106 0601 	add.w	r6, r6, #1
 80043a6:	d011      	beq.n	80043cc <DHT_Read_Value+0x11e>
	DELAY_US_Run((p_DHT->sensor_type == DHT11) ? DHT11_STARTTIME : DHT22_STARTTIME);
 80043a8:	2707      	movs	r7, #7
 80043aa:	e7d6      	b.n	800435a <DHT_Read_Value+0xac>
				if(HAL_GetTick() - timer_out > TIME_OUT){
 80043ac:	f7fd ff12 	bl	80021d4 <HAL_GetTick>
 80043b0:	eba0 0009 	sub.w	r0, r0, r9
 80043b4:	280a      	cmp	r0, #10
 80043b6:	d9d3      	bls.n	8004360 <DHT_Read_Value+0xb2>
 80043b8:	e7ac      	b.n	8004314 <DHT_Read_Value+0x66>
				*(p_data + i) |= (1 << (7-j));
 80043ba:	4313      	orrs	r3, r2
 80043bc:	e7e4      	b.n	8004388 <DHT_Read_Value+0xda>
				if(HAL_GetTick() - timer_out > TIME_OUT){
 80043be:	f7fd ff09 	bl	80021d4 <HAL_GetTick>
 80043c2:	eba0 0009 	sub.w	r0, r0, r9
 80043c6:	280a      	cmp	r0, #10
 80043c8:	d9e2      	bls.n	8004390 <DHT_Read_Value+0xe2>
 80043ca:	e7a3      	b.n	8004314 <DHT_Read_Value+0x66>
	if(((t_data[0] + t_data[1] + t_data[2] + t_data[3]) & 0xFF) != t_data[4])
 80043cc:	f89d 0000 	ldrb.w	r0, [sp]
 80043d0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80043d4:	f89d 5002 	ldrb.w	r5, [sp, #2]
 80043d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80043dc:	4403      	add	r3, r0
 80043de:	442b      	add	r3, r5
 80043e0:	4413      	add	r3, r2
 80043e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d193      	bne.n	8004314 <DHT_Read_Value+0x66>
	if(t_data[0] < 100 && t_data[0] > 0)
 80043ec:	1e43      	subs	r3, r0, #1
 80043ee:	2b62      	cmp	r3, #98	; 0x62
 80043f0:	d890      	bhi.n	8004314 <DHT_Read_Value+0x66>
		p_DHT->huminity = t_data[0] / 1.0;
 80043f2:	f7fc f931 	bl	8000658 <__aeabi_i2d>
 80043f6:	f7fc f9b9 	bl	800076c <__aeabi_d2f>
	if(t_data[2] < 100 && t_data[2] > 0)
 80043fa:	1e6b      	subs	r3, r5, #1
 80043fc:	2b62      	cmp	r3, #98	; 0x62
		p_DHT->huminity = t_data[0] / 1.0;
 80043fe:	6120      	str	r0, [r4, #16]
	if(t_data[2] < 100 && t_data[2] > 0)
 8004400:	d888      	bhi.n	8004314 <DHT_Read_Value+0x66>
		p_DHT->temperature = t_data[2] / 1.0;
 8004402:	4628      	mov	r0, r5
 8004404:	f7fc f928 	bl	8000658 <__aeabi_i2d>
 8004408:	f7fc f9b0 	bl	800076c <__aeabi_d2f>
 800440c:	60e0      	str	r0, [r4, #12]
	return DHT_OK;
 800440e:	2001      	movs	r0, #1
 8004410:	e781      	b.n	8004316 <DHT_Read_Value+0x68>

08004412 <DS3231_Init>:
static uint8_t DEC_To_BCD(uint8_t p_DEC_value){
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
}

void DS3231_Init(DS3231_HandleTypeDef *p_ds3231, I2C_HandleTypeDef *p_hi2c){
	p_ds3231->hi2c = p_hi2c;
 8004412:	6081      	str	r1, [r0, #8]
}
 8004414:	4770      	bx	lr

08004416 <DS3231_Set_Time>:

void DS3231_Set_Time(DS3231_HandleTypeDef *p_ds3231, uint8_t p_hour, uint8_t p_minute, uint8_t p_second, uint8_t p_day){
 8004416:	b570      	push	{r4, r5, r6, lr}
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8004418:	240a      	movs	r4, #10
 800441a:	fbb3 f6f4 	udiv	r6, r3, r4
 800441e:	fb04 3316 	mls	r3, r4, r6, r3
void DS3231_Set_Time(DS3231_HandleTypeDef *p_ds3231, uint8_t p_hour, uint8_t p_minute, uint8_t p_second, uint8_t p_day){
 8004422:	b086      	sub	sp, #24
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8004424:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	uint8_t t_i2c_buffer[4];
	t_i2c_buffer[0] = DEC_To_BCD(p_second);
 8004428:	f88d 3014 	strb.w	r3, [sp, #20]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 800442c:	fbb2 f3f4 	udiv	r3, r2, r4
 8004430:	fb04 2213 	mls	r2, r4, r3, r2
 8004434:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 8004438:	fbb1 f3f4 	udiv	r3, r1, r4
 800443c:	fb04 1113 	mls	r1, r4, r3, r1
void DS3231_Set_Time(DS3231_HandleTypeDef *p_ds3231, uint8_t p_hour, uint8_t p_minute, uint8_t p_second, uint8_t p_day){
 8004440:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8004444:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
 8004448:	fbb5 f3f4 	udiv	r3, r5, r4
 800444c:	fb04 5513 	mls	r5, r4, r3, r5
	t_i2c_buffer[1] = DEC_To_BCD(p_minute);
 8004450:	f88d 2015 	strb.w	r2, [sp, #21]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8004454:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
	t_i2c_buffer[2] = DEC_To_BCD(p_hour) & (~USING_12_HOURS_TIME);
	t_i2c_buffer[3] = DEC_To_BCD(p_day);
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000);
 8004458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800445c:	2304      	movs	r3, #4
 800445e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004462:	ab05      	add	r3, sp, #20
 8004464:	9300      	str	r3, [sp, #0]
	t_i2c_buffer[2] = DEC_To_BCD(p_hour) & (~USING_12_HOURS_TIME);
 8004466:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800446a:	f88d 1016 	strb.w	r1, [sp, #22]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000);
 800446e:	2301      	movs	r3, #1
 8004470:	2200      	movs	r2, #0
 8004472:	21d0      	movs	r1, #208	; 0xd0
 8004474:	6880      	ldr	r0, [r0, #8]
	t_i2c_buffer[3] = DEC_To_BCD(p_day);
 8004476:	f88d 5017 	strb.w	r5, [sp, #23]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000);
 800447a:	f7fe fdf5 	bl	8003068 <HAL_I2C_Mem_Write>
}
 800447e:	b006      	add	sp, #24
 8004480:	bd70      	pop	{r4, r5, r6, pc}

08004482 <DS3231_Get_Time>:

uint8_t DS3231_Get_Time(DS3231_HandleTypeDef *p_ds3231){
	uint8_t t_i2c_buffer[4];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000) != HAL_OK){
 8004482:	2304      	movs	r3, #4
 8004484:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
uint8_t DS3231_Get_Time(DS3231_HandleTypeDef *p_ds3231){
 8004488:	b510      	push	{r4, lr}
 800448a:	b086      	sub	sp, #24
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000) != HAL_OK){
 800448c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004490:	ab05      	add	r3, sp, #20
 8004492:	9300      	str	r3, [sp, #0]
uint8_t DS3231_Get_Time(DS3231_HandleTypeDef *p_ds3231){
 8004494:	4604      	mov	r4, r0
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000) != HAL_OK){
 8004496:	2301      	movs	r3, #1
 8004498:	2200      	movs	r2, #0
 800449a:	21d0      	movs	r1, #208	; 0xd0
 800449c:	6880      	ldr	r0, [r0, #8]
 800449e:	f7fe fe73 	bl	8003188 <HAL_I2C_Mem_Read>
 80044a2:	bb50      	cbnz	r0, 80044fa <DS3231_Get_Time+0x78>
	}
	p_ds3231->current_second = BCD_To_DEC(t_i2c_buffer[0]);
	p_ds3231->current_minute = BCD_To_DEC(t_i2c_buffer[1]);
	p_ds3231->current_hour = BCD_To_DEC(t_i2c_buffer[2]);
	p_ds3231->current_day = BCD_To_DEC(t_i2c_buffer[3]);
	return DS3231_OK;
 80044a4:	2001      	movs	r0, #1
	p_ds3231->current_second = BCD_To_DEC(t_i2c_buffer[0]);
 80044a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 80044aa:	091a      	lsrs	r2, r3, #4
 80044ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_second = BCD_To_DEC(t_i2c_buffer[0]);
 80044b8:	70a3      	strb	r3, [r4, #2]
	p_ds3231->current_minute = BCD_To_DEC(t_i2c_buffer[1]);
 80044ba:	f89d 3015 	ldrb.w	r3, [sp, #21]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 80044be:	091a      	lsrs	r2, r3, #4
 80044c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_minute = BCD_To_DEC(t_i2c_buffer[1]);
 80044cc:	7063      	strb	r3, [r4, #1]
	p_ds3231->current_hour = BCD_To_DEC(t_i2c_buffer[2]);
 80044ce:	f89d 3016 	ldrb.w	r3, [sp, #22]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 80044d2:	091a      	lsrs	r2, r3, #4
 80044d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_hour = BCD_To_DEC(t_i2c_buffer[2]);
 80044e0:	7023      	strb	r3, [r4, #0]
	p_ds3231->current_day = BCD_To_DEC(t_i2c_buffer[3]);
 80044e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 80044e6:	091a      	lsrs	r2, r3, #4
 80044e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_day = BCD_To_DEC(t_i2c_buffer[3]);
 80044f4:	70e3      	strb	r3, [r4, #3]
}
 80044f6:	b006      	add	sp, #24
 80044f8:	bd10      	pop	{r4, pc}
		return DS3231_FAIL;
 80044fa:	2000      	movs	r0, #0
 80044fc:	e7fb      	b.n	80044f6 <DS3231_Get_Time+0x74>

080044fe <DS3231_Set_Date>:

void DS3231_Set_Date(DS3231_HandleTypeDef *p_ds3231, uint8_t p_date, uint8_t p_month, uint8_t p_year){
 80044fe:	b530      	push	{r4, r5, lr}
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8004500:	240a      	movs	r4, #10
 8004502:	fbb1 f5f4 	udiv	r5, r1, r4
 8004506:	fb04 1115 	mls	r1, r4, r5, r1
void DS3231_Set_Date(DS3231_HandleTypeDef *p_ds3231, uint8_t p_date, uint8_t p_month, uint8_t p_year){
 800450a:	b087      	sub	sp, #28
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 800450c:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
	uint8_t t_i2c_buffer[3];
	t_i2c_buffer[0] = DEC_To_BCD(p_date);
 8004510:	f88d 1014 	strb.w	r1, [sp, #20]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8004514:	fbb2 f1f4 	udiv	r1, r2, r4
 8004518:	fb04 2211 	mls	r2, r4, r1, r2
 800451c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
	t_i2c_buffer[1] = DEC_To_BCD(p_month);
 8004520:	f88d 2015 	strb.w	r2, [sp, #21]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8004524:	fbb3 f2f4 	udiv	r2, r3, r4
 8004528:	fb04 3312 	mls	r3, r4, r2, r3
 800452c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
	t_i2c_buffer[2] = DEC_To_BCD(p_year);
 8004530:	f88d 3016 	strb.w	r3, [sp, #22]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000);
 8004534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004538:	2303      	movs	r3, #3
 800453a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800453e:	ab05      	add	r3, sp, #20
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	2204      	movs	r2, #4
 8004544:	2301      	movs	r3, #1
 8004546:	21d0      	movs	r1, #208	; 0xd0
 8004548:	6880      	ldr	r0, [r0, #8]
 800454a:	f7fe fd8d 	bl	8003068 <HAL_I2C_Mem_Write>
}
 800454e:	b007      	add	sp, #28
 8004550:	bd30      	pop	{r4, r5, pc}

08004552 <DS3231_Get_Date>:

uint8_t DS3231_Get_Date(DS3231_HandleTypeDef *p_ds3231){
	uint8_t t_i2c_buffer[3];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000) != HAL_OK){
 8004552:	2303      	movs	r3, #3
 8004554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
uint8_t DS3231_Get_Date(DS3231_HandleTypeDef *p_ds3231){
 8004558:	b510      	push	{r4, lr}
 800455a:	b086      	sub	sp, #24
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000) != HAL_OK){
 800455c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004560:	ab05      	add	r3, sp, #20
 8004562:	9300      	str	r3, [sp, #0]
uint8_t DS3231_Get_Date(DS3231_HandleTypeDef *p_ds3231){
 8004564:	4604      	mov	r4, r0
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000) != HAL_OK){
 8004566:	2301      	movs	r3, #1
 8004568:	2204      	movs	r2, #4
 800456a:	21d0      	movs	r1, #208	; 0xd0
 800456c:	6880      	ldr	r0, [r0, #8]
 800456e:	f7fe fe0b 	bl	8003188 <HAL_I2C_Mem_Read>
 8004572:	bb08      	cbnz	r0, 80045b8 <DS3231_Get_Date+0x66>
		return DS3231_FAIL;
	}
	p_ds3231->current_date = BCD_To_DEC(t_i2c_buffer[0]);
	p_ds3231->current_month = BCD_To_DEC(t_i2c_buffer[1]);
	p_ds3231->current_year = BCD_To_DEC(t_i2c_buffer[2]);
	return DS3231_OK;
 8004574:	2001      	movs	r0, #1
	p_ds3231->current_date = BCD_To_DEC(t_i2c_buffer[0]);
 8004576:	f89d 3014 	ldrb.w	r3, [sp, #20]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 800457a:	091a      	lsrs	r2, r3, #4
 800457c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_date = BCD_To_DEC(t_i2c_buffer[0]);
 8004588:	7123      	strb	r3, [r4, #4]
	p_ds3231->current_month = BCD_To_DEC(t_i2c_buffer[1]);
 800458a:	f89d 3015 	ldrb.w	r3, [sp, #21]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 800458e:	091a      	lsrs	r2, r3, #4
 8004590:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_month = BCD_To_DEC(t_i2c_buffer[1]);
 800459c:	7163      	strb	r3, [r4, #5]
	p_ds3231->current_year = BCD_To_DEC(t_i2c_buffer[2]);
 800459e:	f89d 3016 	ldrb.w	r3, [sp, #22]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 80045a2:	091a      	lsrs	r2, r3, #4
 80045a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	p_ds3231->current_year = BCD_To_DEC(t_i2c_buffer[2]);
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	80e3      	strh	r3, [r4, #6]
}
 80045b4:	b006      	add	sp, #24
 80045b6:	bd10      	pop	{r4, pc}
		return DS3231_FAIL;
 80045b8:	2000      	movs	r0, #0
 80045ba:	e7fb      	b.n	80045b4 <DS3231_Get_Date+0x62>

080045bc <DELAY_US_Init>:
#include "Delay_us.h"

TIM_HandleTypeDef *delay_timer;

void DELAY_US_Init(TIM_HandleTypeDef *p_htim){
	delay_timer = p_htim;
 80045bc:	4b01      	ldr	r3, [pc, #4]	; (80045c4 <DELAY_US_Init+0x8>)
 80045be:	6018      	str	r0, [r3, #0]
}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000308 	.word	0x20000308

080045c8 <DELAY_US_Run>:

void DELAY_US_Run(uint32_t p_delay_time){
	delay_timer->Instance->CNT = 0;
 80045c8:	2200      	movs	r2, #0
void DELAY_US_Run(uint32_t p_delay_time){
 80045ca:	b538      	push	{r3, r4, r5, lr}
	delay_timer->Instance->CNT = 0;
 80045cc:	4d07      	ldr	r5, [pc, #28]	; (80045ec <DELAY_US_Run+0x24>)
void DELAY_US_Run(uint32_t p_delay_time){
 80045ce:	4604      	mov	r4, r0
	delay_timer->Instance->CNT = 0;
 80045d0:	6828      	ldr	r0, [r5, #0]
 80045d2:	6803      	ldr	r3, [r0, #0]
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(delay_timer);
 80045d6:	f7ff fb31 	bl	8003c3c <HAL_TIM_Base_Start>
	while(delay_timer->Instance->CNT < p_delay_time);
 80045da:	6828      	ldr	r0, [r5, #0]
 80045dc:	6802      	ldr	r2, [r0, #0]
 80045de:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80045e0:	42a3      	cmp	r3, r4
 80045e2:	d3fc      	bcc.n	80045de <DELAY_US_Run+0x16>
	HAL_TIM_Base_Stop(delay_timer);
}
 80045e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_Base_Stop(delay_timer);
 80045e8:	f7ff bb4e 	b.w	8003c88 <HAL_TIM_Base_Stop>
 80045ec:	20000308 	.word	0x20000308

080045f0 <ENCODER_Init>:
}
#endif

void ENCODER_Init(ENCODER_HandleTypeDef *p_encoder, TIM_HandleTypeDef *p_encoder_timer){
	p_encoder->encoder_timer = p_encoder_timer;
	p_encoder->current_possition = 0;
 80045f0:	2300      	movs	r3, #0
	p_encoder->encoder_timer = p_encoder_timer;
 80045f2:	6001      	str	r1, [r0, #0]
	p_encoder->current_possition = 0;
 80045f4:	6043      	str	r3, [r0, #4]
	p_encoder->last_position = 0;
}
 80045f6:	4770      	bx	lr

080045f8 <ENCODER_Set_Callback_Function>:

void ENCODER_Set_Callback_Function(encoder_callback_function_t p_forward_callback_function, encoder_callback_function_t p_backward_callback_function){
	__ENCODER_Forward_Callback = p_forward_callback_function;
 80045f8:	4b02      	ldr	r3, [pc, #8]	; (8004604 <ENCODER_Set_Callback_Function+0xc>)
 80045fa:	6018      	str	r0, [r3, #0]
	__ENCODER_Backward_Callback = p_backward_callback_function;
 80045fc:	4b02      	ldr	r3, [pc, #8]	; (8004608 <ENCODER_Set_Callback_Function+0x10>)
 80045fe:	6019      	str	r1, [r3, #0]
}
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000310 	.word	0x20000310
 8004608:	2000030c 	.word	0x2000030c

0800460c <ENCODER_IT_Handle>:

void ENCODER_IT_Handle(ENCODER_HandleTypeDef *p_encoder){
	uint32_t t_counter = __HAL_TIM_GET_COUNTER(p_encoder->encoder_timer);
 800460c:	6803      	ldr	r3, [r0, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	p_encoder->current_possition =  (int16_t)t_counter / 4;
 8004612:	b21b      	sxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	bfb8      	it	lt
 8004618:	3303      	addlt	r3, #3
 800461a:	109b      	asrs	r3, r3, #2
 800461c:	8083      	strh	r3, [r0, #4]
}
 800461e:	4770      	bx	lr

08004620 <HAL_TIM_IC_CaptureCallback>:
	if(h_encoder.encoder_timer->Instance == htim->Instance){
 8004620:	4b04      	ldr	r3, [pc, #16]	; (8004634 <HAL_TIM_IC_CaptureCallback+0x14>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	6811      	ldr	r1, [r2, #0]
 8004626:	6802      	ldr	r2, [r0, #0]
 8004628:	4291      	cmp	r1, r2
 800462a:	d102      	bne.n	8004632 <HAL_TIM_IC_CaptureCallback+0x12>
		ENCODER_IT_Handle(&h_encoder);
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff bfed 	b.w	800460c <ENCODER_IT_Handle>
}
 8004632:	4770      	bx	lr
 8004634:	200000ec 	.word	0x200000ec

08004638 <ENCODER_Handle>:

void ENCODER_Handle(ENCODER_HandleTypeDef *p_encoder){
	if(p_encoder->current_possition > p_encoder->last_position){
 8004638:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800463c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
void ENCODER_Handle(ENCODER_HandleTypeDef *p_encoder){
 8004640:	b510      	push	{r4, lr}
	if(p_encoder->current_possition > p_encoder->last_position){
 8004642:	429a      	cmp	r2, r3
void ENCODER_Handle(ENCODER_HandleTypeDef *p_encoder){
 8004644:	4604      	mov	r4, r0
	if(p_encoder->current_possition > p_encoder->last_position){
 8004646:	dd06      	ble.n	8004656 <ENCODER_Handle+0x1e>
		if(__ENCODER_Forward_Callback != NULL){
 8004648:	4b04      	ldr	r3, [pc, #16]	; (800465c <ENCODER_Handle+0x24>)
			__ENCODER_Forward_Callback(p_encoder);
		}
		p_encoder->last_position = p_encoder->current_possition;
	}
	if(p_encoder->current_possition < p_encoder->last_position){
		if(__ENCODER_Backward_Callback != NULL){
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	b103      	cbz	r3, 8004650 <ENCODER_Handle+0x18>
			__ENCODER_Backward_Callback(p_encoder);
 800464e:	4798      	blx	r3
		}
		p_encoder->last_position = p_encoder->current_possition;
 8004650:	88a3      	ldrh	r3, [r4, #4]
 8004652:	80e3      	strh	r3, [r4, #6]
	}
}
 8004654:	bd10      	pop	{r4, pc}
	if(p_encoder->current_possition < p_encoder->last_position){
 8004656:	dafd      	bge.n	8004654 <ENCODER_Handle+0x1c>
		if(__ENCODER_Backward_Callback != NULL){
 8004658:	4b01      	ldr	r3, [pc, #4]	; (8004660 <ENCODER_Handle+0x28>)
 800465a:	e7f6      	b.n	800464a <ENCODER_Handle+0x12>
 800465c:	20000310 	.word	0x20000310
 8004660:	2000030c 	.word	0x2000030c

08004664 <LCD_Send_Command>:
void LCD_Display_Off(LCD_I2C_HandleTypeDef *p_lcd){
	p_lcd->LCD_Display_Option &= ~LCD_DISPLAYON;
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
}

void LCD_Send_Command(LCD_I2C_HandleTypeDef *p_lcd, char cmd){
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	460d      	mov	r5, r1
#ifdef LCD_4BIT_CONTROL
	GPIOA->ODR &= ~0x0F00;
 8004668:	4e1f      	ldr	r6, [pc, #124]	; (80046e8 <LCD_Send_Command+0x84>)
void LCD_Send_Command(LCD_I2C_HandleTypeDef *p_lcd, char cmd){
 800466a:	4607      	mov	r7, r0
	GPIOA->ODR &= ~0x0F00;
 800466c:	68f3      	ldr	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(cmd & 0xF0) << 4);
	GPIOB->ODR &= ~0xF000;
 800466e:	4c1f      	ldr	r4, [pc, #124]	; (80046ec <LCD_Send_Command+0x88>)
	GPIOA->ODR &= ~0x0F00;
 8004670:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004674:	60f3      	str	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(cmd & 0xF0) << 4);
 8004676:	68f2      	ldr	r2, [r6, #12]
 8004678:	010b      	lsls	r3, r1, #4
 800467a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800467e:	4313      	orrs	r3, r2
 8004680:	60f3      	str	r3, [r6, #12]
	GPIOB->ODR &= ~0xF000;
 8004682:	68e3      	ldr	r3, [r4, #12]
	DELAY_US_Run(40);
	GPIOB->ODR &= ~(En << 12);
	DELAY_US_Run(40);

	GPIOA->ODR &= ~0x0F00;
	GPIOA->ODR |= ((uint16_t)(cmd & 0x0F) << 8);
 8004684:	022d      	lsls	r5, r5, #8
	GPIOB->ODR &= ~0xF000;
 8004686:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800468a:	60e3      	str	r3, [r4, #12]
	GPIOB->ODR |= (SENDING_CMD_MASK | p_lcd->LCD_Backlight_Value) << 12;
 800468c:	78c2      	ldrb	r2, [r0, #3]
 800468e:	68e3      	ldr	r3, [r4, #12]
 8004690:	f042 0204 	orr.w	r2, r2, #4
 8004694:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	DELAY_US_Run(40);
 8004698:	2028      	movs	r0, #40	; 0x28
	GPIOB->ODR |= (SENDING_CMD_MASK | p_lcd->LCD_Backlight_Value) << 12;
 800469a:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 800469c:	f7ff ff94 	bl	80045c8 <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 80046a0:	68e3      	ldr	r3, [r4, #12]
	DELAY_US_Run(40);
 80046a2:	2028      	movs	r0, #40	; 0x28
	GPIOB->ODR &= ~(En << 12);
 80046a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046a8:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 80046aa:	f7ff ff8d 	bl	80045c8 <DELAY_US_Run>
	GPIOA->ODR &= ~0x0F00;
 80046ae:	68f3      	ldr	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(cmd & 0x0F) << 8);
 80046b0:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
	GPIOA->ODR &= ~0x0F00;
 80046b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046b8:	60f3      	str	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(cmd & 0x0F) << 8);
 80046ba:	68f3      	ldr	r3, [r6, #12]
	GPIOB->ODR &= ~0xF000;
	GPIOB->ODR |= (SENDING_CMD_MASK | p_lcd->LCD_Backlight_Value) << 12;
	DELAY_US_Run(40);
 80046bc:	2028      	movs	r0, #40	; 0x28
	GPIOA->ODR |= ((uint16_t)(cmd & 0x0F) << 8);
 80046be:	431d      	orrs	r5, r3
 80046c0:	60f5      	str	r5, [r6, #12]
	GPIOB->ODR &= ~0xF000;
 80046c2:	68e3      	ldr	r3, [r4, #12]
 80046c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046c8:	60e3      	str	r3, [r4, #12]
	GPIOB->ODR |= (SENDING_CMD_MASK | p_lcd->LCD_Backlight_Value) << 12;
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	68e3      	ldr	r3, [r4, #12]
 80046ce:	f042 0204 	orr.w	r2, r2, #4
 80046d2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80046d6:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 80046d8:	f7ff ff76 	bl	80045c8 <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 80046dc:	68e3      	ldr	r3, [r4, #12]
 80046de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046e2:	60e3      	str	r3, [r4, #12]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En;
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value;

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
#endif
}
 80046e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40010800 	.word	0x40010800
 80046ec:	40010c00 	.word	0x40010c00

080046f0 <LCD_Init>:
void LCD_Init(LCD_I2C_HandleTypeDef *p_lcd, I2C_HandleTypeDef *p_hi2c, uint8_t p_cols, uint8_t p_rows, uint8_t p_SLAVE_ADDRESS){
 80046f0:	b510      	push	{r4, lr}
 80046f2:	4604      	mov	r4, r0
 80046f4:	f89d 0008 	ldrb.w	r0, [sp, #8]
	p_lcd->LCD_Rows = p_rows;
 80046f8:	7063      	strb	r3, [r4, #1]
	p_lcd->SLAVE_ADDRESS = p_SLAVE_ADDRESS;
 80046fa:	70a0      	strb	r0, [r4, #2]
	p_lcd->LCD_Display_Option = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80046fc:	2304      	movs	r3, #4
	p_lcd->LCD_Backlight_Value = LCD_BACKLIGHT;
 80046fe:	2008      	movs	r0, #8
	p_lcd->LCD_Columns = p_cols;
 8004700:	7022      	strb	r2, [r4, #0]
	p_lcd->LCD_Display_Option = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8004702:	7123      	strb	r3, [r4, #4]
	p_lcd->LCD_Backlight_Value = LCD_BACKLIGHT;
 8004704:	70e0      	strb	r0, [r4, #3]
	p_lcd->hi2c = p_hi2c;
 8004706:	60a1      	str	r1, [r4, #8]
	HAL_Delay(50);
 8004708:	2032      	movs	r0, #50	; 0x32
 800470a:	f7fd fd69 	bl	80021e0 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x33);
 800470e:	2133      	movs	r1, #51	; 0x33
 8004710:	4620      	mov	r0, r4
 8004712:	f7ff ffa7 	bl	8004664 <LCD_Send_Command>
	HAL_Delay(5);
 8004716:	2005      	movs	r0, #5
 8004718:	f7fd fd62 	bl	80021e0 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x33);
 800471c:	2133      	movs	r1, #51	; 0x33
 800471e:	4620      	mov	r0, r4
 8004720:	f7ff ffa0 	bl	8004664 <LCD_Send_Command>
	HAL_Delay(5);
 8004724:	2005      	movs	r0, #5
 8004726:	f7fd fd5b 	bl	80021e0 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x32);
 800472a:	2132      	movs	r1, #50	; 0x32
 800472c:	4620      	mov	r0, r4
 800472e:	f7ff ff99 	bl	8004664 <LCD_Send_Command>
	HAL_Delay(5);
 8004732:	2005      	movs	r0, #5
 8004734:	f7fd fd54 	bl	80021e0 <HAL_Delay>
	LCD_Send_Command(p_lcd, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8004738:	4620      	mov	r0, r4
 800473a:	2106      	movs	r1, #6
 800473c:	f7ff ff92 	bl	8004664 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8004740:	4620      	mov	r0, r4
 8004742:	210c      	movs	r1, #12
 8004744:	f7ff ff8e 	bl	8004664 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT);
 8004748:	4620      	mov	r0, r4
 800474a:	2114      	movs	r1, #20
 800474c:	f7ff ff8a 	bl	8004664 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8004750:	4620      	mov	r0, r4
 8004752:	2128      	movs	r1, #40	; 0x28
 8004754:	f7ff ff86 	bl	8004664 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 8004758:	4620      	mov	r0, r4
 800475a:	2101      	movs	r1, #1
 800475c:	f7ff ff82 	bl	8004664 <LCD_Send_Command>
	LCD_Send_Command(p_lcd, LCD_RETURNHOME);
 8004760:	4620      	mov	r0, r4
 8004762:	2102      	movs	r1, #2
 8004764:	f7ff ff7e 	bl	8004664 <LCD_Send_Command>
}
 8004768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(500);
 800476c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004770:	f7fd bd36 	b.w	80021e0 <HAL_Delay>

08004774 <LCD_Set_Cursor>:
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8004774:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <LCD_Set_Cursor+0x2c>)
void LCD_Set_Cursor(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_col, uint8_t p_row){
 8004776:	b082      	sub	sp, #8
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8004778:	9301      	str	r3, [sp, #4]
	if(p_row > p_lcd->LCD_Rows) p_row = p_lcd->LCD_Rows - 1;
 800477a:	7843      	ldrb	r3, [r0, #1]
 800477c:	4293      	cmp	r3, r2
 800477e:	bf3c      	itt	cc
 8004780:	f103 32ff 	addcc.w	r2, r3, #4294967295
 8004784:	b2d2      	uxtbcc	r2, r2
	LCD_Send_Command(p_lcd, LCD_SETDDRAMADDR | (p_col + t_row_Offets[p_row]));
 8004786:	f102 0308 	add.w	r3, r2, #8
 800478a:	eb0d 0203 	add.w	r2, sp, r3
 800478e:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 8004792:	4419      	add	r1, r3
 8004794:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8004798:	b2c9      	uxtb	r1, r1
}
 800479a:	b002      	add	sp, #8
	LCD_Send_Command(p_lcd, LCD_SETDDRAMADDR | (p_col + t_row_Offets[p_row]));
 800479c:	f7ff bf62 	b.w	8004664 <LCD_Send_Command>
 80047a0:	54144000 	.word	0x54144000

080047a4 <LCD_Clear>:
void LCD_Clear(LCD_I2C_HandleTypeDef *p_lcd){
 80047a4:	b510      	push	{r4, lr}
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 80047a6:	2101      	movs	r1, #1
void LCD_Clear(LCD_I2C_HandleTypeDef *p_lcd){
 80047a8:	4604      	mov	r4, r0
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 80047aa:	f7ff ff5b 	bl	8004664 <LCD_Send_Command>
	DELAY_US_Run(1600);
 80047ae:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80047b2:	f7ff ff09 	bl	80045c8 <DELAY_US_Run>
	LCD_Set_Cursor(p_lcd, 0, 0);
 80047b6:	2200      	movs	r2, #0
 80047b8:	4620      	mov	r0, r4
}
 80047ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_Set_Cursor(p_lcd, 0, 0);
 80047be:	4611      	mov	r1, r2
 80047c0:	f7ff bfd8 	b.w	8004774 <LCD_Set_Cursor>

080047c4 <LCD_Cursor_Blink>:
	p_lcd->LCD_Display_Option |= LCD_BLINKON;
 80047c4:	7901      	ldrb	r1, [r0, #4]
 80047c6:	f041 0201 	orr.w	r2, r1, #1
 80047ca:	7102      	strb	r2, [r0, #4]
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
 80047cc:	f041 0109 	orr.w	r1, r1, #9
 80047d0:	f7ff bf48 	b.w	8004664 <LCD_Send_Command>

080047d4 <LCD_Cursor_No_Blink>:
	p_lcd->LCD_Display_Option &= ~LCD_BLINKON;
 80047d4:	7901      	ldrb	r1, [r0, #4]
 80047d6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80047da:	7101      	strb	r1, [r0, #4]
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
 80047dc:	f041 0108 	orr.w	r1, r1, #8
 80047e0:	f7ff bf40 	b.w	8004664 <LCD_Send_Command>

080047e4 <LCD_Send_Data>:

void LCD_Send_Data(LCD_I2C_HandleTypeDef *p_lcd, char data){
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	460d      	mov	r5, r1
#ifdef LCD_4BIT_CONTROL
	GPIOA->ODR &= ~0x0F00;
 80047e8:	4e1f      	ldr	r6, [pc, #124]	; (8004868 <LCD_Send_Data+0x84>)
void LCD_Send_Data(LCD_I2C_HandleTypeDef *p_lcd, char data){
 80047ea:	4607      	mov	r7, r0
	GPIOA->ODR &= ~0x0F00;
 80047ec:	68f3      	ldr	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(data & 0xF0) << 4);
	GPIOB->ODR &= ~0xF000;
 80047ee:	4c1f      	ldr	r4, [pc, #124]	; (800486c <LCD_Send_Data+0x88>)
	GPIOA->ODR &= ~0x0F00;
 80047f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047f4:	60f3      	str	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(data & 0xF0) << 4);
 80047f6:	68f2      	ldr	r2, [r6, #12]
 80047f8:	010b      	lsls	r3, r1, #4
 80047fa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047fe:	4313      	orrs	r3, r2
 8004800:	60f3      	str	r3, [r6, #12]
	GPIOB->ODR &= ~0xF000;
 8004802:	68e3      	ldr	r3, [r4, #12]
	DELAY_US_Run(40);
	GPIOB->ODR &= ~(En << 12);
	DELAY_US_Run(40);

	GPIOA->ODR &= ~0x0F00;
	GPIOA->ODR |= ((uint16_t)(data & 0x0F) << 8);
 8004804:	022d      	lsls	r5, r5, #8
	GPIOB->ODR &= ~0xF000;
 8004806:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800480a:	60e3      	str	r3, [r4, #12]
	GPIOB->ODR |= (SENDING_DATA_MASK | p_lcd->LCD_Backlight_Value) << 12;
 800480c:	78c2      	ldrb	r2, [r0, #3]
 800480e:	68e3      	ldr	r3, [r4, #12]
 8004810:	f042 0205 	orr.w	r2, r2, #5
 8004814:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	DELAY_US_Run(40);
 8004818:	2028      	movs	r0, #40	; 0x28
	GPIOB->ODR |= (SENDING_DATA_MASK | p_lcd->LCD_Backlight_Value) << 12;
 800481a:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 800481c:	f7ff fed4 	bl	80045c8 <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 8004820:	68e3      	ldr	r3, [r4, #12]
	DELAY_US_Run(40);
 8004822:	2028      	movs	r0, #40	; 0x28
	GPIOB->ODR &= ~(En << 12);
 8004824:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004828:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 800482a:	f7ff fecd 	bl	80045c8 <DELAY_US_Run>
	GPIOA->ODR &= ~0x0F00;
 800482e:	68f3      	ldr	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(data & 0x0F) << 8);
 8004830:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
	GPIOA->ODR &= ~0x0F00;
 8004834:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004838:	60f3      	str	r3, [r6, #12]
	GPIOA->ODR |= ((uint16_t)(data & 0x0F) << 8);
 800483a:	68f3      	ldr	r3, [r6, #12]
	GPIOB->ODR &= ~0xF000;
	GPIOB->ODR |= (SENDING_DATA_MASK | p_lcd->LCD_Backlight_Value) << 12;
	DELAY_US_Run(40);
 800483c:	2028      	movs	r0, #40	; 0x28
	GPIOA->ODR |= ((uint16_t)(data & 0x0F) << 8);
 800483e:	431d      	orrs	r5, r3
 8004840:	60f5      	str	r5, [r6, #12]
	GPIOB->ODR &= ~0xF000;
 8004842:	68e3      	ldr	r3, [r4, #12]
 8004844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004848:	60e3      	str	r3, [r4, #12]
	GPIOB->ODR |= (SENDING_DATA_MASK | p_lcd->LCD_Backlight_Value) << 12;
 800484a:	78fa      	ldrb	r2, [r7, #3]
 800484c:	68e3      	ldr	r3, [r4, #12]
 800484e:	f042 0205 	orr.w	r2, r2, #5
 8004852:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004856:	60e3      	str	r3, [r4, #12]
	DELAY_US_Run(40);
 8004858:	f7ff feb6 	bl	80045c8 <DELAY_US_Run>
	GPIOB->ODR &= ~(En << 12);
 800485c:	68e3      	ldr	r3, [r4, #12]
 800485e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004862:	60e3      	str	r3, [r4, #12]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En | Rs;
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value | Rs;

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
#endif
}
 8004864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004866:	bf00      	nop
 8004868:	40010800 	.word	0x40010800
 800486c:	40010c00 	.word	0x40010c00

08004870 <LCD_Write>:
void LCD_Write(LCD_I2C_HandleTypeDef *p_lcd, const char *p_str, ...){
 8004870:	b40e      	push	{r1, r2, r3}
 8004872:	b5f0      	push	{r4, r5, r6, r7, lr}
	char t_stringArray[21] = {};
 8004874:	2400      	movs	r4, #0
void LCD_Write(LCD_I2C_HandleTypeDef *p_lcd, const char *p_str, ...){
 8004876:	b088      	sub	sp, #32
 8004878:	ae0d      	add	r6, sp, #52	; 0x34
 800487a:	f856 7b04 	ldr.w	r7, [r6], #4
	char t_stringArray[21] = {};
 800487e:	2211      	movs	r2, #17
 8004880:	4621      	mov	r1, r4
void LCD_Write(LCD_I2C_HandleTypeDef *p_lcd, const char *p_str, ...){
 8004882:	4605      	mov	r5, r0
	char t_stringArray[21] = {};
 8004884:	a803      	add	r0, sp, #12
 8004886:	9402      	str	r4, [sp, #8]
 8004888:	f000 f938 	bl	8004afc <memset>
	vsprintf(t_stringArray, p_str, t_args);
 800488c:	4632      	mov	r2, r6
 800488e:	4639      	mov	r1, r7
 8004890:	a802      	add	r0, sp, #8
	va_start(t_args, p_str);
 8004892:	9601      	str	r6, [sp, #4]
	vsprintf(t_stringArray, p_str, t_args);
 8004894:	f000 fa44 	bl	8004d20 <vsiprintf>
	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 8004898:	ae02      	add	r6, sp, #8
 800489a:	a802      	add	r0, sp, #8
 800489c:	f7fb fc58 	bl	8000150 <strlen>
 80048a0:	42a0      	cmp	r0, r4
 80048a2:	d902      	bls.n	80048aa <LCD_Write+0x3a>
 80048a4:	782b      	ldrb	r3, [r5, #0]
 80048a6:	42a3      	cmp	r3, r4
 80048a8:	dc04      	bgt.n	80048b4 <LCD_Write+0x44>
}
 80048aa:	b008      	add	sp, #32
 80048ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80048b0:	b003      	add	sp, #12
 80048b2:	4770      	bx	lr
		LCD_Send_Data(p_lcd, t_stringArray[i]);
 80048b4:	4628      	mov	r0, r5
 80048b6:	f816 1b01 	ldrb.w	r1, [r6], #1
 80048ba:	f7ff ff93 	bl	80047e4 <LCD_Send_Data>
	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 80048be:	3401      	adds	r4, #1
 80048c0:	e7eb      	b.n	800489a <LCD_Write+0x2a>

080048c2 <LCD_Create_Char>:
	p_location <<= 3;
 80048c2:	00c9      	lsls	r1, r1, #3
 80048c4:	f001 0138 	and.w	r1, r1, #56	; 0x38
void LCD_Create_Char(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_location, uint8_t p_charMap[]){
 80048c8:	b570      	push	{r4, r5, r6, lr}
	LCD_Send_Command(p_lcd, LCD_SETCGRAMADDR | p_location);
 80048ca:	f041 0140 	orr.w	r1, r1, #64	; 0x40
void LCD_Create_Char(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_location, uint8_t p_charMap[]){
 80048ce:	4614      	mov	r4, r2
 80048d0:	4606      	mov	r6, r0
	LCD_Send_Command(p_lcd, LCD_SETCGRAMADDR | p_location);
 80048d2:	f7ff fec7 	bl	8004664 <LCD_Send_Command>
	for(int i = 0; i < 8; i++) LCD_Send_Data(p_lcd, p_charMap[i]);
 80048d6:	1e65      	subs	r5, r4, #1
 80048d8:	3407      	adds	r4, #7
 80048da:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80048de:	4630      	mov	r0, r6
 80048e0:	f7ff ff80 	bl	80047e4 <LCD_Send_Data>
 80048e4:	42a5      	cmp	r5, r4
 80048e6:	d1f8      	bne.n	80048da <LCD_Create_Char+0x18>
}
 80048e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080048ec <BUTTON_Handle>:
button_callback_function_t __BUTTON_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Releasing_Callback = NULL;
button_callback_function_t __BUTTON_Short_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Long_Pressing_Callback = NULL;

void BUTTON_Handle(BUTTON_HandleTypedef *ButtonX){
 80048ec:	b510      	push	{r4, lr}
 80048ee:	4604      	mov	r4, r0
	uint8_t state = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 80048f0:	8a81      	ldrh	r1, [r0, #20]
 80048f2:	6900      	ldr	r0, [r0, #16]
 80048f4:	f7fe f92a 	bl	8002b4c <HAL_GPIO_ReadPin>
	if(state != ButtonX->BTN_Filter){
 80048f8:	78a3      	ldrb	r3, [r4, #2]
 80048fa:	4283      	cmp	r3, r0
 80048fc:	d005      	beq.n	800490a <BUTTON_Handle+0x1e>
		ButtonX->BTN_Filter = state;
		ButtonX->is_debouncing = 1;
 80048fe:	2301      	movs	r3, #1
		ButtonX->BTN_Filter = state;
 8004900:	70a0      	strb	r0, [r4, #2]
		ButtonX->is_debouncing = 1;
 8004902:	70e3      	strb	r3, [r4, #3]
		ButtonX->time_debounce = HAL_GetTick();
 8004904:	f7fd fc66 	bl	80021d4 <HAL_GetTick>
 8004908:	60a0      	str	r0, [r4, #8]
	}

	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->time_debounce >= 15)){
 800490a:	78e3      	ldrb	r3, [r4, #3]
 800490c:	b14b      	cbz	r3, 8004922 <BUTTON_Handle+0x36>
 800490e:	f7fd fc61 	bl	80021d4 <HAL_GetTick>
 8004912:	68a3      	ldr	r3, [r4, #8]
 8004914:	1ac0      	subs	r0, r0, r3
 8004916:	280e      	cmp	r0, #14
		ButtonX->BTN_Current = ButtonX->BTN_Filter;
 8004918:	bf81      	itttt	hi
 800491a:	78a3      	ldrbhi	r3, [r4, #2]
 800491c:	7023      	strbhi	r3, [r4, #0]
		ButtonX->is_debouncing = 0;
 800491e:	2300      	movhi	r3, #0
 8004920:	70e3      	strbhi	r3, [r4, #3]
	}

	if(ButtonX->BTN_Current != ButtonX->BTN_Last){
 8004922:	7823      	ldrb	r3, [r4, #0]
 8004924:	7862      	ldrb	r2, [r4, #1]
 8004926:	429a      	cmp	r2, r3
 8004928:	d00c      	beq.n	8004944 <BUTTON_Handle+0x58>
		if(ButtonX->BTN_Current == 0){
 800492a:	b9e3      	cbnz	r3, 8004966 <BUTTON_Handle+0x7a>
			if(__BUTTON_Pressing_Callback != NULL){
 800492c:	4b18      	ldr	r3, [pc, #96]	; (8004990 <BUTTON_Handle+0xa4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	b10b      	cbz	r3, 8004936 <BUTTON_Handle+0x4a>
				__BUTTON_Pressing_Callback(ButtonX);
 8004932:	4620      	mov	r0, r4
 8004934:	4798      	blx	r3
			}
			ButtonX->is_press = 1;
 8004936:	2301      	movs	r3, #1
 8004938:	7123      	strb	r3, [r4, #4]
			ButtonX->time_start_press = HAL_GetTick();
 800493a:	f7fd fc4b 	bl	80021d4 <HAL_GetTick>
 800493e:	60e0      	str	r0, [r4, #12]
			}
			if(__BUTTON_Releasing_Callback != NULL){
				__BUTTON_Releasing_Callback(ButtonX);
			}
		}
		ButtonX->BTN_Last = ButtonX->BTN_Current;
 8004940:	7823      	ldrb	r3, [r4, #0]
 8004942:	7063      	strb	r3, [r4, #1]
	}

	if(ButtonX->is_press && (HAL_GetTick() - ButtonX->time_start_press >= TIME_FOR_LONG_PRESSING)){
 8004944:	7923      	ldrb	r3, [r4, #4]
 8004946:	b16b      	cbz	r3, 8004964 <BUTTON_Handle+0x78>
 8004948:	f7fd fc44 	bl	80021d4 <HAL_GetTick>
 800494c:	68e3      	ldr	r3, [r4, #12]
 800494e:	1ac0      	subs	r0, r0, r3
 8004950:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8004954:	d306      	bcc.n	8004964 <BUTTON_Handle+0x78>
		if(__BUTTON_Long_Pressing_Callback != NULL){
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <BUTTON_Handle+0xa8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	b10b      	cbz	r3, 8004960 <BUTTON_Handle+0x74>
			__BUTTON_Long_Pressing_Callback(ButtonX);
 800495c:	4620      	mov	r0, r4
 800495e:	4798      	blx	r3
		}
		ButtonX->is_press = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	7123      	strb	r3, [r4, #4]
	}
}
 8004964:	bd10      	pop	{r4, pc}
			ButtonX->is_press = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	7123      	strb	r3, [r4, #4]
			if(HAL_GetTick() - ButtonX->time_start_press <= 1000){
 800496a:	f7fd fc33 	bl	80021d4 <HAL_GetTick>
 800496e:	68e3      	ldr	r3, [r4, #12]
 8004970:	1ac0      	subs	r0, r0, r3
 8004972:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004976:	d804      	bhi.n	8004982 <BUTTON_Handle+0x96>
				if(__BUTTON_Short_Pressing_Callback != NULL){
 8004978:	4b07      	ldr	r3, [pc, #28]	; (8004998 <BUTTON_Handle+0xac>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	b10b      	cbz	r3, 8004982 <BUTTON_Handle+0x96>
					__BUTTON_Short_Pressing_Callback(ButtonX);
 800497e:	4620      	mov	r0, r4
 8004980:	4798      	blx	r3
			if(__BUTTON_Releasing_Callback != NULL){
 8004982:	4b06      	ldr	r3, [pc, #24]	; (800499c <BUTTON_Handle+0xb0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0da      	beq.n	8004940 <BUTTON_Handle+0x54>
				__BUTTON_Releasing_Callback(ButtonX);
 800498a:	4620      	mov	r0, r4
 800498c:	4798      	blx	r3
 800498e:	e7d7      	b.n	8004940 <BUTTON_Handle+0x54>
 8004990:	20000318 	.word	0x20000318
 8004994:	20000314 	.word	0x20000314
 8004998:	20000320 	.word	0x20000320
 800499c:	2000031c 	.word	0x2000031c

080049a0 <BUTTON_Init>:

void BUTTON_Init(BUTTON_HandleTypedef *ButtonX, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
	ButtonX->GPIOx = GPIOx;
	ButtonX->GPIO_Pin = GPIO_Pin;
	ButtonX->BTN_Current = 1;
 80049a0:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <BUTTON_Init+0x10>)
	ButtonX->GPIOx = GPIOx;
 80049a2:	6101      	str	r1, [r0, #16]
	ButtonX->BTN_Current = 1;
 80049a4:	6003      	str	r3, [r0, #0]
	ButtonX->BTN_Last = 1;
	ButtonX->BTN_Filter = 1;
	ButtonX->is_debouncing = 0;
	ButtonX->is_press = 0;
 80049a6:	2300      	movs	r3, #0
	ButtonX->GPIO_Pin = GPIO_Pin;
 80049a8:	8282      	strh	r2, [r0, #20]
	ButtonX->is_press = 0;
 80049aa:	7103      	strb	r3, [r0, #4]
}
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	00010101 	.word	0x00010101

080049b4 <BUTTON_Set_Callback_Function>:

void BUTTON_Set_Callback_Function(button_callback_function_t p_pressing_callback_function,
								button_callback_function_t p_releasing_callback_function,
								button_callback_function_t p_short_pressing_callback_function,
								button_callback_function_t p_long_pressing_callback_function){
 80049b4:	b510      	push	{r4, lr}
	__BUTTON_Pressing_Callback = p_pressing_callback_function;
 80049b6:	4c04      	ldr	r4, [pc, #16]	; (80049c8 <BUTTON_Set_Callback_Function+0x14>)
 80049b8:	6020      	str	r0, [r4, #0]
	__BUTTON_Releasing_Callback = p_releasing_callback_function;
 80049ba:	4804      	ldr	r0, [pc, #16]	; (80049cc <BUTTON_Set_Callback_Function+0x18>)
 80049bc:	6001      	str	r1, [r0, #0]
	__BUTTON_Short_Pressing_Callback = p_short_pressing_callback_function;
 80049be:	4904      	ldr	r1, [pc, #16]	; (80049d0 <BUTTON_Set_Callback_Function+0x1c>)
 80049c0:	600a      	str	r2, [r1, #0]
	__BUTTON_Long_Pressing_Callback = p_long_pressing_callback_function;
 80049c2:	4a04      	ldr	r2, [pc, #16]	; (80049d4 <BUTTON_Set_Callback_Function+0x20>)
 80049c4:	6013      	str	r3, [r2, #0]
}
 80049c6:	bd10      	pop	{r4, pc}
 80049c8:	20000318 	.word	0x20000318
 80049cc:	2000031c 	.word	0x2000031c
 80049d0:	20000320 	.word	0x20000320
 80049d4:	20000314 	.word	0x20000314

080049d8 <FLASH_Erase>:
#include "flash.h"

void FLASH_Erase(uint32_t p_page){
 80049d8:	b510      	push	{r4, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	4604      	mov	r4, r0
	HAL_FLASH_Unlock();
 80049de:	f7fd fedf 	bl	80027a0 <HAL_FLASH_Unlock>
	eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
#endif

#ifdef __STM32F1xx_HAL_H
	eraseInit.Banks = 1;
 80049e2:	2301      	movs	r3, #1
 80049e4:	9303      	str	r3, [sp, #12]
	eraseInit.NbPages = 1;
 80049e6:	9305      	str	r3, [sp, #20]
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80049e8:	2300      	movs	r3, #0
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 80049ea:	f504 3400 	add.w	r4, r4, #131072	; 0x20000
	eraseInit.NbPages = 1;
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
#endif

	HAL_FLASHEx_Erase(&eraseInit, &t_PageError);
 80049ee:	a901      	add	r1, sp, #4
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 80049f0:	02a4      	lsls	r4, r4, #10
	HAL_FLASHEx_Erase(&eraseInit, &t_PageError);
 80049f2:	a802      	add	r0, sp, #8
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80049f4:	9302      	str	r3, [sp, #8]
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 80049f6:	9404      	str	r4, [sp, #16]
	HAL_FLASHEx_Erase(&eraseInit, &t_PageError);
 80049f8:	f7fd ff7a 	bl	80028f0 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80049fc:	f7fd fee2 	bl	80027c4 <HAL_FLASH_Lock>
//	while(FLASH->CR & FLASH_SR_BSY);
//	FLASH->CR &= ~FLASH_CR_PER;
//	FLASH->CR &= ~FLASH_CR_STRT;
//
//	FLASH->CR |= FLASH_CR_LOCK;
}
 8004a00:	b006      	add	sp, #24
 8004a02:	bd10      	pop	{r4, pc}

08004a04 <FLASH_Write>:

void FLASH_Write(uint32_t p_page, uint8_t *p_data, uint16_t p_len){
 8004a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a06:	4605      	mov	r5, r0
 8004a08:	460c      	mov	r4, r1
	FLASH_Erase(63);
 8004a0a:	203f      	movs	r0, #63	; 0x3f
#ifdef __STM32F4xx_HAL_H
	uint32_t t_add = SECTOR_7_ADD;
#endif
#ifdef __STM32F1xx_HAL_H
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 8004a0c:	f505 3500 	add.w	r5, r5, #131072	; 0x20000
void FLASH_Write(uint32_t p_page, uint8_t *p_data, uint16_t p_len){
 8004a10:	4616      	mov	r6, r2
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 8004a12:	02af      	lsls	r7, r5, #10
	FLASH_Erase(63);
 8004a14:	f7ff ffe0 	bl	80049d8 <FLASH_Erase>
#endif
#ifdef __STM32F0xx_HAL_H
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
#endif
	HAL_FLASH_Unlock();
	for(int i = 0; i < p_len; i += 2){
 8004a18:	2500      	movs	r5, #0
	HAL_FLASH_Unlock();
 8004a1a:	f7fd fec1 	bl	80027a0 <HAL_FLASH_Unlock>
	for(int i = 0; i < p_len; i += 2){
 8004a1e:	3401      	adds	r4, #1
 8004a20:	42ae      	cmp	r6, r5
 8004a22:	dc03      	bgt.n	8004a2c <FLASH_Write+0x28>
//	}
//	FLASH->CR |= FLASH_CR_PG;
//	for(int i = 0; i < p_len; i += 2){
//		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, t_add + i, p_data[i] | (uint16_t)((i+1 >= p_len) ? 0xFF : p_data[i+1]) << 8);
//	}
}
 8004a24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_FLASH_Lock();
 8004a28:	f7fd becc 	b.w	80027c4 <HAL_FLASH_Lock>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, t_add + i, p_data[i] | ((uint16_t)((i+1 >= p_len) ? 0xFF : p_data[i+1]) << 8));
 8004a2c:	1c6b      	adds	r3, r5, #1
 8004a2e:	429e      	cmp	r6, r3
 8004a30:	bfd4      	ite	le
 8004a32:	f44f 437f 	movle.w	r3, #65280	; 0xff00
 8004a36:	7823      	ldrbgt	r3, [r4, #0]
 8004a38:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8004a3c:	bfc8      	it	gt
 8004a3e:	021b      	lslgt	r3, r3, #8
 8004a40:	1979      	adds	r1, r7, r5
 8004a42:	431a      	orrs	r2, r3
 8004a44:	2001      	movs	r0, #1
 8004a46:	2300      	movs	r3, #0
 8004a48:	f7fd fef0 	bl	800282c <HAL_FLASH_Program>
	for(int i = 0; i < p_len; i += 2){
 8004a4c:	3502      	adds	r5, #2
 8004a4e:	3402      	adds	r4, #2
 8004a50:	e7e6      	b.n	8004a20 <FLASH_Write+0x1c>

08004a52 <FLASH_Read>:

void FLASH_Read(uint32_t add, uint8_t *p_data, uint16_t p_len){
	for(int i = 0; i < p_len; i += 2){
 8004a52:	2300      	movs	r3, #0
void FLASH_Read(uint32_t add, uint8_t *p_data, uint16_t p_len){
 8004a54:	b530      	push	{r4, r5, lr}
		uint16_t t_data = *(volatile uint16_t *)(add + i);
		p_data[i] = t_data;
		p_data[i+1] = t_data >> 8;
 8004a56:	1c4d      	adds	r5, r1, #1
	for(int i = 0; i < p_len; i += 2){
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	dc00      	bgt.n	8004a5e <FLASH_Read+0xc>
	}
}
 8004a5c:	bd30      	pop	{r4, r5, pc}
		uint16_t t_data = *(volatile uint16_t *)(add + i);
 8004a5e:	5ac4      	ldrh	r4, [r0, r3]
 8004a60:	b2a4      	uxth	r4, r4
		p_data[i] = t_data;
 8004a62:	54cc      	strb	r4, [r1, r3]
		p_data[i+1] = t_data >> 8;
 8004a64:	0a24      	lsrs	r4, r4, #8
 8004a66:	54ec      	strb	r4, [r5, r3]
	for(int i = 0; i < p_len; i += 2){
 8004a68:	3302      	adds	r3, #2
 8004a6a:	e7f5      	b.n	8004a58 <FLASH_Read+0x6>

08004a6c <__errno>:
 8004a6c:	4b01      	ldr	r3, [pc, #4]	; (8004a74 <__errno+0x8>)
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000040 	.word	0x20000040

08004a78 <__libc_init_array>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	2600      	movs	r6, #0
 8004a7c:	4d0c      	ldr	r5, [pc, #48]	; (8004ab0 <__libc_init_array+0x38>)
 8004a7e:	4c0d      	ldr	r4, [pc, #52]	; (8004ab4 <__libc_init_array+0x3c>)
 8004a80:	1b64      	subs	r4, r4, r5
 8004a82:	10a4      	asrs	r4, r4, #2
 8004a84:	42a6      	cmp	r6, r4
 8004a86:	d109      	bne.n	8004a9c <__libc_init_array+0x24>
 8004a88:	f000 fcb4 	bl	80053f4 <_init>
 8004a8c:	2600      	movs	r6, #0
 8004a8e:	4d0a      	ldr	r5, [pc, #40]	; (8004ab8 <__libc_init_array+0x40>)
 8004a90:	4c0a      	ldr	r4, [pc, #40]	; (8004abc <__libc_init_array+0x44>)
 8004a92:	1b64      	subs	r4, r4, r5
 8004a94:	10a4      	asrs	r4, r4, #2
 8004a96:	42a6      	cmp	r6, r4
 8004a98:	d105      	bne.n	8004aa6 <__libc_init_array+0x2e>
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa0:	4798      	blx	r3
 8004aa2:	3601      	adds	r6, #1
 8004aa4:	e7ee      	b.n	8004a84 <__libc_init_array+0xc>
 8004aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aaa:	4798      	blx	r3
 8004aac:	3601      	adds	r6, #1
 8004aae:	e7f2      	b.n	8004a96 <__libc_init_array+0x1e>
 8004ab0:	08005630 	.word	0x08005630
 8004ab4:	08005630 	.word	0x08005630
 8004ab8:	08005630 	.word	0x08005630
 8004abc:	08005634 	.word	0x08005634

08004ac0 <malloc>:
 8004ac0:	4b02      	ldr	r3, [pc, #8]	; (8004acc <malloc+0xc>)
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	f000 b889 	b.w	8004bdc <_malloc_r>
 8004aca:	bf00      	nop
 8004acc:	20000040 	.word	0x20000040

08004ad0 <free>:
 8004ad0:	4b02      	ldr	r3, [pc, #8]	; (8004adc <free+0xc>)
 8004ad2:	4601      	mov	r1, r0
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	f000 b819 	b.w	8004b0c <_free_r>
 8004ada:	bf00      	nop
 8004adc:	20000040 	.word	0x20000040

08004ae0 <memcpy>:
 8004ae0:	440a      	add	r2, r1
 8004ae2:	4291      	cmp	r1, r2
 8004ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ae8:	d100      	bne.n	8004aec <memcpy+0xc>
 8004aea:	4770      	bx	lr
 8004aec:	b510      	push	{r4, lr}
 8004aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004af2:	4291      	cmp	r1, r2
 8004af4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004af8:	d1f9      	bne.n	8004aee <memcpy+0xe>
 8004afa:	bd10      	pop	{r4, pc}

08004afc <memset>:
 8004afc:	4603      	mov	r3, r0
 8004afe:	4402      	add	r2, r0
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d100      	bne.n	8004b06 <memset+0xa>
 8004b04:	4770      	bx	lr
 8004b06:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0a:	e7f9      	b.n	8004b00 <memset+0x4>

08004b0c <_free_r>:
 8004b0c:	b538      	push	{r3, r4, r5, lr}
 8004b0e:	4605      	mov	r5, r0
 8004b10:	2900      	cmp	r1, #0
 8004b12:	d040      	beq.n	8004b96 <_free_r+0x8a>
 8004b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b18:	1f0c      	subs	r4, r1, #4
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bfb8      	it	lt
 8004b1e:	18e4      	addlt	r4, r4, r3
 8004b20:	f000 f908 	bl	8004d34 <__malloc_lock>
 8004b24:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <_free_r+0x8c>)
 8004b26:	6813      	ldr	r3, [r2, #0]
 8004b28:	b933      	cbnz	r3, 8004b38 <_free_r+0x2c>
 8004b2a:	6063      	str	r3, [r4, #4]
 8004b2c:	6014      	str	r4, [r2, #0]
 8004b2e:	4628      	mov	r0, r5
 8004b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b34:	f000 b904 	b.w	8004d40 <__malloc_unlock>
 8004b38:	42a3      	cmp	r3, r4
 8004b3a:	d908      	bls.n	8004b4e <_free_r+0x42>
 8004b3c:	6820      	ldr	r0, [r4, #0]
 8004b3e:	1821      	adds	r1, r4, r0
 8004b40:	428b      	cmp	r3, r1
 8004b42:	bf01      	itttt	eq
 8004b44:	6819      	ldreq	r1, [r3, #0]
 8004b46:	685b      	ldreq	r3, [r3, #4]
 8004b48:	1809      	addeq	r1, r1, r0
 8004b4a:	6021      	streq	r1, [r4, #0]
 8004b4c:	e7ed      	b.n	8004b2a <_free_r+0x1e>
 8004b4e:	461a      	mov	r2, r3
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	b10b      	cbz	r3, 8004b58 <_free_r+0x4c>
 8004b54:	42a3      	cmp	r3, r4
 8004b56:	d9fa      	bls.n	8004b4e <_free_r+0x42>
 8004b58:	6811      	ldr	r1, [r2, #0]
 8004b5a:	1850      	adds	r0, r2, r1
 8004b5c:	42a0      	cmp	r0, r4
 8004b5e:	d10b      	bne.n	8004b78 <_free_r+0x6c>
 8004b60:	6820      	ldr	r0, [r4, #0]
 8004b62:	4401      	add	r1, r0
 8004b64:	1850      	adds	r0, r2, r1
 8004b66:	4283      	cmp	r3, r0
 8004b68:	6011      	str	r1, [r2, #0]
 8004b6a:	d1e0      	bne.n	8004b2e <_free_r+0x22>
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4401      	add	r1, r0
 8004b72:	6011      	str	r1, [r2, #0]
 8004b74:	6053      	str	r3, [r2, #4]
 8004b76:	e7da      	b.n	8004b2e <_free_r+0x22>
 8004b78:	d902      	bls.n	8004b80 <_free_r+0x74>
 8004b7a:	230c      	movs	r3, #12
 8004b7c:	602b      	str	r3, [r5, #0]
 8004b7e:	e7d6      	b.n	8004b2e <_free_r+0x22>
 8004b80:	6820      	ldr	r0, [r4, #0]
 8004b82:	1821      	adds	r1, r4, r0
 8004b84:	428b      	cmp	r3, r1
 8004b86:	bf01      	itttt	eq
 8004b88:	6819      	ldreq	r1, [r3, #0]
 8004b8a:	685b      	ldreq	r3, [r3, #4]
 8004b8c:	1809      	addeq	r1, r1, r0
 8004b8e:	6021      	streq	r1, [r4, #0]
 8004b90:	6063      	str	r3, [r4, #4]
 8004b92:	6054      	str	r4, [r2, #4]
 8004b94:	e7cb      	b.n	8004b2e <_free_r+0x22>
 8004b96:	bd38      	pop	{r3, r4, r5, pc}
 8004b98:	20000324 	.word	0x20000324

08004b9c <sbrk_aligned>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	4e0e      	ldr	r6, [pc, #56]	; (8004bd8 <sbrk_aligned+0x3c>)
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	6831      	ldr	r1, [r6, #0]
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	b911      	cbnz	r1, 8004bae <sbrk_aligned+0x12>
 8004ba8:	f000 f88c 	bl	8004cc4 <_sbrk_r>
 8004bac:	6030      	str	r0, [r6, #0]
 8004bae:	4621      	mov	r1, r4
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f000 f887 	bl	8004cc4 <_sbrk_r>
 8004bb6:	1c43      	adds	r3, r0, #1
 8004bb8:	d00a      	beq.n	8004bd0 <sbrk_aligned+0x34>
 8004bba:	1cc4      	adds	r4, r0, #3
 8004bbc:	f024 0403 	bic.w	r4, r4, #3
 8004bc0:	42a0      	cmp	r0, r4
 8004bc2:	d007      	beq.n	8004bd4 <sbrk_aligned+0x38>
 8004bc4:	1a21      	subs	r1, r4, r0
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f000 f87c 	bl	8004cc4 <_sbrk_r>
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d101      	bne.n	8004bd4 <sbrk_aligned+0x38>
 8004bd0:	f04f 34ff 	mov.w	r4, #4294967295
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	20000328 	.word	0x20000328

08004bdc <_malloc_r>:
 8004bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be0:	1ccd      	adds	r5, r1, #3
 8004be2:	f025 0503 	bic.w	r5, r5, #3
 8004be6:	3508      	adds	r5, #8
 8004be8:	2d0c      	cmp	r5, #12
 8004bea:	bf38      	it	cc
 8004bec:	250c      	movcc	r5, #12
 8004bee:	2d00      	cmp	r5, #0
 8004bf0:	4607      	mov	r7, r0
 8004bf2:	db01      	blt.n	8004bf8 <_malloc_r+0x1c>
 8004bf4:	42a9      	cmp	r1, r5
 8004bf6:	d905      	bls.n	8004c04 <_malloc_r+0x28>
 8004bf8:	230c      	movs	r3, #12
 8004bfa:	2600      	movs	r6, #0
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	4630      	mov	r0, r6
 8004c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c04:	4e2e      	ldr	r6, [pc, #184]	; (8004cc0 <_malloc_r+0xe4>)
 8004c06:	f000 f895 	bl	8004d34 <__malloc_lock>
 8004c0a:	6833      	ldr	r3, [r6, #0]
 8004c0c:	461c      	mov	r4, r3
 8004c0e:	bb34      	cbnz	r4, 8004c5e <_malloc_r+0x82>
 8004c10:	4629      	mov	r1, r5
 8004c12:	4638      	mov	r0, r7
 8004c14:	f7ff ffc2 	bl	8004b9c <sbrk_aligned>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	d14d      	bne.n	8004cba <_malloc_r+0xde>
 8004c1e:	6834      	ldr	r4, [r6, #0]
 8004c20:	4626      	mov	r6, r4
 8004c22:	2e00      	cmp	r6, #0
 8004c24:	d140      	bne.n	8004ca8 <_malloc_r+0xcc>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	4631      	mov	r1, r6
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	eb04 0803 	add.w	r8, r4, r3
 8004c30:	f000 f848 	bl	8004cc4 <_sbrk_r>
 8004c34:	4580      	cmp	r8, r0
 8004c36:	d13a      	bne.n	8004cae <_malloc_r+0xd2>
 8004c38:	6821      	ldr	r1, [r4, #0]
 8004c3a:	3503      	adds	r5, #3
 8004c3c:	1a6d      	subs	r5, r5, r1
 8004c3e:	f025 0503 	bic.w	r5, r5, #3
 8004c42:	3508      	adds	r5, #8
 8004c44:	2d0c      	cmp	r5, #12
 8004c46:	bf38      	it	cc
 8004c48:	250c      	movcc	r5, #12
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	f7ff ffa5 	bl	8004b9c <sbrk_aligned>
 8004c52:	3001      	adds	r0, #1
 8004c54:	d02b      	beq.n	8004cae <_malloc_r+0xd2>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	442b      	add	r3, r5
 8004c5a:	6023      	str	r3, [r4, #0]
 8004c5c:	e00e      	b.n	8004c7c <_malloc_r+0xa0>
 8004c5e:	6822      	ldr	r2, [r4, #0]
 8004c60:	1b52      	subs	r2, r2, r5
 8004c62:	d41e      	bmi.n	8004ca2 <_malloc_r+0xc6>
 8004c64:	2a0b      	cmp	r2, #11
 8004c66:	d916      	bls.n	8004c96 <_malloc_r+0xba>
 8004c68:	1961      	adds	r1, r4, r5
 8004c6a:	42a3      	cmp	r3, r4
 8004c6c:	6025      	str	r5, [r4, #0]
 8004c6e:	bf18      	it	ne
 8004c70:	6059      	strne	r1, [r3, #4]
 8004c72:	6863      	ldr	r3, [r4, #4]
 8004c74:	bf08      	it	eq
 8004c76:	6031      	streq	r1, [r6, #0]
 8004c78:	5162      	str	r2, [r4, r5]
 8004c7a:	604b      	str	r3, [r1, #4]
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f104 060b 	add.w	r6, r4, #11
 8004c82:	f000 f85d 	bl	8004d40 <__malloc_unlock>
 8004c86:	f026 0607 	bic.w	r6, r6, #7
 8004c8a:	1d23      	adds	r3, r4, #4
 8004c8c:	1af2      	subs	r2, r6, r3
 8004c8e:	d0b6      	beq.n	8004bfe <_malloc_r+0x22>
 8004c90:	1b9b      	subs	r3, r3, r6
 8004c92:	50a3      	str	r3, [r4, r2]
 8004c94:	e7b3      	b.n	8004bfe <_malloc_r+0x22>
 8004c96:	6862      	ldr	r2, [r4, #4]
 8004c98:	42a3      	cmp	r3, r4
 8004c9a:	bf0c      	ite	eq
 8004c9c:	6032      	streq	r2, [r6, #0]
 8004c9e:	605a      	strne	r2, [r3, #4]
 8004ca0:	e7ec      	b.n	8004c7c <_malloc_r+0xa0>
 8004ca2:	4623      	mov	r3, r4
 8004ca4:	6864      	ldr	r4, [r4, #4]
 8004ca6:	e7b2      	b.n	8004c0e <_malloc_r+0x32>
 8004ca8:	4634      	mov	r4, r6
 8004caa:	6876      	ldr	r6, [r6, #4]
 8004cac:	e7b9      	b.n	8004c22 <_malloc_r+0x46>
 8004cae:	230c      	movs	r3, #12
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	f000 f844 	bl	8004d40 <__malloc_unlock>
 8004cb8:	e7a1      	b.n	8004bfe <_malloc_r+0x22>
 8004cba:	6025      	str	r5, [r4, #0]
 8004cbc:	e7de      	b.n	8004c7c <_malloc_r+0xa0>
 8004cbe:	bf00      	nop
 8004cc0:	20000324 	.word	0x20000324

08004cc4 <_sbrk_r>:
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	4d05      	ldr	r5, [pc, #20]	; (8004ce0 <_sbrk_r+0x1c>)
 8004cca:	4604      	mov	r4, r0
 8004ccc:	4608      	mov	r0, r1
 8004cce:	602b      	str	r3, [r5, #0]
 8004cd0:	f7fd f9f6 	bl	80020c0 <_sbrk>
 8004cd4:	1c43      	adds	r3, r0, #1
 8004cd6:	d102      	bne.n	8004cde <_sbrk_r+0x1a>
 8004cd8:	682b      	ldr	r3, [r5, #0]
 8004cda:	b103      	cbz	r3, 8004cde <_sbrk_r+0x1a>
 8004cdc:	6023      	str	r3, [r4, #0]
 8004cde:	bd38      	pop	{r3, r4, r5, pc}
 8004ce0:	2000032c 	.word	0x2000032c

08004ce4 <strcpy>:
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cea:	f803 2b01 	strb.w	r2, [r3], #1
 8004cee:	2a00      	cmp	r2, #0
 8004cf0:	d1f9      	bne.n	8004ce6 <strcpy+0x2>
 8004cf2:	4770      	bx	lr

08004cf4 <_vsiprintf_r>:
 8004cf4:	b500      	push	{lr}
 8004cf6:	b09b      	sub	sp, #108	; 0x6c
 8004cf8:	9100      	str	r1, [sp, #0]
 8004cfa:	9104      	str	r1, [sp, #16]
 8004cfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d00:	9105      	str	r1, [sp, #20]
 8004d02:	9102      	str	r1, [sp, #8]
 8004d04:	4905      	ldr	r1, [pc, #20]	; (8004d1c <_vsiprintf_r+0x28>)
 8004d06:	9103      	str	r1, [sp, #12]
 8004d08:	4669      	mov	r1, sp
 8004d0a:	f000 f87b 	bl	8004e04 <_svfiprintf_r>
 8004d0e:	2200      	movs	r2, #0
 8004d10:	9b00      	ldr	r3, [sp, #0]
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	b01b      	add	sp, #108	; 0x6c
 8004d16:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d1a:	bf00      	nop
 8004d1c:	ffff0208 	.word	0xffff0208

08004d20 <vsiprintf>:
 8004d20:	4613      	mov	r3, r2
 8004d22:	460a      	mov	r2, r1
 8004d24:	4601      	mov	r1, r0
 8004d26:	4802      	ldr	r0, [pc, #8]	; (8004d30 <vsiprintf+0x10>)
 8004d28:	6800      	ldr	r0, [r0, #0]
 8004d2a:	f7ff bfe3 	b.w	8004cf4 <_vsiprintf_r>
 8004d2e:	bf00      	nop
 8004d30:	20000040 	.word	0x20000040

08004d34 <__malloc_lock>:
 8004d34:	4801      	ldr	r0, [pc, #4]	; (8004d3c <__malloc_lock+0x8>)
 8004d36:	f000 bafb 	b.w	8005330 <__retarget_lock_acquire_recursive>
 8004d3a:	bf00      	nop
 8004d3c:	20000330 	.word	0x20000330

08004d40 <__malloc_unlock>:
 8004d40:	4801      	ldr	r0, [pc, #4]	; (8004d48 <__malloc_unlock+0x8>)
 8004d42:	f000 baf6 	b.w	8005332 <__retarget_lock_release_recursive>
 8004d46:	bf00      	nop
 8004d48:	20000330 	.word	0x20000330

08004d4c <__ssputs_r>:
 8004d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d50:	688e      	ldr	r6, [r1, #8]
 8004d52:	4682      	mov	sl, r0
 8004d54:	429e      	cmp	r6, r3
 8004d56:	460c      	mov	r4, r1
 8004d58:	4690      	mov	r8, r2
 8004d5a:	461f      	mov	r7, r3
 8004d5c:	d838      	bhi.n	8004dd0 <__ssputs_r+0x84>
 8004d5e:	898a      	ldrh	r2, [r1, #12]
 8004d60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d64:	d032      	beq.n	8004dcc <__ssputs_r+0x80>
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	6909      	ldr	r1, [r1, #16]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	eba5 0901 	sub.w	r9, r5, r1
 8004d70:	6965      	ldr	r5, [r4, #20]
 8004d72:	444b      	add	r3, r9
 8004d74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d7c:	106d      	asrs	r5, r5, #1
 8004d7e:	429d      	cmp	r5, r3
 8004d80:	bf38      	it	cc
 8004d82:	461d      	movcc	r5, r3
 8004d84:	0553      	lsls	r3, r2, #21
 8004d86:	d531      	bpl.n	8004dec <__ssputs_r+0xa0>
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f7ff ff27 	bl	8004bdc <_malloc_r>
 8004d8e:	4606      	mov	r6, r0
 8004d90:	b950      	cbnz	r0, 8004da8 <__ssputs_r+0x5c>
 8004d92:	230c      	movs	r3, #12
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	f8ca 3000 	str.w	r3, [sl]
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004da2:	81a3      	strh	r3, [r4, #12]
 8004da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da8:	464a      	mov	r2, r9
 8004daa:	6921      	ldr	r1, [r4, #16]
 8004dac:	f7ff fe98 	bl	8004ae0 <memcpy>
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dba:	81a3      	strh	r3, [r4, #12]
 8004dbc:	6126      	str	r6, [r4, #16]
 8004dbe:	444e      	add	r6, r9
 8004dc0:	6026      	str	r6, [r4, #0]
 8004dc2:	463e      	mov	r6, r7
 8004dc4:	6165      	str	r5, [r4, #20]
 8004dc6:	eba5 0509 	sub.w	r5, r5, r9
 8004dca:	60a5      	str	r5, [r4, #8]
 8004dcc:	42be      	cmp	r6, r7
 8004dce:	d900      	bls.n	8004dd2 <__ssputs_r+0x86>
 8004dd0:	463e      	mov	r6, r7
 8004dd2:	4632      	mov	r2, r6
 8004dd4:	4641      	mov	r1, r8
 8004dd6:	6820      	ldr	r0, [r4, #0]
 8004dd8:	f000 faba 	bl	8005350 <memmove>
 8004ddc:	68a3      	ldr	r3, [r4, #8]
 8004dde:	2000      	movs	r0, #0
 8004de0:	1b9b      	subs	r3, r3, r6
 8004de2:	60a3      	str	r3, [r4, #8]
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	4433      	add	r3, r6
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	e7db      	b.n	8004da4 <__ssputs_r+0x58>
 8004dec:	462a      	mov	r2, r5
 8004dee:	f000 fac9 	bl	8005384 <_realloc_r>
 8004df2:	4606      	mov	r6, r0
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d1e1      	bne.n	8004dbc <__ssputs_r+0x70>
 8004df8:	4650      	mov	r0, sl
 8004dfa:	6921      	ldr	r1, [r4, #16]
 8004dfc:	f7ff fe86 	bl	8004b0c <_free_r>
 8004e00:	e7c7      	b.n	8004d92 <__ssputs_r+0x46>
	...

08004e04 <_svfiprintf_r>:
 8004e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e08:	4698      	mov	r8, r3
 8004e0a:	898b      	ldrh	r3, [r1, #12]
 8004e0c:	4607      	mov	r7, r0
 8004e0e:	061b      	lsls	r3, r3, #24
 8004e10:	460d      	mov	r5, r1
 8004e12:	4614      	mov	r4, r2
 8004e14:	b09d      	sub	sp, #116	; 0x74
 8004e16:	d50e      	bpl.n	8004e36 <_svfiprintf_r+0x32>
 8004e18:	690b      	ldr	r3, [r1, #16]
 8004e1a:	b963      	cbnz	r3, 8004e36 <_svfiprintf_r+0x32>
 8004e1c:	2140      	movs	r1, #64	; 0x40
 8004e1e:	f7ff fedd 	bl	8004bdc <_malloc_r>
 8004e22:	6028      	str	r0, [r5, #0]
 8004e24:	6128      	str	r0, [r5, #16]
 8004e26:	b920      	cbnz	r0, 8004e32 <_svfiprintf_r+0x2e>
 8004e28:	230c      	movs	r3, #12
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	e0d1      	b.n	8004fd6 <_svfiprintf_r+0x1d2>
 8004e32:	2340      	movs	r3, #64	; 0x40
 8004e34:	616b      	str	r3, [r5, #20]
 8004e36:	2300      	movs	r3, #0
 8004e38:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3a:	2320      	movs	r3, #32
 8004e3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e40:	2330      	movs	r3, #48	; 0x30
 8004e42:	f04f 0901 	mov.w	r9, #1
 8004e46:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ff0 <_svfiprintf_r+0x1ec>
 8004e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e52:	4623      	mov	r3, r4
 8004e54:	469a      	mov	sl, r3
 8004e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e5a:	b10a      	cbz	r2, 8004e60 <_svfiprintf_r+0x5c>
 8004e5c:	2a25      	cmp	r2, #37	; 0x25
 8004e5e:	d1f9      	bne.n	8004e54 <_svfiprintf_r+0x50>
 8004e60:	ebba 0b04 	subs.w	fp, sl, r4
 8004e64:	d00b      	beq.n	8004e7e <_svfiprintf_r+0x7a>
 8004e66:	465b      	mov	r3, fp
 8004e68:	4622      	mov	r2, r4
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	f7ff ff6d 	bl	8004d4c <__ssputs_r>
 8004e72:	3001      	adds	r0, #1
 8004e74:	f000 80aa 	beq.w	8004fcc <_svfiprintf_r+0x1c8>
 8004e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e7a:	445a      	add	r2, fp
 8004e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 80a2 	beq.w	8004fcc <_svfiprintf_r+0x1c8>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e92:	f10a 0a01 	add.w	sl, sl, #1
 8004e96:	9304      	str	r3, [sp, #16]
 8004e98:	9307      	str	r3, [sp, #28]
 8004e9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004ea0:	4654      	mov	r4, sl
 8004ea2:	2205      	movs	r2, #5
 8004ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea8:	4851      	ldr	r0, [pc, #324]	; (8004ff0 <_svfiprintf_r+0x1ec>)
 8004eaa:	f000 fa43 	bl	8005334 <memchr>
 8004eae:	9a04      	ldr	r2, [sp, #16]
 8004eb0:	b9d8      	cbnz	r0, 8004eea <_svfiprintf_r+0xe6>
 8004eb2:	06d0      	lsls	r0, r2, #27
 8004eb4:	bf44      	itt	mi
 8004eb6:	2320      	movmi	r3, #32
 8004eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ebc:	0711      	lsls	r1, r2, #28
 8004ebe:	bf44      	itt	mi
 8004ec0:	232b      	movmi	r3, #43	; 0x2b
 8004ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eca:	2b2a      	cmp	r3, #42	; 0x2a
 8004ecc:	d015      	beq.n	8004efa <_svfiprintf_r+0xf6>
 8004ece:	4654      	mov	r4, sl
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	f04f 0c0a 	mov.w	ip, #10
 8004ed6:	9a07      	ldr	r2, [sp, #28]
 8004ed8:	4621      	mov	r1, r4
 8004eda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ede:	3b30      	subs	r3, #48	; 0x30
 8004ee0:	2b09      	cmp	r3, #9
 8004ee2:	d94e      	bls.n	8004f82 <_svfiprintf_r+0x17e>
 8004ee4:	b1b0      	cbz	r0, 8004f14 <_svfiprintf_r+0x110>
 8004ee6:	9207      	str	r2, [sp, #28]
 8004ee8:	e014      	b.n	8004f14 <_svfiprintf_r+0x110>
 8004eea:	eba0 0308 	sub.w	r3, r0, r8
 8004eee:	fa09 f303 	lsl.w	r3, r9, r3
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	46a2      	mov	sl, r4
 8004ef6:	9304      	str	r3, [sp, #16]
 8004ef8:	e7d2      	b.n	8004ea0 <_svfiprintf_r+0x9c>
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	1d19      	adds	r1, r3, #4
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	9103      	str	r1, [sp, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bfbb      	ittet	lt
 8004f06:	425b      	neglt	r3, r3
 8004f08:	f042 0202 	orrlt.w	r2, r2, #2
 8004f0c:	9307      	strge	r3, [sp, #28]
 8004f0e:	9307      	strlt	r3, [sp, #28]
 8004f10:	bfb8      	it	lt
 8004f12:	9204      	strlt	r2, [sp, #16]
 8004f14:	7823      	ldrb	r3, [r4, #0]
 8004f16:	2b2e      	cmp	r3, #46	; 0x2e
 8004f18:	d10c      	bne.n	8004f34 <_svfiprintf_r+0x130>
 8004f1a:	7863      	ldrb	r3, [r4, #1]
 8004f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f1e:	d135      	bne.n	8004f8c <_svfiprintf_r+0x188>
 8004f20:	9b03      	ldr	r3, [sp, #12]
 8004f22:	3402      	adds	r4, #2
 8004f24:	1d1a      	adds	r2, r3, #4
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	9203      	str	r2, [sp, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bfb8      	it	lt
 8004f2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f32:	9305      	str	r3, [sp, #20]
 8004f34:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004ff4 <_svfiprintf_r+0x1f0>
 8004f38:	2203      	movs	r2, #3
 8004f3a:	4650      	mov	r0, sl
 8004f3c:	7821      	ldrb	r1, [r4, #0]
 8004f3e:	f000 f9f9 	bl	8005334 <memchr>
 8004f42:	b140      	cbz	r0, 8004f56 <_svfiprintf_r+0x152>
 8004f44:	2340      	movs	r3, #64	; 0x40
 8004f46:	eba0 000a 	sub.w	r0, r0, sl
 8004f4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f4e:	9b04      	ldr	r3, [sp, #16]
 8004f50:	3401      	adds	r4, #1
 8004f52:	4303      	orrs	r3, r0
 8004f54:	9304      	str	r3, [sp, #16]
 8004f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f5a:	2206      	movs	r2, #6
 8004f5c:	4826      	ldr	r0, [pc, #152]	; (8004ff8 <_svfiprintf_r+0x1f4>)
 8004f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f62:	f000 f9e7 	bl	8005334 <memchr>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d038      	beq.n	8004fdc <_svfiprintf_r+0x1d8>
 8004f6a:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <_svfiprintf_r+0x1f8>)
 8004f6c:	bb1b      	cbnz	r3, 8004fb6 <_svfiprintf_r+0x1b2>
 8004f6e:	9b03      	ldr	r3, [sp, #12]
 8004f70:	3307      	adds	r3, #7
 8004f72:	f023 0307 	bic.w	r3, r3, #7
 8004f76:	3308      	adds	r3, #8
 8004f78:	9303      	str	r3, [sp, #12]
 8004f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7c:	4433      	add	r3, r6
 8004f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f80:	e767      	b.n	8004e52 <_svfiprintf_r+0x4e>
 8004f82:	460c      	mov	r4, r1
 8004f84:	2001      	movs	r0, #1
 8004f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f8a:	e7a5      	b.n	8004ed8 <_svfiprintf_r+0xd4>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f04f 0c0a 	mov.w	ip, #10
 8004f92:	4619      	mov	r1, r3
 8004f94:	3401      	adds	r4, #1
 8004f96:	9305      	str	r3, [sp, #20]
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f9e:	3a30      	subs	r2, #48	; 0x30
 8004fa0:	2a09      	cmp	r2, #9
 8004fa2:	d903      	bls.n	8004fac <_svfiprintf_r+0x1a8>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0c5      	beq.n	8004f34 <_svfiprintf_r+0x130>
 8004fa8:	9105      	str	r1, [sp, #20]
 8004faa:	e7c3      	b.n	8004f34 <_svfiprintf_r+0x130>
 8004fac:	4604      	mov	r4, r0
 8004fae:	2301      	movs	r3, #1
 8004fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fb4:	e7f0      	b.n	8004f98 <_svfiprintf_r+0x194>
 8004fb6:	ab03      	add	r3, sp, #12
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	462a      	mov	r2, r5
 8004fbc:	4638      	mov	r0, r7
 8004fbe:	4b10      	ldr	r3, [pc, #64]	; (8005000 <_svfiprintf_r+0x1fc>)
 8004fc0:	a904      	add	r1, sp, #16
 8004fc2:	f3af 8000 	nop.w
 8004fc6:	1c42      	adds	r2, r0, #1
 8004fc8:	4606      	mov	r6, r0
 8004fca:	d1d6      	bne.n	8004f7a <_svfiprintf_r+0x176>
 8004fcc:	89ab      	ldrh	r3, [r5, #12]
 8004fce:	065b      	lsls	r3, r3, #25
 8004fd0:	f53f af2c 	bmi.w	8004e2c <_svfiprintf_r+0x28>
 8004fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fd6:	b01d      	add	sp, #116	; 0x74
 8004fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fdc:	ab03      	add	r3, sp, #12
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	462a      	mov	r2, r5
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	4b06      	ldr	r3, [pc, #24]	; (8005000 <_svfiprintf_r+0x1fc>)
 8004fe6:	a904      	add	r1, sp, #16
 8004fe8:	f000 f87c 	bl	80050e4 <_printf_i>
 8004fec:	e7eb      	b.n	8004fc6 <_svfiprintf_r+0x1c2>
 8004fee:	bf00      	nop
 8004ff0:	080055fa 	.word	0x080055fa
 8004ff4:	08005600 	.word	0x08005600
 8004ff8:	08005604 	.word	0x08005604
 8004ffc:	00000000 	.word	0x00000000
 8005000:	08004d4d 	.word	0x08004d4d

08005004 <_printf_common>:
 8005004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005008:	4616      	mov	r6, r2
 800500a:	4699      	mov	r9, r3
 800500c:	688a      	ldr	r2, [r1, #8]
 800500e:	690b      	ldr	r3, [r1, #16]
 8005010:	4607      	mov	r7, r0
 8005012:	4293      	cmp	r3, r2
 8005014:	bfb8      	it	lt
 8005016:	4613      	movlt	r3, r2
 8005018:	6033      	str	r3, [r6, #0]
 800501a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800501e:	460c      	mov	r4, r1
 8005020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005024:	b10a      	cbz	r2, 800502a <_printf_common+0x26>
 8005026:	3301      	adds	r3, #1
 8005028:	6033      	str	r3, [r6, #0]
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	0699      	lsls	r1, r3, #26
 800502e:	bf42      	ittt	mi
 8005030:	6833      	ldrmi	r3, [r6, #0]
 8005032:	3302      	addmi	r3, #2
 8005034:	6033      	strmi	r3, [r6, #0]
 8005036:	6825      	ldr	r5, [r4, #0]
 8005038:	f015 0506 	ands.w	r5, r5, #6
 800503c:	d106      	bne.n	800504c <_printf_common+0x48>
 800503e:	f104 0a19 	add.w	sl, r4, #25
 8005042:	68e3      	ldr	r3, [r4, #12]
 8005044:	6832      	ldr	r2, [r6, #0]
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	42ab      	cmp	r3, r5
 800504a:	dc28      	bgt.n	800509e <_printf_common+0x9a>
 800504c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005050:	1e13      	subs	r3, r2, #0
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	bf18      	it	ne
 8005056:	2301      	movne	r3, #1
 8005058:	0692      	lsls	r2, r2, #26
 800505a:	d42d      	bmi.n	80050b8 <_printf_common+0xb4>
 800505c:	4649      	mov	r1, r9
 800505e:	4638      	mov	r0, r7
 8005060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005064:	47c0      	blx	r8
 8005066:	3001      	adds	r0, #1
 8005068:	d020      	beq.n	80050ac <_printf_common+0xa8>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	68e5      	ldr	r5, [r4, #12]
 800506e:	f003 0306 	and.w	r3, r3, #6
 8005072:	2b04      	cmp	r3, #4
 8005074:	bf18      	it	ne
 8005076:	2500      	movne	r5, #0
 8005078:	6832      	ldr	r2, [r6, #0]
 800507a:	f04f 0600 	mov.w	r6, #0
 800507e:	68a3      	ldr	r3, [r4, #8]
 8005080:	bf08      	it	eq
 8005082:	1aad      	subeq	r5, r5, r2
 8005084:	6922      	ldr	r2, [r4, #16]
 8005086:	bf08      	it	eq
 8005088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800508c:	4293      	cmp	r3, r2
 800508e:	bfc4      	itt	gt
 8005090:	1a9b      	subgt	r3, r3, r2
 8005092:	18ed      	addgt	r5, r5, r3
 8005094:	341a      	adds	r4, #26
 8005096:	42b5      	cmp	r5, r6
 8005098:	d11a      	bne.n	80050d0 <_printf_common+0xcc>
 800509a:	2000      	movs	r0, #0
 800509c:	e008      	b.n	80050b0 <_printf_common+0xac>
 800509e:	2301      	movs	r3, #1
 80050a0:	4652      	mov	r2, sl
 80050a2:	4649      	mov	r1, r9
 80050a4:	4638      	mov	r0, r7
 80050a6:	47c0      	blx	r8
 80050a8:	3001      	adds	r0, #1
 80050aa:	d103      	bne.n	80050b4 <_printf_common+0xb0>
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b4:	3501      	adds	r5, #1
 80050b6:	e7c4      	b.n	8005042 <_printf_common+0x3e>
 80050b8:	2030      	movs	r0, #48	; 0x30
 80050ba:	18e1      	adds	r1, r4, r3
 80050bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050c6:	4422      	add	r2, r4
 80050c8:	3302      	adds	r3, #2
 80050ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050ce:	e7c5      	b.n	800505c <_printf_common+0x58>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4622      	mov	r2, r4
 80050d4:	4649      	mov	r1, r9
 80050d6:	4638      	mov	r0, r7
 80050d8:	47c0      	blx	r8
 80050da:	3001      	adds	r0, #1
 80050dc:	d0e6      	beq.n	80050ac <_printf_common+0xa8>
 80050de:	3601      	adds	r6, #1
 80050e0:	e7d9      	b.n	8005096 <_printf_common+0x92>
	...

080050e4 <_printf_i>:
 80050e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	7e0f      	ldrb	r7, [r1, #24]
 80050ea:	4691      	mov	r9, r2
 80050ec:	2f78      	cmp	r7, #120	; 0x78
 80050ee:	4680      	mov	r8, r0
 80050f0:	460c      	mov	r4, r1
 80050f2:	469a      	mov	sl, r3
 80050f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050fa:	d807      	bhi.n	800510c <_printf_i+0x28>
 80050fc:	2f62      	cmp	r7, #98	; 0x62
 80050fe:	d80a      	bhi.n	8005116 <_printf_i+0x32>
 8005100:	2f00      	cmp	r7, #0
 8005102:	f000 80d9 	beq.w	80052b8 <_printf_i+0x1d4>
 8005106:	2f58      	cmp	r7, #88	; 0x58
 8005108:	f000 80a4 	beq.w	8005254 <_printf_i+0x170>
 800510c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005114:	e03a      	b.n	800518c <_printf_i+0xa8>
 8005116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800511a:	2b15      	cmp	r3, #21
 800511c:	d8f6      	bhi.n	800510c <_printf_i+0x28>
 800511e:	a101      	add	r1, pc, #4	; (adr r1, 8005124 <_printf_i+0x40>)
 8005120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005124:	0800517d 	.word	0x0800517d
 8005128:	08005191 	.word	0x08005191
 800512c:	0800510d 	.word	0x0800510d
 8005130:	0800510d 	.word	0x0800510d
 8005134:	0800510d 	.word	0x0800510d
 8005138:	0800510d 	.word	0x0800510d
 800513c:	08005191 	.word	0x08005191
 8005140:	0800510d 	.word	0x0800510d
 8005144:	0800510d 	.word	0x0800510d
 8005148:	0800510d 	.word	0x0800510d
 800514c:	0800510d 	.word	0x0800510d
 8005150:	0800529f 	.word	0x0800529f
 8005154:	080051c1 	.word	0x080051c1
 8005158:	08005281 	.word	0x08005281
 800515c:	0800510d 	.word	0x0800510d
 8005160:	0800510d 	.word	0x0800510d
 8005164:	080052c1 	.word	0x080052c1
 8005168:	0800510d 	.word	0x0800510d
 800516c:	080051c1 	.word	0x080051c1
 8005170:	0800510d 	.word	0x0800510d
 8005174:	0800510d 	.word	0x0800510d
 8005178:	08005289 	.word	0x08005289
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	1d1a      	adds	r2, r3, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	602a      	str	r2, [r5, #0]
 8005184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800518c:	2301      	movs	r3, #1
 800518e:	e0a4      	b.n	80052da <_printf_i+0x1f6>
 8005190:	6820      	ldr	r0, [r4, #0]
 8005192:	6829      	ldr	r1, [r5, #0]
 8005194:	0606      	lsls	r6, r0, #24
 8005196:	f101 0304 	add.w	r3, r1, #4
 800519a:	d50a      	bpl.n	80051b2 <_printf_i+0xce>
 800519c:	680e      	ldr	r6, [r1, #0]
 800519e:	602b      	str	r3, [r5, #0]
 80051a0:	2e00      	cmp	r6, #0
 80051a2:	da03      	bge.n	80051ac <_printf_i+0xc8>
 80051a4:	232d      	movs	r3, #45	; 0x2d
 80051a6:	4276      	negs	r6, r6
 80051a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ac:	230a      	movs	r3, #10
 80051ae:	485e      	ldr	r0, [pc, #376]	; (8005328 <_printf_i+0x244>)
 80051b0:	e019      	b.n	80051e6 <_printf_i+0x102>
 80051b2:	680e      	ldr	r6, [r1, #0]
 80051b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051b8:	602b      	str	r3, [r5, #0]
 80051ba:	bf18      	it	ne
 80051bc:	b236      	sxthne	r6, r6
 80051be:	e7ef      	b.n	80051a0 <_printf_i+0xbc>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	6820      	ldr	r0, [r4, #0]
 80051c4:	1d19      	adds	r1, r3, #4
 80051c6:	6029      	str	r1, [r5, #0]
 80051c8:	0601      	lsls	r1, r0, #24
 80051ca:	d501      	bpl.n	80051d0 <_printf_i+0xec>
 80051cc:	681e      	ldr	r6, [r3, #0]
 80051ce:	e002      	b.n	80051d6 <_printf_i+0xf2>
 80051d0:	0646      	lsls	r6, r0, #25
 80051d2:	d5fb      	bpl.n	80051cc <_printf_i+0xe8>
 80051d4:	881e      	ldrh	r6, [r3, #0]
 80051d6:	2f6f      	cmp	r7, #111	; 0x6f
 80051d8:	bf0c      	ite	eq
 80051da:	2308      	moveq	r3, #8
 80051dc:	230a      	movne	r3, #10
 80051de:	4852      	ldr	r0, [pc, #328]	; (8005328 <_printf_i+0x244>)
 80051e0:	2100      	movs	r1, #0
 80051e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051e6:	6865      	ldr	r5, [r4, #4]
 80051e8:	2d00      	cmp	r5, #0
 80051ea:	bfa8      	it	ge
 80051ec:	6821      	ldrge	r1, [r4, #0]
 80051ee:	60a5      	str	r5, [r4, #8]
 80051f0:	bfa4      	itt	ge
 80051f2:	f021 0104 	bicge.w	r1, r1, #4
 80051f6:	6021      	strge	r1, [r4, #0]
 80051f8:	b90e      	cbnz	r6, 80051fe <_printf_i+0x11a>
 80051fa:	2d00      	cmp	r5, #0
 80051fc:	d04d      	beq.n	800529a <_printf_i+0x1b6>
 80051fe:	4615      	mov	r5, r2
 8005200:	fbb6 f1f3 	udiv	r1, r6, r3
 8005204:	fb03 6711 	mls	r7, r3, r1, r6
 8005208:	5dc7      	ldrb	r7, [r0, r7]
 800520a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800520e:	4637      	mov	r7, r6
 8005210:	42bb      	cmp	r3, r7
 8005212:	460e      	mov	r6, r1
 8005214:	d9f4      	bls.n	8005200 <_printf_i+0x11c>
 8005216:	2b08      	cmp	r3, #8
 8005218:	d10b      	bne.n	8005232 <_printf_i+0x14e>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	07de      	lsls	r6, r3, #31
 800521e:	d508      	bpl.n	8005232 <_printf_i+0x14e>
 8005220:	6923      	ldr	r3, [r4, #16]
 8005222:	6861      	ldr	r1, [r4, #4]
 8005224:	4299      	cmp	r1, r3
 8005226:	bfde      	ittt	le
 8005228:	2330      	movle	r3, #48	; 0x30
 800522a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800522e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005232:	1b52      	subs	r2, r2, r5
 8005234:	6122      	str	r2, [r4, #16]
 8005236:	464b      	mov	r3, r9
 8005238:	4621      	mov	r1, r4
 800523a:	4640      	mov	r0, r8
 800523c:	f8cd a000 	str.w	sl, [sp]
 8005240:	aa03      	add	r2, sp, #12
 8005242:	f7ff fedf 	bl	8005004 <_printf_common>
 8005246:	3001      	adds	r0, #1
 8005248:	d14c      	bne.n	80052e4 <_printf_i+0x200>
 800524a:	f04f 30ff 	mov.w	r0, #4294967295
 800524e:	b004      	add	sp, #16
 8005250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005254:	4834      	ldr	r0, [pc, #208]	; (8005328 <_printf_i+0x244>)
 8005256:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800525a:	6829      	ldr	r1, [r5, #0]
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005262:	6029      	str	r1, [r5, #0]
 8005264:	061d      	lsls	r5, r3, #24
 8005266:	d514      	bpl.n	8005292 <_printf_i+0x1ae>
 8005268:	07df      	lsls	r7, r3, #31
 800526a:	bf44      	itt	mi
 800526c:	f043 0320 	orrmi.w	r3, r3, #32
 8005270:	6023      	strmi	r3, [r4, #0]
 8005272:	b91e      	cbnz	r6, 800527c <_printf_i+0x198>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	f023 0320 	bic.w	r3, r3, #32
 800527a:	6023      	str	r3, [r4, #0]
 800527c:	2310      	movs	r3, #16
 800527e:	e7af      	b.n	80051e0 <_printf_i+0xfc>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	f043 0320 	orr.w	r3, r3, #32
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	2378      	movs	r3, #120	; 0x78
 800528a:	4828      	ldr	r0, [pc, #160]	; (800532c <_printf_i+0x248>)
 800528c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005290:	e7e3      	b.n	800525a <_printf_i+0x176>
 8005292:	0659      	lsls	r1, r3, #25
 8005294:	bf48      	it	mi
 8005296:	b2b6      	uxthmi	r6, r6
 8005298:	e7e6      	b.n	8005268 <_printf_i+0x184>
 800529a:	4615      	mov	r5, r2
 800529c:	e7bb      	b.n	8005216 <_printf_i+0x132>
 800529e:	682b      	ldr	r3, [r5, #0]
 80052a0:	6826      	ldr	r6, [r4, #0]
 80052a2:	1d18      	adds	r0, r3, #4
 80052a4:	6961      	ldr	r1, [r4, #20]
 80052a6:	6028      	str	r0, [r5, #0]
 80052a8:	0635      	lsls	r5, r6, #24
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	d501      	bpl.n	80052b2 <_printf_i+0x1ce>
 80052ae:	6019      	str	r1, [r3, #0]
 80052b0:	e002      	b.n	80052b8 <_printf_i+0x1d4>
 80052b2:	0670      	lsls	r0, r6, #25
 80052b4:	d5fb      	bpl.n	80052ae <_printf_i+0x1ca>
 80052b6:	8019      	strh	r1, [r3, #0]
 80052b8:	2300      	movs	r3, #0
 80052ba:	4615      	mov	r5, r2
 80052bc:	6123      	str	r3, [r4, #16]
 80052be:	e7ba      	b.n	8005236 <_printf_i+0x152>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	2100      	movs	r1, #0
 80052c4:	1d1a      	adds	r2, r3, #4
 80052c6:	602a      	str	r2, [r5, #0]
 80052c8:	681d      	ldr	r5, [r3, #0]
 80052ca:	6862      	ldr	r2, [r4, #4]
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 f831 	bl	8005334 <memchr>
 80052d2:	b108      	cbz	r0, 80052d8 <_printf_i+0x1f4>
 80052d4:	1b40      	subs	r0, r0, r5
 80052d6:	6060      	str	r0, [r4, #4]
 80052d8:	6863      	ldr	r3, [r4, #4]
 80052da:	6123      	str	r3, [r4, #16]
 80052dc:	2300      	movs	r3, #0
 80052de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e2:	e7a8      	b.n	8005236 <_printf_i+0x152>
 80052e4:	462a      	mov	r2, r5
 80052e6:	4649      	mov	r1, r9
 80052e8:	4640      	mov	r0, r8
 80052ea:	6923      	ldr	r3, [r4, #16]
 80052ec:	47d0      	blx	sl
 80052ee:	3001      	adds	r0, #1
 80052f0:	d0ab      	beq.n	800524a <_printf_i+0x166>
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	079b      	lsls	r3, r3, #30
 80052f6:	d413      	bmi.n	8005320 <_printf_i+0x23c>
 80052f8:	68e0      	ldr	r0, [r4, #12]
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	4298      	cmp	r0, r3
 80052fe:	bfb8      	it	lt
 8005300:	4618      	movlt	r0, r3
 8005302:	e7a4      	b.n	800524e <_printf_i+0x16a>
 8005304:	2301      	movs	r3, #1
 8005306:	4632      	mov	r2, r6
 8005308:	4649      	mov	r1, r9
 800530a:	4640      	mov	r0, r8
 800530c:	47d0      	blx	sl
 800530e:	3001      	adds	r0, #1
 8005310:	d09b      	beq.n	800524a <_printf_i+0x166>
 8005312:	3501      	adds	r5, #1
 8005314:	68e3      	ldr	r3, [r4, #12]
 8005316:	9903      	ldr	r1, [sp, #12]
 8005318:	1a5b      	subs	r3, r3, r1
 800531a:	42ab      	cmp	r3, r5
 800531c:	dcf2      	bgt.n	8005304 <_printf_i+0x220>
 800531e:	e7eb      	b.n	80052f8 <_printf_i+0x214>
 8005320:	2500      	movs	r5, #0
 8005322:	f104 0619 	add.w	r6, r4, #25
 8005326:	e7f5      	b.n	8005314 <_printf_i+0x230>
 8005328:	0800560b 	.word	0x0800560b
 800532c:	0800561c 	.word	0x0800561c

08005330 <__retarget_lock_acquire_recursive>:
 8005330:	4770      	bx	lr

08005332 <__retarget_lock_release_recursive>:
 8005332:	4770      	bx	lr

08005334 <memchr>:
 8005334:	4603      	mov	r3, r0
 8005336:	b510      	push	{r4, lr}
 8005338:	b2c9      	uxtb	r1, r1
 800533a:	4402      	add	r2, r0
 800533c:	4293      	cmp	r3, r2
 800533e:	4618      	mov	r0, r3
 8005340:	d101      	bne.n	8005346 <memchr+0x12>
 8005342:	2000      	movs	r0, #0
 8005344:	e003      	b.n	800534e <memchr+0x1a>
 8005346:	7804      	ldrb	r4, [r0, #0]
 8005348:	3301      	adds	r3, #1
 800534a:	428c      	cmp	r4, r1
 800534c:	d1f6      	bne.n	800533c <memchr+0x8>
 800534e:	bd10      	pop	{r4, pc}

08005350 <memmove>:
 8005350:	4288      	cmp	r0, r1
 8005352:	b510      	push	{r4, lr}
 8005354:	eb01 0402 	add.w	r4, r1, r2
 8005358:	d902      	bls.n	8005360 <memmove+0x10>
 800535a:	4284      	cmp	r4, r0
 800535c:	4623      	mov	r3, r4
 800535e:	d807      	bhi.n	8005370 <memmove+0x20>
 8005360:	1e43      	subs	r3, r0, #1
 8005362:	42a1      	cmp	r1, r4
 8005364:	d008      	beq.n	8005378 <memmove+0x28>
 8005366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800536a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800536e:	e7f8      	b.n	8005362 <memmove+0x12>
 8005370:	4601      	mov	r1, r0
 8005372:	4402      	add	r2, r0
 8005374:	428a      	cmp	r2, r1
 8005376:	d100      	bne.n	800537a <memmove+0x2a>
 8005378:	bd10      	pop	{r4, pc}
 800537a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800537e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005382:	e7f7      	b.n	8005374 <memmove+0x24>

08005384 <_realloc_r>:
 8005384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005388:	4680      	mov	r8, r0
 800538a:	4614      	mov	r4, r2
 800538c:	460e      	mov	r6, r1
 800538e:	b921      	cbnz	r1, 800539a <_realloc_r+0x16>
 8005390:	4611      	mov	r1, r2
 8005392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005396:	f7ff bc21 	b.w	8004bdc <_malloc_r>
 800539a:	b92a      	cbnz	r2, 80053a8 <_realloc_r+0x24>
 800539c:	f7ff fbb6 	bl	8004b0c <_free_r>
 80053a0:	4625      	mov	r5, r4
 80053a2:	4628      	mov	r0, r5
 80053a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a8:	f000 f81b 	bl	80053e2 <_malloc_usable_size_r>
 80053ac:	4284      	cmp	r4, r0
 80053ae:	4607      	mov	r7, r0
 80053b0:	d802      	bhi.n	80053b8 <_realloc_r+0x34>
 80053b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053b6:	d812      	bhi.n	80053de <_realloc_r+0x5a>
 80053b8:	4621      	mov	r1, r4
 80053ba:	4640      	mov	r0, r8
 80053bc:	f7ff fc0e 	bl	8004bdc <_malloc_r>
 80053c0:	4605      	mov	r5, r0
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d0ed      	beq.n	80053a2 <_realloc_r+0x1e>
 80053c6:	42bc      	cmp	r4, r7
 80053c8:	4622      	mov	r2, r4
 80053ca:	4631      	mov	r1, r6
 80053cc:	bf28      	it	cs
 80053ce:	463a      	movcs	r2, r7
 80053d0:	f7ff fb86 	bl	8004ae0 <memcpy>
 80053d4:	4631      	mov	r1, r6
 80053d6:	4640      	mov	r0, r8
 80053d8:	f7ff fb98 	bl	8004b0c <_free_r>
 80053dc:	e7e1      	b.n	80053a2 <_realloc_r+0x1e>
 80053de:	4635      	mov	r5, r6
 80053e0:	e7df      	b.n	80053a2 <_realloc_r+0x1e>

080053e2 <_malloc_usable_size_r>:
 80053e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053e6:	1f18      	subs	r0, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	bfbc      	itt	lt
 80053ec:	580b      	ldrlt	r3, [r1, r0]
 80053ee:	18c0      	addlt	r0, r0, r3
 80053f0:	4770      	bx	lr
	...

080053f4 <_init>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	bf00      	nop
 80053f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fa:	bc08      	pop	{r3}
 80053fc:	469e      	mov	lr, r3
 80053fe:	4770      	bx	lr

08005400 <_fini>:
 8005400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005402:	bf00      	nop
 8005404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005406:	bc08      	pop	{r3}
 8005408:	469e      	mov	lr, r3
 800540a:	4770      	bx	lr
